// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: object.proto

#include "object.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_object_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CardData_object_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CardEffectItem_object_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CardPackInfo_object_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EquipData_object_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EquipRandInfo_object_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_RefreshObjs_SC_object_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PrizeBase_object_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VIPCardInfo_object_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_t_Object_object_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_t_TidyPackInfo_object_2eproto;
namespace Obj {
class EquipDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EquipData> _instance;
} _EquipData_default_instance_;
class EquipRandInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EquipRandInfo> _instance;
} _EquipRandInfo_default_instance_;
class CardEffectItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CardEffectItem> _instance;
} _CardEffectItem_default_instance_;
class CardDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CardData> _instance;
} _CardData_default_instance_;
class t_ObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<t_Object> _instance;
} _t_Object_default_instance_;
class PrizeBaseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrizeBase> _instance;
} _PrizeBase_default_instance_;
class VIPCardInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VIPCardInfo> _instance;
} _VIPCardInfo_default_instance_;
class MSG_RefreshObjs_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RefreshObjs_SC> _instance;
} _MSG_RefreshObjs_SC_default_instance_;
class MSG_PackData_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_PackData_SC> _instance;
} _MSG_PackData_SC_default_instance_;
class MSG_WearEquip_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_WearEquip_CS> _instance;
} _MSG_WearEquip_CS_default_instance_;
class MSG_WearEquip_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_WearEquip_SC> _instance;
} _MSG_WearEquip_SC_default_instance_;
class MSG_RemoveObject_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RemoveObject_SC> _instance;
} _MSG_RemoveObject_SC_default_instance_;
class MSG_UnwearEquip_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_UnwearEquip_CS> _instance;
} _MSG_UnwearEquip_CS_default_instance_;
class MSG_UnwearEquip_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_UnwearEquip_SC> _instance;
} _MSG_UnwearEquip_SC_default_instance_;
class MSG_ReqCheckItemDueTime_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqCheckItemDueTime_CS> _instance;
} _MSG_ReqCheckItemDueTime_CS_default_instance_;
class MSG_ReqUseObject_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqUseObject_CS> _instance;
} _MSG_ReqUseObject_CS_default_instance_;
class MSG_ReqUseObject_Special_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqUseObject_Special_CS> _instance;
} _MSG_ReqUseObject_Special_CS_default_instance_;
class MSG_PackUnlock_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_PackUnlock_CS> _instance;
} _MSG_PackUnlock_CS_default_instance_;
class MSG_PackUnlock_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_PackUnlock_SC> _instance;
} _MSG_PackUnlock_SC_default_instance_;
class MSG_MergeObjs_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_MergeObjs_CS> _instance;
} _MSG_MergeObjs_CS_default_instance_;
class MSG_MergeObjs_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_MergeObjs_SC> _instance;
} _MSG_MergeObjs_SC_default_instance_;
class t_TidyPackInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<t_TidyPackInfo> _instance;
} _t_TidyPackInfo_default_instance_;
class MSG_TidyPack_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_TidyPack_CS> _instance;
} _MSG_TidyPack_CS_default_instance_;
class MSG_TidyPack_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_TidyPack_SC> _instance;
} _MSG_TidyPack_SC_default_instance_;
class MSG_ReqSellObject_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqSellObject_CS> _instance;
} _MSG_ReqSellObject_CS_default_instance_;
class MSG_ReqMoveObject_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqMoveObject_CS> _instance;
} _MSG_ReqMoveObject_CS_default_instance_;
class MSG_ReqSwapObject_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqSwapObject_CS> _instance;
} _MSG_ReqSwapObject_CS_default_instance_;
class MSG_ReqDestroyObject_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqDestroyObject_CS> _instance;
} _MSG_ReqDestroyObject_CS_default_instance_;
class MSG_ReqPutOnCard_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqPutOnCard_CS> _instance;
} _MSG_ReqPutOnCard_CS_default_instance_;
class MSG_ReqPutOffCard_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqPutOffCard_CS> _instance;
} _MSG_ReqPutOffCard_CS_default_instance_;
class MSG_ReqSwapCard_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqSwapCard_CS> _instance;
} _MSG_ReqSwapCard_CS_default_instance_;
class MSG_ReqCardPackInfo_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqCardPackInfo_CS> _instance;
} _MSG_ReqCardPackInfo_CS_default_instance_;
class CardPackInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CardPackInfo> _instance;
} _CardPackInfo_default_instance_;
class MSG_RetCardPackInfo_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetCardPackInfo_SC> _instance;
} _MSG_RetCardPackInfo_SC_default_instance_;
class MSG_ReqSplitObject_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqSplitObject_CS> _instance;
} _MSG_ReqSplitObject_CS_default_instance_;
class MSG_ReqOpItemLock_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqOpItemLock_CS> _instance;
} _MSG_ReqOpItemLock_CS_default_instance_;
class MSG_ReqGetVIPCardInfo_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqGetVIPCardInfo_CS> _instance;
} _MSG_ReqGetVIPCardInfo_CS_default_instance_;
class MSG_RetGetVIPCardInfo_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetGetVIPCardInfo_SC> _instance;
} _MSG_RetGetVIPCardInfo_SC_default_instance_;
class MSG_ReqBuyVIPCard_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqBuyVIPCard_CS> _instance;
} _MSG_ReqBuyVIPCard_CS_default_instance_;
class MSG_RetBuyVIPCard_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetBuyVIPCard_SC> _instance;
} _MSG_RetBuyVIPCard_SC_default_instance_;
class MSG_ReqAcepVIPCardPrize_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqAcepVIPCardPrize_CS> _instance;
} _MSG_ReqAcepVIPCardPrize_CS_default_instance_;
class MSG_RetAcepVIPCardPrize_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetAcepVIPCardPrize_SC> _instance;
} _MSG_RetAcepVIPCardPrize_SC_default_instance_;
class MSG_ReqRaffVIPCardPrize_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqRaffVIPCardPrize_CS> _instance;
} _MSG_ReqRaffVIPCardPrize_CS_default_instance_;
class MSG_RetRaffVIPCardPrize_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetRaffVIPCardPrize_SC> _instance;
} _MSG_RetRaffVIPCardPrize_SC_default_instance_;
class MSG_ReqCurrencyExchange_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqCurrencyExchange_CS> _instance;
} _MSG_ReqCurrencyExchange_CS_default_instance_;
class MSG_RetCurrencyExchange_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetCurrencyExchange_SC> _instance;
} _MSG_RetCurrencyExchange_SC_default_instance_;
class MSG_ReqTransMoney_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqTransMoney_CS> _instance;
} _MSG_ReqTransMoney_CS_default_instance_;
class MSG_ReqFixUpDurability_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqFixUpDurability_CS> _instance;
} _MSG_ReqFixUpDurability_CS_default_instance_;
class MSG_ReqUseCapsule_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqUseCapsule_CS> _instance;
} _MSG_ReqUseCapsule_CS_default_instance_;
}  // namespace Obj
static void InitDefaultsscc_info_CardData_object_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Obj::_CardData_default_instance_;
    new (ptr) ::Obj::CardData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Obj::CardData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CardData_object_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CardData_object_2eproto}, {
      &scc_info_CardEffectItem_object_2eproto.base,}};

static void InitDefaultsscc_info_CardEffectItem_object_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Obj::_CardEffectItem_default_instance_;
    new (ptr) ::Obj::CardEffectItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Obj::CardEffectItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CardEffectItem_object_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CardEffectItem_object_2eproto}, {}};

static void InitDefaultsscc_info_CardPackInfo_object_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Obj::_CardPackInfo_default_instance_;
    new (ptr) ::Obj::CardPackInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Obj::CardPackInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CardPackInfo_object_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CardPackInfo_object_2eproto}, {
      &scc_info_t_Object_object_2eproto.base,}};

static void InitDefaultsscc_info_EquipData_object_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Obj::_EquipData_default_instance_;
    new (ptr) ::Obj::EquipData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Obj::EquipData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EquipData_object_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EquipData_object_2eproto}, {}};

static void InitDefaultsscc_info_EquipRandInfo_object_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Obj::_EquipRandInfo_default_instance_;
    new (ptr) ::Obj::EquipRandInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Obj::EquipRandInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EquipRandInfo_object_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EquipRandInfo_object_2eproto}, {}};

static void InitDefaultsscc_info_MSG_MergeObjs_CS_object_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Obj::_MSG_MergeObjs_CS_default_instance_;
    new (ptr) ::Obj::MSG_MergeObjs_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Obj::MSG_MergeObjs_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_MergeObjs_CS_object_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_MergeObjs_CS_object_2eproto}, {}};

static void InitDefaultsscc_info_MSG_MergeObjs_SC_object_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Obj::_MSG_MergeObjs_SC_default_instance_;
    new (ptr) ::Obj::MSG_MergeObjs_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Obj::MSG_MergeObjs_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_MergeObjs_SC_object_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_MergeObjs_SC_object_2eproto}, {}};

static void InitDefaultsscc_info_MSG_PackData_SC_object_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Obj::_MSG_PackData_SC_default_instance_;
    new (ptr) ::Obj::MSG_PackData_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Obj::MSG_PackData_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_PackData_SC_object_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_PackData_SC_object_2eproto}, {
      &scc_info_MSG_RefreshObjs_SC_object_2eproto.base,}};

static void InitDefaultsscc_info_MSG_PackUnlock_CS_object_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Obj::_MSG_PackUnlock_CS_default_instance_;
    new (ptr) ::Obj::MSG_PackUnlock_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Obj::MSG_PackUnlock_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_PackUnlock_CS_object_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_PackUnlock_CS_object_2eproto}, {}};

static void InitDefaultsscc_info_MSG_PackUnlock_SC_object_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Obj::_MSG_PackUnlock_SC_default_instance_;
    new (ptr) ::Obj::MSG_PackUnlock_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Obj::MSG_PackUnlock_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_PackUnlock_SC_object_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_PackUnlock_SC_object_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RefreshObjs_SC_object_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Obj::_MSG_RefreshObjs_SC_default_instance_;
    new (ptr) ::Obj::MSG_RefreshObjs_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Obj::MSG_RefreshObjs_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_RefreshObjs_SC_object_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_RefreshObjs_SC_object_2eproto}, {
      &scc_info_t_Object_object_2eproto.base,}};

static void InitDefaultsscc_info_MSG_RemoveObject_SC_object_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Obj::_MSG_RemoveObject_SC_default_instance_;
    new (ptr) ::Obj::MSG_RemoveObject_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Obj::MSG_RemoveObject_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RemoveObject_SC_object_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_RemoveObject_SC_object_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqAcepVIPCardPrize_CS_object_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Obj::_MSG_ReqAcepVIPCardPrize_CS_default_instance_;
    new (ptr) ::Obj::MSG_ReqAcepVIPCardPrize_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Obj::MSG_ReqAcepVIPCardPrize_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqAcepVIPCardPrize_CS_object_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqAcepVIPCardPrize_CS_object_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqBuyVIPCard_CS_object_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Obj::_MSG_ReqBuyVIPCard_CS_default_instance_;
    new (ptr) ::Obj::MSG_ReqBuyVIPCard_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Obj::MSG_ReqBuyVIPCard_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqBuyVIPCard_CS_object_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqBuyVIPCard_CS_object_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqCardPackInfo_CS_object_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Obj::_MSG_ReqCardPackInfo_CS_default_instance_;
    new (ptr) ::Obj::MSG_ReqCardPackInfo_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Obj::MSG_ReqCardPackInfo_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqCardPackInfo_CS_object_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqCardPackInfo_CS_object_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqCheckItemDueTime_CS_object_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Obj::_MSG_ReqCheckItemDueTime_CS_default_instance_;
    new (ptr) ::Obj::MSG_ReqCheckItemDueTime_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Obj::MSG_ReqCheckItemDueTime_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqCheckItemDueTime_CS_object_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqCheckItemDueTime_CS_object_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqCurrencyExchange_CS_object_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Obj::_MSG_ReqCurrencyExchange_CS_default_instance_;
    new (ptr) ::Obj::MSG_ReqCurrencyExchange_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Obj::MSG_ReqCurrencyExchange_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqCurrencyExchange_CS_object_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqCurrencyExchange_CS_object_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqDestroyObject_CS_object_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Obj::_MSG_ReqDestroyObject_CS_default_instance_;
    new (ptr) ::Obj::MSG_ReqDestroyObject_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Obj::MSG_ReqDestroyObject_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqDestroyObject_CS_object_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqDestroyObject_CS_object_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqFixUpDurability_CS_object_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Obj::_MSG_ReqFixUpDurability_CS_default_instance_;
    new (ptr) ::Obj::MSG_ReqFixUpDurability_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Obj::MSG_ReqFixUpDurability_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqFixUpDurability_CS_object_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqFixUpDurability_CS_object_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqGetVIPCardInfo_CS_object_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Obj::_MSG_ReqGetVIPCardInfo_CS_default_instance_;
    new (ptr) ::Obj::MSG_ReqGetVIPCardInfo_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Obj::MSG_ReqGetVIPCardInfo_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqGetVIPCardInfo_CS_object_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqGetVIPCardInfo_CS_object_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqMoveObject_CS_object_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Obj::_MSG_ReqMoveObject_CS_default_instance_;
    new (ptr) ::Obj::MSG_ReqMoveObject_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Obj::MSG_ReqMoveObject_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqMoveObject_CS_object_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqMoveObject_CS_object_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqOpItemLock_CS_object_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Obj::_MSG_ReqOpItemLock_CS_default_instance_;
    new (ptr) ::Obj::MSG_ReqOpItemLock_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Obj::MSG_ReqOpItemLock_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqOpItemLock_CS_object_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqOpItemLock_CS_object_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqPutOffCard_CS_object_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Obj::_MSG_ReqPutOffCard_CS_default_instance_;
    new (ptr) ::Obj::MSG_ReqPutOffCard_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Obj::MSG_ReqPutOffCard_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqPutOffCard_CS_object_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqPutOffCard_CS_object_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqPutOnCard_CS_object_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Obj::_MSG_ReqPutOnCard_CS_default_instance_;
    new (ptr) ::Obj::MSG_ReqPutOnCard_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Obj::MSG_ReqPutOnCard_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqPutOnCard_CS_object_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqPutOnCard_CS_object_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqRaffVIPCardPrize_CS_object_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Obj::_MSG_ReqRaffVIPCardPrize_CS_default_instance_;
    new (ptr) ::Obj::MSG_ReqRaffVIPCardPrize_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Obj::MSG_ReqRaffVIPCardPrize_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqRaffVIPCardPrize_CS_object_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqRaffVIPCardPrize_CS_object_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqSellObject_CS_object_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Obj::_MSG_ReqSellObject_CS_default_instance_;
    new (ptr) ::Obj::MSG_ReqSellObject_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Obj::MSG_ReqSellObject_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqSellObject_CS_object_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqSellObject_CS_object_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqSplitObject_CS_object_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Obj::_MSG_ReqSplitObject_CS_default_instance_;
    new (ptr) ::Obj::MSG_ReqSplitObject_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Obj::MSG_ReqSplitObject_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqSplitObject_CS_object_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqSplitObject_CS_object_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqSwapCard_CS_object_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Obj::_MSG_ReqSwapCard_CS_default_instance_;
    new (ptr) ::Obj::MSG_ReqSwapCard_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Obj::MSG_ReqSwapCard_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqSwapCard_CS_object_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqSwapCard_CS_object_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqSwapObject_CS_object_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Obj::_MSG_ReqSwapObject_CS_default_instance_;
    new (ptr) ::Obj::MSG_ReqSwapObject_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Obj::MSG_ReqSwapObject_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqSwapObject_CS_object_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqSwapObject_CS_object_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqTransMoney_CS_object_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Obj::_MSG_ReqTransMoney_CS_default_instance_;
    new (ptr) ::Obj::MSG_ReqTransMoney_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Obj::MSG_ReqTransMoney_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqTransMoney_CS_object_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqTransMoney_CS_object_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqUseCapsule_CS_object_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Obj::_MSG_ReqUseCapsule_CS_default_instance_;
    new (ptr) ::Obj::MSG_ReqUseCapsule_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Obj::MSG_ReqUseCapsule_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqUseCapsule_CS_object_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqUseCapsule_CS_object_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqUseObject_CS_object_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Obj::_MSG_ReqUseObject_CS_default_instance_;
    new (ptr) ::Obj::MSG_ReqUseObject_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Obj::MSG_ReqUseObject_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqUseObject_CS_object_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqUseObject_CS_object_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqUseObject_Special_CS_object_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Obj::_MSG_ReqUseObject_Special_CS_default_instance_;
    new (ptr) ::Obj::MSG_ReqUseObject_Special_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Obj::MSG_ReqUseObject_Special_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqUseObject_Special_CS_object_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqUseObject_Special_CS_object_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RetAcepVIPCardPrize_SC_object_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Obj::_MSG_RetAcepVIPCardPrize_SC_default_instance_;
    new (ptr) ::Obj::MSG_RetAcepVIPCardPrize_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Obj::MSG_RetAcepVIPCardPrize_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_RetAcepVIPCardPrize_SC_object_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_RetAcepVIPCardPrize_SC_object_2eproto}, {
      &scc_info_VIPCardInfo_object_2eproto.base,}};

static void InitDefaultsscc_info_MSG_RetBuyVIPCard_SC_object_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Obj::_MSG_RetBuyVIPCard_SC_default_instance_;
    new (ptr) ::Obj::MSG_RetBuyVIPCard_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Obj::MSG_RetBuyVIPCard_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_RetBuyVIPCard_SC_object_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_RetBuyVIPCard_SC_object_2eproto}, {
      &scc_info_VIPCardInfo_object_2eproto.base,}};

static void InitDefaultsscc_info_MSG_RetCardPackInfo_SC_object_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Obj::_MSG_RetCardPackInfo_SC_default_instance_;
    new (ptr) ::Obj::MSG_RetCardPackInfo_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Obj::MSG_RetCardPackInfo_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_RetCardPackInfo_SC_object_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_RetCardPackInfo_SC_object_2eproto}, {
      &scc_info_CardPackInfo_object_2eproto.base,}};

static void InitDefaultsscc_info_MSG_RetCurrencyExchange_SC_object_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Obj::_MSG_RetCurrencyExchange_SC_default_instance_;
    new (ptr) ::Obj::MSG_RetCurrencyExchange_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Obj::MSG_RetCurrencyExchange_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RetCurrencyExchange_SC_object_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_RetCurrencyExchange_SC_object_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RetGetVIPCardInfo_SC_object_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Obj::_MSG_RetGetVIPCardInfo_SC_default_instance_;
    new (ptr) ::Obj::MSG_RetGetVIPCardInfo_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Obj::MSG_RetGetVIPCardInfo_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_RetGetVIPCardInfo_SC_object_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_RetGetVIPCardInfo_SC_object_2eproto}, {
      &scc_info_VIPCardInfo_object_2eproto.base,}};

static void InitDefaultsscc_info_MSG_RetRaffVIPCardPrize_SC_object_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Obj::_MSG_RetRaffVIPCardPrize_SC_default_instance_;
    new (ptr) ::Obj::MSG_RetRaffVIPCardPrize_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Obj::MSG_RetRaffVIPCardPrize_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_RetRaffVIPCardPrize_SC_object_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_RetRaffVIPCardPrize_SC_object_2eproto}, {
      &scc_info_VIPCardInfo_object_2eproto.base,}};

static void InitDefaultsscc_info_MSG_TidyPack_CS_object_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Obj::_MSG_TidyPack_CS_default_instance_;
    new (ptr) ::Obj::MSG_TidyPack_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Obj::MSG_TidyPack_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_TidyPack_CS_object_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_TidyPack_CS_object_2eproto}, {
      &scc_info_t_TidyPackInfo_object_2eproto.base,}};

static void InitDefaultsscc_info_MSG_TidyPack_SC_object_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Obj::_MSG_TidyPack_SC_default_instance_;
    new (ptr) ::Obj::MSG_TidyPack_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Obj::MSG_TidyPack_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_TidyPack_SC_object_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_TidyPack_SC_object_2eproto}, {}};

static void InitDefaultsscc_info_MSG_UnwearEquip_CS_object_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Obj::_MSG_UnwearEquip_CS_default_instance_;
    new (ptr) ::Obj::MSG_UnwearEquip_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Obj::MSG_UnwearEquip_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_UnwearEquip_CS_object_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_UnwearEquip_CS_object_2eproto}, {}};

static void InitDefaultsscc_info_MSG_UnwearEquip_SC_object_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Obj::_MSG_UnwearEquip_SC_default_instance_;
    new (ptr) ::Obj::MSG_UnwearEquip_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Obj::MSG_UnwearEquip_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_UnwearEquip_SC_object_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_UnwearEquip_SC_object_2eproto}, {}};

static void InitDefaultsscc_info_MSG_WearEquip_CS_object_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Obj::_MSG_WearEquip_CS_default_instance_;
    new (ptr) ::Obj::MSG_WearEquip_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Obj::MSG_WearEquip_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_WearEquip_CS_object_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_WearEquip_CS_object_2eproto}, {}};

static void InitDefaultsscc_info_MSG_WearEquip_SC_object_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Obj::_MSG_WearEquip_SC_default_instance_;
    new (ptr) ::Obj::MSG_WearEquip_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Obj::MSG_WearEquip_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_WearEquip_SC_object_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_WearEquip_SC_object_2eproto}, {}};

static void InitDefaultsscc_info_PrizeBase_object_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Obj::_PrizeBase_default_instance_;
    new (ptr) ::Obj::PrizeBase();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Obj::PrizeBase::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PrizeBase_object_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PrizeBase_object_2eproto}, {}};

static void InitDefaultsscc_info_VIPCardInfo_object_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Obj::_VIPCardInfo_default_instance_;
    new (ptr) ::Obj::VIPCardInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Obj::VIPCardInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VIPCardInfo_object_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VIPCardInfo_object_2eproto}, {
      &scc_info_PrizeBase_object_2eproto.base,}};

static void InitDefaultsscc_info_t_Object_object_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Obj::_t_Object_default_instance_;
    new (ptr) ::Obj::t_Object();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Obj::t_Object::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_t_Object_object_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_t_Object_object_2eproto}, {
      &scc_info_EquipData_object_2eproto.base,
      &scc_info_EquipRandInfo_object_2eproto.base,
      &scc_info_CardData_object_2eproto.base,}};

static void InitDefaultsscc_info_t_TidyPackInfo_object_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Obj::_t_TidyPackInfo_default_instance_;
    new (ptr) ::Obj::t_TidyPackInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Obj::t_TidyPackInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_t_TidyPackInfo_object_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_t_TidyPackInfo_object_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_object_2eproto[49];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_object_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_object_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_object_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Obj::EquipData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Obj::EquipData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Obj::EquipData, weaponatt_),
  PROTOBUF_FIELD_OFFSET(::Obj::EquipData, pdam_),
  PROTOBUF_FIELD_OFFSET(::Obj::EquipData, mdam_),
  PROTOBUF_FIELD_OFFSET(::Obj::EquipData, pdef_),
  PROTOBUF_FIELD_OFFSET(::Obj::EquipData, mdef_),
  PROTOBUF_FIELD_OFFSET(::Obj::EquipData, maxhp_),
  PROTOBUF_FIELD_OFFSET(::Obj::EquipData, str_),
  PROTOBUF_FIELD_OFFSET(::Obj::EquipData, dex_),
  PROTOBUF_FIELD_OFFSET(::Obj::EquipData, intel_),
  PROTOBUF_FIELD_OFFSET(::Obj::EquipData, phy_),
  PROTOBUF_FIELD_OFFSET(::Obj::EquipData, bang_),
  PROTOBUF_FIELD_OFFSET(::Obj::EquipData, toughness_),
  PROTOBUF_FIELD_OFFSET(::Obj::EquipData, block_),
  PROTOBUF_FIELD_OFFSET(::Obj::EquipData, penetrate_),
  PROTOBUF_FIELD_OFFSET(::Obj::EquipData, accurate_),
  PROTOBUF_FIELD_OFFSET(::Obj::EquipData, hold_),
  PROTOBUF_FIELD_OFFSET(::Obj::EquipData, deflect_),
  PROTOBUF_FIELD_OFFSET(::Obj::EquipData, bangextradamage_),
  PROTOBUF_FIELD_OFFSET(::Obj::EquipData, toughnessreducedamage_),
  PROTOBUF_FIELD_OFFSET(::Obj::EquipData, blockreducedamage_),
  PROTOBUF_FIELD_OFFSET(::Obj::EquipData, penetrateextradamage_),
  PROTOBUF_FIELD_OFFSET(::Obj::EquipData, accurateextradamage_),
  PROTOBUF_FIELD_OFFSET(::Obj::EquipData, holdreducedamage_),
  PROTOBUF_FIELD_OFFSET(::Obj::EquipData, deflectreducedamage_),
  PROTOBUF_FIELD_OFFSET(::Obj::EquipData, maxmp_),
  PROTOBUF_FIELD_OFFSET(::Obj::EquipData, miss_),
  PROTOBUF_FIELD_OFFSET(::Obj::EquipData, hit_),
  PROTOBUF_FIELD_OFFSET(::Obj::EquipData, firemastery_),
  PROTOBUF_FIELD_OFFSET(::Obj::EquipData, icemastery_),
  PROTOBUF_FIELD_OFFSET(::Obj::EquipData, lightningmastery_),
  PROTOBUF_FIELD_OFFSET(::Obj::EquipData, brightmastery_),
  PROTOBUF_FIELD_OFFSET(::Obj::EquipData, darkmastery_),
  PROTOBUF_FIELD_OFFSET(::Obj::EquipData, fireresist_),
  PROTOBUF_FIELD_OFFSET(::Obj::EquipData, iceresist_),
  PROTOBUF_FIELD_OFFSET(::Obj::EquipData, lightningresist_),
  PROTOBUF_FIELD_OFFSET(::Obj::EquipData, brightresist_),
  PROTOBUF_FIELD_OFFSET(::Obj::EquipData, darkresist_),
  PROTOBUF_FIELD_OFFSET(::Obj::EquipData, firepen_),
  PROTOBUF_FIELD_OFFSET(::Obj::EquipData, icepen_),
  PROTOBUF_FIELD_OFFSET(::Obj::EquipData, lightningpen_),
  PROTOBUF_FIELD_OFFSET(::Obj::EquipData, brightpen_),
  PROTOBUF_FIELD_OFFSET(::Obj::EquipData, darkpen_),
  PROTOBUF_FIELD_OFFSET(::Obj::EquipData, blowint_),
  PROTOBUF_FIELD_OFFSET(::Obj::EquipData, knockint_),
  PROTOBUF_FIELD_OFFSET(::Obj::EquipData, floatint_),
  PROTOBUF_FIELD_OFFSET(::Obj::EquipData, superhitint_),
  PROTOBUF_FIELD_OFFSET(::Obj::EquipData, blowresist_),
  PROTOBUF_FIELD_OFFSET(::Obj::EquipData, knockresist_),
  PROTOBUF_FIELD_OFFSET(::Obj::EquipData, floatresist_),
  PROTOBUF_FIELD_OFFSET(::Obj::EquipData, superhitresist_),
  PROTOBUF_FIELD_OFFSET(::Obj::EquipData, stiffaddtime_),
  PROTOBUF_FIELD_OFFSET(::Obj::EquipData, stiffdectime_),
  PROTOBUF_FIELD_OFFSET(::Obj::EquipData, blowdectime_),
  PROTOBUF_FIELD_OFFSET(::Obj::EquipData, knockdectime_),
  PROTOBUF_FIELD_OFFSET(::Obj::EquipData, floatdectime_),
  PROTOBUF_FIELD_OFFSET(::Obj::EquipData, superhitdectime_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  48,
  49,
  50,
  51,
  52,
  53,
  54,
  55,
  PROTOBUF_FIELD_OFFSET(::Obj::EquipRandInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Obj::EquipRandInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Obj::EquipRandInfo, type_),
  PROTOBUF_FIELD_OFFSET(::Obj::EquipRandInfo, id_),
  PROTOBUF_FIELD_OFFSET(::Obj::EquipRandInfo, value_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Obj::CardEffectItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Obj::CardEffectItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Obj::CardEffectItem, id_),
  PROTOBUF_FIELD_OFFSET(::Obj::CardEffectItem, trigger_),
  PROTOBUF_FIELD_OFFSET(::Obj::CardEffectItem, value_),
  PROTOBUF_FIELD_OFFSET(::Obj::CardEffectItem, varname_),
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::Obj::CardData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Obj::CardData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Obj::CardData, cardtype_),
  PROTOBUF_FIELD_OFFSET(::Obj::CardData, cardstar_),
  PROTOBUF_FIELD_OFFSET(::Obj::CardData, cardgroup_),
  PROTOBUF_FIELD_OFFSET(::Obj::CardData, base_effect_),
  PROTOBUF_FIELD_OFFSET(::Obj::CardData, rand_effect_),
  PROTOBUF_FIELD_OFFSET(::Obj::CardData, durability_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  3,
  PROTOBUF_FIELD_OFFSET(::Obj::t_Object, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Obj::t_Object, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Obj::t_Object, baseid_),
  PROTOBUF_FIELD_OFFSET(::Obj::t_Object, thisid_),
  PROTOBUF_FIELD_OFFSET(::Obj::t_Object, type_),
  PROTOBUF_FIELD_OFFSET(::Obj::t_Object, packtype_),
  PROTOBUF_FIELD_OFFSET(::Obj::t_Object, name_),
  PROTOBUF_FIELD_OFFSET(::Obj::t_Object, num_),
  PROTOBUF_FIELD_OFFSET(::Obj::t_Object, bind_),
  PROTOBUF_FIELD_OFFSET(::Obj::t_Object, grid_x_),
  PROTOBUF_FIELD_OFFSET(::Obj::t_Object, grid_y_),
  PROTOBUF_FIELD_OFFSET(::Obj::t_Object, quality_),
  PROTOBUF_FIELD_OFFSET(::Obj::t_Object, level_),
  PROTOBUF_FIELD_OFFSET(::Obj::t_Object, timer_),
  PROTOBUF_FIELD_OFFSET(::Obj::t_Object, equipprop_),
  PROTOBUF_FIELD_OFFSET(::Obj::t_Object, equiprand_),
  PROTOBUF_FIELD_OFFSET(::Obj::t_Object, nextusetime_),
  PROTOBUF_FIELD_OFFSET(::Obj::t_Object, card_data_),
  PROTOBUF_FIELD_OFFSET(::Obj::t_Object, lock_end_time_),
  PROTOBUF_FIELD_OFFSET(::Obj::t_Object, tradetime_),
  4,
  0,
  5,
  6,
  1,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  2,
  ~0u,
  14,
  3,
  15,
  16,
  PROTOBUF_FIELD_OFFSET(::Obj::PrizeBase, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Obj::PrizeBase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Obj::PrizeBase, id_),
  PROTOBUF_FIELD_OFFSET(::Obj::PrizeBase, quantity_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Obj::VIPCardInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Obj::VIPCardInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Obj::VIPCardInfo, remaintime_),
  PROTOBUF_FIELD_OFFSET(::Obj::VIPCardInfo, raffcount_),
  PROTOBUF_FIELD_OFFSET(::Obj::VIPCardInfo, total_raffcount_),
  PROTOBUF_FIELD_OFFSET(::Obj::VIPCardInfo, dayprize_state_),
  PROTOBUF_FIELD_OFFSET(::Obj::VIPCardInfo, arrprize_),
  PROTOBUF_FIELD_OFFSET(::Obj::VIPCardInfo, objraffcount_),
  0,
  1,
  2,
  3,
  ~0u,
  4,
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_RefreshObjs_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_RefreshObjs_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_RefreshObjs_SC, objs_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_RefreshObjs_SC, show_addnew_anim_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_PackData_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_PackData_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_PackData_SC, packtype_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_PackData_SC, width_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_PackData_SC, height_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_PackData_SC, validsize_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_PackData_SC, objects_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_PackData_SC, unlockcount_),
  1,
  2,
  3,
  4,
  0,
  5,
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_WearEquip_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_WearEquip_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_WearEquip_CS, thisid_),
  0,
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_WearEquip_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_WearEquip_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_WearEquip_SC, thisid_),
  0,
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_RemoveObject_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_RemoveObject_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_RemoveObject_SC, ids_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_UnwearEquip_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_UnwearEquip_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_UnwearEquip_CS, thisid_),
  0,
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_UnwearEquip_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_UnwearEquip_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_UnwearEquip_SC, thisid_),
  0,
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqCheckItemDueTime_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqCheckItemDueTime_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqUseObject_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqUseObject_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqUseObject_CS, thisid_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqUseObject_CS, num_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqUseObject_Special_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqUseObject_Special_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqUseObject_Special_CS, thisid_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqUseObject_Special_CS, num_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqUseObject_Special_CS, npcid_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqUseObject_Special_CS, posx_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqUseObject_Special_CS, posy_),
  0,
  4,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_PackUnlock_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_PackUnlock_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_PackUnlock_CS, packtype_),
  0,
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_PackUnlock_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_PackUnlock_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_PackUnlock_SC, packtype_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_PackUnlock_SC, unlockcount_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_PackUnlock_SC, maxsize_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_PackUnlock_SC, result_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_MergeObjs_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_MergeObjs_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_MergeObjs_CS, packtype_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_MergeObjs_CS, srcthisids_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_MergeObjs_CS, dstthisids_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_MergeObjs_CS, dst_packtype_),
  0,
  ~0u,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_MergeObjs_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_MergeObjs_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_MergeObjs_SC, packtype_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_MergeObjs_SC, result_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_MergeObjs_SC, dst_packtype_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::Obj::t_TidyPackInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Obj::t_TidyPackInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Obj::t_TidyPackInfo, thisid_),
  PROTOBUF_FIELD_OFFSET(::Obj::t_TidyPackInfo, grid_x_),
  PROTOBUF_FIELD_OFFSET(::Obj::t_TidyPackInfo, grid_y_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_TidyPack_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_TidyPack_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_TidyPack_CS, packtype_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_TidyPack_CS, infos_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_TidyPack_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_TidyPack_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_TidyPack_SC, packtype_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_TidyPack_SC, result_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqSellObject_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqSellObject_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqSellObject_CS, thisid_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqSellObject_CS, num_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqSellObject_CS, passwd_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqMoveObject_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqMoveObject_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqMoveObject_CS, thisid_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqMoveObject_CS, grid_x_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqMoveObject_CS, grid_y_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqMoveObject_CS, packtype_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqMoveObject_CS, dst_packtype_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqSwapObject_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqSwapObject_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqSwapObject_CS, src_thisid_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqSwapObject_CS, dst_thisid_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqSwapObject_CS, dst_packtype_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqSwapObject_CS, packtype_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqDestroyObject_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqDestroyObject_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqDestroyObject_CS, thisid_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqDestroyObject_CS, packtype_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqDestroyObject_CS, passwd_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqPutOnCard_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqPutOnCard_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqPutOnCard_CS, thisid_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqPutOnCard_CS, grid_x_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqPutOnCard_CS, grid_y_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqPutOnCard_CS, packtype_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqPutOffCard_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqPutOffCard_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqPutOffCard_CS, thisid_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqPutOffCard_CS, grid_x_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqPutOffCard_CS, grid_y_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqSwapCard_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqSwapCard_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqSwapCard_CS, src_thisid_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqSwapCard_CS, dst_thisid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqCardPackInfo_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqCardPackInfo_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Obj::CardPackInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Obj::CardPackInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Obj::CardPackInfo, gold_opened_num_),
  PROTOBUF_FIELD_OFFSET(::Obj::CardPackInfo, wood_opened_num_),
  PROTOBUF_FIELD_OFFSET(::Obj::CardPackInfo, water_opened_num_),
  PROTOBUF_FIELD_OFFSET(::Obj::CardPackInfo, fire_opened_num_),
  PROTOBUF_FIELD_OFFSET(::Obj::CardPackInfo, earth_opened_num_),
  PROTOBUF_FIELD_OFFSET(::Obj::CardPackInfo, hero_baseid_),
  PROTOBUF_FIELD_OFFSET(::Obj::CardPackInfo, objs_),
  0,
  1,
  2,
  3,
  4,
  5,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_RetCardPackInfo_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_RetCardPackInfo_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_RetCardPackInfo_SC, data_),
  0,
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqSplitObject_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqSplitObject_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqSplitObject_CS, thisid_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqSplitObject_CS, num_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqSplitObject_CS, packtype_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqOpItemLock_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqOpItemLock_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqOpItemLock_CS, thisid_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqOpItemLock_CS, packtype_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqOpItemLock_CS, opcode_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqOpItemLock_CS, passwd_),
  0,
  2,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqGetVIPCardInfo_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqGetVIPCardInfo_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_RetGetVIPCardInfo_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_RetGetVIPCardInfo_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_RetGetVIPCardInfo_SC, vipcardinfo_),
  0,
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqBuyVIPCard_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqBuyVIPCard_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqBuyVIPCard_CS, cardid_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqBuyVIPCard_CS, count_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_RetBuyVIPCard_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_RetBuyVIPCard_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_RetBuyVIPCard_SC, vipcardinfo_),
  0,
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqAcepVIPCardPrize_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqAcepVIPCardPrize_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_RetAcepVIPCardPrize_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_RetAcepVIPCardPrize_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_RetAcepVIPCardPrize_SC, vipcardinfo_),
  0,
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqRaffVIPCardPrize_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqRaffVIPCardPrize_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqRaffVIPCardPrize_CS, usetype_),
  0,
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_RetRaffVIPCardPrize_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_RetRaffVIPCardPrize_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_RetRaffVIPCardPrize_SC, vipcardinfo_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_RetRaffVIPCardPrize_SC, id_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_RetRaffVIPCardPrize_SC, quantity_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqCurrencyExchange_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqCurrencyExchange_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqCurrencyExchange_CS, usequantity_),
  0,
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_RetCurrencyExchange_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_RetCurrencyExchange_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_RetCurrencyExchange_SC, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqTransMoney_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqTransMoney_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqTransMoney_CS, packtype_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqTransMoney_CS, dst_packtype_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqTransMoney_CS, resourceid_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqTransMoney_CS, quantity_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqFixUpDurability_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqFixUpDurability_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqFixUpDurability_CS, packtype_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqFixUpDurability_CS, thisid_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqUseCapsule_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqUseCapsule_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Obj::MSG_ReqUseCapsule_CS, thisid_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 61, sizeof(::Obj::EquipData)},
  { 117, 125, sizeof(::Obj::EquipRandInfo)},
  { 128, 137, sizeof(::Obj::CardEffectItem)},
  { 141, 152, sizeof(::Obj::CardData)},
  { 158, 181, sizeof(::Obj::t_Object)},
  { 199, 206, sizeof(::Obj::PrizeBase)},
  { 208, 219, sizeof(::Obj::VIPCardInfo)},
  { 225, 232, sizeof(::Obj::MSG_RefreshObjs_SC)},
  { 234, 245, sizeof(::Obj::MSG_PackData_SC)},
  { 251, 257, sizeof(::Obj::MSG_WearEquip_CS)},
  { 258, 264, sizeof(::Obj::MSG_WearEquip_SC)},
  { 265, 271, sizeof(::Obj::MSG_RemoveObject_SC)},
  { 272, 278, sizeof(::Obj::MSG_UnwearEquip_CS)},
  { 279, 285, sizeof(::Obj::MSG_UnwearEquip_SC)},
  { 286, 291, sizeof(::Obj::MSG_ReqCheckItemDueTime_CS)},
  { 291, 298, sizeof(::Obj::MSG_ReqUseObject_CS)},
  { 300, 310, sizeof(::Obj::MSG_ReqUseObject_Special_CS)},
  { 315, 321, sizeof(::Obj::MSG_PackUnlock_CS)},
  { 322, 331, sizeof(::Obj::MSG_PackUnlock_SC)},
  { 335, 344, sizeof(::Obj::MSG_MergeObjs_CS)},
  { 348, 356, sizeof(::Obj::MSG_MergeObjs_SC)},
  { 359, 367, sizeof(::Obj::t_TidyPackInfo)},
  { 370, 377, sizeof(::Obj::MSG_TidyPack_CS)},
  { 379, 386, sizeof(::Obj::MSG_TidyPack_SC)},
  { 388, 396, sizeof(::Obj::MSG_ReqSellObject_CS)},
  { 399, 409, sizeof(::Obj::MSG_ReqMoveObject_CS)},
  { 414, 423, sizeof(::Obj::MSG_ReqSwapObject_CS)},
  { 427, 435, sizeof(::Obj::MSG_ReqDestroyObject_CS)},
  { 438, 447, sizeof(::Obj::MSG_ReqPutOnCard_CS)},
  { 451, 459, sizeof(::Obj::MSG_ReqPutOffCard_CS)},
  { 462, 469, sizeof(::Obj::MSG_ReqSwapCard_CS)},
  { 471, 476, sizeof(::Obj::MSG_ReqCardPackInfo_CS)},
  { 476, 488, sizeof(::Obj::CardPackInfo)},
  { 495, 501, sizeof(::Obj::MSG_RetCardPackInfo_SC)},
  { 502, 510, sizeof(::Obj::MSG_ReqSplitObject_CS)},
  { 513, 522, sizeof(::Obj::MSG_ReqOpItemLock_CS)},
  { 526, 531, sizeof(::Obj::MSG_ReqGetVIPCardInfo_CS)},
  { 531, 537, sizeof(::Obj::MSG_RetGetVIPCardInfo_SC)},
  { 538, 545, sizeof(::Obj::MSG_ReqBuyVIPCard_CS)},
  { 547, 553, sizeof(::Obj::MSG_RetBuyVIPCard_SC)},
  { 554, 559, sizeof(::Obj::MSG_ReqAcepVIPCardPrize_CS)},
  { 559, 565, sizeof(::Obj::MSG_RetAcepVIPCardPrize_SC)},
  { 566, 572, sizeof(::Obj::MSG_ReqRaffVIPCardPrize_CS)},
  { 573, 581, sizeof(::Obj::MSG_RetRaffVIPCardPrize_SC)},
  { 584, 590, sizeof(::Obj::MSG_ReqCurrencyExchange_CS)},
  { 591, 597, sizeof(::Obj::MSG_RetCurrencyExchange_SC)},
  { 598, 607, sizeof(::Obj::MSG_ReqTransMoney_CS)},
  { 611, 618, sizeof(::Obj::MSG_ReqFixUpDurability_CS)},
  { 620, 626, sizeof(::Obj::MSG_ReqUseCapsule_CS)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Obj::_EquipData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Obj::_EquipRandInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Obj::_CardEffectItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Obj::_CardData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Obj::_t_Object_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Obj::_PrizeBase_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Obj::_VIPCardInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Obj::_MSG_RefreshObjs_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Obj::_MSG_PackData_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Obj::_MSG_WearEquip_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Obj::_MSG_WearEquip_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Obj::_MSG_RemoveObject_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Obj::_MSG_UnwearEquip_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Obj::_MSG_UnwearEquip_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Obj::_MSG_ReqCheckItemDueTime_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Obj::_MSG_ReqUseObject_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Obj::_MSG_ReqUseObject_Special_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Obj::_MSG_PackUnlock_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Obj::_MSG_PackUnlock_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Obj::_MSG_MergeObjs_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Obj::_MSG_MergeObjs_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Obj::_t_TidyPackInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Obj::_MSG_TidyPack_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Obj::_MSG_TidyPack_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Obj::_MSG_ReqSellObject_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Obj::_MSG_ReqMoveObject_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Obj::_MSG_ReqSwapObject_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Obj::_MSG_ReqDestroyObject_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Obj::_MSG_ReqPutOnCard_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Obj::_MSG_ReqPutOffCard_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Obj::_MSG_ReqSwapCard_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Obj::_MSG_ReqCardPackInfo_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Obj::_CardPackInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Obj::_MSG_RetCardPackInfo_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Obj::_MSG_ReqSplitObject_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Obj::_MSG_ReqOpItemLock_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Obj::_MSG_ReqGetVIPCardInfo_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Obj::_MSG_RetGetVIPCardInfo_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Obj::_MSG_ReqBuyVIPCard_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Obj::_MSG_RetBuyVIPCard_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Obj::_MSG_ReqAcepVIPCardPrize_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Obj::_MSG_RetAcepVIPCardPrize_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Obj::_MSG_ReqRaffVIPCardPrize_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Obj::_MSG_RetRaffVIPCardPrize_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Obj::_MSG_ReqCurrencyExchange_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Obj::_MSG_RetCurrencyExchange_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Obj::_MSG_ReqTransMoney_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Obj::_MSG_ReqFixUpDurability_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Obj::_MSG_ReqUseCapsule_CS_default_instance_),
};

const char descriptor_table_protodef_object_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014object.proto\022\003Obj\"\330\010\n\tEquipData\022\021\n\twea"
  "ponatt\030\001 \001(\r\022\014\n\004pdam\030\002 \001(\r\022\014\n\004mdam\030\003 \001(\r"
  "\022\014\n\004pdef\030\004 \001(\r\022\014\n\004mdef\030\005 \001(\r\022\r\n\005maxhp\030\006 "
  "\001(\r\022\013\n\003str\030\007 \001(\r\022\013\n\003dex\030\010 \001(\r\022\r\n\005intel\030\t"
  " \001(\r\022\013\n\003phy\030\n \001(\r\022\014\n\004bang\030\013 \001(\r\022\021\n\ttough"
  "ness\030\014 \001(\r\022\r\n\005block\030\r \001(\r\022\021\n\tpenetrate\030\016"
  " \001(\r\022\020\n\010accurate\030\017 \001(\r\022\014\n\004hold\030\020 \001(\r\022\017\n\007"
  "deflect\030\021 \001(\r\022\027\n\017bangextradamage\030\022 \001(\r\022\035"
  "\n\025toughnessreducedamage\030\023 \001(\r\022\031\n\021blockre"
  "ducedamage\030\024 \001(\r\022\034\n\024penetrateextradamage"
  "\030\025 \001(\r\022\033\n\023accurateextradamage\030\026 \001(\r\022\030\n\020h"
  "oldreducedamage\030\027 \001(\r\022\033\n\023deflectreduceda"
  "mage\030\030 \001(\r\022\r\n\005maxmp\030\031 \001(\r\022\014\n\004miss\030\032 \001(\r\022"
  "\013\n\003hit\030\033 \001(\r\022\023\n\013firemastery\030\034 \001(\r\022\022\n\nice"
  "mastery\030\035 \001(\r\022\030\n\020lightningmastery\030\036 \001(\r\022"
  "\025\n\rbrightmastery\030\037 \001(\r\022\023\n\013darkmastery\030  "
  "\001(\r\022\022\n\nfireresist\030! \001(\r\022\021\n\ticeresist\030\" \001"
  "(\r\022\027\n\017lightningresist\030# \001(\r\022\024\n\014brightres"
  "ist\030$ \001(\r\022\022\n\ndarkresist\030% \001(\r\022\017\n\007firepen"
  "\030& \001(\r\022\016\n\006icepen\030\' \001(\r\022\024\n\014lightningpen\030("
  " \001(\r\022\021\n\tbrightpen\030) \001(\r\022\017\n\007darkpen\030* \001(\r"
  "\022\017\n\007blowint\030+ \001(\r\022\020\n\010knockint\030, \001(\r\022\020\n\010f"
  "loatint\030- \001(\r\022\023\n\013superhitint\030. \001(\r\022\022\n\nbl"
  "owresist\030/ \001(\r\022\023\n\013knockresist\0300 \001(\r\022\023\n\013f"
  "loatresist\0301 \001(\r\022\026\n\016superhitresist\0302 \001(\r"
  "\022\024\n\014stiffaddtime\0303 \001(\r\022\024\n\014stiffdectime\0304"
  " \001(\r\022\023\n\013blowdectime\0305 \001(\r\022\024\n\014knockdectim"
  "e\0306 \001(\r\022\024\n\014floatdectime\0307 \001(\r\022\027\n\017superhi"
  "tdectime\0308 \001(\r\"I\n\rEquipRandInfo\022\035\n\004type\030"
  "\001 \001(\0162\017.Obj.Equip8Prop\022\n\n\002id\030\002 \001(\r\022\r\n\005va"
  "lue\030\003 \001(\r\"M\n\016CardEffectItem\022\n\n\002id\030\001 \001(\r\022"
  "\017\n\007trigger\030\002 \001(\r\022\r\n\005value\030\003 \001(\r\022\017\n\007varna"
  "me\030\004 \001(\t\"\251\001\n\010CardData\022\020\n\010cardtype\030\001 \001(\r\022"
  "\020\n\010cardstar\030\002 \001(\r\022\021\n\tcardgroup\030\003 \001(\r\022(\n\013"
  "base_effect\030\004 \003(\0132\023.Obj.CardEffectItem\022("
  "\n\013rand_effect\030\005 \003(\0132\023.Obj.CardEffectItem"
  "\022\022\n\ndurability\030\006 \001(\r\"\215\003\n\010t_Object\022\016\n\006bas"
  "eid\030\001 \001(\r\022\016\n\006thisid\030\002 \001(\t\022\035\n\004type\030\003 \001(\0162"
  "\017.Obj.ObjectType\022\037\n\010packtype\030\004 \001(\0162\r.Obj"
  ".PackType\022\014\n\004name\030\005 \001(\t\022\013\n\003num\030\006 \001(\r\022\014\n\004"
  "bind\030\007 \001(\r\022\016\n\006grid_x\030\010 \001(\r\022\016\n\006grid_y\030\t \001"
  "(\r\022\017\n\007quality\030\n \001(\r\022\r\n\005level\030\013 \001(\r\022\r\n\005ti"
  "mer\030\014 \001(\r\022!\n\tequipprop\030\r \001(\0132\016.Obj.Equip"
  "Data\022%\n\tequiprand\030\016 \003(\0132\022.Obj.EquipRandI"
  "nfo\022\023\n\013nextusetime\030\017 \001(\r\022 \n\tcard_data\030\020 "
  "\001(\0132\r.Obj.CardData\022\025\n\rlock_end_time\030\021 \001("
  "\r\022\021\n\ttradetime\030\022 \001(\r\")\n\tPrizeBase\022\n\n\002id\030"
  "\001 \001(\r\022\020\n\010quantity\030\002 \001(\r\"\235\001\n\013VIPCardInfo\022"
  "\022\n\nremaintime\030\001 \001(\004\022\021\n\traffcount\030\002 \001(\r\022\027"
  "\n\017total_raffcount\030\003 \001(\r\022\026\n\016dayprize_stat"
  "e\030\004 \001(\r\022 \n\010arrprize\030\005 \003(\0132\016.Obj.PrizeBas"
  "e\022\024\n\014objraffcount\030\006 \001(\r\"Q\n\022MSG_RefreshOb"
  "js_SC\022\033\n\004objs\030\001 \003(\0132\r.Obj.t_Object\022\036\n\020sh"
  "ow_addnew_anim\030\002 \001(\010:\004true\"\243\001\n\017MSG_PackD"
  "ata_SC\022\037\n\010packtype\030\001 \002(\0162\r.Obj.PackType\022"
  "\r\n\005width\030\002 \001(\r\022\016\n\006height\030\003 \001(\r\022\021\n\tvalids"
  "ize\030\004 \001(\r\022(\n\007objects\030\005 \001(\0132\027.Obj.MSG_Ref"
  "reshObjs_SC\022\023\n\013unlockcount\030\006 \001(\r\"\"\n\020MSG_"
  "WearEquip_CS\022\016\n\006thisid\030\001 \001(\t\"\"\n\020MSG_Wear"
  "Equip_SC\022\016\n\006thisid\030\001 \001(\t\"\"\n\023MSG_RemoveOb"
  "ject_SC\022\013\n\003ids\030\001 \003(\t\"$\n\022MSG_UnwearEquip_"
  "CS\022\016\n\006thisid\030\001 \001(\t\"$\n\022MSG_UnwearEquip_SC"
  "\022\016\n\006thisid\030\001 \001(\t\"\034\n\032MSG_ReqCheckItemDueT"
  "ime_CS\"5\n\023MSG_ReqUseObject_CS\022\016\n\006thisid\030"
  "\001 \001(\t\022\016\n\003num\030\002 \001(\r:\0011\"h\n\033MSG_ReqUseObjec"
  "t_Special_CS\022\016\n\006thisid\030\001 \001(\t\022\016\n\003num\030\002 \001("
  "\r:\0011\022\r\n\005npcid\030\003 \001(\004\022\014\n\004posx\030\004 \001(\002\022\014\n\004pos"
  "y\030\005 \001(\002\"4\n\021MSG_PackUnlock_CS\022\037\n\010packtype"
  "\030\001 \002(\0162\r.Obj.PackType\"j\n\021MSG_PackUnlock_"
  "SC\022\037\n\010packtype\030\001 \002(\0162\r.Obj.PackType\022\023\n\013u"
  "nlockcount\030\002 \001(\r\022\017\n\007maxsize\030\003 \001(\r\022\016\n\006res"
  "ult\030\004 \001(\010\"\200\001\n\020MSG_MergeObjs_CS\022\037\n\010packty"
  "pe\030\001 \002(\0162\r.Obj.PackType\022\022\n\nsrcthisids\030\002 "
  "\003(\t\022\022\n\ndstthisids\030\003 \003(\t\022#\n\014dst_packtype\030"
  "\004 \001(\0162\r.Obj.PackType\"h\n\020MSG_MergeObjs_SC"
  "\022\037\n\010packtype\030\001 \002(\0162\r.Obj.PackType\022\016\n\006res"
  "ult\030\002 \001(\010\022#\n\014dst_packtype\030\003 \001(\0162\r.Obj.Pa"
  "ckType\"@\n\016t_TidyPackInfo\022\016\n\006thisid\030\001 \001(\t"
  "\022\016\n\006grid_x\030\002 \001(\r\022\016\n\006grid_y\030\003 \001(\r\"V\n\017MSG_"
  "TidyPack_CS\022\037\n\010packtype\030\001 \002(\0162\r.Obj.Pack"
  "Type\022\"\n\005infos\030\002 \003(\0132\023.Obj.t_TidyPackInfo"
  "\"B\n\017MSG_TidyPack_SC\022\037\n\010packtype\030\001 \002(\0162\r."
  "Obj.PackType\022\016\n\006result\030\002 \001(\010\"F\n\024MSG_ReqS"
  "ellObject_CS\022\016\n\006thisid\030\001 \001(\t\022\016\n\003num\030\002 \001("
  "\r:\0011\022\016\n\006passwd\030\003 \001(\t\"\214\001\n\024MSG_ReqMoveObje"
  "ct_CS\022\016\n\006thisid\030\001 \001(\t\022\016\n\006grid_x\030\002 \001(\r\022\016\n"
  "\006grid_y\030\003 \001(\r\022\037\n\010packtype\030\004 \002(\0162\r.Obj.Pa"
  "ckType\022#\n\014dst_packtype\030\005 \001(\0162\r.Obj.PackT"
  "ype\"\204\001\n\024MSG_ReqSwapObject_CS\022\022\n\nsrc_this"
  "id\030\001 \001(\t\022\022\n\ndst_thisid\030\002 \001(\t\022#\n\014dst_pack"
  "type\030\003 \001(\0162\r.Obj.PackType\022\037\n\010packtype\030\004 "
  "\002(\0162\r.Obj.PackType\"Z\n\027MSG_ReqDestroyObje"
  "ct_CS\022\016\n\006thisid\030\001 \001(\t\022\037\n\010packtype\030\002 \002(\0162"
  "\r.Obj.PackType\022\016\n\006passwd\030\003 \001(\t\"f\n\023MSG_Re"
  "qPutOnCard_CS\022\016\n\006thisid\030\001 \001(\t\022\016\n\006grid_x\030"
  "\002 \001(\r\022\016\n\006grid_y\030\003 \001(\r\022\037\n\010packtype\030\004 \001(\0162"
  "\r.Obj.PackType\"F\n\024MSG_ReqPutOffCard_CS\022\016"
  "\n\006thisid\030\001 \001(\t\022\016\n\006grid_x\030\002 \001(\r\022\016\n\006grid_y"
  "\030\003 \001(\r\"<\n\022MSG_ReqSwapCard_CS\022\022\n\nsrc_this"
  "id\030\001 \001(\t\022\022\n\ndst_thisid\030\002 \001(\t\"\030\n\026MSG_ReqC"
  "ardPackInfo_CS\"\277\001\n\014CardPackInfo\022\027\n\017gold_"
  "opened_num\030\001 \001(\r\022\027\n\017wood_opened_num\030\002 \001("
  "\r\022\030\n\020water_opened_num\030\003 \001(\r\022\027\n\017fire_open"
  "ed_num\030\004 \001(\r\022\030\n\020earth_opened_num\030\005 \001(\r\022\023"
  "\n\013hero_baseid\030\006 \001(\r\022\033\n\004objs\030\007 \003(\0132\r.Obj."
  "t_Object\"9\n\026MSG_RetCardPackInfo_SC\022\037\n\004da"
  "ta\030\001 \001(\0132\021.Obj.CardPackInfo\"U\n\025MSG_ReqSp"
  "litObject_CS\022\016\n\006thisid\030\001 \001(\t\022\013\n\003num\030\002 \001("
  "\r\022\037\n\010packtype\030\003 \001(\0162\r.Obj.PackType\"g\n\024MS"
  "G_ReqOpItemLock_CS\022\016\n\006thisid\030\001 \001(\t\022\037\n\010pa"
  "cktype\030\002 \001(\0162\r.Obj.PackType\022\016\n\006opcode\030\003 "
  "\001(\r\022\016\n\006passwd\030\004 \001(\t\"\032\n\030MSG_ReqGetVIPCard"
  "Info_CS\"A\n\030MSG_RetGetVIPCardInfo_SC\022%\n\013v"
  "ipcardinfo\030\001 \001(\0132\020.Obj.VIPCardInfo\"8\n\024MS"
  "G_ReqBuyVIPCard_CS\022\016\n\006cardid\030\001 \001(\r\022\020\n\005co"
  "unt\030\002 \001(\r:\0011\"=\n\024MSG_RetBuyVIPCard_SC\022%\n\013"
  "vipcardinfo\030\001 \001(\0132\020.Obj.VIPCardInfo\"\034\n\032M"
  "SG_ReqAcepVIPCardPrize_CS\"C\n\032MSG_RetAcep"
  "VIPCardPrize_SC\022%\n\013vipcardinfo\030\001 \001(\0132\020.O"
  "bj.VIPCardInfo\"\?\n\032MSG_ReqRaffVIPCardPriz"
  "e_CS\022!\n\007usetype\030\001 \001(\0162\020.Obj.RaffUseType\""
  "a\n\032MSG_RetRaffVIPCardPrize_SC\022%\n\013vipcard"
  "info\030\001 \001(\0132\020.Obj.VIPCardInfo\022\n\n\002id\030\002 \001(\r"
  "\022\020\n\010quantity\030\003 \001(\r\"1\n\032MSG_ReqCurrencyExc"
  "hange_CS\022\023\n\013usequantity\030\001 \001(\r\",\n\032MSG_Ret"
  "CurrencyExchange_SC\022\016\n\006result\030\001 \001(\r\"\202\001\n\024"
  "MSG_ReqTransMoney_CS\022\037\n\010packtype\030\001 \001(\0162\r"
  ".Obj.PackType\022#\n\014dst_packtype\030\002 \001(\0162\r.Ob"
  "j.PackType\022\022\n\nresourceID\030\003 \001(\r\022\020\n\010quanti"
  "ty\030\004 \001(\r\"L\n\031MSG_ReqFixUpDurability_CS\022\037\n"
  "\010packtype\030\001 \001(\0162\r.Obj.PackType\022\016\n\006thisid"
  "\030\002 \001(\t\"&\n\024MSG_ReqUseCapsule_CS\022\016\n\006thisid"
  "\030\001 \001(\t*\207\002\n\010PackType\022\022\n\016PACK_TYPE_NONE\020\000\022"
  "\022\n\016PACK_TYPE_MAIN\020\001\022\023\n\017PACK_TYPE_EQUIP\020\002"
  "\022\023\n\017PACK_TYPE_QUEST\020\003\022\027\n\023PACK_TYPE_HERO_"
  "CARD\020\004\022\030\n\024PACK_TYPE_WAREHOUSE1\020\005\022\030\n\024PACK"
  "_TYPE_WAREHOUSE2\020\006\022\030\n\024PACK_TYPE_WAREHOUS"
  "E3\020\007\022\030\n\024PACK_TYPE_WAREHOUSE4\020\010\022\025\n\021PACK_T"
  "YPE_CPASULE\020\t\022\021\n\rPACK_TYPE_MAX\020\n*(\n\013Spec"
  "ialType\022\031\n\024EQUIP_CAREER_NOLIMIT\020\347\007*\274\007\n\nO"
  "bjectType\022\026\n\022OBJTYPE_WEAPON_NPC\020\000\022\026\n\022OBJ"
  "TYPE_WEAPON_MIN\020\001\022\030\n\024OBJTYPE_SINGLE_SWOR"
  "D\020\001\022\026\n\022OBJTYPE_TWO_DAGGER\020\002\022\035\n\031OBJTYPE_D"
  "OUBLE_GREATSWORD\020\003\022\026\n\022OBJTYPE_MAGIC_BALL"
  "\020\004\022\026\n\022OBJTYPE_WEAPON_MAX\020\024\022\025\n\021OBJTYPE_EQ"
  "UIP_MIN\020\025\022\026\n\022OBJTYPE_EQUIP_HEAD\020\025\022\032\n\026OBJ"
  "TYPE_EQUIP_SHOULDER\020\026\022\027\n\023OBJTYPE_EQUIP_C"
  "HEST\020\027\022\026\n\022OBJTYPE_EQUIP_HAND\020\030\022\027\n\023OBJTYP"
  "E_EQUIP_WAIST\020\031\022\025\n\021OBJTYPE_EQUIP_LEG\020\032\022\026"
  "\n\022OBJTYPE_EQUIP_FOOT\020\033\022\026\n\022OBJTYPE_EQUIP_"
  "NECK\020\034\022\033\n\027OBJTYPE_EQUIP_ACCESSORY\020\035\022\030\n\024O"
  "BJTYPE_EQUIP_WEAPON\020\036\022\025\n\021OBJTYPE_EQUIP_M"
  "AX\020\037\022\017\n\013OBJTYPE_RES\020)\022\024\n\020OBJTYPE_SPET_EX"
  "P\020*\022\026\n\022OBJTYPE_FRIENDOATH\020+\022\021\n\rOBJTYPE_Q"
  "UEST\020-\022\017\n\013OBJTYPE_PET\020.\022\024\n\020OBJTYPE_GIFT_"
  "BAG\020/\022\023\n\017OBJTYPE_CAN_USE\0200\022\020\n\014OBJTYPE_HE"
  "RO\0201\022\020\n\014OBJTYPE_RUNE\0202\022\026\n\022OBJTYPE_RING_Q"
  "UEST\0203\022\032\n\026OBJTYPE_TREASURE_RADAR\0204\022\020\n\014OB"
  "JTYPE_CARD\0205\022\022\n\016OBJTYPE_QUEST2\020<\022\017\n\013OBJT"
  "YPE_DNA\020=\022\020\n\014OBJTYPE_DNA2\020>\022\035\n\031OBJTYPE_C"
  "LEAR_BATTLESTATE\020\?\022\021\n\rOBJTYPE_SKILL\020@\022\025\n"
  "\021OBJTYPE_EVOLUTION\020A\022\022\n\016OBJTYPE_AVATAR\020B"
  "\022\035\n\031OBJTYPE_NORMAL_ITEM_QUEST\020C\022\023\n\017OBJTY"
  "PE_CAPSULE\020D\022\017\n\013OBJTYPE_MAX\020E\032\002\020\001*z\n\010Obj"
  "ectId\022\022\n\016APPRENT_LETTER\020g\022\021\n\rVATALITY_PI"
  "LL\020l\022\030\n\024REMOVE_ERROR_CAPSULE\020m\022\033\n\027INTELL"
  "ECTUALITY_CAPSULE\020n\022\020\n\014TIME_CAPSULE\020o*\347\001"
  "\n\tEquipType\022\016\n\nEQUIP_HEAD\020\000\022\022\n\016EQUIP_SHO"
  "ULDER\020\001\022\017\n\013EQUIP_CHEST\020\002\022\016\n\nEQUIP_HAND\020\003"
  "\022\017\n\013EQUIP_WAIST\020\004\022\r\n\tEQUIP_LEG\020\005\022\016\n\nEQUI"
  "P_FOOT\020\006\022\016\n\nEQUIP_NECK\020\007\022\025\n\021EQUIP_ACCESS"
  "ORY_1\020\010\022\025\n\021EQUIP_ACCESSORY_2\020\t\022\020\n\014EQUIP_"
  "WEAPON\020\n\022\025\n\021EQUIP_INVALID_POS\020\013*@\n\013RaffU"
  "seType\022\031\n\025RAFFUSETYPE_FREETIMES\020\000\022\026\n\022RAF"
  "FUSETYPE_OBJECT\020\001*|\n\nEquip8Prop\022\016\n\nBASIC"
  "_PROP\020\001\022\n\n\006PROP_1\020\002\022\n\n\006PROP_2\020\003\022\014\n\010SUFFI"
  "X_1\020\004\022\014\n\010SUFFIX_2\020\005\022\014\n\010SUFFIX_3\020\006\022\014\n\010SUF"
  "FIX_4\020\007\022\016\n\nFIXED_PROP\020\010"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_object_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_object_2eproto_sccs[49] = {
  &scc_info_CardData_object_2eproto.base,
  &scc_info_CardEffectItem_object_2eproto.base,
  &scc_info_CardPackInfo_object_2eproto.base,
  &scc_info_EquipData_object_2eproto.base,
  &scc_info_EquipRandInfo_object_2eproto.base,
  &scc_info_MSG_MergeObjs_CS_object_2eproto.base,
  &scc_info_MSG_MergeObjs_SC_object_2eproto.base,
  &scc_info_MSG_PackData_SC_object_2eproto.base,
  &scc_info_MSG_PackUnlock_CS_object_2eproto.base,
  &scc_info_MSG_PackUnlock_SC_object_2eproto.base,
  &scc_info_MSG_RefreshObjs_SC_object_2eproto.base,
  &scc_info_MSG_RemoveObject_SC_object_2eproto.base,
  &scc_info_MSG_ReqAcepVIPCardPrize_CS_object_2eproto.base,
  &scc_info_MSG_ReqBuyVIPCard_CS_object_2eproto.base,
  &scc_info_MSG_ReqCardPackInfo_CS_object_2eproto.base,
  &scc_info_MSG_ReqCheckItemDueTime_CS_object_2eproto.base,
  &scc_info_MSG_ReqCurrencyExchange_CS_object_2eproto.base,
  &scc_info_MSG_ReqDestroyObject_CS_object_2eproto.base,
  &scc_info_MSG_ReqFixUpDurability_CS_object_2eproto.base,
  &scc_info_MSG_ReqGetVIPCardInfo_CS_object_2eproto.base,
  &scc_info_MSG_ReqMoveObject_CS_object_2eproto.base,
  &scc_info_MSG_ReqOpItemLock_CS_object_2eproto.base,
  &scc_info_MSG_ReqPutOffCard_CS_object_2eproto.base,
  &scc_info_MSG_ReqPutOnCard_CS_object_2eproto.base,
  &scc_info_MSG_ReqRaffVIPCardPrize_CS_object_2eproto.base,
  &scc_info_MSG_ReqSellObject_CS_object_2eproto.base,
  &scc_info_MSG_ReqSplitObject_CS_object_2eproto.base,
  &scc_info_MSG_ReqSwapCard_CS_object_2eproto.base,
  &scc_info_MSG_ReqSwapObject_CS_object_2eproto.base,
  &scc_info_MSG_ReqTransMoney_CS_object_2eproto.base,
  &scc_info_MSG_ReqUseCapsule_CS_object_2eproto.base,
  &scc_info_MSG_ReqUseObject_CS_object_2eproto.base,
  &scc_info_MSG_ReqUseObject_Special_CS_object_2eproto.base,
  &scc_info_MSG_RetAcepVIPCardPrize_SC_object_2eproto.base,
  &scc_info_MSG_RetBuyVIPCard_SC_object_2eproto.base,
  &scc_info_MSG_RetCardPackInfo_SC_object_2eproto.base,
  &scc_info_MSG_RetCurrencyExchange_SC_object_2eproto.base,
  &scc_info_MSG_RetGetVIPCardInfo_SC_object_2eproto.base,
  &scc_info_MSG_RetRaffVIPCardPrize_SC_object_2eproto.base,
  &scc_info_MSG_TidyPack_CS_object_2eproto.base,
  &scc_info_MSG_TidyPack_SC_object_2eproto.base,
  &scc_info_MSG_UnwearEquip_CS_object_2eproto.base,
  &scc_info_MSG_UnwearEquip_SC_object_2eproto.base,
  &scc_info_MSG_WearEquip_CS_object_2eproto.base,
  &scc_info_MSG_WearEquip_SC_object_2eproto.base,
  &scc_info_PrizeBase_object_2eproto.base,
  &scc_info_VIPCardInfo_object_2eproto.base,
  &scc_info_t_Object_object_2eproto.base,
  &scc_info_t_TidyPackInfo_object_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_object_2eproto_once;
static bool descriptor_table_object_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_object_2eproto = {
  &descriptor_table_object_2eproto_initialized, descriptor_table_protodef_object_2eproto, "object.proto", 7103,
  &descriptor_table_object_2eproto_once, descriptor_table_object_2eproto_sccs, descriptor_table_object_2eproto_deps, 49, 0,
  schemas, file_default_instances, TableStruct_object_2eproto::offsets,
  file_level_metadata_object_2eproto, 49, file_level_enum_descriptors_object_2eproto, file_level_service_descriptors_object_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_object_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_object_2eproto)), true);
namespace Obj {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PackType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_object_2eproto);
  return file_level_enum_descriptors_object_2eproto[0];
}
bool PackType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SpecialType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_object_2eproto);
  return file_level_enum_descriptors_object_2eproto[1];
}
bool SpecialType_IsValid(int value) {
  switch (value) {
    case 999:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObjectType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_object_2eproto);
  return file_level_enum_descriptors_object_2eproto[2];
}
bool ObjectType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 41:
    case 42:
    case 43:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObjectId_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_object_2eproto);
  return file_level_enum_descriptors_object_2eproto[3];
}
bool ObjectId_IsValid(int value) {
  switch (value) {
    case 103:
    case 108:
    case 109:
    case 110:
    case 111:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EquipType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_object_2eproto);
  return file_level_enum_descriptors_object_2eproto[4];
}
bool EquipType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RaffUseType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_object_2eproto);
  return file_level_enum_descriptors_object_2eproto[5];
}
bool RaffUseType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Equip8Prop_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_object_2eproto);
  return file_level_enum_descriptors_object_2eproto[6];
}
bool Equip8Prop_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void EquipData::InitAsDefaultInstance() {
}
class EquipData::_Internal {
 public:
  using HasBits = decltype(std::declval<EquipData>()._has_bits_);
  static void set_has_weaponatt(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pdam(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mdam(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pdef(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_mdef(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_maxhp(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_str(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_dex(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_intel(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_phy(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_bang(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_toughness(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_block(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_penetrate(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_accurate(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_hold(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_deflect(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_bangextradamage(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_toughnessreducedamage(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_blockreducedamage(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_penetrateextradamage(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_accurateextradamage(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_holdreducedamage(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_deflectreducedamage(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_maxmp(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_miss(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_hit(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_firemastery(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_icemastery(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_lightningmastery(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_brightmastery(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_darkmastery(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_fireresist(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_iceresist(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_lightningresist(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_brightresist(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_darkresist(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_firepen(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_icepen(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_lightningpen(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_brightpen(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_darkpen(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_blowint(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_knockint(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_floatint(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_superhitint(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_blowresist(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static void set_has_knockresist(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static void set_has_floatresist(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static void set_has_superhitresist(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
  static void set_has_stiffaddtime(HasBits* has_bits) {
    (*has_bits)[1] |= 262144u;
  }
  static void set_has_stiffdectime(HasBits* has_bits) {
    (*has_bits)[1] |= 524288u;
  }
  static void set_has_blowdectime(HasBits* has_bits) {
    (*has_bits)[1] |= 1048576u;
  }
  static void set_has_knockdectime(HasBits* has_bits) {
    (*has_bits)[1] |= 2097152u;
  }
  static void set_has_floatdectime(HasBits* has_bits) {
    (*has_bits)[1] |= 4194304u;
  }
  static void set_has_superhitdectime(HasBits* has_bits) {
    (*has_bits)[1] |= 8388608u;
  }
};

EquipData::EquipData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Obj.EquipData)
}
EquipData::EquipData(const EquipData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&weaponatt_, &from.weaponatt_,
    static_cast<size_t>(reinterpret_cast<char*>(&superhitdectime_) -
    reinterpret_cast<char*>(&weaponatt_)) + sizeof(superhitdectime_));
  // @@protoc_insertion_point(copy_constructor:Obj.EquipData)
}

void EquipData::SharedCtor() {
  ::memset(&weaponatt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&superhitdectime_) -
      reinterpret_cast<char*>(&weaponatt_)) + sizeof(superhitdectime_));
}

EquipData::~EquipData() {
  // @@protoc_insertion_point(destructor:Obj.EquipData)
  SharedDtor();
}

void EquipData::SharedDtor() {
}

void EquipData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EquipData& EquipData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EquipData_object_2eproto.base);
  return *internal_default_instance();
}


void EquipData::Clear() {
// @@protoc_insertion_point(message_clear_start:Obj.EquipData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&weaponatt_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dex_) -
        reinterpret_cast<char*>(&weaponatt_)) + sizeof(dex_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&intel_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hold_) -
        reinterpret_cast<char*>(&intel_)) + sizeof(hold_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&deflect_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&deflectreducedamage_) -
        reinterpret_cast<char*>(&deflect_)) + sizeof(deflectreducedamage_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&maxmp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&darkmastery_) -
        reinterpret_cast<char*>(&maxmp_)) + sizeof(darkmastery_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&fireresist_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lightningpen_) -
        reinterpret_cast<char*>(&fireresist_)) + sizeof(lightningpen_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&brightpen_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&knockresist_) -
        reinterpret_cast<char*>(&brightpen_)) + sizeof(knockresist_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&floatresist_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&superhitdectime_) -
        reinterpret_cast<char*>(&floatresist_)) + sizeof(superhitdectime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* EquipData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 weaponatt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_weaponatt(&_has_bits_);
          weaponatt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pdam = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_pdam(&_has_bits_);
          pdam_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 mdam = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_mdam(&_has_bits_);
          mdam_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pdef = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_pdef(&_has_bits_);
          pdef_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 mdef = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_mdef(&_has_bits_);
          mdef_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 maxhp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_maxhp(&_has_bits_);
          maxhp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 str = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_str(&_has_bits_);
          str_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 dex = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_dex(&_has_bits_);
          dex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 intel = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_intel(&_has_bits_);
          intel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 phy = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_phy(&_has_bits_);
          phy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 bang = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_bang(&_has_bits_);
          bang_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 toughness = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_toughness(&_has_bits_);
          toughness_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 block = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_block(&_has_bits_);
          block_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 penetrate = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_penetrate(&_has_bits_);
          penetrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 accurate = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_accurate(&_has_bits_);
          accurate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hold = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_hold(&_has_bits_);
          hold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 deflect = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_deflect(&_has_bits_);
          deflect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 bangextradamage = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_bangextradamage(&_has_bits_);
          bangextradamage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 toughnessreducedamage = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_toughnessreducedamage(&_has_bits_);
          toughnessreducedamage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 blockreducedamage = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_blockreducedamage(&_has_bits_);
          blockreducedamage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 penetrateextradamage = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_penetrateextradamage(&_has_bits_);
          penetrateextradamage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 accurateextradamage = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_accurateextradamage(&_has_bits_);
          accurateextradamage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 holdreducedamage = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_holdreducedamage(&_has_bits_);
          holdreducedamage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 deflectreducedamage = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_deflectreducedamage(&_has_bits_);
          deflectreducedamage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 maxmp = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_maxmp(&_has_bits_);
          maxmp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 miss = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_miss(&_has_bits_);
          miss_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hit = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_hit(&_has_bits_);
          hit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 firemastery = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_firemastery(&_has_bits_);
          firemastery_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 icemastery = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_icemastery(&_has_bits_);
          icemastery_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 lightningmastery = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_lightningmastery(&_has_bits_);
          lightningmastery_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 brightmastery = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_brightmastery(&_has_bits_);
          brightmastery_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 darkmastery = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_darkmastery(&_has_bits_);
          darkmastery_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 fireresist = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_fireresist(&_has_bits_);
          fireresist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 iceresist = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_iceresist(&_has_bits_);
          iceresist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 lightningresist = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_lightningresist(&_has_bits_);
          lightningresist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 brightresist = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_brightresist(&_has_bits_);
          brightresist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 darkresist = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_darkresist(&_has_bits_);
          darkresist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 firepen = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_firepen(&_has_bits_);
          firepen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 icepen = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_icepen(&_has_bits_);
          icepen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 lightningpen = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_lightningpen(&_has_bits_);
          lightningpen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 brightpen = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_brightpen(&_has_bits_);
          brightpen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 darkpen = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_darkpen(&_has_bits_);
          darkpen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 blowint = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_blowint(&_has_bits_);
          blowint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 knockint = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_knockint(&_has_bits_);
          knockint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 floatint = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_floatint(&_has_bits_);
          floatint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 superhitint = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_superhitint(&_has_bits_);
          superhitint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 blowresist = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_blowresist(&_has_bits_);
          blowresist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 knockresist = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_knockresist(&_has_bits_);
          knockresist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 floatresist = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_floatresist(&_has_bits_);
          floatresist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 superhitresist = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_superhitresist(&_has_bits_);
          superhitresist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 stiffaddtime = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_stiffaddtime(&_has_bits_);
          stiffaddtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 stiffdectime = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_stiffdectime(&_has_bits_);
          stiffdectime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 blowdectime = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_blowdectime(&_has_bits_);
          blowdectime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 knockdectime = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_knockdectime(&_has_bits_);
          knockdectime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 floatdectime = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_floatdectime(&_has_bits_);
          floatdectime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 superhitdectime = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_superhitdectime(&_has_bits_);
          superhitdectime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EquipData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Obj.EquipData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 weaponatt = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_weaponatt(), target);
  }

  // optional uint32 pdam = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pdam(), target);
  }

  // optional uint32 mdam = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_mdam(), target);
  }

  // optional uint32 pdef = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_pdef(), target);
  }

  // optional uint32 mdef = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_mdef(), target);
  }

  // optional uint32 maxhp = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_maxhp(), target);
  }

  // optional uint32 str = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_str(), target);
  }

  // optional uint32 dex = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_dex(), target);
  }

  // optional uint32 intel = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_intel(), target);
  }

  // optional uint32 phy = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_phy(), target);
  }

  // optional uint32 bang = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_bang(), target);
  }

  // optional uint32 toughness = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_toughness(), target);
  }

  // optional uint32 block = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_block(), target);
  }

  // optional uint32 penetrate = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_penetrate(), target);
  }

  // optional uint32 accurate = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_accurate(), target);
  }

  // optional uint32 hold = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_hold(), target);
  }

  // optional uint32 deflect = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_deflect(), target);
  }

  // optional uint32 bangextradamage = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_bangextradamage(), target);
  }

  // optional uint32 toughnessreducedamage = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_toughnessreducedamage(), target);
  }

  // optional uint32 blockreducedamage = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_blockreducedamage(), target);
  }

  // optional uint32 penetrateextradamage = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_penetrateextradamage(), target);
  }

  // optional uint32 accurateextradamage = 22;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_accurateextradamage(), target);
  }

  // optional uint32 holdreducedamage = 23;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_holdreducedamage(), target);
  }

  // optional uint32 deflectreducedamage = 24;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_deflectreducedamage(), target);
  }

  // optional uint32 maxmp = 25;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(25, this->_internal_maxmp(), target);
  }

  // optional uint32 miss = 26;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(26, this->_internal_miss(), target);
  }

  // optional uint32 hit = 27;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(27, this->_internal_hit(), target);
  }

  // optional uint32 firemastery = 28;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(28, this->_internal_firemastery(), target);
  }

  // optional uint32 icemastery = 29;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(29, this->_internal_icemastery(), target);
  }

  // optional uint32 lightningmastery = 30;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->_internal_lightningmastery(), target);
  }

  // optional uint32 brightmastery = 31;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(31, this->_internal_brightmastery(), target);
  }

  // optional uint32 darkmastery = 32;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(32, this->_internal_darkmastery(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 fireresist = 33;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(33, this->_internal_fireresist(), target);
  }

  // optional uint32 iceresist = 34;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(34, this->_internal_iceresist(), target);
  }

  // optional uint32 lightningresist = 35;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(35, this->_internal_lightningresist(), target);
  }

  // optional uint32 brightresist = 36;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(36, this->_internal_brightresist(), target);
  }

  // optional uint32 darkresist = 37;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(37, this->_internal_darkresist(), target);
  }

  // optional uint32 firepen = 38;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(38, this->_internal_firepen(), target);
  }

  // optional uint32 icepen = 39;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(39, this->_internal_icepen(), target);
  }

  // optional uint32 lightningpen = 40;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(40, this->_internal_lightningpen(), target);
  }

  // optional uint32 brightpen = 41;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(41, this->_internal_brightpen(), target);
  }

  // optional uint32 darkpen = 42;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(42, this->_internal_darkpen(), target);
  }

  // optional uint32 blowint = 43;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(43, this->_internal_blowint(), target);
  }

  // optional uint32 knockint = 44;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(44, this->_internal_knockint(), target);
  }

  // optional uint32 floatint = 45;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(45, this->_internal_floatint(), target);
  }

  // optional uint32 superhitint = 46;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(46, this->_internal_superhitint(), target);
  }

  // optional uint32 blowresist = 47;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(47, this->_internal_blowresist(), target);
  }

  // optional uint32 knockresist = 48;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(48, this->_internal_knockresist(), target);
  }

  // optional uint32 floatresist = 49;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(49, this->_internal_floatresist(), target);
  }

  // optional uint32 superhitresist = 50;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(50, this->_internal_superhitresist(), target);
  }

  // optional uint32 stiffaddtime = 51;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(51, this->_internal_stiffaddtime(), target);
  }

  // optional uint32 stiffdectime = 52;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(52, this->_internal_stiffdectime(), target);
  }

  // optional uint32 blowdectime = 53;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(53, this->_internal_blowdectime(), target);
  }

  // optional uint32 knockdectime = 54;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(54, this->_internal_knockdectime(), target);
  }

  // optional uint32 floatdectime = 55;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(55, this->_internal_floatdectime(), target);
  }

  // optional uint32 superhitdectime = 56;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(56, this->_internal_superhitdectime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Obj.EquipData)
  return target;
}

size_t EquipData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Obj.EquipData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 weaponatt = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_weaponatt());
    }

    // optional uint32 pdam = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pdam());
    }

    // optional uint32 mdam = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_mdam());
    }

    // optional uint32 pdef = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pdef());
    }

    // optional uint32 mdef = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_mdef());
    }

    // optional uint32 maxhp = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_maxhp());
    }

    // optional uint32 str = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_str());
    }

    // optional uint32 dex = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_dex());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 intel = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_intel());
    }

    // optional uint32 phy = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_phy());
    }

    // optional uint32 bang = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_bang());
    }

    // optional uint32 toughness = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_toughness());
    }

    // optional uint32 block = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_block());
    }

    // optional uint32 penetrate = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_penetrate());
    }

    // optional uint32 accurate = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_accurate());
    }

    // optional uint32 hold = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hold());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 deflect = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_deflect());
    }

    // optional uint32 bangextradamage = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_bangextradamage());
    }

    // optional uint32 toughnessreducedamage = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_toughnessreducedamage());
    }

    // optional uint32 blockreducedamage = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_blockreducedamage());
    }

    // optional uint32 penetrateextradamage = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_penetrateextradamage());
    }

    // optional uint32 accurateextradamage = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_accurateextradamage());
    }

    // optional uint32 holdreducedamage = 23;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_holdreducedamage());
    }

    // optional uint32 deflectreducedamage = 24;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_deflectreducedamage());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional uint32 maxmp = 25;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_maxmp());
    }

    // optional uint32 miss = 26;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_miss());
    }

    // optional uint32 hit = 27;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hit());
    }

    // optional uint32 firemastery = 28;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_firemastery());
    }

    // optional uint32 icemastery = 29;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_icemastery());
    }

    // optional uint32 lightningmastery = 30;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lightningmastery());
    }

    // optional uint32 brightmastery = 31;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_brightmastery());
    }

    // optional uint32 darkmastery = 32;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_darkmastery());
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 fireresist = 33;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fireresist());
    }

    // optional uint32 iceresist = 34;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_iceresist());
    }

    // optional uint32 lightningresist = 35;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lightningresist());
    }

    // optional uint32 brightresist = 36;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_brightresist());
    }

    // optional uint32 darkresist = 37;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_darkresist());
    }

    // optional uint32 firepen = 38;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_firepen());
    }

    // optional uint32 icepen = 39;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_icepen());
    }

    // optional uint32 lightningpen = 40;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lightningpen());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 brightpen = 41;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_brightpen());
    }

    // optional uint32 darkpen = 42;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_darkpen());
    }

    // optional uint32 blowint = 43;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_blowint());
    }

    // optional uint32 knockint = 44;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_knockint());
    }

    // optional uint32 floatint = 45;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_floatint());
    }

    // optional uint32 superhitint = 46;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_superhitint());
    }

    // optional uint32 blowresist = 47;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_blowresist());
    }

    // optional uint32 knockresist = 48;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_knockresist());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 floatresist = 49;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_floatresist());
    }

    // optional uint32 superhitresist = 50;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_superhitresist());
    }

    // optional uint32 stiffaddtime = 51;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_stiffaddtime());
    }

    // optional uint32 stiffdectime = 52;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_stiffdectime());
    }

    // optional uint32 blowdectime = 53;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_blowdectime());
    }

    // optional uint32 knockdectime = 54;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_knockdectime());
    }

    // optional uint32 floatdectime = 55;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_floatdectime());
    }

    // optional uint32 superhitdectime = 56;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_superhitdectime());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EquipData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Obj.EquipData)
  GOOGLE_DCHECK_NE(&from, this);
  const EquipData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EquipData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Obj.EquipData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Obj.EquipData)
    MergeFrom(*source);
  }
}

void EquipData::MergeFrom(const EquipData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Obj.EquipData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      weaponatt_ = from.weaponatt_;
    }
    if (cached_has_bits & 0x00000002u) {
      pdam_ = from.pdam_;
    }
    if (cached_has_bits & 0x00000004u) {
      mdam_ = from.mdam_;
    }
    if (cached_has_bits & 0x00000008u) {
      pdef_ = from.pdef_;
    }
    if (cached_has_bits & 0x00000010u) {
      mdef_ = from.mdef_;
    }
    if (cached_has_bits & 0x00000020u) {
      maxhp_ = from.maxhp_;
    }
    if (cached_has_bits & 0x00000040u) {
      str_ = from.str_;
    }
    if (cached_has_bits & 0x00000080u) {
      dex_ = from.dex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      intel_ = from.intel_;
    }
    if (cached_has_bits & 0x00000200u) {
      phy_ = from.phy_;
    }
    if (cached_has_bits & 0x00000400u) {
      bang_ = from.bang_;
    }
    if (cached_has_bits & 0x00000800u) {
      toughness_ = from.toughness_;
    }
    if (cached_has_bits & 0x00001000u) {
      block_ = from.block_;
    }
    if (cached_has_bits & 0x00002000u) {
      penetrate_ = from.penetrate_;
    }
    if (cached_has_bits & 0x00004000u) {
      accurate_ = from.accurate_;
    }
    if (cached_has_bits & 0x00008000u) {
      hold_ = from.hold_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      deflect_ = from.deflect_;
    }
    if (cached_has_bits & 0x00020000u) {
      bangextradamage_ = from.bangextradamage_;
    }
    if (cached_has_bits & 0x00040000u) {
      toughnessreducedamage_ = from.toughnessreducedamage_;
    }
    if (cached_has_bits & 0x00080000u) {
      blockreducedamage_ = from.blockreducedamage_;
    }
    if (cached_has_bits & 0x00100000u) {
      penetrateextradamage_ = from.penetrateextradamage_;
    }
    if (cached_has_bits & 0x00200000u) {
      accurateextradamage_ = from.accurateextradamage_;
    }
    if (cached_has_bits & 0x00400000u) {
      holdreducedamage_ = from.holdreducedamage_;
    }
    if (cached_has_bits & 0x00800000u) {
      deflectreducedamage_ = from.deflectreducedamage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      maxmp_ = from.maxmp_;
    }
    if (cached_has_bits & 0x02000000u) {
      miss_ = from.miss_;
    }
    if (cached_has_bits & 0x04000000u) {
      hit_ = from.hit_;
    }
    if (cached_has_bits & 0x08000000u) {
      firemastery_ = from.firemastery_;
    }
    if (cached_has_bits & 0x10000000u) {
      icemastery_ = from.icemastery_;
    }
    if (cached_has_bits & 0x20000000u) {
      lightningmastery_ = from.lightningmastery_;
    }
    if (cached_has_bits & 0x40000000u) {
      brightmastery_ = from.brightmastery_;
    }
    if (cached_has_bits & 0x80000000u) {
      darkmastery_ = from.darkmastery_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      fireresist_ = from.fireresist_;
    }
    if (cached_has_bits & 0x00000002u) {
      iceresist_ = from.iceresist_;
    }
    if (cached_has_bits & 0x00000004u) {
      lightningresist_ = from.lightningresist_;
    }
    if (cached_has_bits & 0x00000008u) {
      brightresist_ = from.brightresist_;
    }
    if (cached_has_bits & 0x00000010u) {
      darkresist_ = from.darkresist_;
    }
    if (cached_has_bits & 0x00000020u) {
      firepen_ = from.firepen_;
    }
    if (cached_has_bits & 0x00000040u) {
      icepen_ = from.icepen_;
    }
    if (cached_has_bits & 0x00000080u) {
      lightningpen_ = from.lightningpen_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      brightpen_ = from.brightpen_;
    }
    if (cached_has_bits & 0x00000200u) {
      darkpen_ = from.darkpen_;
    }
    if (cached_has_bits & 0x00000400u) {
      blowint_ = from.blowint_;
    }
    if (cached_has_bits & 0x00000800u) {
      knockint_ = from.knockint_;
    }
    if (cached_has_bits & 0x00001000u) {
      floatint_ = from.floatint_;
    }
    if (cached_has_bits & 0x00002000u) {
      superhitint_ = from.superhitint_;
    }
    if (cached_has_bits & 0x00004000u) {
      blowresist_ = from.blowresist_;
    }
    if (cached_has_bits & 0x00008000u) {
      knockresist_ = from.knockresist_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      floatresist_ = from.floatresist_;
    }
    if (cached_has_bits & 0x00020000u) {
      superhitresist_ = from.superhitresist_;
    }
    if (cached_has_bits & 0x00040000u) {
      stiffaddtime_ = from.stiffaddtime_;
    }
    if (cached_has_bits & 0x00080000u) {
      stiffdectime_ = from.stiffdectime_;
    }
    if (cached_has_bits & 0x00100000u) {
      blowdectime_ = from.blowdectime_;
    }
    if (cached_has_bits & 0x00200000u) {
      knockdectime_ = from.knockdectime_;
    }
    if (cached_has_bits & 0x00400000u) {
      floatdectime_ = from.floatdectime_;
    }
    if (cached_has_bits & 0x00800000u) {
      superhitdectime_ = from.superhitdectime_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void EquipData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Obj.EquipData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipData::CopyFrom(const EquipData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Obj.EquipData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipData::IsInitialized() const {
  return true;
}

void EquipData::InternalSwap(EquipData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  swap(weaponatt_, other->weaponatt_);
  swap(pdam_, other->pdam_);
  swap(mdam_, other->mdam_);
  swap(pdef_, other->pdef_);
  swap(mdef_, other->mdef_);
  swap(maxhp_, other->maxhp_);
  swap(str_, other->str_);
  swap(dex_, other->dex_);
  swap(intel_, other->intel_);
  swap(phy_, other->phy_);
  swap(bang_, other->bang_);
  swap(toughness_, other->toughness_);
  swap(block_, other->block_);
  swap(penetrate_, other->penetrate_);
  swap(accurate_, other->accurate_);
  swap(hold_, other->hold_);
  swap(deflect_, other->deflect_);
  swap(bangextradamage_, other->bangextradamage_);
  swap(toughnessreducedamage_, other->toughnessreducedamage_);
  swap(blockreducedamage_, other->blockreducedamage_);
  swap(penetrateextradamage_, other->penetrateextradamage_);
  swap(accurateextradamage_, other->accurateextradamage_);
  swap(holdreducedamage_, other->holdreducedamage_);
  swap(deflectreducedamage_, other->deflectreducedamage_);
  swap(maxmp_, other->maxmp_);
  swap(miss_, other->miss_);
  swap(hit_, other->hit_);
  swap(firemastery_, other->firemastery_);
  swap(icemastery_, other->icemastery_);
  swap(lightningmastery_, other->lightningmastery_);
  swap(brightmastery_, other->brightmastery_);
  swap(darkmastery_, other->darkmastery_);
  swap(fireresist_, other->fireresist_);
  swap(iceresist_, other->iceresist_);
  swap(lightningresist_, other->lightningresist_);
  swap(brightresist_, other->brightresist_);
  swap(darkresist_, other->darkresist_);
  swap(firepen_, other->firepen_);
  swap(icepen_, other->icepen_);
  swap(lightningpen_, other->lightningpen_);
  swap(brightpen_, other->brightpen_);
  swap(darkpen_, other->darkpen_);
  swap(blowint_, other->blowint_);
  swap(knockint_, other->knockint_);
  swap(floatint_, other->floatint_);
  swap(superhitint_, other->superhitint_);
  swap(blowresist_, other->blowresist_);
  swap(knockresist_, other->knockresist_);
  swap(floatresist_, other->floatresist_);
  swap(superhitresist_, other->superhitresist_);
  swap(stiffaddtime_, other->stiffaddtime_);
  swap(stiffdectime_, other->stiffdectime_);
  swap(blowdectime_, other->blowdectime_);
  swap(knockdectime_, other->knockdectime_);
  swap(floatdectime_, other->floatdectime_);
  swap(superhitdectime_, other->superhitdectime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EquipData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EquipRandInfo::InitAsDefaultInstance() {
}
class EquipRandInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<EquipRandInfo>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

EquipRandInfo::EquipRandInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Obj.EquipRandInfo)
}
EquipRandInfo::EquipRandInfo(const EquipRandInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:Obj.EquipRandInfo)
}

void EquipRandInfo::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&id_)) + sizeof(value_));
  type_ = 1;
}

EquipRandInfo::~EquipRandInfo() {
  // @@protoc_insertion_point(destructor:Obj.EquipRandInfo)
  SharedDtor();
}

void EquipRandInfo::SharedDtor() {
}

void EquipRandInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EquipRandInfo& EquipRandInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EquipRandInfo_object_2eproto.base);
  return *internal_default_instance();
}


void EquipRandInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Obj.EquipRandInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&id_)) + sizeof(value_));
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* EquipRandInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .Obj.Equip8Prop type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Obj::Equip8Prop_IsValid(val))) {
            _internal_set_type(static_cast<::Obj::Equip8Prop>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EquipRandInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Obj.EquipRandInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Obj.Equip8Prop type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional uint32 id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_id(), target);
  }

  // optional uint32 value = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Obj.EquipRandInfo)
  return target;
}

size_t EquipRandInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Obj.EquipRandInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_id());
    }

    // optional uint32 value = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_value());
    }

    // optional .Obj.Equip8Prop type = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EquipRandInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Obj.EquipRandInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const EquipRandInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EquipRandInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Obj.EquipRandInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Obj.EquipRandInfo)
    MergeFrom(*source);
  }
}

void EquipRandInfo::MergeFrom(const EquipRandInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Obj.EquipRandInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EquipRandInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Obj.EquipRandInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipRandInfo::CopyFrom(const EquipRandInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Obj.EquipRandInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipRandInfo::IsInitialized() const {
  return true;
}

void EquipRandInfo::InternalSwap(EquipRandInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
  swap(value_, other->value_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EquipRandInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CardEffectItem::InitAsDefaultInstance() {
}
class CardEffectItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CardEffectItem>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_trigger(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_varname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CardEffectItem::CardEffectItem()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Obj.CardEffectItem)
}
CardEffectItem::CardEffectItem(const CardEffectItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  varname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_varname()) {
    varname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.varname_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&id_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:Obj.CardEffectItem)
}

void CardEffectItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CardEffectItem_object_2eproto.base);
  varname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&id_)) + sizeof(value_));
}

CardEffectItem::~CardEffectItem() {
  // @@protoc_insertion_point(destructor:Obj.CardEffectItem)
  SharedDtor();
}

void CardEffectItem::SharedDtor() {
  varname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CardEffectItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CardEffectItem& CardEffectItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CardEffectItem_object_2eproto.base);
  return *internal_default_instance();
}


void CardEffectItem::Clear() {
// @@protoc_insertion_point(message_clear_start:Obj.CardEffectItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    varname_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&id_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CardEffectItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 trigger = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_trigger(&has_bits);
          trigger_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string varname = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_varname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Obj.CardEffectItem.varname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CardEffectItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Obj.CardEffectItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional uint32 trigger = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_trigger(), target);
  }

  // optional uint32 value = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_value(), target);
  }

  // optional string varname = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_varname().data(), static_cast<int>(this->_internal_varname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Obj.CardEffectItem.varname");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_varname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Obj.CardEffectItem)
  return target;
}

size_t CardEffectItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Obj.CardEffectItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string varname = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_varname());
    }

    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_id());
    }

    // optional uint32 trigger = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_trigger());
    }

    // optional uint32 value = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CardEffectItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Obj.CardEffectItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CardEffectItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CardEffectItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Obj.CardEffectItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Obj.CardEffectItem)
    MergeFrom(*source);
  }
}

void CardEffectItem::MergeFrom(const CardEffectItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Obj.CardEffectItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      varname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.varname_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      trigger_ = from.trigger_;
    }
    if (cached_has_bits & 0x00000008u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CardEffectItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Obj.CardEffectItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CardEffectItem::CopyFrom(const CardEffectItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Obj.CardEffectItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardEffectItem::IsInitialized() const {
  return true;
}

void CardEffectItem::InternalSwap(CardEffectItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  varname_.Swap(&other->varname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(trigger_, other->trigger_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CardEffectItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CardData::InitAsDefaultInstance() {
}
class CardData::_Internal {
 public:
  using HasBits = decltype(std::declval<CardData>()._has_bits_);
  static void set_has_cardtype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cardstar(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cardgroup(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_durability(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CardData::CardData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Obj.CardData)
}
CardData::CardData(const CardData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      base_effect_(from.base_effect_),
      rand_effect_(from.rand_effect_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cardtype_, &from.cardtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&durability_) -
    reinterpret_cast<char*>(&cardtype_)) + sizeof(durability_));
  // @@protoc_insertion_point(copy_constructor:Obj.CardData)
}

void CardData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CardData_object_2eproto.base);
  ::memset(&cardtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&durability_) -
      reinterpret_cast<char*>(&cardtype_)) + sizeof(durability_));
}

CardData::~CardData() {
  // @@protoc_insertion_point(destructor:Obj.CardData)
  SharedDtor();
}

void CardData::SharedDtor() {
}

void CardData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CardData& CardData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CardData_object_2eproto.base);
  return *internal_default_instance();
}


void CardData::Clear() {
// @@protoc_insertion_point(message_clear_start:Obj.CardData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  base_effect_.Clear();
  rand_effect_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&cardtype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&durability_) -
        reinterpret_cast<char*>(&cardtype_)) + sizeof(durability_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CardData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 cardtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_cardtype(&has_bits);
          cardtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 cardstar = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_cardstar(&has_bits);
          cardstar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 cardgroup = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_cardgroup(&has_bits);
          cardgroup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Obj.CardEffectItem base_effect = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_base_effect(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Obj.CardEffectItem rand_effect = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rand_effect(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 durability = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_durability(&has_bits);
          durability_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CardData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Obj.CardData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 cardtype = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_cardtype(), target);
  }

  // optional uint32 cardstar = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cardstar(), target);
  }

  // optional uint32 cardgroup = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_cardgroup(), target);
  }

  // repeated .Obj.CardEffectItem base_effect = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_base_effect_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_base_effect(i), target, stream);
  }

  // repeated .Obj.CardEffectItem rand_effect = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rand_effect_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_rand_effect(i), target, stream);
  }

  // optional uint32 durability = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_durability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Obj.CardData)
  return target;
}

size_t CardData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Obj.CardData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Obj.CardEffectItem base_effect = 4;
  total_size += 1UL * this->_internal_base_effect_size();
  for (const auto& msg : this->base_effect_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Obj.CardEffectItem rand_effect = 5;
  total_size += 1UL * this->_internal_rand_effect_size();
  for (const auto& msg : this->rand_effect_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 cardtype = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cardtype());
    }

    // optional uint32 cardstar = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cardstar());
    }

    // optional uint32 cardgroup = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cardgroup());
    }

    // optional uint32 durability = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_durability());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CardData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Obj.CardData)
  GOOGLE_DCHECK_NE(&from, this);
  const CardData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CardData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Obj.CardData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Obj.CardData)
    MergeFrom(*source);
  }
}

void CardData::MergeFrom(const CardData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Obj.CardData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  base_effect_.MergeFrom(from.base_effect_);
  rand_effect_.MergeFrom(from.rand_effect_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      cardtype_ = from.cardtype_;
    }
    if (cached_has_bits & 0x00000002u) {
      cardstar_ = from.cardstar_;
    }
    if (cached_has_bits & 0x00000004u) {
      cardgroup_ = from.cardgroup_;
    }
    if (cached_has_bits & 0x00000008u) {
      durability_ = from.durability_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CardData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Obj.CardData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CardData::CopyFrom(const CardData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Obj.CardData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardData::IsInitialized() const {
  return true;
}

void CardData::InternalSwap(CardData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  base_effect_.InternalSwap(&other->base_effect_);
  rand_effect_.InternalSwap(&other->rand_effect_);
  swap(cardtype_, other->cardtype_);
  swap(cardstar_, other->cardstar_);
  swap(cardgroup_, other->cardgroup_);
  swap(durability_, other->durability_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CardData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void t_Object::InitAsDefaultInstance() {
  ::Obj::_t_Object_default_instance_._instance.get_mutable()->equipprop_ = const_cast< ::Obj::EquipData*>(
      ::Obj::EquipData::internal_default_instance());
  ::Obj::_t_Object_default_instance_._instance.get_mutable()->card_data_ = const_cast< ::Obj::CardData*>(
      ::Obj::CardData::internal_default_instance());
}
class t_Object::_Internal {
 public:
  using HasBits = decltype(std::declval<t_Object>()._has_bits_);
  static void set_has_baseid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_thisid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_packtype(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_bind(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_grid_x(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_grid_y(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_timer(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::Obj::EquipData& equipprop(const t_Object* msg);
  static void set_has_equipprop(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_nextusetime(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::Obj::CardData& card_data(const t_Object* msg);
  static void set_has_card_data(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_lock_end_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_tradetime(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
};

const ::Obj::EquipData&
t_Object::_Internal::equipprop(const t_Object* msg) {
  return *msg->equipprop_;
}
const ::Obj::CardData&
t_Object::_Internal::card_data(const t_Object* msg) {
  return *msg->card_data_;
}
t_Object::t_Object()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Obj.t_Object)
}
t_Object::t_Object(const t_Object& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      equiprand_(from.equiprand_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  thisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_thisid()) {
    thisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thisid_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_equipprop()) {
    equipprop_ = new ::Obj::EquipData(*from.equipprop_);
  } else {
    equipprop_ = nullptr;
  }
  if (from._internal_has_card_data()) {
    card_data_ = new ::Obj::CardData(*from.card_data_);
  } else {
    card_data_ = nullptr;
  }
  ::memcpy(&baseid_, &from.baseid_,
    static_cast<size_t>(reinterpret_cast<char*>(&tradetime_) -
    reinterpret_cast<char*>(&baseid_)) + sizeof(tradetime_));
  // @@protoc_insertion_point(copy_constructor:Obj.t_Object)
}

void t_Object::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_t_Object_object_2eproto.base);
  thisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&equipprop_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tradetime_) -
      reinterpret_cast<char*>(&equipprop_)) + sizeof(tradetime_));
}

t_Object::~t_Object() {
  // @@protoc_insertion_point(destructor:Obj.t_Object)
  SharedDtor();
}

void t_Object::SharedDtor() {
  thisid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete equipprop_;
  if (this != internal_default_instance()) delete card_data_;
}

void t_Object::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const t_Object& t_Object::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_t_Object_object_2eproto.base);
  return *internal_default_instance();
}


void t_Object::Clear() {
// @@protoc_insertion_point(message_clear_start:Obj.t_Object)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  equiprand_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      thisid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(equipprop_ != nullptr);
      equipprop_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(card_data_ != nullptr);
      card_data_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&baseid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_) -
        reinterpret_cast<char*>(&baseid_)) + sizeof(num_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&bind_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lock_end_time_) -
        reinterpret_cast<char*>(&bind_)) + sizeof(lock_end_time_));
  }
  tradetime_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* t_Object::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 baseid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_baseid(&has_bits);
          baseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string thisid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_thisid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Obj.t_Object.thisid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Obj.ObjectType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Obj::ObjectType_IsValid(val))) {
            _internal_set_type(static_cast<::Obj::ObjectType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .Obj.PackType packtype = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Obj::PackType_IsValid(val))) {
            _internal_set_packtype(static_cast<::Obj::PackType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Obj.t_Object.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_num(&has_bits);
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 bind = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_bind(&has_bits);
          bind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 grid_x = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_grid_x(&has_bits);
          grid_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 grid_y = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_grid_y(&has_bits);
          grid_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 quality = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_quality(&has_bits);
          quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 level = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 timer = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_timer(&has_bits);
          timer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Obj.EquipData equipprop = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_equipprop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Obj.EquipRandInfo equiprand = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_equiprand(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 nextusetime = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_nextusetime(&has_bits);
          nextusetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Obj.CardData card_data = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_card_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 lock_end_time = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_lock_end_time(&has_bits);
          lock_end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tradetime = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_tradetime(&has_bits);
          tradetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* t_Object::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Obj.t_Object)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 baseid = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_baseid(), target);
  }

  // optional string thisid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_thisid().data(), static_cast<int>(this->_internal_thisid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Obj.t_Object.thisid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_thisid(), target);
  }

  // optional .Obj.ObjectType type = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // optional .Obj.PackType packtype = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_packtype(), target);
  }

  // optional string name = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Obj.t_Object.name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_name(), target);
  }

  // optional uint32 num = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_num(), target);
  }

  // optional uint32 bind = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_bind(), target);
  }

  // optional uint32 grid_x = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_grid_x(), target);
  }

  // optional uint32 grid_y = 9;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_grid_y(), target);
  }

  // optional uint32 quality = 10;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_quality(), target);
  }

  // optional uint32 level = 11;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_level(), target);
  }

  // optional uint32 timer = 12;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_timer(), target);
  }

  // optional .Obj.EquipData equipprop = 13;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::equipprop(this), target, stream);
  }

  // repeated .Obj.EquipRandInfo equiprand = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_equiprand_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_equiprand(i), target, stream);
  }

  // optional uint32 nextusetime = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_nextusetime(), target);
  }

  // optional .Obj.CardData card_data = 16;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::card_data(this), target, stream);
  }

  // optional uint32 lock_end_time = 17;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_lock_end_time(), target);
  }

  // optional uint32 tradetime = 18;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_tradetime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Obj.t_Object)
  return target;
}

size_t t_Object::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Obj.t_Object)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Obj.EquipRandInfo equiprand = 14;
  total_size += 1UL * this->_internal_equiprand_size();
  for (const auto& msg : this->equiprand_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string thisid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_thisid());
    }

    // optional string name = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .Obj.EquipData equipprop = 13;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *equipprop_);
    }

    // optional .Obj.CardData card_data = 16;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *card_data_);
    }

    // optional uint32 baseid = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_baseid());
    }

    // optional .Obj.ObjectType type = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional .Obj.PackType packtype = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_packtype());
    }

    // optional uint32 num = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 bind = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_bind());
    }

    // optional uint32 grid_x = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_grid_x());
    }

    // optional uint32 grid_y = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_grid_y());
    }

    // optional uint32 quality = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_quality());
    }

    // optional uint32 level = 11;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_level());
    }

    // optional uint32 timer = 12;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_timer());
    }

    // optional uint32 nextusetime = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_nextusetime());
    }

    // optional uint32 lock_end_time = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lock_end_time());
    }

  }
  // optional uint32 tradetime = 18;
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tradetime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void t_Object::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Obj.t_Object)
  GOOGLE_DCHECK_NE(&from, this);
  const t_Object* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<t_Object>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Obj.t_Object)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Obj.t_Object)
    MergeFrom(*source);
  }
}

void t_Object::MergeFrom(const t_Object& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Obj.t_Object)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  equiprand_.MergeFrom(from.equiprand_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      thisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thisid_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_equipprop()->::Obj::EquipData::MergeFrom(from._internal_equipprop());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_card_data()->::Obj::CardData::MergeFrom(from._internal_card_data());
    }
    if (cached_has_bits & 0x00000010u) {
      baseid_ = from.baseid_;
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000040u) {
      packtype_ = from.packtype_;
    }
    if (cached_has_bits & 0x00000080u) {
      num_ = from.num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      bind_ = from.bind_;
    }
    if (cached_has_bits & 0x00000200u) {
      grid_x_ = from.grid_x_;
    }
    if (cached_has_bits & 0x00000400u) {
      grid_y_ = from.grid_y_;
    }
    if (cached_has_bits & 0x00000800u) {
      quality_ = from.quality_;
    }
    if (cached_has_bits & 0x00001000u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00002000u) {
      timer_ = from.timer_;
    }
    if (cached_has_bits & 0x00004000u) {
      nextusetime_ = from.nextusetime_;
    }
    if (cached_has_bits & 0x00008000u) {
      lock_end_time_ = from.lock_end_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _internal_set_tradetime(from._internal_tradetime());
  }
}

void t_Object::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Obj.t_Object)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void t_Object::CopyFrom(const t_Object& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Obj.t_Object)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool t_Object::IsInitialized() const {
  return true;
}

void t_Object::InternalSwap(t_Object* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  equiprand_.InternalSwap(&other->equiprand_);
  thisid_.Swap(&other->thisid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(equipprop_, other->equipprop_);
  swap(card_data_, other->card_data_);
  swap(baseid_, other->baseid_);
  swap(type_, other->type_);
  swap(packtype_, other->packtype_);
  swap(num_, other->num_);
  swap(bind_, other->bind_);
  swap(grid_x_, other->grid_x_);
  swap(grid_y_, other->grid_y_);
  swap(quality_, other->quality_);
  swap(level_, other->level_);
  swap(timer_, other->timer_);
  swap(nextusetime_, other->nextusetime_);
  swap(lock_end_time_, other->lock_end_time_);
  swap(tradetime_, other->tradetime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata t_Object::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PrizeBase::InitAsDefaultInstance() {
}
class PrizeBase::_Internal {
 public:
  using HasBits = decltype(std::declval<PrizeBase>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_quantity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PrizeBase::PrizeBase()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Obj.PrizeBase)
}
PrizeBase::PrizeBase(const PrizeBase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&quantity_) -
    reinterpret_cast<char*>(&id_)) + sizeof(quantity_));
  // @@protoc_insertion_point(copy_constructor:Obj.PrizeBase)
}

void PrizeBase::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&quantity_) -
      reinterpret_cast<char*>(&id_)) + sizeof(quantity_));
}

PrizeBase::~PrizeBase() {
  // @@protoc_insertion_point(destructor:Obj.PrizeBase)
  SharedDtor();
}

void PrizeBase::SharedDtor() {
}

void PrizeBase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrizeBase& PrizeBase::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrizeBase_object_2eproto.base);
  return *internal_default_instance();
}


void PrizeBase::Clear() {
// @@protoc_insertion_point(message_clear_start:Obj.PrizeBase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&quantity_) -
        reinterpret_cast<char*>(&id_)) + sizeof(quantity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PrizeBase::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 quantity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_quantity(&has_bits);
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrizeBase::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Obj.PrizeBase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional uint32 quantity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_quantity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Obj.PrizeBase)
  return target;
}

size_t PrizeBase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Obj.PrizeBase)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_id());
    }

    // optional uint32 quantity = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_quantity());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrizeBase::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Obj.PrizeBase)
  GOOGLE_DCHECK_NE(&from, this);
  const PrizeBase* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrizeBase>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Obj.PrizeBase)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Obj.PrizeBase)
    MergeFrom(*source);
  }
}

void PrizeBase::MergeFrom(const PrizeBase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Obj.PrizeBase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      quantity_ = from.quantity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PrizeBase::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Obj.PrizeBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrizeBase::CopyFrom(const PrizeBase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Obj.PrizeBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrizeBase::IsInitialized() const {
  return true;
}

void PrizeBase::InternalSwap(PrizeBase* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
  swap(quantity_, other->quantity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrizeBase::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VIPCardInfo::InitAsDefaultInstance() {
}
class VIPCardInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<VIPCardInfo>()._has_bits_);
  static void set_has_remaintime(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_raffcount(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_total_raffcount(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_dayprize_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_objraffcount(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

VIPCardInfo::VIPCardInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Obj.VIPCardInfo)
}
VIPCardInfo::VIPCardInfo(const VIPCardInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      arrprize_(from.arrprize_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&remaintime_, &from.remaintime_,
    static_cast<size_t>(reinterpret_cast<char*>(&objraffcount_) -
    reinterpret_cast<char*>(&remaintime_)) + sizeof(objraffcount_));
  // @@protoc_insertion_point(copy_constructor:Obj.VIPCardInfo)
}

void VIPCardInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VIPCardInfo_object_2eproto.base);
  ::memset(&remaintime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&objraffcount_) -
      reinterpret_cast<char*>(&remaintime_)) + sizeof(objraffcount_));
}

VIPCardInfo::~VIPCardInfo() {
  // @@protoc_insertion_point(destructor:Obj.VIPCardInfo)
  SharedDtor();
}

void VIPCardInfo::SharedDtor() {
}

void VIPCardInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VIPCardInfo& VIPCardInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VIPCardInfo_object_2eproto.base);
  return *internal_default_instance();
}


void VIPCardInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Obj.VIPCardInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arrprize_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&remaintime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&objraffcount_) -
        reinterpret_cast<char*>(&remaintime_)) + sizeof(objraffcount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* VIPCardInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 remaintime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_remaintime(&has_bits);
          remaintime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 raffcount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_raffcount(&has_bits);
          raffcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 total_raffcount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_total_raffcount(&has_bits);
          total_raffcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 dayprize_state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_dayprize_state(&has_bits);
          dayprize_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Obj.PrizeBase arrprize = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_arrprize(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 objraffcount = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_objraffcount(&has_bits);
          objraffcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VIPCardInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Obj.VIPCardInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 remaintime = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_remaintime(), target);
  }

  // optional uint32 raffcount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_raffcount(), target);
  }

  // optional uint32 total_raffcount = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_total_raffcount(), target);
  }

  // optional uint32 dayprize_state = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_dayprize_state(), target);
  }

  // repeated .Obj.PrizeBase arrprize = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_arrprize_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_arrprize(i), target, stream);
  }

  // optional uint32 objraffcount = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_objraffcount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Obj.VIPCardInfo)
  return target;
}

size_t VIPCardInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Obj.VIPCardInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Obj.PrizeBase arrprize = 5;
  total_size += 1UL * this->_internal_arrprize_size();
  for (const auto& msg : this->arrprize_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint64 remaintime = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_remaintime());
    }

    // optional uint32 raffcount = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_raffcount());
    }

    // optional uint32 total_raffcount = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_total_raffcount());
    }

    // optional uint32 dayprize_state = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_dayprize_state());
    }

    // optional uint32 objraffcount = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_objraffcount());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VIPCardInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Obj.VIPCardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const VIPCardInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VIPCardInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Obj.VIPCardInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Obj.VIPCardInfo)
    MergeFrom(*source);
  }
}

void VIPCardInfo::MergeFrom(const VIPCardInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Obj.VIPCardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arrprize_.MergeFrom(from.arrprize_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      remaintime_ = from.remaintime_;
    }
    if (cached_has_bits & 0x00000002u) {
      raffcount_ = from.raffcount_;
    }
    if (cached_has_bits & 0x00000004u) {
      total_raffcount_ = from.total_raffcount_;
    }
    if (cached_has_bits & 0x00000008u) {
      dayprize_state_ = from.dayprize_state_;
    }
    if (cached_has_bits & 0x00000010u) {
      objraffcount_ = from.objraffcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VIPCardInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Obj.VIPCardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VIPCardInfo::CopyFrom(const VIPCardInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Obj.VIPCardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VIPCardInfo::IsInitialized() const {
  return true;
}

void VIPCardInfo::InternalSwap(VIPCardInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  arrprize_.InternalSwap(&other->arrprize_);
  swap(remaintime_, other->remaintime_);
  swap(raffcount_, other->raffcount_);
  swap(total_raffcount_, other->total_raffcount_);
  swap(dayprize_state_, other->dayprize_state_);
  swap(objraffcount_, other->objraffcount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VIPCardInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RefreshObjs_SC::InitAsDefaultInstance() {
}
class MSG_RefreshObjs_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RefreshObjs_SC>()._has_bits_);
  static void set_has_show_addnew_anim(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_RefreshObjs_SC::MSG_RefreshObjs_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Obj.MSG_RefreshObjs_SC)
}
MSG_RefreshObjs_SC::MSG_RefreshObjs_SC(const MSG_RefreshObjs_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      objs_(from.objs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  show_addnew_anim_ = from.show_addnew_anim_;
  // @@protoc_insertion_point(copy_constructor:Obj.MSG_RefreshObjs_SC)
}

void MSG_RefreshObjs_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_RefreshObjs_SC_object_2eproto.base);
  show_addnew_anim_ = true;
}

MSG_RefreshObjs_SC::~MSG_RefreshObjs_SC() {
  // @@protoc_insertion_point(destructor:Obj.MSG_RefreshObjs_SC)
  SharedDtor();
}

void MSG_RefreshObjs_SC::SharedDtor() {
}

void MSG_RefreshObjs_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RefreshObjs_SC& MSG_RefreshObjs_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RefreshObjs_SC_object_2eproto.base);
  return *internal_default_instance();
}


void MSG_RefreshObjs_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:Obj.MSG_RefreshObjs_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  objs_.Clear();
  show_addnew_anim_ = true;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RefreshObjs_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Obj.t_Object objs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_objs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool show_addnew_anim = 2 [default = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_show_addnew_anim(&has_bits);
          show_addnew_anim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RefreshObjs_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Obj.MSG_RefreshObjs_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Obj.t_Object objs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_objs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_objs(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool show_addnew_anim = 2 [default = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_show_addnew_anim(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Obj.MSG_RefreshObjs_SC)
  return target;
}

size_t MSG_RefreshObjs_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Obj.MSG_RefreshObjs_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Obj.t_Object objs = 1;
  total_size += 1UL * this->_internal_objs_size();
  for (const auto& msg : this->objs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool show_addnew_anim = 2 [default = true];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RefreshObjs_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Obj.MSG_RefreshObjs_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RefreshObjs_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RefreshObjs_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Obj.MSG_RefreshObjs_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Obj.MSG_RefreshObjs_SC)
    MergeFrom(*source);
  }
}

void MSG_RefreshObjs_SC::MergeFrom(const MSG_RefreshObjs_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Obj.MSG_RefreshObjs_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  objs_.MergeFrom(from.objs_);
  if (from._internal_has_show_addnew_anim()) {
    _internal_set_show_addnew_anim(from._internal_show_addnew_anim());
  }
}

void MSG_RefreshObjs_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Obj.MSG_RefreshObjs_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RefreshObjs_SC::CopyFrom(const MSG_RefreshObjs_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Obj.MSG_RefreshObjs_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RefreshObjs_SC::IsInitialized() const {
  return true;
}

void MSG_RefreshObjs_SC::InternalSwap(MSG_RefreshObjs_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  objs_.InternalSwap(&other->objs_);
  swap(show_addnew_anim_, other->show_addnew_anim_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RefreshObjs_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_PackData_SC::InitAsDefaultInstance() {
  ::Obj::_MSG_PackData_SC_default_instance_._instance.get_mutable()->objects_ = const_cast< ::Obj::MSG_RefreshObjs_SC*>(
      ::Obj::MSG_RefreshObjs_SC::internal_default_instance());
}
class MSG_PackData_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_PackData_SC>()._has_bits_);
  static void set_has_packtype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_validsize(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::Obj::MSG_RefreshObjs_SC& objects(const MSG_PackData_SC* msg);
  static void set_has_objects(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_unlockcount(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::Obj::MSG_RefreshObjs_SC&
MSG_PackData_SC::_Internal::objects(const MSG_PackData_SC* msg) {
  return *msg->objects_;
}
MSG_PackData_SC::MSG_PackData_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Obj.MSG_PackData_SC)
}
MSG_PackData_SC::MSG_PackData_SC(const MSG_PackData_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_objects()) {
    objects_ = new ::Obj::MSG_RefreshObjs_SC(*from.objects_);
  } else {
    objects_ = nullptr;
  }
  ::memcpy(&packtype_, &from.packtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&unlockcount_) -
    reinterpret_cast<char*>(&packtype_)) + sizeof(unlockcount_));
  // @@protoc_insertion_point(copy_constructor:Obj.MSG_PackData_SC)
}

void MSG_PackData_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_PackData_SC_object_2eproto.base);
  ::memset(&objects_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unlockcount_) -
      reinterpret_cast<char*>(&objects_)) + sizeof(unlockcount_));
}

MSG_PackData_SC::~MSG_PackData_SC() {
  // @@protoc_insertion_point(destructor:Obj.MSG_PackData_SC)
  SharedDtor();
}

void MSG_PackData_SC::SharedDtor() {
  if (this != internal_default_instance()) delete objects_;
}

void MSG_PackData_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_PackData_SC& MSG_PackData_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_PackData_SC_object_2eproto.base);
  return *internal_default_instance();
}


void MSG_PackData_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:Obj.MSG_PackData_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(objects_ != nullptr);
    objects_->Clear();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&packtype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&unlockcount_) -
        reinterpret_cast<char*>(&packtype_)) + sizeof(unlockcount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_PackData_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Obj.PackType packtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Obj::PackType_IsValid(val))) {
            _internal_set_packtype(static_cast<::Obj::PackType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 validsize = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_validsize(&has_bits);
          validsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Obj.MSG_RefreshObjs_SC objects = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_objects(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 unlockcount = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_unlockcount(&has_bits);
          unlockcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_PackData_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Obj.MSG_PackData_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Obj.PackType packtype = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_packtype(), target);
  }

  // optional uint32 width = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_width(), target);
  }

  // optional uint32 height = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_height(), target);
  }

  // optional uint32 validsize = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_validsize(), target);
  }

  // optional .Obj.MSG_RefreshObjs_SC objects = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::objects(this), target, stream);
  }

  // optional uint32 unlockcount = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_unlockcount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Obj.MSG_PackData_SC)
  return target;
}

size_t MSG_PackData_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Obj.MSG_PackData_SC)
  size_t total_size = 0;

  // required .Obj.PackType packtype = 1;
  if (_internal_has_packtype()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_packtype());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Obj.MSG_RefreshObjs_SC objects = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *objects_);
  }

  if (cached_has_bits & 0x0000003cu) {
    // optional uint32 width = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_width());
    }

    // optional uint32 height = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_height());
    }

    // optional uint32 validsize = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_validsize());
    }

    // optional uint32 unlockcount = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_unlockcount());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_PackData_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Obj.MSG_PackData_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_PackData_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_PackData_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Obj.MSG_PackData_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Obj.MSG_PackData_SC)
    MergeFrom(*source);
  }
}

void MSG_PackData_SC::MergeFrom(const MSG_PackData_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Obj.MSG_PackData_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_objects()->::Obj::MSG_RefreshObjs_SC::MergeFrom(from._internal_objects());
    }
    if (cached_has_bits & 0x00000002u) {
      packtype_ = from.packtype_;
    }
    if (cached_has_bits & 0x00000004u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000008u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000010u) {
      validsize_ = from.validsize_;
    }
    if (cached_has_bits & 0x00000020u) {
      unlockcount_ = from.unlockcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_PackData_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Obj.MSG_PackData_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_PackData_SC::CopyFrom(const MSG_PackData_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Obj.MSG_PackData_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_PackData_SC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void MSG_PackData_SC::InternalSwap(MSG_PackData_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(objects_, other->objects_);
  swap(packtype_, other->packtype_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(validsize_, other->validsize_);
  swap(unlockcount_, other->unlockcount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_PackData_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_WearEquip_CS::InitAsDefaultInstance() {
}
class MSG_WearEquip_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_WearEquip_CS>()._has_bits_);
  static void set_has_thisid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_WearEquip_CS::MSG_WearEquip_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Obj.MSG_WearEquip_CS)
}
MSG_WearEquip_CS::MSG_WearEquip_CS(const MSG_WearEquip_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  thisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_thisid()) {
    thisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thisid_);
  }
  // @@protoc_insertion_point(copy_constructor:Obj.MSG_WearEquip_CS)
}

void MSG_WearEquip_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_WearEquip_CS_object_2eproto.base);
  thisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MSG_WearEquip_CS::~MSG_WearEquip_CS() {
  // @@protoc_insertion_point(destructor:Obj.MSG_WearEquip_CS)
  SharedDtor();
}

void MSG_WearEquip_CS::SharedDtor() {
  thisid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_WearEquip_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_WearEquip_CS& MSG_WearEquip_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_WearEquip_CS_object_2eproto.base);
  return *internal_default_instance();
}


void MSG_WearEquip_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:Obj.MSG_WearEquip_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    thisid_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_WearEquip_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string thisid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_thisid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Obj.MSG_WearEquip_CS.thisid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_WearEquip_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Obj.MSG_WearEquip_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string thisid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_thisid().data(), static_cast<int>(this->_internal_thisid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Obj.MSG_WearEquip_CS.thisid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_thisid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Obj.MSG_WearEquip_CS)
  return target;
}

size_t MSG_WearEquip_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Obj.MSG_WearEquip_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string thisid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_thisid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_WearEquip_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Obj.MSG_WearEquip_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_WearEquip_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_WearEquip_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Obj.MSG_WearEquip_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Obj.MSG_WearEquip_CS)
    MergeFrom(*source);
  }
}

void MSG_WearEquip_CS::MergeFrom(const MSG_WearEquip_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Obj.MSG_WearEquip_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_thisid()) {
    _has_bits_[0] |= 0x00000001u;
    thisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thisid_);
  }
}

void MSG_WearEquip_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Obj.MSG_WearEquip_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_WearEquip_CS::CopyFrom(const MSG_WearEquip_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Obj.MSG_WearEquip_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_WearEquip_CS::IsInitialized() const {
  return true;
}

void MSG_WearEquip_CS::InternalSwap(MSG_WearEquip_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  thisid_.Swap(&other->thisid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_WearEquip_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_WearEquip_SC::InitAsDefaultInstance() {
}
class MSG_WearEquip_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_WearEquip_SC>()._has_bits_);
  static void set_has_thisid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_WearEquip_SC::MSG_WearEquip_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Obj.MSG_WearEquip_SC)
}
MSG_WearEquip_SC::MSG_WearEquip_SC(const MSG_WearEquip_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  thisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_thisid()) {
    thisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thisid_);
  }
  // @@protoc_insertion_point(copy_constructor:Obj.MSG_WearEquip_SC)
}

void MSG_WearEquip_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_WearEquip_SC_object_2eproto.base);
  thisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MSG_WearEquip_SC::~MSG_WearEquip_SC() {
  // @@protoc_insertion_point(destructor:Obj.MSG_WearEquip_SC)
  SharedDtor();
}

void MSG_WearEquip_SC::SharedDtor() {
  thisid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_WearEquip_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_WearEquip_SC& MSG_WearEquip_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_WearEquip_SC_object_2eproto.base);
  return *internal_default_instance();
}


void MSG_WearEquip_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:Obj.MSG_WearEquip_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    thisid_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_WearEquip_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string thisid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_thisid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Obj.MSG_WearEquip_SC.thisid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_WearEquip_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Obj.MSG_WearEquip_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string thisid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_thisid().data(), static_cast<int>(this->_internal_thisid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Obj.MSG_WearEquip_SC.thisid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_thisid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Obj.MSG_WearEquip_SC)
  return target;
}

size_t MSG_WearEquip_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Obj.MSG_WearEquip_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string thisid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_thisid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_WearEquip_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Obj.MSG_WearEquip_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_WearEquip_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_WearEquip_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Obj.MSG_WearEquip_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Obj.MSG_WearEquip_SC)
    MergeFrom(*source);
  }
}

void MSG_WearEquip_SC::MergeFrom(const MSG_WearEquip_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Obj.MSG_WearEquip_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_thisid()) {
    _has_bits_[0] |= 0x00000001u;
    thisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thisid_);
  }
}

void MSG_WearEquip_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Obj.MSG_WearEquip_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_WearEquip_SC::CopyFrom(const MSG_WearEquip_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Obj.MSG_WearEquip_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_WearEquip_SC::IsInitialized() const {
  return true;
}

void MSG_WearEquip_SC::InternalSwap(MSG_WearEquip_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  thisid_.Swap(&other->thisid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_WearEquip_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RemoveObject_SC::InitAsDefaultInstance() {
}
class MSG_RemoveObject_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RemoveObject_SC>()._has_bits_);
};

MSG_RemoveObject_SC::MSG_RemoveObject_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Obj.MSG_RemoveObject_SC)
}
MSG_RemoveObject_SC::MSG_RemoveObject_SC(const MSG_RemoveObject_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Obj.MSG_RemoveObject_SC)
}

void MSG_RemoveObject_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_RemoveObject_SC_object_2eproto.base);
}

MSG_RemoveObject_SC::~MSG_RemoveObject_SC() {
  // @@protoc_insertion_point(destructor:Obj.MSG_RemoveObject_SC)
  SharedDtor();
}

void MSG_RemoveObject_SC::SharedDtor() {
}

void MSG_RemoveObject_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RemoveObject_SC& MSG_RemoveObject_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RemoveObject_SC_object_2eproto.base);
  return *internal_default_instance();
}


void MSG_RemoveObject_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:Obj.MSG_RemoveObject_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RemoveObject_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Obj.MSG_RemoveObject_SC.ids");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RemoveObject_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Obj.MSG_RemoveObject_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string ids = 1;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Obj.MSG_RemoveObject_SC.ids");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Obj.MSG_RemoveObject_SC)
  return target;
}

size_t MSG_RemoveObject_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Obj.MSG_RemoveObject_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ids_.size());
  for (int i = 0, n = ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ids_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RemoveObject_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Obj.MSG_RemoveObject_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RemoveObject_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RemoveObject_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Obj.MSG_RemoveObject_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Obj.MSG_RemoveObject_SC)
    MergeFrom(*source);
  }
}

void MSG_RemoveObject_SC::MergeFrom(const MSG_RemoveObject_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Obj.MSG_RemoveObject_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
}

void MSG_RemoveObject_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Obj.MSG_RemoveObject_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RemoveObject_SC::CopyFrom(const MSG_RemoveObject_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Obj.MSG_RemoveObject_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RemoveObject_SC::IsInitialized() const {
  return true;
}

void MSG_RemoveObject_SC::InternalSwap(MSG_RemoveObject_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ids_.InternalSwap(&other->ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RemoveObject_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_UnwearEquip_CS::InitAsDefaultInstance() {
}
class MSG_UnwearEquip_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_UnwearEquip_CS>()._has_bits_);
  static void set_has_thisid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_UnwearEquip_CS::MSG_UnwearEquip_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Obj.MSG_UnwearEquip_CS)
}
MSG_UnwearEquip_CS::MSG_UnwearEquip_CS(const MSG_UnwearEquip_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  thisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_thisid()) {
    thisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thisid_);
  }
  // @@protoc_insertion_point(copy_constructor:Obj.MSG_UnwearEquip_CS)
}

void MSG_UnwearEquip_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_UnwearEquip_CS_object_2eproto.base);
  thisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MSG_UnwearEquip_CS::~MSG_UnwearEquip_CS() {
  // @@protoc_insertion_point(destructor:Obj.MSG_UnwearEquip_CS)
  SharedDtor();
}

void MSG_UnwearEquip_CS::SharedDtor() {
  thisid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_UnwearEquip_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_UnwearEquip_CS& MSG_UnwearEquip_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_UnwearEquip_CS_object_2eproto.base);
  return *internal_default_instance();
}


void MSG_UnwearEquip_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:Obj.MSG_UnwearEquip_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    thisid_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_UnwearEquip_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string thisid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_thisid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Obj.MSG_UnwearEquip_CS.thisid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_UnwearEquip_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Obj.MSG_UnwearEquip_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string thisid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_thisid().data(), static_cast<int>(this->_internal_thisid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Obj.MSG_UnwearEquip_CS.thisid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_thisid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Obj.MSG_UnwearEquip_CS)
  return target;
}

size_t MSG_UnwearEquip_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Obj.MSG_UnwearEquip_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string thisid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_thisid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_UnwearEquip_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Obj.MSG_UnwearEquip_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_UnwearEquip_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_UnwearEquip_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Obj.MSG_UnwearEquip_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Obj.MSG_UnwearEquip_CS)
    MergeFrom(*source);
  }
}

void MSG_UnwearEquip_CS::MergeFrom(const MSG_UnwearEquip_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Obj.MSG_UnwearEquip_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_thisid()) {
    _has_bits_[0] |= 0x00000001u;
    thisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thisid_);
  }
}

void MSG_UnwearEquip_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Obj.MSG_UnwearEquip_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_UnwearEquip_CS::CopyFrom(const MSG_UnwearEquip_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Obj.MSG_UnwearEquip_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_UnwearEquip_CS::IsInitialized() const {
  return true;
}

void MSG_UnwearEquip_CS::InternalSwap(MSG_UnwearEquip_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  thisid_.Swap(&other->thisid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_UnwearEquip_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_UnwearEquip_SC::InitAsDefaultInstance() {
}
class MSG_UnwearEquip_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_UnwearEquip_SC>()._has_bits_);
  static void set_has_thisid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_UnwearEquip_SC::MSG_UnwearEquip_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Obj.MSG_UnwearEquip_SC)
}
MSG_UnwearEquip_SC::MSG_UnwearEquip_SC(const MSG_UnwearEquip_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  thisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_thisid()) {
    thisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thisid_);
  }
  // @@protoc_insertion_point(copy_constructor:Obj.MSG_UnwearEquip_SC)
}

void MSG_UnwearEquip_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_UnwearEquip_SC_object_2eproto.base);
  thisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MSG_UnwearEquip_SC::~MSG_UnwearEquip_SC() {
  // @@protoc_insertion_point(destructor:Obj.MSG_UnwearEquip_SC)
  SharedDtor();
}

void MSG_UnwearEquip_SC::SharedDtor() {
  thisid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_UnwearEquip_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_UnwearEquip_SC& MSG_UnwearEquip_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_UnwearEquip_SC_object_2eproto.base);
  return *internal_default_instance();
}


void MSG_UnwearEquip_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:Obj.MSG_UnwearEquip_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    thisid_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_UnwearEquip_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string thisid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_thisid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Obj.MSG_UnwearEquip_SC.thisid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_UnwearEquip_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Obj.MSG_UnwearEquip_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string thisid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_thisid().data(), static_cast<int>(this->_internal_thisid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Obj.MSG_UnwearEquip_SC.thisid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_thisid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Obj.MSG_UnwearEquip_SC)
  return target;
}

size_t MSG_UnwearEquip_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Obj.MSG_UnwearEquip_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string thisid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_thisid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_UnwearEquip_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Obj.MSG_UnwearEquip_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_UnwearEquip_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_UnwearEquip_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Obj.MSG_UnwearEquip_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Obj.MSG_UnwearEquip_SC)
    MergeFrom(*source);
  }
}

void MSG_UnwearEquip_SC::MergeFrom(const MSG_UnwearEquip_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Obj.MSG_UnwearEquip_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_thisid()) {
    _has_bits_[0] |= 0x00000001u;
    thisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thisid_);
  }
}

void MSG_UnwearEquip_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Obj.MSG_UnwearEquip_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_UnwearEquip_SC::CopyFrom(const MSG_UnwearEquip_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Obj.MSG_UnwearEquip_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_UnwearEquip_SC::IsInitialized() const {
  return true;
}

void MSG_UnwearEquip_SC::InternalSwap(MSG_UnwearEquip_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  thisid_.Swap(&other->thisid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_UnwearEquip_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqCheckItemDueTime_CS::InitAsDefaultInstance() {
}
class MSG_ReqCheckItemDueTime_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqCheckItemDueTime_CS>()._has_bits_);
};

MSG_ReqCheckItemDueTime_CS::MSG_ReqCheckItemDueTime_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Obj.MSG_ReqCheckItemDueTime_CS)
}
MSG_ReqCheckItemDueTime_CS::MSG_ReqCheckItemDueTime_CS(const MSG_ReqCheckItemDueTime_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Obj.MSG_ReqCheckItemDueTime_CS)
}

void MSG_ReqCheckItemDueTime_CS::SharedCtor() {
}

MSG_ReqCheckItemDueTime_CS::~MSG_ReqCheckItemDueTime_CS() {
  // @@protoc_insertion_point(destructor:Obj.MSG_ReqCheckItemDueTime_CS)
  SharedDtor();
}

void MSG_ReqCheckItemDueTime_CS::SharedDtor() {
}

void MSG_ReqCheckItemDueTime_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqCheckItemDueTime_CS& MSG_ReqCheckItemDueTime_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqCheckItemDueTime_CS_object_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqCheckItemDueTime_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:Obj.MSG_ReqCheckItemDueTime_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqCheckItemDueTime_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqCheckItemDueTime_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Obj.MSG_ReqCheckItemDueTime_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Obj.MSG_ReqCheckItemDueTime_CS)
  return target;
}

size_t MSG_ReqCheckItemDueTime_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Obj.MSG_ReqCheckItemDueTime_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqCheckItemDueTime_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Obj.MSG_ReqCheckItemDueTime_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqCheckItemDueTime_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqCheckItemDueTime_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Obj.MSG_ReqCheckItemDueTime_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Obj.MSG_ReqCheckItemDueTime_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqCheckItemDueTime_CS::MergeFrom(const MSG_ReqCheckItemDueTime_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Obj.MSG_ReqCheckItemDueTime_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_ReqCheckItemDueTime_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Obj.MSG_ReqCheckItemDueTime_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqCheckItemDueTime_CS::CopyFrom(const MSG_ReqCheckItemDueTime_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Obj.MSG_ReqCheckItemDueTime_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqCheckItemDueTime_CS::IsInitialized() const {
  return true;
}

void MSG_ReqCheckItemDueTime_CS::InternalSwap(MSG_ReqCheckItemDueTime_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqCheckItemDueTime_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqUseObject_CS::InitAsDefaultInstance() {
}
class MSG_ReqUseObject_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqUseObject_CS>()._has_bits_);
  static void set_has_thisid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_ReqUseObject_CS::MSG_ReqUseObject_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Obj.MSG_ReqUseObject_CS)
}
MSG_ReqUseObject_CS::MSG_ReqUseObject_CS(const MSG_ReqUseObject_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  thisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_thisid()) {
    thisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thisid_);
  }
  num_ = from.num_;
  // @@protoc_insertion_point(copy_constructor:Obj.MSG_ReqUseObject_CS)
}

void MSG_ReqUseObject_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_ReqUseObject_CS_object_2eproto.base);
  thisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  num_ = 1u;
}

MSG_ReqUseObject_CS::~MSG_ReqUseObject_CS() {
  // @@protoc_insertion_point(destructor:Obj.MSG_ReqUseObject_CS)
  SharedDtor();
}

void MSG_ReqUseObject_CS::SharedDtor() {
  thisid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_ReqUseObject_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqUseObject_CS& MSG_ReqUseObject_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqUseObject_CS_object_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqUseObject_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:Obj.MSG_ReqUseObject_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      thisid_.ClearNonDefaultToEmptyNoArena();
    }
    num_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqUseObject_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string thisid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_thisid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Obj.MSG_ReqUseObject_CS.thisid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_num(&has_bits);
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqUseObject_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Obj.MSG_ReqUseObject_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string thisid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_thisid().data(), static_cast<int>(this->_internal_thisid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Obj.MSG_ReqUseObject_CS.thisid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_thisid(), target);
  }

  // optional uint32 num = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Obj.MSG_ReqUseObject_CS)
  return target;
}

size_t MSG_ReqUseObject_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Obj.MSG_ReqUseObject_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string thisid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_thisid());
    }

    // optional uint32 num = 2 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqUseObject_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Obj.MSG_ReqUseObject_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqUseObject_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqUseObject_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Obj.MSG_ReqUseObject_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Obj.MSG_ReqUseObject_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqUseObject_CS::MergeFrom(const MSG_ReqUseObject_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Obj.MSG_ReqUseObject_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      thisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thisid_);
    }
    if (cached_has_bits & 0x00000002u) {
      num_ = from.num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_ReqUseObject_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Obj.MSG_ReqUseObject_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqUseObject_CS::CopyFrom(const MSG_ReqUseObject_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Obj.MSG_ReqUseObject_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqUseObject_CS::IsInitialized() const {
  return true;
}

void MSG_ReqUseObject_CS::InternalSwap(MSG_ReqUseObject_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  thisid_.Swap(&other->thisid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(num_, other->num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqUseObject_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqUseObject_Special_CS::InitAsDefaultInstance() {
}
class MSG_ReqUseObject_Special_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqUseObject_Special_CS>()._has_bits_);
  static void set_has_thisid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_npcid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_posx(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_posy(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

MSG_ReqUseObject_Special_CS::MSG_ReqUseObject_Special_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Obj.MSG_ReqUseObject_Special_CS)
}
MSG_ReqUseObject_Special_CS::MSG_ReqUseObject_Special_CS(const MSG_ReqUseObject_Special_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  thisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_thisid()) {
    thisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thisid_);
  }
  ::memcpy(&npcid_, &from.npcid_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&npcid_)) + sizeof(num_));
  // @@protoc_insertion_point(copy_constructor:Obj.MSG_ReqUseObject_Special_CS)
}

void MSG_ReqUseObject_Special_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_ReqUseObject_Special_CS_object_2eproto.base);
  thisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&npcid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&posy_) -
      reinterpret_cast<char*>(&npcid_)) + sizeof(posy_));
  num_ = 1u;
}

MSG_ReqUseObject_Special_CS::~MSG_ReqUseObject_Special_CS() {
  // @@protoc_insertion_point(destructor:Obj.MSG_ReqUseObject_Special_CS)
  SharedDtor();
}

void MSG_ReqUseObject_Special_CS::SharedDtor() {
  thisid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_ReqUseObject_Special_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqUseObject_Special_CS& MSG_ReqUseObject_Special_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqUseObject_Special_CS_object_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqUseObject_Special_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:Obj.MSG_ReqUseObject_Special_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    thisid_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&npcid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&posy_) -
        reinterpret_cast<char*>(&npcid_)) + sizeof(posy_));
    num_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqUseObject_Special_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string thisid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_thisid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Obj.MSG_ReqUseObject_Special_CS.thisid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_num(&has_bits);
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 npcid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_npcid(&has_bits);
          npcid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float posx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_posx(&has_bits);
          posx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float posy = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_posy(&has_bits);
          posy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqUseObject_Special_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Obj.MSG_ReqUseObject_Special_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string thisid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_thisid().data(), static_cast<int>(this->_internal_thisid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Obj.MSG_ReqUseObject_Special_CS.thisid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_thisid(), target);
  }

  // optional uint32 num = 2 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num(), target);
  }

  // optional uint64 npcid = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_npcid(), target);
  }

  // optional float posx = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_posx(), target);
  }

  // optional float posy = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_posy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Obj.MSG_ReqUseObject_Special_CS)
  return target;
}

size_t MSG_ReqUseObject_Special_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Obj.MSG_ReqUseObject_Special_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string thisid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_thisid());
    }

    // optional uint64 npcid = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_npcid());
    }

    // optional float posx = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float posy = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional uint32 num = 2 [default = 1];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqUseObject_Special_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Obj.MSG_ReqUseObject_Special_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqUseObject_Special_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqUseObject_Special_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Obj.MSG_ReqUseObject_Special_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Obj.MSG_ReqUseObject_Special_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqUseObject_Special_CS::MergeFrom(const MSG_ReqUseObject_Special_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Obj.MSG_ReqUseObject_Special_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      thisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thisid_);
    }
    if (cached_has_bits & 0x00000002u) {
      npcid_ = from.npcid_;
    }
    if (cached_has_bits & 0x00000004u) {
      posx_ = from.posx_;
    }
    if (cached_has_bits & 0x00000008u) {
      posy_ = from.posy_;
    }
    if (cached_has_bits & 0x00000010u) {
      num_ = from.num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_ReqUseObject_Special_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Obj.MSG_ReqUseObject_Special_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqUseObject_Special_CS::CopyFrom(const MSG_ReqUseObject_Special_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Obj.MSG_ReqUseObject_Special_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqUseObject_Special_CS::IsInitialized() const {
  return true;
}

void MSG_ReqUseObject_Special_CS::InternalSwap(MSG_ReqUseObject_Special_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  thisid_.Swap(&other->thisid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(npcid_, other->npcid_);
  swap(posx_, other->posx_);
  swap(posy_, other->posy_);
  swap(num_, other->num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqUseObject_Special_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_PackUnlock_CS::InitAsDefaultInstance() {
}
class MSG_PackUnlock_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_PackUnlock_CS>()._has_bits_);
  static void set_has_packtype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_PackUnlock_CS::MSG_PackUnlock_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Obj.MSG_PackUnlock_CS)
}
MSG_PackUnlock_CS::MSG_PackUnlock_CS(const MSG_PackUnlock_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  packtype_ = from.packtype_;
  // @@protoc_insertion_point(copy_constructor:Obj.MSG_PackUnlock_CS)
}

void MSG_PackUnlock_CS::SharedCtor() {
  packtype_ = 0;
}

MSG_PackUnlock_CS::~MSG_PackUnlock_CS() {
  // @@protoc_insertion_point(destructor:Obj.MSG_PackUnlock_CS)
  SharedDtor();
}

void MSG_PackUnlock_CS::SharedDtor() {
}

void MSG_PackUnlock_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_PackUnlock_CS& MSG_PackUnlock_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_PackUnlock_CS_object_2eproto.base);
  return *internal_default_instance();
}


void MSG_PackUnlock_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:Obj.MSG_PackUnlock_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  packtype_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_PackUnlock_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Obj.PackType packtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Obj::PackType_IsValid(val))) {
            _internal_set_packtype(static_cast<::Obj::PackType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_PackUnlock_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Obj.MSG_PackUnlock_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Obj.PackType packtype = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_packtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Obj.MSG_PackUnlock_CS)
  return target;
}

size_t MSG_PackUnlock_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Obj.MSG_PackUnlock_CS)
  size_t total_size = 0;

  // required .Obj.PackType packtype = 1;
  if (_internal_has_packtype()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_packtype());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_PackUnlock_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Obj.MSG_PackUnlock_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_PackUnlock_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_PackUnlock_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Obj.MSG_PackUnlock_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Obj.MSG_PackUnlock_CS)
    MergeFrom(*source);
  }
}

void MSG_PackUnlock_CS::MergeFrom(const MSG_PackUnlock_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Obj.MSG_PackUnlock_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_packtype()) {
    _internal_set_packtype(from._internal_packtype());
  }
}

void MSG_PackUnlock_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Obj.MSG_PackUnlock_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_PackUnlock_CS::CopyFrom(const MSG_PackUnlock_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Obj.MSG_PackUnlock_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_PackUnlock_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MSG_PackUnlock_CS::InternalSwap(MSG_PackUnlock_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(packtype_, other->packtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_PackUnlock_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_PackUnlock_SC::InitAsDefaultInstance() {
}
class MSG_PackUnlock_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_PackUnlock_SC>()._has_bits_);
  static void set_has_packtype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_unlockcount(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_maxsize(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

MSG_PackUnlock_SC::MSG_PackUnlock_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Obj.MSG_PackUnlock_SC)
}
MSG_PackUnlock_SC::MSG_PackUnlock_SC(const MSG_PackUnlock_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&packtype_, &from.packtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&packtype_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:Obj.MSG_PackUnlock_SC)
}

void MSG_PackUnlock_SC::SharedCtor() {
  ::memset(&packtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&packtype_)) + sizeof(result_));
}

MSG_PackUnlock_SC::~MSG_PackUnlock_SC() {
  // @@protoc_insertion_point(destructor:Obj.MSG_PackUnlock_SC)
  SharedDtor();
}

void MSG_PackUnlock_SC::SharedDtor() {
}

void MSG_PackUnlock_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_PackUnlock_SC& MSG_PackUnlock_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_PackUnlock_SC_object_2eproto.base);
  return *internal_default_instance();
}


void MSG_PackUnlock_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:Obj.MSG_PackUnlock_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&packtype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&result_) -
        reinterpret_cast<char*>(&packtype_)) + sizeof(result_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_PackUnlock_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Obj.PackType packtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Obj::PackType_IsValid(val))) {
            _internal_set_packtype(static_cast<::Obj::PackType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 unlockcount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_unlockcount(&has_bits);
          unlockcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 maxsize = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_maxsize(&has_bits);
          maxsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_PackUnlock_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Obj.MSG_PackUnlock_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Obj.PackType packtype = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_packtype(), target);
  }

  // optional uint32 unlockcount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_unlockcount(), target);
  }

  // optional uint32 maxsize = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_maxsize(), target);
  }

  // optional bool result = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Obj.MSG_PackUnlock_SC)
  return target;
}

size_t MSG_PackUnlock_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Obj.MSG_PackUnlock_SC)
  size_t total_size = 0;

  // required .Obj.PackType packtype = 1;
  if (_internal_has_packtype()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_packtype());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional uint32 unlockcount = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_unlockcount());
    }

    // optional uint32 maxsize = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_maxsize());
    }

    // optional bool result = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_PackUnlock_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Obj.MSG_PackUnlock_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_PackUnlock_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_PackUnlock_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Obj.MSG_PackUnlock_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Obj.MSG_PackUnlock_SC)
    MergeFrom(*source);
  }
}

void MSG_PackUnlock_SC::MergeFrom(const MSG_PackUnlock_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Obj.MSG_PackUnlock_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      packtype_ = from.packtype_;
    }
    if (cached_has_bits & 0x00000002u) {
      unlockcount_ = from.unlockcount_;
    }
    if (cached_has_bits & 0x00000004u) {
      maxsize_ = from.maxsize_;
    }
    if (cached_has_bits & 0x00000008u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_PackUnlock_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Obj.MSG_PackUnlock_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_PackUnlock_SC::CopyFrom(const MSG_PackUnlock_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Obj.MSG_PackUnlock_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_PackUnlock_SC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MSG_PackUnlock_SC::InternalSwap(MSG_PackUnlock_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(packtype_, other->packtype_);
  swap(unlockcount_, other->unlockcount_);
  swap(maxsize_, other->maxsize_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_PackUnlock_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_MergeObjs_CS::InitAsDefaultInstance() {
}
class MSG_MergeObjs_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_MergeObjs_CS>()._has_bits_);
  static void set_has_packtype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dst_packtype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_MergeObjs_CS::MSG_MergeObjs_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Obj.MSG_MergeObjs_CS)
}
MSG_MergeObjs_CS::MSG_MergeObjs_CS(const MSG_MergeObjs_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      srcthisids_(from.srcthisids_),
      dstthisids_(from.dstthisids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&packtype_, &from.packtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&dst_packtype_) -
    reinterpret_cast<char*>(&packtype_)) + sizeof(dst_packtype_));
  // @@protoc_insertion_point(copy_constructor:Obj.MSG_MergeObjs_CS)
}

void MSG_MergeObjs_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_MergeObjs_CS_object_2eproto.base);
  ::memset(&packtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dst_packtype_) -
      reinterpret_cast<char*>(&packtype_)) + sizeof(dst_packtype_));
}

MSG_MergeObjs_CS::~MSG_MergeObjs_CS() {
  // @@protoc_insertion_point(destructor:Obj.MSG_MergeObjs_CS)
  SharedDtor();
}

void MSG_MergeObjs_CS::SharedDtor() {
}

void MSG_MergeObjs_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_MergeObjs_CS& MSG_MergeObjs_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_MergeObjs_CS_object_2eproto.base);
  return *internal_default_instance();
}


void MSG_MergeObjs_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:Obj.MSG_MergeObjs_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  srcthisids_.Clear();
  dstthisids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&packtype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dst_packtype_) -
        reinterpret_cast<char*>(&packtype_)) + sizeof(dst_packtype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_MergeObjs_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Obj.PackType packtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Obj::PackType_IsValid(val))) {
            _internal_set_packtype(static_cast<::Obj::PackType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated string srcthisids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_srcthisids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Obj.MSG_MergeObjs_CS.srcthisids");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string dstthisids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_dstthisids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Obj.MSG_MergeObjs_CS.dstthisids");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .Obj.PackType dst_packtype = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Obj::PackType_IsValid(val))) {
            _internal_set_dst_packtype(static_cast<::Obj::PackType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_MergeObjs_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Obj.MSG_MergeObjs_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Obj.PackType packtype = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_packtype(), target);
  }

  // repeated string srcthisids = 2;
  for (int i = 0, n = this->_internal_srcthisids_size(); i < n; i++) {
    const auto& s = this->_internal_srcthisids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Obj.MSG_MergeObjs_CS.srcthisids");
    target = stream->WriteString(2, s, target);
  }

  // repeated string dstthisids = 3;
  for (int i = 0, n = this->_internal_dstthisids_size(); i < n; i++) {
    const auto& s = this->_internal_dstthisids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Obj.MSG_MergeObjs_CS.dstthisids");
    target = stream->WriteString(3, s, target);
  }

  // optional .Obj.PackType dst_packtype = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_dst_packtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Obj.MSG_MergeObjs_CS)
  return target;
}

size_t MSG_MergeObjs_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Obj.MSG_MergeObjs_CS)
  size_t total_size = 0;

  // required .Obj.PackType packtype = 1;
  if (_internal_has_packtype()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_packtype());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string srcthisids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(srcthisids_.size());
  for (int i = 0, n = srcthisids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      srcthisids_.Get(i));
  }

  // repeated string dstthisids = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(dstthisids_.size());
  for (int i = 0, n = dstthisids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      dstthisids_.Get(i));
  }

  // optional .Obj.PackType dst_packtype = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dst_packtype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_MergeObjs_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Obj.MSG_MergeObjs_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_MergeObjs_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_MergeObjs_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Obj.MSG_MergeObjs_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Obj.MSG_MergeObjs_CS)
    MergeFrom(*source);
  }
}

void MSG_MergeObjs_CS::MergeFrom(const MSG_MergeObjs_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Obj.MSG_MergeObjs_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  srcthisids_.MergeFrom(from.srcthisids_);
  dstthisids_.MergeFrom(from.dstthisids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      packtype_ = from.packtype_;
    }
    if (cached_has_bits & 0x00000002u) {
      dst_packtype_ = from.dst_packtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_MergeObjs_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Obj.MSG_MergeObjs_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_MergeObjs_CS::CopyFrom(const MSG_MergeObjs_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Obj.MSG_MergeObjs_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_MergeObjs_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MSG_MergeObjs_CS::InternalSwap(MSG_MergeObjs_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  srcthisids_.InternalSwap(&other->srcthisids_);
  dstthisids_.InternalSwap(&other->dstthisids_);
  swap(packtype_, other->packtype_);
  swap(dst_packtype_, other->dst_packtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_MergeObjs_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_MergeObjs_SC::InitAsDefaultInstance() {
}
class MSG_MergeObjs_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_MergeObjs_SC>()._has_bits_);
  static void set_has_packtype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_dst_packtype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MSG_MergeObjs_SC::MSG_MergeObjs_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Obj.MSG_MergeObjs_SC)
}
MSG_MergeObjs_SC::MSG_MergeObjs_SC(const MSG_MergeObjs_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&packtype_, &from.packtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&dst_packtype_) -
    reinterpret_cast<char*>(&packtype_)) + sizeof(dst_packtype_));
  // @@protoc_insertion_point(copy_constructor:Obj.MSG_MergeObjs_SC)
}

void MSG_MergeObjs_SC::SharedCtor() {
  ::memset(&packtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dst_packtype_) -
      reinterpret_cast<char*>(&packtype_)) + sizeof(dst_packtype_));
}

MSG_MergeObjs_SC::~MSG_MergeObjs_SC() {
  // @@protoc_insertion_point(destructor:Obj.MSG_MergeObjs_SC)
  SharedDtor();
}

void MSG_MergeObjs_SC::SharedDtor() {
}

void MSG_MergeObjs_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_MergeObjs_SC& MSG_MergeObjs_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_MergeObjs_SC_object_2eproto.base);
  return *internal_default_instance();
}


void MSG_MergeObjs_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:Obj.MSG_MergeObjs_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&packtype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dst_packtype_) -
        reinterpret_cast<char*>(&packtype_)) + sizeof(dst_packtype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_MergeObjs_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Obj.PackType packtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Obj::PackType_IsValid(val))) {
            _internal_set_packtype(static_cast<::Obj::PackType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Obj.PackType dst_packtype = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Obj::PackType_IsValid(val))) {
            _internal_set_dst_packtype(static_cast<::Obj::PackType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_MergeObjs_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Obj.MSG_MergeObjs_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Obj.PackType packtype = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_packtype(), target);
  }

  // optional bool result = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_result(), target);
  }

  // optional .Obj.PackType dst_packtype = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_dst_packtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Obj.MSG_MergeObjs_SC)
  return target;
}

size_t MSG_MergeObjs_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Obj.MSG_MergeObjs_SC)
  size_t total_size = 0;

  // required .Obj.PackType packtype = 1;
  if (_internal_has_packtype()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_packtype());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional bool result = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional .Obj.PackType dst_packtype = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dst_packtype());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_MergeObjs_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Obj.MSG_MergeObjs_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_MergeObjs_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_MergeObjs_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Obj.MSG_MergeObjs_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Obj.MSG_MergeObjs_SC)
    MergeFrom(*source);
  }
}

void MSG_MergeObjs_SC::MergeFrom(const MSG_MergeObjs_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Obj.MSG_MergeObjs_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      packtype_ = from.packtype_;
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000004u) {
      dst_packtype_ = from.dst_packtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_MergeObjs_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Obj.MSG_MergeObjs_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_MergeObjs_SC::CopyFrom(const MSG_MergeObjs_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Obj.MSG_MergeObjs_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_MergeObjs_SC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MSG_MergeObjs_SC::InternalSwap(MSG_MergeObjs_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(packtype_, other->packtype_);
  swap(result_, other->result_);
  swap(dst_packtype_, other->dst_packtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_MergeObjs_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void t_TidyPackInfo::InitAsDefaultInstance() {
}
class t_TidyPackInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<t_TidyPackInfo>()._has_bits_);
  static void set_has_thisid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_grid_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_grid_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

t_TidyPackInfo::t_TidyPackInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Obj.t_TidyPackInfo)
}
t_TidyPackInfo::t_TidyPackInfo(const t_TidyPackInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  thisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_thisid()) {
    thisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thisid_);
  }
  ::memcpy(&grid_x_, &from.grid_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&grid_y_) -
    reinterpret_cast<char*>(&grid_x_)) + sizeof(grid_y_));
  // @@protoc_insertion_point(copy_constructor:Obj.t_TidyPackInfo)
}

void t_TidyPackInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_t_TidyPackInfo_object_2eproto.base);
  thisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&grid_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&grid_y_) -
      reinterpret_cast<char*>(&grid_x_)) + sizeof(grid_y_));
}

t_TidyPackInfo::~t_TidyPackInfo() {
  // @@protoc_insertion_point(destructor:Obj.t_TidyPackInfo)
  SharedDtor();
}

void t_TidyPackInfo::SharedDtor() {
  thisid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void t_TidyPackInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const t_TidyPackInfo& t_TidyPackInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_t_TidyPackInfo_object_2eproto.base);
  return *internal_default_instance();
}


void t_TidyPackInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Obj.t_TidyPackInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    thisid_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&grid_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&grid_y_) -
        reinterpret_cast<char*>(&grid_x_)) + sizeof(grid_y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* t_TidyPackInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string thisid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_thisid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Obj.t_TidyPackInfo.thisid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 grid_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_grid_x(&has_bits);
          grid_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 grid_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_grid_y(&has_bits);
          grid_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* t_TidyPackInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Obj.t_TidyPackInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string thisid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_thisid().data(), static_cast<int>(this->_internal_thisid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Obj.t_TidyPackInfo.thisid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_thisid(), target);
  }

  // optional uint32 grid_x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_grid_x(), target);
  }

  // optional uint32 grid_y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_grid_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Obj.t_TidyPackInfo)
  return target;
}

size_t t_TidyPackInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Obj.t_TidyPackInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string thisid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_thisid());
    }

    // optional uint32 grid_x = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_grid_x());
    }

    // optional uint32 grid_y = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_grid_y());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void t_TidyPackInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Obj.t_TidyPackInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const t_TidyPackInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<t_TidyPackInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Obj.t_TidyPackInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Obj.t_TidyPackInfo)
    MergeFrom(*source);
  }
}

void t_TidyPackInfo::MergeFrom(const t_TidyPackInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Obj.t_TidyPackInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      thisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thisid_);
    }
    if (cached_has_bits & 0x00000002u) {
      grid_x_ = from.grid_x_;
    }
    if (cached_has_bits & 0x00000004u) {
      grid_y_ = from.grid_y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void t_TidyPackInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Obj.t_TidyPackInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void t_TidyPackInfo::CopyFrom(const t_TidyPackInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Obj.t_TidyPackInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool t_TidyPackInfo::IsInitialized() const {
  return true;
}

void t_TidyPackInfo::InternalSwap(t_TidyPackInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  thisid_.Swap(&other->thisid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(grid_x_, other->grid_x_);
  swap(grid_y_, other->grid_y_);
}

::PROTOBUF_NAMESPACE_ID::Metadata t_TidyPackInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_TidyPack_CS::InitAsDefaultInstance() {
}
class MSG_TidyPack_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_TidyPack_CS>()._has_bits_);
  static void set_has_packtype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_TidyPack_CS::MSG_TidyPack_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Obj.MSG_TidyPack_CS)
}
MSG_TidyPack_CS::MSG_TidyPack_CS(const MSG_TidyPack_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      infos_(from.infos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  packtype_ = from.packtype_;
  // @@protoc_insertion_point(copy_constructor:Obj.MSG_TidyPack_CS)
}

void MSG_TidyPack_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_TidyPack_CS_object_2eproto.base);
  packtype_ = 0;
}

MSG_TidyPack_CS::~MSG_TidyPack_CS() {
  // @@protoc_insertion_point(destructor:Obj.MSG_TidyPack_CS)
  SharedDtor();
}

void MSG_TidyPack_CS::SharedDtor() {
}

void MSG_TidyPack_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_TidyPack_CS& MSG_TidyPack_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_TidyPack_CS_object_2eproto.base);
  return *internal_default_instance();
}


void MSG_TidyPack_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:Obj.MSG_TidyPack_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  infos_.Clear();
  packtype_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_TidyPack_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Obj.PackType packtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Obj::PackType_IsValid(val))) {
            _internal_set_packtype(static_cast<::Obj::PackType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .Obj.t_TidyPackInfo infos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_TidyPack_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Obj.MSG_TidyPack_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Obj.PackType packtype = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_packtype(), target);
  }

  // repeated .Obj.t_TidyPackInfo infos = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_infos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Obj.MSG_TidyPack_CS)
  return target;
}

size_t MSG_TidyPack_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Obj.MSG_TidyPack_CS)
  size_t total_size = 0;

  // required .Obj.PackType packtype = 1;
  if (_internal_has_packtype()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_packtype());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Obj.t_TidyPackInfo infos = 2;
  total_size += 1UL * this->_internal_infos_size();
  for (const auto& msg : this->infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_TidyPack_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Obj.MSG_TidyPack_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_TidyPack_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_TidyPack_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Obj.MSG_TidyPack_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Obj.MSG_TidyPack_CS)
    MergeFrom(*source);
  }
}

void MSG_TidyPack_CS::MergeFrom(const MSG_TidyPack_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Obj.MSG_TidyPack_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  infos_.MergeFrom(from.infos_);
  if (from._internal_has_packtype()) {
    _internal_set_packtype(from._internal_packtype());
  }
}

void MSG_TidyPack_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Obj.MSG_TidyPack_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_TidyPack_CS::CopyFrom(const MSG_TidyPack_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Obj.MSG_TidyPack_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_TidyPack_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MSG_TidyPack_CS::InternalSwap(MSG_TidyPack_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  infos_.InternalSwap(&other->infos_);
  swap(packtype_, other->packtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_TidyPack_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_TidyPack_SC::InitAsDefaultInstance() {
}
class MSG_TidyPack_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_TidyPack_SC>()._has_bits_);
  static void set_has_packtype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_TidyPack_SC::MSG_TidyPack_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Obj.MSG_TidyPack_SC)
}
MSG_TidyPack_SC::MSG_TidyPack_SC(const MSG_TidyPack_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&packtype_, &from.packtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&packtype_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:Obj.MSG_TidyPack_SC)
}

void MSG_TidyPack_SC::SharedCtor() {
  ::memset(&packtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&packtype_)) + sizeof(result_));
}

MSG_TidyPack_SC::~MSG_TidyPack_SC() {
  // @@protoc_insertion_point(destructor:Obj.MSG_TidyPack_SC)
  SharedDtor();
}

void MSG_TidyPack_SC::SharedDtor() {
}

void MSG_TidyPack_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_TidyPack_SC& MSG_TidyPack_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_TidyPack_SC_object_2eproto.base);
  return *internal_default_instance();
}


void MSG_TidyPack_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:Obj.MSG_TidyPack_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&packtype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&result_) -
        reinterpret_cast<char*>(&packtype_)) + sizeof(result_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_TidyPack_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Obj.PackType packtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Obj::PackType_IsValid(val))) {
            _internal_set_packtype(static_cast<::Obj::PackType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_TidyPack_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Obj.MSG_TidyPack_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Obj.PackType packtype = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_packtype(), target);
  }

  // optional bool result = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Obj.MSG_TidyPack_SC)
  return target;
}

size_t MSG_TidyPack_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Obj.MSG_TidyPack_SC)
  size_t total_size = 0;

  // required .Obj.PackType packtype = 1;
  if (_internal_has_packtype()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_packtype());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool result = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_TidyPack_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Obj.MSG_TidyPack_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_TidyPack_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_TidyPack_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Obj.MSG_TidyPack_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Obj.MSG_TidyPack_SC)
    MergeFrom(*source);
  }
}

void MSG_TidyPack_SC::MergeFrom(const MSG_TidyPack_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Obj.MSG_TidyPack_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      packtype_ = from.packtype_;
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_TidyPack_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Obj.MSG_TidyPack_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_TidyPack_SC::CopyFrom(const MSG_TidyPack_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Obj.MSG_TidyPack_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_TidyPack_SC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MSG_TidyPack_SC::InternalSwap(MSG_TidyPack_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(packtype_, other->packtype_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_TidyPack_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqSellObject_CS::InitAsDefaultInstance() {
}
class MSG_ReqSellObject_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqSellObject_CS>()._has_bits_);
  static void set_has_thisid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_passwd(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_ReqSellObject_CS::MSG_ReqSellObject_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Obj.MSG_ReqSellObject_CS)
}
MSG_ReqSellObject_CS::MSG_ReqSellObject_CS(const MSG_ReqSellObject_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  thisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_thisid()) {
    thisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thisid_);
  }
  passwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_passwd()) {
    passwd_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.passwd_);
  }
  num_ = from.num_;
  // @@protoc_insertion_point(copy_constructor:Obj.MSG_ReqSellObject_CS)
}

void MSG_ReqSellObject_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_ReqSellObject_CS_object_2eproto.base);
  thisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  passwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  num_ = 1u;
}

MSG_ReqSellObject_CS::~MSG_ReqSellObject_CS() {
  // @@protoc_insertion_point(destructor:Obj.MSG_ReqSellObject_CS)
  SharedDtor();
}

void MSG_ReqSellObject_CS::SharedDtor() {
  thisid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  passwd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_ReqSellObject_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqSellObject_CS& MSG_ReqSellObject_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqSellObject_CS_object_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqSellObject_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:Obj.MSG_ReqSellObject_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      thisid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      passwd_.ClearNonDefaultToEmptyNoArena();
    }
    num_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqSellObject_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string thisid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_thisid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Obj.MSG_ReqSellObject_CS.thisid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_num(&has_bits);
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string passwd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_passwd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Obj.MSG_ReqSellObject_CS.passwd");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqSellObject_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Obj.MSG_ReqSellObject_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string thisid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_thisid().data(), static_cast<int>(this->_internal_thisid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Obj.MSG_ReqSellObject_CS.thisid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_thisid(), target);
  }

  // optional uint32 num = 2 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num(), target);
  }

  // optional string passwd = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_passwd().data(), static_cast<int>(this->_internal_passwd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Obj.MSG_ReqSellObject_CS.passwd");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_passwd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Obj.MSG_ReqSellObject_CS)
  return target;
}

size_t MSG_ReqSellObject_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Obj.MSG_ReqSellObject_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string thisid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_thisid());
    }

    // optional string passwd = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_passwd());
    }

    // optional uint32 num = 2 [default = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqSellObject_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Obj.MSG_ReqSellObject_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqSellObject_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqSellObject_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Obj.MSG_ReqSellObject_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Obj.MSG_ReqSellObject_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqSellObject_CS::MergeFrom(const MSG_ReqSellObject_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Obj.MSG_ReqSellObject_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      thisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thisid_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      passwd_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.passwd_);
    }
    if (cached_has_bits & 0x00000004u) {
      num_ = from.num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_ReqSellObject_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Obj.MSG_ReqSellObject_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqSellObject_CS::CopyFrom(const MSG_ReqSellObject_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Obj.MSG_ReqSellObject_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqSellObject_CS::IsInitialized() const {
  return true;
}

void MSG_ReqSellObject_CS::InternalSwap(MSG_ReqSellObject_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  thisid_.Swap(&other->thisid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  passwd_.Swap(&other->passwd_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(num_, other->num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqSellObject_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqMoveObject_CS::InitAsDefaultInstance() {
}
class MSG_ReqMoveObject_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqMoveObject_CS>()._has_bits_);
  static void set_has_thisid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_grid_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_grid_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_packtype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_dst_packtype(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

MSG_ReqMoveObject_CS::MSG_ReqMoveObject_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Obj.MSG_ReqMoveObject_CS)
}
MSG_ReqMoveObject_CS::MSG_ReqMoveObject_CS(const MSG_ReqMoveObject_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  thisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_thisid()) {
    thisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thisid_);
  }
  ::memcpy(&grid_x_, &from.grid_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&dst_packtype_) -
    reinterpret_cast<char*>(&grid_x_)) + sizeof(dst_packtype_));
  // @@protoc_insertion_point(copy_constructor:Obj.MSG_ReqMoveObject_CS)
}

void MSG_ReqMoveObject_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_ReqMoveObject_CS_object_2eproto.base);
  thisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&grid_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dst_packtype_) -
      reinterpret_cast<char*>(&grid_x_)) + sizeof(dst_packtype_));
}

MSG_ReqMoveObject_CS::~MSG_ReqMoveObject_CS() {
  // @@protoc_insertion_point(destructor:Obj.MSG_ReqMoveObject_CS)
  SharedDtor();
}

void MSG_ReqMoveObject_CS::SharedDtor() {
  thisid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_ReqMoveObject_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqMoveObject_CS& MSG_ReqMoveObject_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqMoveObject_CS_object_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqMoveObject_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:Obj.MSG_ReqMoveObject_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    thisid_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&grid_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dst_packtype_) -
        reinterpret_cast<char*>(&grid_x_)) + sizeof(dst_packtype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqMoveObject_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string thisid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_thisid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Obj.MSG_ReqMoveObject_CS.thisid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 grid_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_grid_x(&has_bits);
          grid_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 grid_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_grid_y(&has_bits);
          grid_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .Obj.PackType packtype = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Obj::PackType_IsValid(val))) {
            _internal_set_packtype(static_cast<::Obj::PackType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .Obj.PackType dst_packtype = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Obj::PackType_IsValid(val))) {
            _internal_set_dst_packtype(static_cast<::Obj::PackType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqMoveObject_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Obj.MSG_ReqMoveObject_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string thisid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_thisid().data(), static_cast<int>(this->_internal_thisid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Obj.MSG_ReqMoveObject_CS.thisid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_thisid(), target);
  }

  // optional uint32 grid_x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_grid_x(), target);
  }

  // optional uint32 grid_y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_grid_y(), target);
  }

  // required .Obj.PackType packtype = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_packtype(), target);
  }

  // optional .Obj.PackType dst_packtype = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_dst_packtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Obj.MSG_ReqMoveObject_CS)
  return target;
}

size_t MSG_ReqMoveObject_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Obj.MSG_ReqMoveObject_CS)
  size_t total_size = 0;

  // required .Obj.PackType packtype = 4;
  if (_internal_has_packtype()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_packtype());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string thisid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_thisid());
    }

    // optional uint32 grid_x = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_grid_x());
    }

    // optional uint32 grid_y = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_grid_y());
    }

  }
  // optional .Obj.PackType dst_packtype = 5;
  if (cached_has_bits & 0x00000010u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dst_packtype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqMoveObject_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Obj.MSG_ReqMoveObject_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqMoveObject_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqMoveObject_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Obj.MSG_ReqMoveObject_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Obj.MSG_ReqMoveObject_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqMoveObject_CS::MergeFrom(const MSG_ReqMoveObject_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Obj.MSG_ReqMoveObject_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      thisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thisid_);
    }
    if (cached_has_bits & 0x00000002u) {
      grid_x_ = from.grid_x_;
    }
    if (cached_has_bits & 0x00000004u) {
      grid_y_ = from.grid_y_;
    }
    if (cached_has_bits & 0x00000008u) {
      packtype_ = from.packtype_;
    }
    if (cached_has_bits & 0x00000010u) {
      dst_packtype_ = from.dst_packtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_ReqMoveObject_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Obj.MSG_ReqMoveObject_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqMoveObject_CS::CopyFrom(const MSG_ReqMoveObject_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Obj.MSG_ReqMoveObject_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqMoveObject_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  return true;
}

void MSG_ReqMoveObject_CS::InternalSwap(MSG_ReqMoveObject_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  thisid_.Swap(&other->thisid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(grid_x_, other->grid_x_);
  swap(grid_y_, other->grid_y_);
  swap(packtype_, other->packtype_);
  swap(dst_packtype_, other->dst_packtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqMoveObject_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqSwapObject_CS::InitAsDefaultInstance() {
}
class MSG_ReqSwapObject_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqSwapObject_CS>()._has_bits_);
  static void set_has_src_thisid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dst_thisid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_dst_packtype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_packtype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

MSG_ReqSwapObject_CS::MSG_ReqSwapObject_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Obj.MSG_ReqSwapObject_CS)
}
MSG_ReqSwapObject_CS::MSG_ReqSwapObject_CS(const MSG_ReqSwapObject_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  src_thisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_src_thisid()) {
    src_thisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.src_thisid_);
  }
  dst_thisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_dst_thisid()) {
    dst_thisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dst_thisid_);
  }
  ::memcpy(&dst_packtype_, &from.dst_packtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&packtype_) -
    reinterpret_cast<char*>(&dst_packtype_)) + sizeof(packtype_));
  // @@protoc_insertion_point(copy_constructor:Obj.MSG_ReqSwapObject_CS)
}

void MSG_ReqSwapObject_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_ReqSwapObject_CS_object_2eproto.base);
  src_thisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dst_thisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dst_packtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&packtype_) -
      reinterpret_cast<char*>(&dst_packtype_)) + sizeof(packtype_));
}

MSG_ReqSwapObject_CS::~MSG_ReqSwapObject_CS() {
  // @@protoc_insertion_point(destructor:Obj.MSG_ReqSwapObject_CS)
  SharedDtor();
}

void MSG_ReqSwapObject_CS::SharedDtor() {
  src_thisid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dst_thisid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_ReqSwapObject_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqSwapObject_CS& MSG_ReqSwapObject_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqSwapObject_CS_object_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqSwapObject_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:Obj.MSG_ReqSwapObject_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      src_thisid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      dst_thisid_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&dst_packtype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&packtype_) -
        reinterpret_cast<char*>(&dst_packtype_)) + sizeof(packtype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqSwapObject_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string src_thisid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_src_thisid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Obj.MSG_ReqSwapObject_CS.src_thisid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string dst_thisid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_dst_thisid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Obj.MSG_ReqSwapObject_CS.dst_thisid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Obj.PackType dst_packtype = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Obj::PackType_IsValid(val))) {
            _internal_set_dst_packtype(static_cast<::Obj::PackType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .Obj.PackType packtype = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Obj::PackType_IsValid(val))) {
            _internal_set_packtype(static_cast<::Obj::PackType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqSwapObject_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Obj.MSG_ReqSwapObject_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string src_thisid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_src_thisid().data(), static_cast<int>(this->_internal_src_thisid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Obj.MSG_ReqSwapObject_CS.src_thisid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_src_thisid(), target);
  }

  // optional string dst_thisid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_dst_thisid().data(), static_cast<int>(this->_internal_dst_thisid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Obj.MSG_ReqSwapObject_CS.dst_thisid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dst_thisid(), target);
  }

  // optional .Obj.PackType dst_packtype = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_dst_packtype(), target);
  }

  // required .Obj.PackType packtype = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_packtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Obj.MSG_ReqSwapObject_CS)
  return target;
}

size_t MSG_ReqSwapObject_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Obj.MSG_ReqSwapObject_CS)
  size_t total_size = 0;

  // required .Obj.PackType packtype = 4;
  if (_internal_has_packtype()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_packtype());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string src_thisid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_src_thisid());
    }

    // optional string dst_thisid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_dst_thisid());
    }

    // optional .Obj.PackType dst_packtype = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dst_packtype());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqSwapObject_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Obj.MSG_ReqSwapObject_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqSwapObject_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqSwapObject_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Obj.MSG_ReqSwapObject_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Obj.MSG_ReqSwapObject_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqSwapObject_CS::MergeFrom(const MSG_ReqSwapObject_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Obj.MSG_ReqSwapObject_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      src_thisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.src_thisid_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      dst_thisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dst_thisid_);
    }
    if (cached_has_bits & 0x00000004u) {
      dst_packtype_ = from.dst_packtype_;
    }
    if (cached_has_bits & 0x00000008u) {
      packtype_ = from.packtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_ReqSwapObject_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Obj.MSG_ReqSwapObject_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqSwapObject_CS::CopyFrom(const MSG_ReqSwapObject_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Obj.MSG_ReqSwapObject_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqSwapObject_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  return true;
}

void MSG_ReqSwapObject_CS::InternalSwap(MSG_ReqSwapObject_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  src_thisid_.Swap(&other->src_thisid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  dst_thisid_.Swap(&other->dst_thisid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(dst_packtype_, other->dst_packtype_);
  swap(packtype_, other->packtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqSwapObject_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqDestroyObject_CS::InitAsDefaultInstance() {
}
class MSG_ReqDestroyObject_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqDestroyObject_CS>()._has_bits_);
  static void set_has_thisid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_packtype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_passwd(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_ReqDestroyObject_CS::MSG_ReqDestroyObject_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Obj.MSG_ReqDestroyObject_CS)
}
MSG_ReqDestroyObject_CS::MSG_ReqDestroyObject_CS(const MSG_ReqDestroyObject_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  thisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_thisid()) {
    thisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thisid_);
  }
  passwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_passwd()) {
    passwd_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.passwd_);
  }
  packtype_ = from.packtype_;
  // @@protoc_insertion_point(copy_constructor:Obj.MSG_ReqDestroyObject_CS)
}

void MSG_ReqDestroyObject_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_ReqDestroyObject_CS_object_2eproto.base);
  thisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  passwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  packtype_ = 0;
}

MSG_ReqDestroyObject_CS::~MSG_ReqDestroyObject_CS() {
  // @@protoc_insertion_point(destructor:Obj.MSG_ReqDestroyObject_CS)
  SharedDtor();
}

void MSG_ReqDestroyObject_CS::SharedDtor() {
  thisid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  passwd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_ReqDestroyObject_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqDestroyObject_CS& MSG_ReqDestroyObject_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqDestroyObject_CS_object_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqDestroyObject_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:Obj.MSG_ReqDestroyObject_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      thisid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      passwd_.ClearNonDefaultToEmptyNoArena();
    }
  }
  packtype_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqDestroyObject_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string thisid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_thisid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Obj.MSG_ReqDestroyObject_CS.thisid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .Obj.PackType packtype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Obj::PackType_IsValid(val))) {
            _internal_set_packtype(static_cast<::Obj::PackType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string passwd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_passwd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Obj.MSG_ReqDestroyObject_CS.passwd");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqDestroyObject_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Obj.MSG_ReqDestroyObject_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string thisid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_thisid().data(), static_cast<int>(this->_internal_thisid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Obj.MSG_ReqDestroyObject_CS.thisid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_thisid(), target);
  }

  // required .Obj.PackType packtype = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_packtype(), target);
  }

  // optional string passwd = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_passwd().data(), static_cast<int>(this->_internal_passwd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Obj.MSG_ReqDestroyObject_CS.passwd");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_passwd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Obj.MSG_ReqDestroyObject_CS)
  return target;
}

size_t MSG_ReqDestroyObject_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Obj.MSG_ReqDestroyObject_CS)
  size_t total_size = 0;

  // required .Obj.PackType packtype = 2;
  if (_internal_has_packtype()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_packtype());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string thisid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_thisid());
    }

    // optional string passwd = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_passwd());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqDestroyObject_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Obj.MSG_ReqDestroyObject_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqDestroyObject_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqDestroyObject_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Obj.MSG_ReqDestroyObject_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Obj.MSG_ReqDestroyObject_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqDestroyObject_CS::MergeFrom(const MSG_ReqDestroyObject_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Obj.MSG_ReqDestroyObject_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      thisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thisid_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      passwd_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.passwd_);
    }
    if (cached_has_bits & 0x00000004u) {
      packtype_ = from.packtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_ReqDestroyObject_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Obj.MSG_ReqDestroyObject_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqDestroyObject_CS::CopyFrom(const MSG_ReqDestroyObject_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Obj.MSG_ReqDestroyObject_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqDestroyObject_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  return true;
}

void MSG_ReqDestroyObject_CS::InternalSwap(MSG_ReqDestroyObject_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  thisid_.Swap(&other->thisid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  passwd_.Swap(&other->passwd_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(packtype_, other->packtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqDestroyObject_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqPutOnCard_CS::InitAsDefaultInstance() {
}
class MSG_ReqPutOnCard_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqPutOnCard_CS>()._has_bits_);
  static void set_has_thisid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_grid_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_grid_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_packtype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

MSG_ReqPutOnCard_CS::MSG_ReqPutOnCard_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Obj.MSG_ReqPutOnCard_CS)
}
MSG_ReqPutOnCard_CS::MSG_ReqPutOnCard_CS(const MSG_ReqPutOnCard_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  thisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_thisid()) {
    thisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thisid_);
  }
  ::memcpy(&grid_x_, &from.grid_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&packtype_) -
    reinterpret_cast<char*>(&grid_x_)) + sizeof(packtype_));
  // @@protoc_insertion_point(copy_constructor:Obj.MSG_ReqPutOnCard_CS)
}

void MSG_ReqPutOnCard_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_ReqPutOnCard_CS_object_2eproto.base);
  thisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&grid_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&packtype_) -
      reinterpret_cast<char*>(&grid_x_)) + sizeof(packtype_));
}

MSG_ReqPutOnCard_CS::~MSG_ReqPutOnCard_CS() {
  // @@protoc_insertion_point(destructor:Obj.MSG_ReqPutOnCard_CS)
  SharedDtor();
}

void MSG_ReqPutOnCard_CS::SharedDtor() {
  thisid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_ReqPutOnCard_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqPutOnCard_CS& MSG_ReqPutOnCard_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqPutOnCard_CS_object_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqPutOnCard_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:Obj.MSG_ReqPutOnCard_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    thisid_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&grid_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&packtype_) -
        reinterpret_cast<char*>(&grid_x_)) + sizeof(packtype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqPutOnCard_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string thisid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_thisid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Obj.MSG_ReqPutOnCard_CS.thisid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 grid_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_grid_x(&has_bits);
          grid_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 grid_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_grid_y(&has_bits);
          grid_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Obj.PackType packtype = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Obj::PackType_IsValid(val))) {
            _internal_set_packtype(static_cast<::Obj::PackType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqPutOnCard_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Obj.MSG_ReqPutOnCard_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string thisid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_thisid().data(), static_cast<int>(this->_internal_thisid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Obj.MSG_ReqPutOnCard_CS.thisid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_thisid(), target);
  }

  // optional uint32 grid_x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_grid_x(), target);
  }

  // optional uint32 grid_y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_grid_y(), target);
  }

  // optional .Obj.PackType packtype = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_packtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Obj.MSG_ReqPutOnCard_CS)
  return target;
}

size_t MSG_ReqPutOnCard_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Obj.MSG_ReqPutOnCard_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string thisid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_thisid());
    }

    // optional uint32 grid_x = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_grid_x());
    }

    // optional uint32 grid_y = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_grid_y());
    }

    // optional .Obj.PackType packtype = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_packtype());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqPutOnCard_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Obj.MSG_ReqPutOnCard_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqPutOnCard_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqPutOnCard_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Obj.MSG_ReqPutOnCard_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Obj.MSG_ReqPutOnCard_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqPutOnCard_CS::MergeFrom(const MSG_ReqPutOnCard_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Obj.MSG_ReqPutOnCard_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      thisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thisid_);
    }
    if (cached_has_bits & 0x00000002u) {
      grid_x_ = from.grid_x_;
    }
    if (cached_has_bits & 0x00000004u) {
      grid_y_ = from.grid_y_;
    }
    if (cached_has_bits & 0x00000008u) {
      packtype_ = from.packtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_ReqPutOnCard_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Obj.MSG_ReqPutOnCard_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqPutOnCard_CS::CopyFrom(const MSG_ReqPutOnCard_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Obj.MSG_ReqPutOnCard_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqPutOnCard_CS::IsInitialized() const {
  return true;
}

void MSG_ReqPutOnCard_CS::InternalSwap(MSG_ReqPutOnCard_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  thisid_.Swap(&other->thisid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(grid_x_, other->grid_x_);
  swap(grid_y_, other->grid_y_);
  swap(packtype_, other->packtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqPutOnCard_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqPutOffCard_CS::InitAsDefaultInstance() {
}
class MSG_ReqPutOffCard_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqPutOffCard_CS>()._has_bits_);
  static void set_has_thisid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_grid_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_grid_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MSG_ReqPutOffCard_CS::MSG_ReqPutOffCard_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Obj.MSG_ReqPutOffCard_CS)
}
MSG_ReqPutOffCard_CS::MSG_ReqPutOffCard_CS(const MSG_ReqPutOffCard_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  thisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_thisid()) {
    thisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thisid_);
  }
  ::memcpy(&grid_x_, &from.grid_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&grid_y_) -
    reinterpret_cast<char*>(&grid_x_)) + sizeof(grid_y_));
  // @@protoc_insertion_point(copy_constructor:Obj.MSG_ReqPutOffCard_CS)
}

void MSG_ReqPutOffCard_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_ReqPutOffCard_CS_object_2eproto.base);
  thisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&grid_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&grid_y_) -
      reinterpret_cast<char*>(&grid_x_)) + sizeof(grid_y_));
}

MSG_ReqPutOffCard_CS::~MSG_ReqPutOffCard_CS() {
  // @@protoc_insertion_point(destructor:Obj.MSG_ReqPutOffCard_CS)
  SharedDtor();
}

void MSG_ReqPutOffCard_CS::SharedDtor() {
  thisid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_ReqPutOffCard_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqPutOffCard_CS& MSG_ReqPutOffCard_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqPutOffCard_CS_object_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqPutOffCard_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:Obj.MSG_ReqPutOffCard_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    thisid_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&grid_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&grid_y_) -
        reinterpret_cast<char*>(&grid_x_)) + sizeof(grid_y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqPutOffCard_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string thisid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_thisid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Obj.MSG_ReqPutOffCard_CS.thisid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 grid_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_grid_x(&has_bits);
          grid_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 grid_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_grid_y(&has_bits);
          grid_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqPutOffCard_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Obj.MSG_ReqPutOffCard_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string thisid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_thisid().data(), static_cast<int>(this->_internal_thisid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Obj.MSG_ReqPutOffCard_CS.thisid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_thisid(), target);
  }

  // optional uint32 grid_x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_grid_x(), target);
  }

  // optional uint32 grid_y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_grid_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Obj.MSG_ReqPutOffCard_CS)
  return target;
}

size_t MSG_ReqPutOffCard_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Obj.MSG_ReqPutOffCard_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string thisid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_thisid());
    }

    // optional uint32 grid_x = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_grid_x());
    }

    // optional uint32 grid_y = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_grid_y());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqPutOffCard_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Obj.MSG_ReqPutOffCard_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqPutOffCard_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqPutOffCard_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Obj.MSG_ReqPutOffCard_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Obj.MSG_ReqPutOffCard_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqPutOffCard_CS::MergeFrom(const MSG_ReqPutOffCard_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Obj.MSG_ReqPutOffCard_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      thisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thisid_);
    }
    if (cached_has_bits & 0x00000002u) {
      grid_x_ = from.grid_x_;
    }
    if (cached_has_bits & 0x00000004u) {
      grid_y_ = from.grid_y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_ReqPutOffCard_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Obj.MSG_ReqPutOffCard_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqPutOffCard_CS::CopyFrom(const MSG_ReqPutOffCard_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Obj.MSG_ReqPutOffCard_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqPutOffCard_CS::IsInitialized() const {
  return true;
}

void MSG_ReqPutOffCard_CS::InternalSwap(MSG_ReqPutOffCard_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  thisid_.Swap(&other->thisid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(grid_x_, other->grid_x_);
  swap(grid_y_, other->grid_y_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqPutOffCard_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqSwapCard_CS::InitAsDefaultInstance() {
}
class MSG_ReqSwapCard_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqSwapCard_CS>()._has_bits_);
  static void set_has_src_thisid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dst_thisid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_ReqSwapCard_CS::MSG_ReqSwapCard_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Obj.MSG_ReqSwapCard_CS)
}
MSG_ReqSwapCard_CS::MSG_ReqSwapCard_CS(const MSG_ReqSwapCard_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  src_thisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_src_thisid()) {
    src_thisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.src_thisid_);
  }
  dst_thisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_dst_thisid()) {
    dst_thisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dst_thisid_);
  }
  // @@protoc_insertion_point(copy_constructor:Obj.MSG_ReqSwapCard_CS)
}

void MSG_ReqSwapCard_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_ReqSwapCard_CS_object_2eproto.base);
  src_thisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dst_thisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MSG_ReqSwapCard_CS::~MSG_ReqSwapCard_CS() {
  // @@protoc_insertion_point(destructor:Obj.MSG_ReqSwapCard_CS)
  SharedDtor();
}

void MSG_ReqSwapCard_CS::SharedDtor() {
  src_thisid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dst_thisid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_ReqSwapCard_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqSwapCard_CS& MSG_ReqSwapCard_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqSwapCard_CS_object_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqSwapCard_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:Obj.MSG_ReqSwapCard_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      src_thisid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      dst_thisid_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqSwapCard_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string src_thisid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_src_thisid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Obj.MSG_ReqSwapCard_CS.src_thisid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string dst_thisid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_dst_thisid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Obj.MSG_ReqSwapCard_CS.dst_thisid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqSwapCard_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Obj.MSG_ReqSwapCard_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string src_thisid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_src_thisid().data(), static_cast<int>(this->_internal_src_thisid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Obj.MSG_ReqSwapCard_CS.src_thisid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_src_thisid(), target);
  }

  // optional string dst_thisid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_dst_thisid().data(), static_cast<int>(this->_internal_dst_thisid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Obj.MSG_ReqSwapCard_CS.dst_thisid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dst_thisid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Obj.MSG_ReqSwapCard_CS)
  return target;
}

size_t MSG_ReqSwapCard_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Obj.MSG_ReqSwapCard_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string src_thisid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_src_thisid());
    }

    // optional string dst_thisid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_dst_thisid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqSwapCard_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Obj.MSG_ReqSwapCard_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqSwapCard_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqSwapCard_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Obj.MSG_ReqSwapCard_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Obj.MSG_ReqSwapCard_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqSwapCard_CS::MergeFrom(const MSG_ReqSwapCard_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Obj.MSG_ReqSwapCard_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      src_thisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.src_thisid_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      dst_thisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dst_thisid_);
    }
  }
}

void MSG_ReqSwapCard_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Obj.MSG_ReqSwapCard_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqSwapCard_CS::CopyFrom(const MSG_ReqSwapCard_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Obj.MSG_ReqSwapCard_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqSwapCard_CS::IsInitialized() const {
  return true;
}

void MSG_ReqSwapCard_CS::InternalSwap(MSG_ReqSwapCard_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  src_thisid_.Swap(&other->src_thisid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  dst_thisid_.Swap(&other->dst_thisid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqSwapCard_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqCardPackInfo_CS::InitAsDefaultInstance() {
}
class MSG_ReqCardPackInfo_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqCardPackInfo_CS>()._has_bits_);
};

MSG_ReqCardPackInfo_CS::MSG_ReqCardPackInfo_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Obj.MSG_ReqCardPackInfo_CS)
}
MSG_ReqCardPackInfo_CS::MSG_ReqCardPackInfo_CS(const MSG_ReqCardPackInfo_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Obj.MSG_ReqCardPackInfo_CS)
}

void MSG_ReqCardPackInfo_CS::SharedCtor() {
}

MSG_ReqCardPackInfo_CS::~MSG_ReqCardPackInfo_CS() {
  // @@protoc_insertion_point(destructor:Obj.MSG_ReqCardPackInfo_CS)
  SharedDtor();
}

void MSG_ReqCardPackInfo_CS::SharedDtor() {
}

void MSG_ReqCardPackInfo_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqCardPackInfo_CS& MSG_ReqCardPackInfo_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqCardPackInfo_CS_object_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqCardPackInfo_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:Obj.MSG_ReqCardPackInfo_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqCardPackInfo_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqCardPackInfo_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Obj.MSG_ReqCardPackInfo_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Obj.MSG_ReqCardPackInfo_CS)
  return target;
}

size_t MSG_ReqCardPackInfo_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Obj.MSG_ReqCardPackInfo_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqCardPackInfo_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Obj.MSG_ReqCardPackInfo_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqCardPackInfo_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqCardPackInfo_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Obj.MSG_ReqCardPackInfo_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Obj.MSG_ReqCardPackInfo_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqCardPackInfo_CS::MergeFrom(const MSG_ReqCardPackInfo_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Obj.MSG_ReqCardPackInfo_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_ReqCardPackInfo_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Obj.MSG_ReqCardPackInfo_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqCardPackInfo_CS::CopyFrom(const MSG_ReqCardPackInfo_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Obj.MSG_ReqCardPackInfo_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqCardPackInfo_CS::IsInitialized() const {
  return true;
}

void MSG_ReqCardPackInfo_CS::InternalSwap(MSG_ReqCardPackInfo_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqCardPackInfo_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CardPackInfo::InitAsDefaultInstance() {
}
class CardPackInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CardPackInfo>()._has_bits_);
  static void set_has_gold_opened_num(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_wood_opened_num(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_water_opened_num(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_fire_opened_num(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_earth_opened_num(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_hero_baseid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CardPackInfo::CardPackInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Obj.CardPackInfo)
}
CardPackInfo::CardPackInfo(const CardPackInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      objs_(from.objs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gold_opened_num_, &from.gold_opened_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&hero_baseid_) -
    reinterpret_cast<char*>(&gold_opened_num_)) + sizeof(hero_baseid_));
  // @@protoc_insertion_point(copy_constructor:Obj.CardPackInfo)
}

void CardPackInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CardPackInfo_object_2eproto.base);
  ::memset(&gold_opened_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hero_baseid_) -
      reinterpret_cast<char*>(&gold_opened_num_)) + sizeof(hero_baseid_));
}

CardPackInfo::~CardPackInfo() {
  // @@protoc_insertion_point(destructor:Obj.CardPackInfo)
  SharedDtor();
}

void CardPackInfo::SharedDtor() {
}

void CardPackInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CardPackInfo& CardPackInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CardPackInfo_object_2eproto.base);
  return *internal_default_instance();
}


void CardPackInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Obj.CardPackInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  objs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&gold_opened_num_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hero_baseid_) -
        reinterpret_cast<char*>(&gold_opened_num_)) + sizeof(hero_baseid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CardPackInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 gold_opened_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_gold_opened_num(&has_bits);
          gold_opened_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 wood_opened_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_wood_opened_num(&has_bits);
          wood_opened_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 water_opened_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_water_opened_num(&has_bits);
          water_opened_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 fire_opened_num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_fire_opened_num(&has_bits);
          fire_opened_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 earth_opened_num = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_earth_opened_num(&has_bits);
          earth_opened_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hero_baseid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_hero_baseid(&has_bits);
          hero_baseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Obj.t_Object objs = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_objs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CardPackInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Obj.CardPackInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 gold_opened_num = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_gold_opened_num(), target);
  }

  // optional uint32 wood_opened_num = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_wood_opened_num(), target);
  }

  // optional uint32 water_opened_num = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_water_opened_num(), target);
  }

  // optional uint32 fire_opened_num = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_fire_opened_num(), target);
  }

  // optional uint32 earth_opened_num = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_earth_opened_num(), target);
  }

  // optional uint32 hero_baseid = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_hero_baseid(), target);
  }

  // repeated .Obj.t_Object objs = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_objs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_objs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Obj.CardPackInfo)
  return target;
}

size_t CardPackInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Obj.CardPackInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Obj.t_Object objs = 7;
  total_size += 1UL * this->_internal_objs_size();
  for (const auto& msg : this->objs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 gold_opened_num = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gold_opened_num());
    }

    // optional uint32 wood_opened_num = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_wood_opened_num());
    }

    // optional uint32 water_opened_num = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_water_opened_num());
    }

    // optional uint32 fire_opened_num = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fire_opened_num());
    }

    // optional uint32 earth_opened_num = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_earth_opened_num());
    }

    // optional uint32 hero_baseid = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_baseid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CardPackInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Obj.CardPackInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CardPackInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CardPackInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Obj.CardPackInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Obj.CardPackInfo)
    MergeFrom(*source);
  }
}

void CardPackInfo::MergeFrom(const CardPackInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Obj.CardPackInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  objs_.MergeFrom(from.objs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      gold_opened_num_ = from.gold_opened_num_;
    }
    if (cached_has_bits & 0x00000002u) {
      wood_opened_num_ = from.wood_opened_num_;
    }
    if (cached_has_bits & 0x00000004u) {
      water_opened_num_ = from.water_opened_num_;
    }
    if (cached_has_bits & 0x00000008u) {
      fire_opened_num_ = from.fire_opened_num_;
    }
    if (cached_has_bits & 0x00000010u) {
      earth_opened_num_ = from.earth_opened_num_;
    }
    if (cached_has_bits & 0x00000020u) {
      hero_baseid_ = from.hero_baseid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CardPackInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Obj.CardPackInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CardPackInfo::CopyFrom(const CardPackInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Obj.CardPackInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardPackInfo::IsInitialized() const {
  return true;
}

void CardPackInfo::InternalSwap(CardPackInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  objs_.InternalSwap(&other->objs_);
  swap(gold_opened_num_, other->gold_opened_num_);
  swap(wood_opened_num_, other->wood_opened_num_);
  swap(water_opened_num_, other->water_opened_num_);
  swap(fire_opened_num_, other->fire_opened_num_);
  swap(earth_opened_num_, other->earth_opened_num_);
  swap(hero_baseid_, other->hero_baseid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CardPackInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetCardPackInfo_SC::InitAsDefaultInstance() {
  ::Obj::_MSG_RetCardPackInfo_SC_default_instance_._instance.get_mutable()->data_ = const_cast< ::Obj::CardPackInfo*>(
      ::Obj::CardPackInfo::internal_default_instance());
}
class MSG_RetCardPackInfo_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetCardPackInfo_SC>()._has_bits_);
  static const ::Obj::CardPackInfo& data(const MSG_RetCardPackInfo_SC* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Obj::CardPackInfo&
MSG_RetCardPackInfo_SC::_Internal::data(const MSG_RetCardPackInfo_SC* msg) {
  return *msg->data_;
}
MSG_RetCardPackInfo_SC::MSG_RetCardPackInfo_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Obj.MSG_RetCardPackInfo_SC)
}
MSG_RetCardPackInfo_SC::MSG_RetCardPackInfo_SC(const MSG_RetCardPackInfo_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::Obj::CardPackInfo(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Obj.MSG_RetCardPackInfo_SC)
}

void MSG_RetCardPackInfo_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_RetCardPackInfo_SC_object_2eproto.base);
  data_ = nullptr;
}

MSG_RetCardPackInfo_SC::~MSG_RetCardPackInfo_SC() {
  // @@protoc_insertion_point(destructor:Obj.MSG_RetCardPackInfo_SC)
  SharedDtor();
}

void MSG_RetCardPackInfo_SC::SharedDtor() {
  if (this != internal_default_instance()) delete data_;
}

void MSG_RetCardPackInfo_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetCardPackInfo_SC& MSG_RetCardPackInfo_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetCardPackInfo_SC_object_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetCardPackInfo_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:Obj.MSG_RetCardPackInfo_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(data_ != nullptr);
    data_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetCardPackInfo_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .Obj.CardPackInfo data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetCardPackInfo_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Obj.MSG_RetCardPackInfo_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Obj.CardPackInfo data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Obj.MSG_RetCardPackInfo_SC)
  return target;
}

size_t MSG_RetCardPackInfo_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Obj.MSG_RetCardPackInfo_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Obj.CardPackInfo data = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetCardPackInfo_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Obj.MSG_RetCardPackInfo_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetCardPackInfo_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetCardPackInfo_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Obj.MSG_RetCardPackInfo_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Obj.MSG_RetCardPackInfo_SC)
    MergeFrom(*source);
  }
}

void MSG_RetCardPackInfo_SC::MergeFrom(const MSG_RetCardPackInfo_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Obj.MSG_RetCardPackInfo_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _internal_mutable_data()->::Obj::CardPackInfo::MergeFrom(from._internal_data());
  }
}

void MSG_RetCardPackInfo_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Obj.MSG_RetCardPackInfo_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetCardPackInfo_SC::CopyFrom(const MSG_RetCardPackInfo_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Obj.MSG_RetCardPackInfo_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetCardPackInfo_SC::IsInitialized() const {
  return true;
}

void MSG_RetCardPackInfo_SC::InternalSwap(MSG_RetCardPackInfo_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetCardPackInfo_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqSplitObject_CS::InitAsDefaultInstance() {
}
class MSG_ReqSplitObject_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqSplitObject_CS>()._has_bits_);
  static void set_has_thisid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_packtype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MSG_ReqSplitObject_CS::MSG_ReqSplitObject_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Obj.MSG_ReqSplitObject_CS)
}
MSG_ReqSplitObject_CS::MSG_ReqSplitObject_CS(const MSG_ReqSplitObject_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  thisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_thisid()) {
    thisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thisid_);
  }
  ::memcpy(&num_, &from.num_,
    static_cast<size_t>(reinterpret_cast<char*>(&packtype_) -
    reinterpret_cast<char*>(&num_)) + sizeof(packtype_));
  // @@protoc_insertion_point(copy_constructor:Obj.MSG_ReqSplitObject_CS)
}

void MSG_ReqSplitObject_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_ReqSplitObject_CS_object_2eproto.base);
  thisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&packtype_) -
      reinterpret_cast<char*>(&num_)) + sizeof(packtype_));
}

MSG_ReqSplitObject_CS::~MSG_ReqSplitObject_CS() {
  // @@protoc_insertion_point(destructor:Obj.MSG_ReqSplitObject_CS)
  SharedDtor();
}

void MSG_ReqSplitObject_CS::SharedDtor() {
  thisid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_ReqSplitObject_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqSplitObject_CS& MSG_ReqSplitObject_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqSplitObject_CS_object_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqSplitObject_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:Obj.MSG_ReqSplitObject_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    thisid_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&num_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&packtype_) -
        reinterpret_cast<char*>(&num_)) + sizeof(packtype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqSplitObject_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string thisid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_thisid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Obj.MSG_ReqSplitObject_CS.thisid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_num(&has_bits);
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Obj.PackType packtype = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Obj::PackType_IsValid(val))) {
            _internal_set_packtype(static_cast<::Obj::PackType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqSplitObject_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Obj.MSG_ReqSplitObject_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string thisid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_thisid().data(), static_cast<int>(this->_internal_thisid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Obj.MSG_ReqSplitObject_CS.thisid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_thisid(), target);
  }

  // optional uint32 num = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num(), target);
  }

  // optional .Obj.PackType packtype = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_packtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Obj.MSG_ReqSplitObject_CS)
  return target;
}

size_t MSG_ReqSplitObject_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Obj.MSG_ReqSplitObject_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string thisid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_thisid());
    }

    // optional uint32 num = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num());
    }

    // optional .Obj.PackType packtype = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_packtype());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqSplitObject_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Obj.MSG_ReqSplitObject_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqSplitObject_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqSplitObject_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Obj.MSG_ReqSplitObject_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Obj.MSG_ReqSplitObject_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqSplitObject_CS::MergeFrom(const MSG_ReqSplitObject_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Obj.MSG_ReqSplitObject_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      thisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thisid_);
    }
    if (cached_has_bits & 0x00000002u) {
      num_ = from.num_;
    }
    if (cached_has_bits & 0x00000004u) {
      packtype_ = from.packtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_ReqSplitObject_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Obj.MSG_ReqSplitObject_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqSplitObject_CS::CopyFrom(const MSG_ReqSplitObject_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Obj.MSG_ReqSplitObject_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqSplitObject_CS::IsInitialized() const {
  return true;
}

void MSG_ReqSplitObject_CS::InternalSwap(MSG_ReqSplitObject_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  thisid_.Swap(&other->thisid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(num_, other->num_);
  swap(packtype_, other->packtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqSplitObject_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqOpItemLock_CS::InitAsDefaultInstance() {
}
class MSG_ReqOpItemLock_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqOpItemLock_CS>()._has_bits_);
  static void set_has_thisid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_packtype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_opcode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_passwd(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_ReqOpItemLock_CS::MSG_ReqOpItemLock_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Obj.MSG_ReqOpItemLock_CS)
}
MSG_ReqOpItemLock_CS::MSG_ReqOpItemLock_CS(const MSG_ReqOpItemLock_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  thisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_thisid()) {
    thisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thisid_);
  }
  passwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_passwd()) {
    passwd_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.passwd_);
  }
  ::memcpy(&packtype_, &from.packtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&opcode_) -
    reinterpret_cast<char*>(&packtype_)) + sizeof(opcode_));
  // @@protoc_insertion_point(copy_constructor:Obj.MSG_ReqOpItemLock_CS)
}

void MSG_ReqOpItemLock_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_ReqOpItemLock_CS_object_2eproto.base);
  thisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  passwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&packtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&opcode_) -
      reinterpret_cast<char*>(&packtype_)) + sizeof(opcode_));
}

MSG_ReqOpItemLock_CS::~MSG_ReqOpItemLock_CS() {
  // @@protoc_insertion_point(destructor:Obj.MSG_ReqOpItemLock_CS)
  SharedDtor();
}

void MSG_ReqOpItemLock_CS::SharedDtor() {
  thisid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  passwd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_ReqOpItemLock_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqOpItemLock_CS& MSG_ReqOpItemLock_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqOpItemLock_CS_object_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqOpItemLock_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:Obj.MSG_ReqOpItemLock_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      thisid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      passwd_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&packtype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&opcode_) -
        reinterpret_cast<char*>(&packtype_)) + sizeof(opcode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqOpItemLock_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string thisid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_thisid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Obj.MSG_ReqOpItemLock_CS.thisid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Obj.PackType packtype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Obj::PackType_IsValid(val))) {
            _internal_set_packtype(static_cast<::Obj::PackType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 opcode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_opcode(&has_bits);
          opcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string passwd = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_passwd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Obj.MSG_ReqOpItemLock_CS.passwd");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqOpItemLock_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Obj.MSG_ReqOpItemLock_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string thisid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_thisid().data(), static_cast<int>(this->_internal_thisid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Obj.MSG_ReqOpItemLock_CS.thisid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_thisid(), target);
  }

  // optional .Obj.PackType packtype = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_packtype(), target);
  }

  // optional uint32 opcode = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_opcode(), target);
  }

  // optional string passwd = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_passwd().data(), static_cast<int>(this->_internal_passwd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Obj.MSG_ReqOpItemLock_CS.passwd");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_passwd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Obj.MSG_ReqOpItemLock_CS)
  return target;
}

size_t MSG_ReqOpItemLock_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Obj.MSG_ReqOpItemLock_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string thisid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_thisid());
    }

    // optional string passwd = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_passwd());
    }

    // optional .Obj.PackType packtype = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_packtype());
    }

    // optional uint32 opcode = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_opcode());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqOpItemLock_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Obj.MSG_ReqOpItemLock_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqOpItemLock_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqOpItemLock_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Obj.MSG_ReqOpItemLock_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Obj.MSG_ReqOpItemLock_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqOpItemLock_CS::MergeFrom(const MSG_ReqOpItemLock_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Obj.MSG_ReqOpItemLock_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      thisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thisid_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      passwd_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.passwd_);
    }
    if (cached_has_bits & 0x00000004u) {
      packtype_ = from.packtype_;
    }
    if (cached_has_bits & 0x00000008u) {
      opcode_ = from.opcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_ReqOpItemLock_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Obj.MSG_ReqOpItemLock_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqOpItemLock_CS::CopyFrom(const MSG_ReqOpItemLock_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Obj.MSG_ReqOpItemLock_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqOpItemLock_CS::IsInitialized() const {
  return true;
}

void MSG_ReqOpItemLock_CS::InternalSwap(MSG_ReqOpItemLock_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  thisid_.Swap(&other->thisid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  passwd_.Swap(&other->passwd_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(packtype_, other->packtype_);
  swap(opcode_, other->opcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqOpItemLock_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqGetVIPCardInfo_CS::InitAsDefaultInstance() {
}
class MSG_ReqGetVIPCardInfo_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqGetVIPCardInfo_CS>()._has_bits_);
};

MSG_ReqGetVIPCardInfo_CS::MSG_ReqGetVIPCardInfo_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Obj.MSG_ReqGetVIPCardInfo_CS)
}
MSG_ReqGetVIPCardInfo_CS::MSG_ReqGetVIPCardInfo_CS(const MSG_ReqGetVIPCardInfo_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Obj.MSG_ReqGetVIPCardInfo_CS)
}

void MSG_ReqGetVIPCardInfo_CS::SharedCtor() {
}

MSG_ReqGetVIPCardInfo_CS::~MSG_ReqGetVIPCardInfo_CS() {
  // @@protoc_insertion_point(destructor:Obj.MSG_ReqGetVIPCardInfo_CS)
  SharedDtor();
}

void MSG_ReqGetVIPCardInfo_CS::SharedDtor() {
}

void MSG_ReqGetVIPCardInfo_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqGetVIPCardInfo_CS& MSG_ReqGetVIPCardInfo_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqGetVIPCardInfo_CS_object_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqGetVIPCardInfo_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:Obj.MSG_ReqGetVIPCardInfo_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqGetVIPCardInfo_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqGetVIPCardInfo_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Obj.MSG_ReqGetVIPCardInfo_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Obj.MSG_ReqGetVIPCardInfo_CS)
  return target;
}

size_t MSG_ReqGetVIPCardInfo_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Obj.MSG_ReqGetVIPCardInfo_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqGetVIPCardInfo_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Obj.MSG_ReqGetVIPCardInfo_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqGetVIPCardInfo_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqGetVIPCardInfo_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Obj.MSG_ReqGetVIPCardInfo_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Obj.MSG_ReqGetVIPCardInfo_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqGetVIPCardInfo_CS::MergeFrom(const MSG_ReqGetVIPCardInfo_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Obj.MSG_ReqGetVIPCardInfo_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_ReqGetVIPCardInfo_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Obj.MSG_ReqGetVIPCardInfo_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqGetVIPCardInfo_CS::CopyFrom(const MSG_ReqGetVIPCardInfo_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Obj.MSG_ReqGetVIPCardInfo_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqGetVIPCardInfo_CS::IsInitialized() const {
  return true;
}

void MSG_ReqGetVIPCardInfo_CS::InternalSwap(MSG_ReqGetVIPCardInfo_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqGetVIPCardInfo_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetGetVIPCardInfo_SC::InitAsDefaultInstance() {
  ::Obj::_MSG_RetGetVIPCardInfo_SC_default_instance_._instance.get_mutable()->vipcardinfo_ = const_cast< ::Obj::VIPCardInfo*>(
      ::Obj::VIPCardInfo::internal_default_instance());
}
class MSG_RetGetVIPCardInfo_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetGetVIPCardInfo_SC>()._has_bits_);
  static const ::Obj::VIPCardInfo& vipcardinfo(const MSG_RetGetVIPCardInfo_SC* msg);
  static void set_has_vipcardinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Obj::VIPCardInfo&
MSG_RetGetVIPCardInfo_SC::_Internal::vipcardinfo(const MSG_RetGetVIPCardInfo_SC* msg) {
  return *msg->vipcardinfo_;
}
MSG_RetGetVIPCardInfo_SC::MSG_RetGetVIPCardInfo_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Obj.MSG_RetGetVIPCardInfo_SC)
}
MSG_RetGetVIPCardInfo_SC::MSG_RetGetVIPCardInfo_SC(const MSG_RetGetVIPCardInfo_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_vipcardinfo()) {
    vipcardinfo_ = new ::Obj::VIPCardInfo(*from.vipcardinfo_);
  } else {
    vipcardinfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Obj.MSG_RetGetVIPCardInfo_SC)
}

void MSG_RetGetVIPCardInfo_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_RetGetVIPCardInfo_SC_object_2eproto.base);
  vipcardinfo_ = nullptr;
}

MSG_RetGetVIPCardInfo_SC::~MSG_RetGetVIPCardInfo_SC() {
  // @@protoc_insertion_point(destructor:Obj.MSG_RetGetVIPCardInfo_SC)
  SharedDtor();
}

void MSG_RetGetVIPCardInfo_SC::SharedDtor() {
  if (this != internal_default_instance()) delete vipcardinfo_;
}

void MSG_RetGetVIPCardInfo_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetGetVIPCardInfo_SC& MSG_RetGetVIPCardInfo_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetGetVIPCardInfo_SC_object_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetGetVIPCardInfo_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:Obj.MSG_RetGetVIPCardInfo_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(vipcardinfo_ != nullptr);
    vipcardinfo_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetGetVIPCardInfo_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .Obj.VIPCardInfo vipcardinfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vipcardinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetGetVIPCardInfo_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Obj.MSG_RetGetVIPCardInfo_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Obj.VIPCardInfo vipcardinfo = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::vipcardinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Obj.MSG_RetGetVIPCardInfo_SC)
  return target;
}

size_t MSG_RetGetVIPCardInfo_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Obj.MSG_RetGetVIPCardInfo_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Obj.VIPCardInfo vipcardinfo = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vipcardinfo_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetGetVIPCardInfo_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Obj.MSG_RetGetVIPCardInfo_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetGetVIPCardInfo_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetGetVIPCardInfo_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Obj.MSG_RetGetVIPCardInfo_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Obj.MSG_RetGetVIPCardInfo_SC)
    MergeFrom(*source);
  }
}

void MSG_RetGetVIPCardInfo_SC::MergeFrom(const MSG_RetGetVIPCardInfo_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Obj.MSG_RetGetVIPCardInfo_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_vipcardinfo()) {
    _internal_mutable_vipcardinfo()->::Obj::VIPCardInfo::MergeFrom(from._internal_vipcardinfo());
  }
}

void MSG_RetGetVIPCardInfo_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Obj.MSG_RetGetVIPCardInfo_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetGetVIPCardInfo_SC::CopyFrom(const MSG_RetGetVIPCardInfo_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Obj.MSG_RetGetVIPCardInfo_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetGetVIPCardInfo_SC::IsInitialized() const {
  return true;
}

void MSG_RetGetVIPCardInfo_SC::InternalSwap(MSG_RetGetVIPCardInfo_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(vipcardinfo_, other->vipcardinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetGetVIPCardInfo_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqBuyVIPCard_CS::InitAsDefaultInstance() {
}
class MSG_ReqBuyVIPCard_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqBuyVIPCard_CS>()._has_bits_);
  static void set_has_cardid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_ReqBuyVIPCard_CS::MSG_ReqBuyVIPCard_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Obj.MSG_ReqBuyVIPCard_CS)
}
MSG_ReqBuyVIPCard_CS::MSG_ReqBuyVIPCard_CS(const MSG_ReqBuyVIPCard_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cardid_, &from.cardid_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&cardid_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:Obj.MSG_ReqBuyVIPCard_CS)
}

void MSG_ReqBuyVIPCard_CS::SharedCtor() {
  cardid_ = 0u;
  count_ = 1u;
}

MSG_ReqBuyVIPCard_CS::~MSG_ReqBuyVIPCard_CS() {
  // @@protoc_insertion_point(destructor:Obj.MSG_ReqBuyVIPCard_CS)
  SharedDtor();
}

void MSG_ReqBuyVIPCard_CS::SharedDtor() {
}

void MSG_ReqBuyVIPCard_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqBuyVIPCard_CS& MSG_ReqBuyVIPCard_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqBuyVIPCard_CS_object_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqBuyVIPCard_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:Obj.MSG_ReqBuyVIPCard_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    cardid_ = 0u;
    count_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqBuyVIPCard_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 cardid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_cardid(&has_bits);
          cardid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 count = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqBuyVIPCard_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Obj.MSG_ReqBuyVIPCard_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 cardid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_cardid(), target);
  }

  // optional uint32 count = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Obj.MSG_ReqBuyVIPCard_CS)
  return target;
}

size_t MSG_ReqBuyVIPCard_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Obj.MSG_ReqBuyVIPCard_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 cardid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cardid());
    }

    // optional uint32 count = 2 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqBuyVIPCard_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Obj.MSG_ReqBuyVIPCard_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqBuyVIPCard_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqBuyVIPCard_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Obj.MSG_ReqBuyVIPCard_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Obj.MSG_ReqBuyVIPCard_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqBuyVIPCard_CS::MergeFrom(const MSG_ReqBuyVIPCard_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Obj.MSG_ReqBuyVIPCard_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      cardid_ = from.cardid_;
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_ReqBuyVIPCard_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Obj.MSG_ReqBuyVIPCard_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqBuyVIPCard_CS::CopyFrom(const MSG_ReqBuyVIPCard_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Obj.MSG_ReqBuyVIPCard_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqBuyVIPCard_CS::IsInitialized() const {
  return true;
}

void MSG_ReqBuyVIPCard_CS::InternalSwap(MSG_ReqBuyVIPCard_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(cardid_, other->cardid_);
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqBuyVIPCard_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetBuyVIPCard_SC::InitAsDefaultInstance() {
  ::Obj::_MSG_RetBuyVIPCard_SC_default_instance_._instance.get_mutable()->vipcardinfo_ = const_cast< ::Obj::VIPCardInfo*>(
      ::Obj::VIPCardInfo::internal_default_instance());
}
class MSG_RetBuyVIPCard_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetBuyVIPCard_SC>()._has_bits_);
  static const ::Obj::VIPCardInfo& vipcardinfo(const MSG_RetBuyVIPCard_SC* msg);
  static void set_has_vipcardinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Obj::VIPCardInfo&
MSG_RetBuyVIPCard_SC::_Internal::vipcardinfo(const MSG_RetBuyVIPCard_SC* msg) {
  return *msg->vipcardinfo_;
}
MSG_RetBuyVIPCard_SC::MSG_RetBuyVIPCard_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Obj.MSG_RetBuyVIPCard_SC)
}
MSG_RetBuyVIPCard_SC::MSG_RetBuyVIPCard_SC(const MSG_RetBuyVIPCard_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_vipcardinfo()) {
    vipcardinfo_ = new ::Obj::VIPCardInfo(*from.vipcardinfo_);
  } else {
    vipcardinfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Obj.MSG_RetBuyVIPCard_SC)
}

void MSG_RetBuyVIPCard_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_RetBuyVIPCard_SC_object_2eproto.base);
  vipcardinfo_ = nullptr;
}

MSG_RetBuyVIPCard_SC::~MSG_RetBuyVIPCard_SC() {
  // @@protoc_insertion_point(destructor:Obj.MSG_RetBuyVIPCard_SC)
  SharedDtor();
}

void MSG_RetBuyVIPCard_SC::SharedDtor() {
  if (this != internal_default_instance()) delete vipcardinfo_;
}

void MSG_RetBuyVIPCard_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetBuyVIPCard_SC& MSG_RetBuyVIPCard_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetBuyVIPCard_SC_object_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetBuyVIPCard_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:Obj.MSG_RetBuyVIPCard_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(vipcardinfo_ != nullptr);
    vipcardinfo_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetBuyVIPCard_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .Obj.VIPCardInfo vipcardinfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vipcardinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetBuyVIPCard_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Obj.MSG_RetBuyVIPCard_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Obj.VIPCardInfo vipcardinfo = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::vipcardinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Obj.MSG_RetBuyVIPCard_SC)
  return target;
}

size_t MSG_RetBuyVIPCard_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Obj.MSG_RetBuyVIPCard_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Obj.VIPCardInfo vipcardinfo = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vipcardinfo_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetBuyVIPCard_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Obj.MSG_RetBuyVIPCard_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetBuyVIPCard_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetBuyVIPCard_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Obj.MSG_RetBuyVIPCard_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Obj.MSG_RetBuyVIPCard_SC)
    MergeFrom(*source);
  }
}

void MSG_RetBuyVIPCard_SC::MergeFrom(const MSG_RetBuyVIPCard_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Obj.MSG_RetBuyVIPCard_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_vipcardinfo()) {
    _internal_mutable_vipcardinfo()->::Obj::VIPCardInfo::MergeFrom(from._internal_vipcardinfo());
  }
}

void MSG_RetBuyVIPCard_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Obj.MSG_RetBuyVIPCard_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetBuyVIPCard_SC::CopyFrom(const MSG_RetBuyVIPCard_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Obj.MSG_RetBuyVIPCard_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetBuyVIPCard_SC::IsInitialized() const {
  return true;
}

void MSG_RetBuyVIPCard_SC::InternalSwap(MSG_RetBuyVIPCard_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(vipcardinfo_, other->vipcardinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetBuyVIPCard_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqAcepVIPCardPrize_CS::InitAsDefaultInstance() {
}
class MSG_ReqAcepVIPCardPrize_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqAcepVIPCardPrize_CS>()._has_bits_);
};

MSG_ReqAcepVIPCardPrize_CS::MSG_ReqAcepVIPCardPrize_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Obj.MSG_ReqAcepVIPCardPrize_CS)
}
MSG_ReqAcepVIPCardPrize_CS::MSG_ReqAcepVIPCardPrize_CS(const MSG_ReqAcepVIPCardPrize_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Obj.MSG_ReqAcepVIPCardPrize_CS)
}

void MSG_ReqAcepVIPCardPrize_CS::SharedCtor() {
}

MSG_ReqAcepVIPCardPrize_CS::~MSG_ReqAcepVIPCardPrize_CS() {
  // @@protoc_insertion_point(destructor:Obj.MSG_ReqAcepVIPCardPrize_CS)
  SharedDtor();
}

void MSG_ReqAcepVIPCardPrize_CS::SharedDtor() {
}

void MSG_ReqAcepVIPCardPrize_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqAcepVIPCardPrize_CS& MSG_ReqAcepVIPCardPrize_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqAcepVIPCardPrize_CS_object_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqAcepVIPCardPrize_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:Obj.MSG_ReqAcepVIPCardPrize_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqAcepVIPCardPrize_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqAcepVIPCardPrize_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Obj.MSG_ReqAcepVIPCardPrize_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Obj.MSG_ReqAcepVIPCardPrize_CS)
  return target;
}

size_t MSG_ReqAcepVIPCardPrize_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Obj.MSG_ReqAcepVIPCardPrize_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqAcepVIPCardPrize_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Obj.MSG_ReqAcepVIPCardPrize_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqAcepVIPCardPrize_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqAcepVIPCardPrize_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Obj.MSG_ReqAcepVIPCardPrize_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Obj.MSG_ReqAcepVIPCardPrize_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqAcepVIPCardPrize_CS::MergeFrom(const MSG_ReqAcepVIPCardPrize_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Obj.MSG_ReqAcepVIPCardPrize_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_ReqAcepVIPCardPrize_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Obj.MSG_ReqAcepVIPCardPrize_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqAcepVIPCardPrize_CS::CopyFrom(const MSG_ReqAcepVIPCardPrize_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Obj.MSG_ReqAcepVIPCardPrize_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqAcepVIPCardPrize_CS::IsInitialized() const {
  return true;
}

void MSG_ReqAcepVIPCardPrize_CS::InternalSwap(MSG_ReqAcepVIPCardPrize_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqAcepVIPCardPrize_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetAcepVIPCardPrize_SC::InitAsDefaultInstance() {
  ::Obj::_MSG_RetAcepVIPCardPrize_SC_default_instance_._instance.get_mutable()->vipcardinfo_ = const_cast< ::Obj::VIPCardInfo*>(
      ::Obj::VIPCardInfo::internal_default_instance());
}
class MSG_RetAcepVIPCardPrize_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetAcepVIPCardPrize_SC>()._has_bits_);
  static const ::Obj::VIPCardInfo& vipcardinfo(const MSG_RetAcepVIPCardPrize_SC* msg);
  static void set_has_vipcardinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Obj::VIPCardInfo&
MSG_RetAcepVIPCardPrize_SC::_Internal::vipcardinfo(const MSG_RetAcepVIPCardPrize_SC* msg) {
  return *msg->vipcardinfo_;
}
MSG_RetAcepVIPCardPrize_SC::MSG_RetAcepVIPCardPrize_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Obj.MSG_RetAcepVIPCardPrize_SC)
}
MSG_RetAcepVIPCardPrize_SC::MSG_RetAcepVIPCardPrize_SC(const MSG_RetAcepVIPCardPrize_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_vipcardinfo()) {
    vipcardinfo_ = new ::Obj::VIPCardInfo(*from.vipcardinfo_);
  } else {
    vipcardinfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Obj.MSG_RetAcepVIPCardPrize_SC)
}

void MSG_RetAcepVIPCardPrize_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_RetAcepVIPCardPrize_SC_object_2eproto.base);
  vipcardinfo_ = nullptr;
}

MSG_RetAcepVIPCardPrize_SC::~MSG_RetAcepVIPCardPrize_SC() {
  // @@protoc_insertion_point(destructor:Obj.MSG_RetAcepVIPCardPrize_SC)
  SharedDtor();
}

void MSG_RetAcepVIPCardPrize_SC::SharedDtor() {
  if (this != internal_default_instance()) delete vipcardinfo_;
}

void MSG_RetAcepVIPCardPrize_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetAcepVIPCardPrize_SC& MSG_RetAcepVIPCardPrize_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetAcepVIPCardPrize_SC_object_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetAcepVIPCardPrize_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:Obj.MSG_RetAcepVIPCardPrize_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(vipcardinfo_ != nullptr);
    vipcardinfo_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetAcepVIPCardPrize_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .Obj.VIPCardInfo vipcardinfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vipcardinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetAcepVIPCardPrize_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Obj.MSG_RetAcepVIPCardPrize_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Obj.VIPCardInfo vipcardinfo = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::vipcardinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Obj.MSG_RetAcepVIPCardPrize_SC)
  return target;
}

size_t MSG_RetAcepVIPCardPrize_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Obj.MSG_RetAcepVIPCardPrize_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Obj.VIPCardInfo vipcardinfo = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vipcardinfo_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetAcepVIPCardPrize_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Obj.MSG_RetAcepVIPCardPrize_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetAcepVIPCardPrize_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetAcepVIPCardPrize_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Obj.MSG_RetAcepVIPCardPrize_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Obj.MSG_RetAcepVIPCardPrize_SC)
    MergeFrom(*source);
  }
}

void MSG_RetAcepVIPCardPrize_SC::MergeFrom(const MSG_RetAcepVIPCardPrize_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Obj.MSG_RetAcepVIPCardPrize_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_vipcardinfo()) {
    _internal_mutable_vipcardinfo()->::Obj::VIPCardInfo::MergeFrom(from._internal_vipcardinfo());
  }
}

void MSG_RetAcepVIPCardPrize_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Obj.MSG_RetAcepVIPCardPrize_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetAcepVIPCardPrize_SC::CopyFrom(const MSG_RetAcepVIPCardPrize_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Obj.MSG_RetAcepVIPCardPrize_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetAcepVIPCardPrize_SC::IsInitialized() const {
  return true;
}

void MSG_RetAcepVIPCardPrize_SC::InternalSwap(MSG_RetAcepVIPCardPrize_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(vipcardinfo_, other->vipcardinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetAcepVIPCardPrize_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqRaffVIPCardPrize_CS::InitAsDefaultInstance() {
}
class MSG_ReqRaffVIPCardPrize_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqRaffVIPCardPrize_CS>()._has_bits_);
  static void set_has_usetype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_ReqRaffVIPCardPrize_CS::MSG_ReqRaffVIPCardPrize_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Obj.MSG_ReqRaffVIPCardPrize_CS)
}
MSG_ReqRaffVIPCardPrize_CS::MSG_ReqRaffVIPCardPrize_CS(const MSG_ReqRaffVIPCardPrize_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  usetype_ = from.usetype_;
  // @@protoc_insertion_point(copy_constructor:Obj.MSG_ReqRaffVIPCardPrize_CS)
}

void MSG_ReqRaffVIPCardPrize_CS::SharedCtor() {
  usetype_ = 0;
}

MSG_ReqRaffVIPCardPrize_CS::~MSG_ReqRaffVIPCardPrize_CS() {
  // @@protoc_insertion_point(destructor:Obj.MSG_ReqRaffVIPCardPrize_CS)
  SharedDtor();
}

void MSG_ReqRaffVIPCardPrize_CS::SharedDtor() {
}

void MSG_ReqRaffVIPCardPrize_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqRaffVIPCardPrize_CS& MSG_ReqRaffVIPCardPrize_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqRaffVIPCardPrize_CS_object_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqRaffVIPCardPrize_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:Obj.MSG_ReqRaffVIPCardPrize_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  usetype_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqRaffVIPCardPrize_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .Obj.RaffUseType usetype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Obj::RaffUseType_IsValid(val))) {
            _internal_set_usetype(static_cast<::Obj::RaffUseType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqRaffVIPCardPrize_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Obj.MSG_ReqRaffVIPCardPrize_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Obj.RaffUseType usetype = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_usetype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Obj.MSG_ReqRaffVIPCardPrize_CS)
  return target;
}

size_t MSG_ReqRaffVIPCardPrize_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Obj.MSG_ReqRaffVIPCardPrize_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Obj.RaffUseType usetype = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_usetype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqRaffVIPCardPrize_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Obj.MSG_ReqRaffVIPCardPrize_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqRaffVIPCardPrize_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqRaffVIPCardPrize_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Obj.MSG_ReqRaffVIPCardPrize_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Obj.MSG_ReqRaffVIPCardPrize_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqRaffVIPCardPrize_CS::MergeFrom(const MSG_ReqRaffVIPCardPrize_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Obj.MSG_ReqRaffVIPCardPrize_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_usetype()) {
    _internal_set_usetype(from._internal_usetype());
  }
}

void MSG_ReqRaffVIPCardPrize_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Obj.MSG_ReqRaffVIPCardPrize_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqRaffVIPCardPrize_CS::CopyFrom(const MSG_ReqRaffVIPCardPrize_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Obj.MSG_ReqRaffVIPCardPrize_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqRaffVIPCardPrize_CS::IsInitialized() const {
  return true;
}

void MSG_ReqRaffVIPCardPrize_CS::InternalSwap(MSG_ReqRaffVIPCardPrize_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(usetype_, other->usetype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqRaffVIPCardPrize_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetRaffVIPCardPrize_SC::InitAsDefaultInstance() {
  ::Obj::_MSG_RetRaffVIPCardPrize_SC_default_instance_._instance.get_mutable()->vipcardinfo_ = const_cast< ::Obj::VIPCardInfo*>(
      ::Obj::VIPCardInfo::internal_default_instance());
}
class MSG_RetRaffVIPCardPrize_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetRaffVIPCardPrize_SC>()._has_bits_);
  static const ::Obj::VIPCardInfo& vipcardinfo(const MSG_RetRaffVIPCardPrize_SC* msg);
  static void set_has_vipcardinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_quantity(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::Obj::VIPCardInfo&
MSG_RetRaffVIPCardPrize_SC::_Internal::vipcardinfo(const MSG_RetRaffVIPCardPrize_SC* msg) {
  return *msg->vipcardinfo_;
}
MSG_RetRaffVIPCardPrize_SC::MSG_RetRaffVIPCardPrize_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Obj.MSG_RetRaffVIPCardPrize_SC)
}
MSG_RetRaffVIPCardPrize_SC::MSG_RetRaffVIPCardPrize_SC(const MSG_RetRaffVIPCardPrize_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_vipcardinfo()) {
    vipcardinfo_ = new ::Obj::VIPCardInfo(*from.vipcardinfo_);
  } else {
    vipcardinfo_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&quantity_) -
    reinterpret_cast<char*>(&id_)) + sizeof(quantity_));
  // @@protoc_insertion_point(copy_constructor:Obj.MSG_RetRaffVIPCardPrize_SC)
}

void MSG_RetRaffVIPCardPrize_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_RetRaffVIPCardPrize_SC_object_2eproto.base);
  ::memset(&vipcardinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&quantity_) -
      reinterpret_cast<char*>(&vipcardinfo_)) + sizeof(quantity_));
}

MSG_RetRaffVIPCardPrize_SC::~MSG_RetRaffVIPCardPrize_SC() {
  // @@protoc_insertion_point(destructor:Obj.MSG_RetRaffVIPCardPrize_SC)
  SharedDtor();
}

void MSG_RetRaffVIPCardPrize_SC::SharedDtor() {
  if (this != internal_default_instance()) delete vipcardinfo_;
}

void MSG_RetRaffVIPCardPrize_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetRaffVIPCardPrize_SC& MSG_RetRaffVIPCardPrize_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetRaffVIPCardPrize_SC_object_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetRaffVIPCardPrize_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:Obj.MSG_RetRaffVIPCardPrize_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(vipcardinfo_ != nullptr);
    vipcardinfo_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&quantity_) -
        reinterpret_cast<char*>(&id_)) + sizeof(quantity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetRaffVIPCardPrize_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .Obj.VIPCardInfo vipcardinfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vipcardinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 quantity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_quantity(&has_bits);
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetRaffVIPCardPrize_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Obj.MSG_RetRaffVIPCardPrize_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Obj.VIPCardInfo vipcardinfo = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::vipcardinfo(this), target, stream);
  }

  // optional uint32 id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_id(), target);
  }

  // optional uint32 quantity = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_quantity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Obj.MSG_RetRaffVIPCardPrize_SC)
  return target;
}

size_t MSG_RetRaffVIPCardPrize_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Obj.MSG_RetRaffVIPCardPrize_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .Obj.VIPCardInfo vipcardinfo = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vipcardinfo_);
    }

    // optional uint32 id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_id());
    }

    // optional uint32 quantity = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_quantity());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetRaffVIPCardPrize_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Obj.MSG_RetRaffVIPCardPrize_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetRaffVIPCardPrize_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetRaffVIPCardPrize_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Obj.MSG_RetRaffVIPCardPrize_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Obj.MSG_RetRaffVIPCardPrize_SC)
    MergeFrom(*source);
  }
}

void MSG_RetRaffVIPCardPrize_SC::MergeFrom(const MSG_RetRaffVIPCardPrize_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Obj.MSG_RetRaffVIPCardPrize_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_vipcardinfo()->::Obj::VIPCardInfo::MergeFrom(from._internal_vipcardinfo());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      quantity_ = from.quantity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_RetRaffVIPCardPrize_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Obj.MSG_RetRaffVIPCardPrize_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetRaffVIPCardPrize_SC::CopyFrom(const MSG_RetRaffVIPCardPrize_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Obj.MSG_RetRaffVIPCardPrize_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetRaffVIPCardPrize_SC::IsInitialized() const {
  return true;
}

void MSG_RetRaffVIPCardPrize_SC::InternalSwap(MSG_RetRaffVIPCardPrize_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(vipcardinfo_, other->vipcardinfo_);
  swap(id_, other->id_);
  swap(quantity_, other->quantity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetRaffVIPCardPrize_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqCurrencyExchange_CS::InitAsDefaultInstance() {
}
class MSG_ReqCurrencyExchange_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqCurrencyExchange_CS>()._has_bits_);
  static void set_has_usequantity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_ReqCurrencyExchange_CS::MSG_ReqCurrencyExchange_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Obj.MSG_ReqCurrencyExchange_CS)
}
MSG_ReqCurrencyExchange_CS::MSG_ReqCurrencyExchange_CS(const MSG_ReqCurrencyExchange_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  usequantity_ = from.usequantity_;
  // @@protoc_insertion_point(copy_constructor:Obj.MSG_ReqCurrencyExchange_CS)
}

void MSG_ReqCurrencyExchange_CS::SharedCtor() {
  usequantity_ = 0u;
}

MSG_ReqCurrencyExchange_CS::~MSG_ReqCurrencyExchange_CS() {
  // @@protoc_insertion_point(destructor:Obj.MSG_ReqCurrencyExchange_CS)
  SharedDtor();
}

void MSG_ReqCurrencyExchange_CS::SharedDtor() {
}

void MSG_ReqCurrencyExchange_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqCurrencyExchange_CS& MSG_ReqCurrencyExchange_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqCurrencyExchange_CS_object_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqCurrencyExchange_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:Obj.MSG_ReqCurrencyExchange_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  usequantity_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqCurrencyExchange_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 usequantity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_usequantity(&has_bits);
          usequantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqCurrencyExchange_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Obj.MSG_ReqCurrencyExchange_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 usequantity = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_usequantity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Obj.MSG_ReqCurrencyExchange_CS)
  return target;
}

size_t MSG_ReqCurrencyExchange_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Obj.MSG_ReqCurrencyExchange_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 usequantity = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_usequantity());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqCurrencyExchange_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Obj.MSG_ReqCurrencyExchange_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqCurrencyExchange_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqCurrencyExchange_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Obj.MSG_ReqCurrencyExchange_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Obj.MSG_ReqCurrencyExchange_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqCurrencyExchange_CS::MergeFrom(const MSG_ReqCurrencyExchange_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Obj.MSG_ReqCurrencyExchange_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_usequantity()) {
    _internal_set_usequantity(from._internal_usequantity());
  }
}

void MSG_ReqCurrencyExchange_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Obj.MSG_ReqCurrencyExchange_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqCurrencyExchange_CS::CopyFrom(const MSG_ReqCurrencyExchange_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Obj.MSG_ReqCurrencyExchange_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqCurrencyExchange_CS::IsInitialized() const {
  return true;
}

void MSG_ReqCurrencyExchange_CS::InternalSwap(MSG_ReqCurrencyExchange_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(usequantity_, other->usequantity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqCurrencyExchange_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetCurrencyExchange_SC::InitAsDefaultInstance() {
}
class MSG_RetCurrencyExchange_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetCurrencyExchange_SC>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_RetCurrencyExchange_SC::MSG_RetCurrencyExchange_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Obj.MSG_RetCurrencyExchange_SC)
}
MSG_RetCurrencyExchange_SC::MSG_RetCurrencyExchange_SC(const MSG_RetCurrencyExchange_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:Obj.MSG_RetCurrencyExchange_SC)
}

void MSG_RetCurrencyExchange_SC::SharedCtor() {
  result_ = 0u;
}

MSG_RetCurrencyExchange_SC::~MSG_RetCurrencyExchange_SC() {
  // @@protoc_insertion_point(destructor:Obj.MSG_RetCurrencyExchange_SC)
  SharedDtor();
}

void MSG_RetCurrencyExchange_SC::SharedDtor() {
}

void MSG_RetCurrencyExchange_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetCurrencyExchange_SC& MSG_RetCurrencyExchange_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetCurrencyExchange_SC_object_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetCurrencyExchange_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:Obj.MSG_RetCurrencyExchange_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetCurrencyExchange_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetCurrencyExchange_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Obj.MSG_RetCurrencyExchange_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Obj.MSG_RetCurrencyExchange_SC)
  return target;
}

size_t MSG_RetCurrencyExchange_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Obj.MSG_RetCurrencyExchange_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 result = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetCurrencyExchange_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Obj.MSG_RetCurrencyExchange_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetCurrencyExchange_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetCurrencyExchange_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Obj.MSG_RetCurrencyExchange_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Obj.MSG_RetCurrencyExchange_SC)
    MergeFrom(*source);
  }
}

void MSG_RetCurrencyExchange_SC::MergeFrom(const MSG_RetCurrencyExchange_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Obj.MSG_RetCurrencyExchange_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _internal_set_result(from._internal_result());
  }
}

void MSG_RetCurrencyExchange_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Obj.MSG_RetCurrencyExchange_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetCurrencyExchange_SC::CopyFrom(const MSG_RetCurrencyExchange_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Obj.MSG_RetCurrencyExchange_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetCurrencyExchange_SC::IsInitialized() const {
  return true;
}

void MSG_RetCurrencyExchange_SC::InternalSwap(MSG_RetCurrencyExchange_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetCurrencyExchange_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqTransMoney_CS::InitAsDefaultInstance() {
}
class MSG_ReqTransMoney_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqTransMoney_CS>()._has_bits_);
  static void set_has_packtype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dst_packtype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_resourceid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_quantity(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

MSG_ReqTransMoney_CS::MSG_ReqTransMoney_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Obj.MSG_ReqTransMoney_CS)
}
MSG_ReqTransMoney_CS::MSG_ReqTransMoney_CS(const MSG_ReqTransMoney_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&packtype_, &from.packtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&quantity_) -
    reinterpret_cast<char*>(&packtype_)) + sizeof(quantity_));
  // @@protoc_insertion_point(copy_constructor:Obj.MSG_ReqTransMoney_CS)
}

void MSG_ReqTransMoney_CS::SharedCtor() {
  ::memset(&packtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&quantity_) -
      reinterpret_cast<char*>(&packtype_)) + sizeof(quantity_));
}

MSG_ReqTransMoney_CS::~MSG_ReqTransMoney_CS() {
  // @@protoc_insertion_point(destructor:Obj.MSG_ReqTransMoney_CS)
  SharedDtor();
}

void MSG_ReqTransMoney_CS::SharedDtor() {
}

void MSG_ReqTransMoney_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqTransMoney_CS& MSG_ReqTransMoney_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqTransMoney_CS_object_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqTransMoney_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:Obj.MSG_ReqTransMoney_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&packtype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&quantity_) -
        reinterpret_cast<char*>(&packtype_)) + sizeof(quantity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqTransMoney_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .Obj.PackType packtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Obj::PackType_IsValid(val))) {
            _internal_set_packtype(static_cast<::Obj::PackType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .Obj.PackType dst_packtype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Obj::PackType_IsValid(val))) {
            _internal_set_dst_packtype(static_cast<::Obj::PackType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 resourceID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_resourceid(&has_bits);
          resourceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 quantity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_quantity(&has_bits);
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqTransMoney_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Obj.MSG_ReqTransMoney_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Obj.PackType packtype = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_packtype(), target);
  }

  // optional .Obj.PackType dst_packtype = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_dst_packtype(), target);
  }

  // optional uint32 resourceID = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_resourceid(), target);
  }

  // optional uint32 quantity = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_quantity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Obj.MSG_ReqTransMoney_CS)
  return target;
}

size_t MSG_ReqTransMoney_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Obj.MSG_ReqTransMoney_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .Obj.PackType packtype = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_packtype());
    }

    // optional .Obj.PackType dst_packtype = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dst_packtype());
    }

    // optional uint32 resourceID = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_resourceid());
    }

    // optional uint32 quantity = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_quantity());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqTransMoney_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Obj.MSG_ReqTransMoney_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqTransMoney_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqTransMoney_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Obj.MSG_ReqTransMoney_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Obj.MSG_ReqTransMoney_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqTransMoney_CS::MergeFrom(const MSG_ReqTransMoney_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Obj.MSG_ReqTransMoney_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      packtype_ = from.packtype_;
    }
    if (cached_has_bits & 0x00000002u) {
      dst_packtype_ = from.dst_packtype_;
    }
    if (cached_has_bits & 0x00000004u) {
      resourceid_ = from.resourceid_;
    }
    if (cached_has_bits & 0x00000008u) {
      quantity_ = from.quantity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_ReqTransMoney_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Obj.MSG_ReqTransMoney_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqTransMoney_CS::CopyFrom(const MSG_ReqTransMoney_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Obj.MSG_ReqTransMoney_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqTransMoney_CS::IsInitialized() const {
  return true;
}

void MSG_ReqTransMoney_CS::InternalSwap(MSG_ReqTransMoney_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(packtype_, other->packtype_);
  swap(dst_packtype_, other->dst_packtype_);
  swap(resourceid_, other->resourceid_);
  swap(quantity_, other->quantity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqTransMoney_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqFixUpDurability_CS::InitAsDefaultInstance() {
}
class MSG_ReqFixUpDurability_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqFixUpDurability_CS>()._has_bits_);
  static void set_has_packtype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_thisid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_ReqFixUpDurability_CS::MSG_ReqFixUpDurability_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Obj.MSG_ReqFixUpDurability_CS)
}
MSG_ReqFixUpDurability_CS::MSG_ReqFixUpDurability_CS(const MSG_ReqFixUpDurability_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  thisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_thisid()) {
    thisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thisid_);
  }
  packtype_ = from.packtype_;
  // @@protoc_insertion_point(copy_constructor:Obj.MSG_ReqFixUpDurability_CS)
}

void MSG_ReqFixUpDurability_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_ReqFixUpDurability_CS_object_2eproto.base);
  thisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  packtype_ = 0;
}

MSG_ReqFixUpDurability_CS::~MSG_ReqFixUpDurability_CS() {
  // @@protoc_insertion_point(destructor:Obj.MSG_ReqFixUpDurability_CS)
  SharedDtor();
}

void MSG_ReqFixUpDurability_CS::SharedDtor() {
  thisid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_ReqFixUpDurability_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqFixUpDurability_CS& MSG_ReqFixUpDurability_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqFixUpDurability_CS_object_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqFixUpDurability_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:Obj.MSG_ReqFixUpDurability_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    thisid_.ClearNonDefaultToEmptyNoArena();
  }
  packtype_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqFixUpDurability_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .Obj.PackType packtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Obj::PackType_IsValid(val))) {
            _internal_set_packtype(static_cast<::Obj::PackType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string thisid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_thisid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Obj.MSG_ReqFixUpDurability_CS.thisid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqFixUpDurability_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Obj.MSG_ReqFixUpDurability_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Obj.PackType packtype = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_packtype(), target);
  }

  // optional string thisid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_thisid().data(), static_cast<int>(this->_internal_thisid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Obj.MSG_ReqFixUpDurability_CS.thisid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_thisid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Obj.MSG_ReqFixUpDurability_CS)
  return target;
}

size_t MSG_ReqFixUpDurability_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Obj.MSG_ReqFixUpDurability_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string thisid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_thisid());
    }

    // optional .Obj.PackType packtype = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_packtype());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqFixUpDurability_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Obj.MSG_ReqFixUpDurability_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqFixUpDurability_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqFixUpDurability_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Obj.MSG_ReqFixUpDurability_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Obj.MSG_ReqFixUpDurability_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqFixUpDurability_CS::MergeFrom(const MSG_ReqFixUpDurability_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Obj.MSG_ReqFixUpDurability_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      thisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thisid_);
    }
    if (cached_has_bits & 0x00000002u) {
      packtype_ = from.packtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_ReqFixUpDurability_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Obj.MSG_ReqFixUpDurability_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqFixUpDurability_CS::CopyFrom(const MSG_ReqFixUpDurability_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Obj.MSG_ReqFixUpDurability_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqFixUpDurability_CS::IsInitialized() const {
  return true;
}

void MSG_ReqFixUpDurability_CS::InternalSwap(MSG_ReqFixUpDurability_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  thisid_.Swap(&other->thisid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(packtype_, other->packtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqFixUpDurability_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqUseCapsule_CS::InitAsDefaultInstance() {
}
class MSG_ReqUseCapsule_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqUseCapsule_CS>()._has_bits_);
  static void set_has_thisid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_ReqUseCapsule_CS::MSG_ReqUseCapsule_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Obj.MSG_ReqUseCapsule_CS)
}
MSG_ReqUseCapsule_CS::MSG_ReqUseCapsule_CS(const MSG_ReqUseCapsule_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  thisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_thisid()) {
    thisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thisid_);
  }
  // @@protoc_insertion_point(copy_constructor:Obj.MSG_ReqUseCapsule_CS)
}

void MSG_ReqUseCapsule_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_ReqUseCapsule_CS_object_2eproto.base);
  thisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MSG_ReqUseCapsule_CS::~MSG_ReqUseCapsule_CS() {
  // @@protoc_insertion_point(destructor:Obj.MSG_ReqUseCapsule_CS)
  SharedDtor();
}

void MSG_ReqUseCapsule_CS::SharedDtor() {
  thisid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_ReqUseCapsule_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqUseCapsule_CS& MSG_ReqUseCapsule_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqUseCapsule_CS_object_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqUseCapsule_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:Obj.MSG_ReqUseCapsule_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    thisid_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqUseCapsule_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string thisid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_thisid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Obj.MSG_ReqUseCapsule_CS.thisid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqUseCapsule_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Obj.MSG_ReqUseCapsule_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string thisid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_thisid().data(), static_cast<int>(this->_internal_thisid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Obj.MSG_ReqUseCapsule_CS.thisid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_thisid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Obj.MSG_ReqUseCapsule_CS)
  return target;
}

size_t MSG_ReqUseCapsule_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Obj.MSG_ReqUseCapsule_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string thisid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_thisid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqUseCapsule_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Obj.MSG_ReqUseCapsule_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqUseCapsule_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqUseCapsule_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Obj.MSG_ReqUseCapsule_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Obj.MSG_ReqUseCapsule_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqUseCapsule_CS::MergeFrom(const MSG_ReqUseCapsule_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Obj.MSG_ReqUseCapsule_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_thisid()) {
    _has_bits_[0] |= 0x00000001u;
    thisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thisid_);
  }
}

void MSG_ReqUseCapsule_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Obj.MSG_ReqUseCapsule_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqUseCapsule_CS::CopyFrom(const MSG_ReqUseCapsule_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Obj.MSG_ReqUseCapsule_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqUseCapsule_CS::IsInitialized() const {
  return true;
}

void MSG_ReqUseCapsule_CS::InternalSwap(MSG_ReqUseCapsule_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  thisid_.Swap(&other->thisid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqUseCapsule_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Obj
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Obj::EquipData* Arena::CreateMaybeMessage< ::Obj::EquipData >(Arena* arena) {
  return Arena::CreateInternal< ::Obj::EquipData >(arena);
}
template<> PROTOBUF_NOINLINE ::Obj::EquipRandInfo* Arena::CreateMaybeMessage< ::Obj::EquipRandInfo >(Arena* arena) {
  return Arena::CreateInternal< ::Obj::EquipRandInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Obj::CardEffectItem* Arena::CreateMaybeMessage< ::Obj::CardEffectItem >(Arena* arena) {
  return Arena::CreateInternal< ::Obj::CardEffectItem >(arena);
}
template<> PROTOBUF_NOINLINE ::Obj::CardData* Arena::CreateMaybeMessage< ::Obj::CardData >(Arena* arena) {
  return Arena::CreateInternal< ::Obj::CardData >(arena);
}
template<> PROTOBUF_NOINLINE ::Obj::t_Object* Arena::CreateMaybeMessage< ::Obj::t_Object >(Arena* arena) {
  return Arena::CreateInternal< ::Obj::t_Object >(arena);
}
template<> PROTOBUF_NOINLINE ::Obj::PrizeBase* Arena::CreateMaybeMessage< ::Obj::PrizeBase >(Arena* arena) {
  return Arena::CreateInternal< ::Obj::PrizeBase >(arena);
}
template<> PROTOBUF_NOINLINE ::Obj::VIPCardInfo* Arena::CreateMaybeMessage< ::Obj::VIPCardInfo >(Arena* arena) {
  return Arena::CreateInternal< ::Obj::VIPCardInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Obj::MSG_RefreshObjs_SC* Arena::CreateMaybeMessage< ::Obj::MSG_RefreshObjs_SC >(Arena* arena) {
  return Arena::CreateInternal< ::Obj::MSG_RefreshObjs_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::Obj::MSG_PackData_SC* Arena::CreateMaybeMessage< ::Obj::MSG_PackData_SC >(Arena* arena) {
  return Arena::CreateInternal< ::Obj::MSG_PackData_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::Obj::MSG_WearEquip_CS* Arena::CreateMaybeMessage< ::Obj::MSG_WearEquip_CS >(Arena* arena) {
  return Arena::CreateInternal< ::Obj::MSG_WearEquip_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::Obj::MSG_WearEquip_SC* Arena::CreateMaybeMessage< ::Obj::MSG_WearEquip_SC >(Arena* arena) {
  return Arena::CreateInternal< ::Obj::MSG_WearEquip_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::Obj::MSG_RemoveObject_SC* Arena::CreateMaybeMessage< ::Obj::MSG_RemoveObject_SC >(Arena* arena) {
  return Arena::CreateInternal< ::Obj::MSG_RemoveObject_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::Obj::MSG_UnwearEquip_CS* Arena::CreateMaybeMessage< ::Obj::MSG_UnwearEquip_CS >(Arena* arena) {
  return Arena::CreateInternal< ::Obj::MSG_UnwearEquip_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::Obj::MSG_UnwearEquip_SC* Arena::CreateMaybeMessage< ::Obj::MSG_UnwearEquip_SC >(Arena* arena) {
  return Arena::CreateInternal< ::Obj::MSG_UnwearEquip_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::Obj::MSG_ReqCheckItemDueTime_CS* Arena::CreateMaybeMessage< ::Obj::MSG_ReqCheckItemDueTime_CS >(Arena* arena) {
  return Arena::CreateInternal< ::Obj::MSG_ReqCheckItemDueTime_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::Obj::MSG_ReqUseObject_CS* Arena::CreateMaybeMessage< ::Obj::MSG_ReqUseObject_CS >(Arena* arena) {
  return Arena::CreateInternal< ::Obj::MSG_ReqUseObject_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::Obj::MSG_ReqUseObject_Special_CS* Arena::CreateMaybeMessage< ::Obj::MSG_ReqUseObject_Special_CS >(Arena* arena) {
  return Arena::CreateInternal< ::Obj::MSG_ReqUseObject_Special_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::Obj::MSG_PackUnlock_CS* Arena::CreateMaybeMessage< ::Obj::MSG_PackUnlock_CS >(Arena* arena) {
  return Arena::CreateInternal< ::Obj::MSG_PackUnlock_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::Obj::MSG_PackUnlock_SC* Arena::CreateMaybeMessage< ::Obj::MSG_PackUnlock_SC >(Arena* arena) {
  return Arena::CreateInternal< ::Obj::MSG_PackUnlock_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::Obj::MSG_MergeObjs_CS* Arena::CreateMaybeMessage< ::Obj::MSG_MergeObjs_CS >(Arena* arena) {
  return Arena::CreateInternal< ::Obj::MSG_MergeObjs_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::Obj::MSG_MergeObjs_SC* Arena::CreateMaybeMessage< ::Obj::MSG_MergeObjs_SC >(Arena* arena) {
  return Arena::CreateInternal< ::Obj::MSG_MergeObjs_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::Obj::t_TidyPackInfo* Arena::CreateMaybeMessage< ::Obj::t_TidyPackInfo >(Arena* arena) {
  return Arena::CreateInternal< ::Obj::t_TidyPackInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Obj::MSG_TidyPack_CS* Arena::CreateMaybeMessage< ::Obj::MSG_TidyPack_CS >(Arena* arena) {
  return Arena::CreateInternal< ::Obj::MSG_TidyPack_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::Obj::MSG_TidyPack_SC* Arena::CreateMaybeMessage< ::Obj::MSG_TidyPack_SC >(Arena* arena) {
  return Arena::CreateInternal< ::Obj::MSG_TidyPack_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::Obj::MSG_ReqSellObject_CS* Arena::CreateMaybeMessage< ::Obj::MSG_ReqSellObject_CS >(Arena* arena) {
  return Arena::CreateInternal< ::Obj::MSG_ReqSellObject_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::Obj::MSG_ReqMoveObject_CS* Arena::CreateMaybeMessage< ::Obj::MSG_ReqMoveObject_CS >(Arena* arena) {
  return Arena::CreateInternal< ::Obj::MSG_ReqMoveObject_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::Obj::MSG_ReqSwapObject_CS* Arena::CreateMaybeMessage< ::Obj::MSG_ReqSwapObject_CS >(Arena* arena) {
  return Arena::CreateInternal< ::Obj::MSG_ReqSwapObject_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::Obj::MSG_ReqDestroyObject_CS* Arena::CreateMaybeMessage< ::Obj::MSG_ReqDestroyObject_CS >(Arena* arena) {
  return Arena::CreateInternal< ::Obj::MSG_ReqDestroyObject_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::Obj::MSG_ReqPutOnCard_CS* Arena::CreateMaybeMessage< ::Obj::MSG_ReqPutOnCard_CS >(Arena* arena) {
  return Arena::CreateInternal< ::Obj::MSG_ReqPutOnCard_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::Obj::MSG_ReqPutOffCard_CS* Arena::CreateMaybeMessage< ::Obj::MSG_ReqPutOffCard_CS >(Arena* arena) {
  return Arena::CreateInternal< ::Obj::MSG_ReqPutOffCard_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::Obj::MSG_ReqSwapCard_CS* Arena::CreateMaybeMessage< ::Obj::MSG_ReqSwapCard_CS >(Arena* arena) {
  return Arena::CreateInternal< ::Obj::MSG_ReqSwapCard_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::Obj::MSG_ReqCardPackInfo_CS* Arena::CreateMaybeMessage< ::Obj::MSG_ReqCardPackInfo_CS >(Arena* arena) {
  return Arena::CreateInternal< ::Obj::MSG_ReqCardPackInfo_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::Obj::CardPackInfo* Arena::CreateMaybeMessage< ::Obj::CardPackInfo >(Arena* arena) {
  return Arena::CreateInternal< ::Obj::CardPackInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Obj::MSG_RetCardPackInfo_SC* Arena::CreateMaybeMessage< ::Obj::MSG_RetCardPackInfo_SC >(Arena* arena) {
  return Arena::CreateInternal< ::Obj::MSG_RetCardPackInfo_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::Obj::MSG_ReqSplitObject_CS* Arena::CreateMaybeMessage< ::Obj::MSG_ReqSplitObject_CS >(Arena* arena) {
  return Arena::CreateInternal< ::Obj::MSG_ReqSplitObject_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::Obj::MSG_ReqOpItemLock_CS* Arena::CreateMaybeMessage< ::Obj::MSG_ReqOpItemLock_CS >(Arena* arena) {
  return Arena::CreateInternal< ::Obj::MSG_ReqOpItemLock_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::Obj::MSG_ReqGetVIPCardInfo_CS* Arena::CreateMaybeMessage< ::Obj::MSG_ReqGetVIPCardInfo_CS >(Arena* arena) {
  return Arena::CreateInternal< ::Obj::MSG_ReqGetVIPCardInfo_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::Obj::MSG_RetGetVIPCardInfo_SC* Arena::CreateMaybeMessage< ::Obj::MSG_RetGetVIPCardInfo_SC >(Arena* arena) {
  return Arena::CreateInternal< ::Obj::MSG_RetGetVIPCardInfo_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::Obj::MSG_ReqBuyVIPCard_CS* Arena::CreateMaybeMessage< ::Obj::MSG_ReqBuyVIPCard_CS >(Arena* arena) {
  return Arena::CreateInternal< ::Obj::MSG_ReqBuyVIPCard_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::Obj::MSG_RetBuyVIPCard_SC* Arena::CreateMaybeMessage< ::Obj::MSG_RetBuyVIPCard_SC >(Arena* arena) {
  return Arena::CreateInternal< ::Obj::MSG_RetBuyVIPCard_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::Obj::MSG_ReqAcepVIPCardPrize_CS* Arena::CreateMaybeMessage< ::Obj::MSG_ReqAcepVIPCardPrize_CS >(Arena* arena) {
  return Arena::CreateInternal< ::Obj::MSG_ReqAcepVIPCardPrize_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::Obj::MSG_RetAcepVIPCardPrize_SC* Arena::CreateMaybeMessage< ::Obj::MSG_RetAcepVIPCardPrize_SC >(Arena* arena) {
  return Arena::CreateInternal< ::Obj::MSG_RetAcepVIPCardPrize_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::Obj::MSG_ReqRaffVIPCardPrize_CS* Arena::CreateMaybeMessage< ::Obj::MSG_ReqRaffVIPCardPrize_CS >(Arena* arena) {
  return Arena::CreateInternal< ::Obj::MSG_ReqRaffVIPCardPrize_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::Obj::MSG_RetRaffVIPCardPrize_SC* Arena::CreateMaybeMessage< ::Obj::MSG_RetRaffVIPCardPrize_SC >(Arena* arena) {
  return Arena::CreateInternal< ::Obj::MSG_RetRaffVIPCardPrize_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::Obj::MSG_ReqCurrencyExchange_CS* Arena::CreateMaybeMessage< ::Obj::MSG_ReqCurrencyExchange_CS >(Arena* arena) {
  return Arena::CreateInternal< ::Obj::MSG_ReqCurrencyExchange_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::Obj::MSG_RetCurrencyExchange_SC* Arena::CreateMaybeMessage< ::Obj::MSG_RetCurrencyExchange_SC >(Arena* arena) {
  return Arena::CreateInternal< ::Obj::MSG_RetCurrencyExchange_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::Obj::MSG_ReqTransMoney_CS* Arena::CreateMaybeMessage< ::Obj::MSG_ReqTransMoney_CS >(Arena* arena) {
  return Arena::CreateInternal< ::Obj::MSG_ReqTransMoney_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::Obj::MSG_ReqFixUpDurability_CS* Arena::CreateMaybeMessage< ::Obj::MSG_ReqFixUpDurability_CS >(Arena* arena) {
  return Arena::CreateInternal< ::Obj::MSG_ReqFixUpDurability_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::Obj::MSG_ReqUseCapsule_CS* Arena::CreateMaybeMessage< ::Obj::MSG_ReqUseCapsule_CS >(Arena* arena) {
  return Arena::CreateInternal< ::Obj::MSG_ReqUseCapsule_CS >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
