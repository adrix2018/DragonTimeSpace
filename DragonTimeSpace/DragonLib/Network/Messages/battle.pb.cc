// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: battle.proto

#include "battle.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_battle_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HoldFlagCampScore_battle_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_battle_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HoldFlagDBState_battle_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_battle_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HoldFlagReport_battle_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_battle_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MatchMember_battle_2eproto;
namespace battle {
class MatchMemberDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MatchMember> _instance;
} _MatchMember_default_instance_;
class MSG_ReqBattleTimes_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqBattleTimes_CS> _instance;
} _MSG_ReqBattleTimes_CS_default_instance_;
class MSG_RetBattleTimes_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetBattleTimes_SC> _instance;
} _MSG_RetBattleTimes_SC_default_instance_;
class MSG_ReqBattleMatch_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqBattleMatch_CS> _instance;
} _MSG_ReqBattleMatch_CS_default_instance_;
class MSG_ReqBattleMatch_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqBattleMatch_SC> _instance;
} _MSG_ReqBattleMatch_SC_default_instance_;
class MSG_ReqBattleCancelMatch_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqBattleCancelMatch_CS> _instance;
} _MSG_ReqBattleCancelMatch_CS_default_instance_;
class MSG_ReqBattleCancelMatch_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqBattleCancelMatch_SC> _instance;
} _MSG_ReqBattleCancelMatch_SC_default_instance_;
class MSG_RetMatchMember_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetMatchMember_SC> _instance;
} _MSG_RetMatchMember_SC_default_instance_;
class MSG_RetBattleValid_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetBattleValid_SC> _instance;
} _MSG_RetBattleValid_SC_default_instance_;
class MSG_ReqEnterBattle_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqEnterBattle_CS> _instance;
} _MSG_ReqEnterBattle_CS_default_instance_;
class MSG_retEnterBattle_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_retEnterBattle_SC> _instance;
} _MSG_retEnterBattle_SC_default_instance_;
class MSG_ReqChangeGroupLeader_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqChangeGroupLeader_CS> _instance;
} _MSG_ReqChangeGroupLeader_CS_default_instance_;
class HoldFlagReportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HoldFlagReport> _instance;
} _HoldFlagReport_default_instance_;
class HoldFlagCampScoreDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HoldFlagCampScore> _instance;
} _HoldFlagCampScore_default_instance_;
class HoldFlagDBStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HoldFlagDBState> _instance;
} _HoldFlagDBState_default_instance_;
class MSG_RetHoldFlagTeamScore_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetHoldFlagTeamScore_SC> _instance;
} _MSG_RetHoldFlagTeamScore_SC_default_instance_;
class MSG_RetHoldFlagDBState_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetHoldFlagDBState_SC> _instance;
} _MSG_RetHoldFlagDBState_SC_default_instance_;
class MSG_ReqHoldFlagReport_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqHoldFlagReport_CS> _instance;
} _MSG_ReqHoldFlagReport_CS_default_instance_;
class MSG_ReqHoldFlagCaptureDB_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqHoldFlagCaptureDB_CS> _instance;
} _MSG_ReqHoldFlagCaptureDB_CS_default_instance_;
class MSG_ReqHoldFlagPutDownDB_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqHoldFlagPutDownDB_CS> _instance;
} _MSG_ReqHoldFlagPutDownDB_CS_default_instance_;
class MSG_RetHoldFlagReport_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetHoldFlagReport_SC> _instance;
} _MSG_RetHoldFlagReport_SC_default_instance_;
class MSG_RetHoldFlagAccount_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetHoldFlagAccount_SC> _instance;
} _MSG_RetHoldFlagAccount_SC_default_instance_;
class MSG_RetHoldFlagCountDown_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetHoldFlagCountDown_SC> _instance;
} _MSG_RetHoldFlagCountDown_SC_default_instance_;
class MSG_RetHoldFlagEvent_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetHoldFlagEvent_SC> _instance;
} _MSG_RetHoldFlagEvent_SC_default_instance_;
}  // namespace battle
static void InitDefaultsscc_info_HoldFlagCampScore_battle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::battle::_HoldFlagCampScore_default_instance_;
    new (ptr) ::battle::HoldFlagCampScore();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::battle::HoldFlagCampScore::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HoldFlagCampScore_battle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HoldFlagCampScore_battle_2eproto}, {}};

static void InitDefaultsscc_info_HoldFlagDBState_battle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::battle::_HoldFlagDBState_default_instance_;
    new (ptr) ::battle::HoldFlagDBState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::battle::HoldFlagDBState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HoldFlagDBState_battle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HoldFlagDBState_battle_2eproto}, {}};

static void InitDefaultsscc_info_HoldFlagReport_battle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::battle::_HoldFlagReport_default_instance_;
    new (ptr) ::battle::HoldFlagReport();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::battle::HoldFlagReport::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HoldFlagReport_battle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HoldFlagReport_battle_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqBattleCancelMatch_CS_battle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::battle::_MSG_ReqBattleCancelMatch_CS_default_instance_;
    new (ptr) ::battle::MSG_ReqBattleCancelMatch_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::battle::MSG_ReqBattleCancelMatch_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqBattleCancelMatch_CS_battle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqBattleCancelMatch_CS_battle_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqBattleCancelMatch_SC_battle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::battle::_MSG_ReqBattleCancelMatch_SC_default_instance_;
    new (ptr) ::battle::MSG_ReqBattleCancelMatch_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::battle::MSG_ReqBattleCancelMatch_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqBattleCancelMatch_SC_battle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqBattleCancelMatch_SC_battle_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqBattleMatch_CS_battle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::battle::_MSG_ReqBattleMatch_CS_default_instance_;
    new (ptr) ::battle::MSG_ReqBattleMatch_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::battle::MSG_ReqBattleMatch_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqBattleMatch_CS_battle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqBattleMatch_CS_battle_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqBattleMatch_SC_battle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::battle::_MSG_ReqBattleMatch_SC_default_instance_;
    new (ptr) ::battle::MSG_ReqBattleMatch_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::battle::MSG_ReqBattleMatch_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqBattleMatch_SC_battle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqBattleMatch_SC_battle_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqBattleTimes_CS_battle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::battle::_MSG_ReqBattleTimes_CS_default_instance_;
    new (ptr) ::battle::MSG_ReqBattleTimes_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::battle::MSG_ReqBattleTimes_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqBattleTimes_CS_battle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqBattleTimes_CS_battle_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqChangeGroupLeader_CS_battle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::battle::_MSG_ReqChangeGroupLeader_CS_default_instance_;
    new (ptr) ::battle::MSG_ReqChangeGroupLeader_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::battle::MSG_ReqChangeGroupLeader_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqChangeGroupLeader_CS_battle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqChangeGroupLeader_CS_battle_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqEnterBattle_CS_battle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::battle::_MSG_ReqEnterBattle_CS_default_instance_;
    new (ptr) ::battle::MSG_ReqEnterBattle_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::battle::MSG_ReqEnterBattle_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqEnterBattle_CS_battle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqEnterBattle_CS_battle_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqHoldFlagCaptureDB_CS_battle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::battle::_MSG_ReqHoldFlagCaptureDB_CS_default_instance_;
    new (ptr) ::battle::MSG_ReqHoldFlagCaptureDB_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::battle::MSG_ReqHoldFlagCaptureDB_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqHoldFlagCaptureDB_CS_battle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqHoldFlagCaptureDB_CS_battle_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqHoldFlagPutDownDB_CS_battle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::battle::_MSG_ReqHoldFlagPutDownDB_CS_default_instance_;
    new (ptr) ::battle::MSG_ReqHoldFlagPutDownDB_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::battle::MSG_ReqHoldFlagPutDownDB_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqHoldFlagPutDownDB_CS_battle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqHoldFlagPutDownDB_CS_battle_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqHoldFlagReport_CS_battle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::battle::_MSG_ReqHoldFlagReport_CS_default_instance_;
    new (ptr) ::battle::MSG_ReqHoldFlagReport_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::battle::MSG_ReqHoldFlagReport_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqHoldFlagReport_CS_battle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqHoldFlagReport_CS_battle_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RetBattleTimes_SC_battle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::battle::_MSG_RetBattleTimes_SC_default_instance_;
    new (ptr) ::battle::MSG_RetBattleTimes_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::battle::MSG_RetBattleTimes_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RetBattleTimes_SC_battle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_RetBattleTimes_SC_battle_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RetBattleValid_SC_battle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::battle::_MSG_RetBattleValid_SC_default_instance_;
    new (ptr) ::battle::MSG_RetBattleValid_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::battle::MSG_RetBattleValid_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RetBattleValid_SC_battle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_RetBattleValid_SC_battle_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RetHoldFlagAccount_SC_battle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::battle::_MSG_RetHoldFlagAccount_SC_default_instance_;
    new (ptr) ::battle::MSG_RetHoldFlagAccount_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::battle::MSG_RetHoldFlagAccount_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_RetHoldFlagAccount_SC_battle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_RetHoldFlagAccount_SC_battle_2eproto}, {
      &scc_info_HoldFlagReport_battle_2eproto.base,}};

static void InitDefaultsscc_info_MSG_RetHoldFlagCountDown_SC_battle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::battle::_MSG_RetHoldFlagCountDown_SC_default_instance_;
    new (ptr) ::battle::MSG_RetHoldFlagCountDown_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::battle::MSG_RetHoldFlagCountDown_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RetHoldFlagCountDown_SC_battle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_RetHoldFlagCountDown_SC_battle_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RetHoldFlagDBState_SC_battle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::battle::_MSG_RetHoldFlagDBState_SC_default_instance_;
    new (ptr) ::battle::MSG_RetHoldFlagDBState_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::battle::MSG_RetHoldFlagDBState_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_RetHoldFlagDBState_SC_battle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_RetHoldFlagDBState_SC_battle_2eproto}, {
      &scc_info_HoldFlagDBState_battle_2eproto.base,}};

static void InitDefaultsscc_info_MSG_RetHoldFlagEvent_SC_battle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::battle::_MSG_RetHoldFlagEvent_SC_default_instance_;
    new (ptr) ::battle::MSG_RetHoldFlagEvent_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::battle::MSG_RetHoldFlagEvent_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RetHoldFlagEvent_SC_battle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_RetHoldFlagEvent_SC_battle_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RetHoldFlagReport_SC_battle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::battle::_MSG_RetHoldFlagReport_SC_default_instance_;
    new (ptr) ::battle::MSG_RetHoldFlagReport_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::battle::MSG_RetHoldFlagReport_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_RetHoldFlagReport_SC_battle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_RetHoldFlagReport_SC_battle_2eproto}, {
      &scc_info_HoldFlagReport_battle_2eproto.base,}};

static void InitDefaultsscc_info_MSG_RetHoldFlagTeamScore_SC_battle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::battle::_MSG_RetHoldFlagTeamScore_SC_default_instance_;
    new (ptr) ::battle::MSG_RetHoldFlagTeamScore_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::battle::MSG_RetHoldFlagTeamScore_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_RetHoldFlagTeamScore_SC_battle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_RetHoldFlagTeamScore_SC_battle_2eproto}, {
      &scc_info_HoldFlagCampScore_battle_2eproto.base,}};

static void InitDefaultsscc_info_MSG_RetMatchMember_SC_battle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::battle::_MSG_RetMatchMember_SC_default_instance_;
    new (ptr) ::battle::MSG_RetMatchMember_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::battle::MSG_RetMatchMember_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_RetMatchMember_SC_battle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_RetMatchMember_SC_battle_2eproto}, {
      &scc_info_MatchMember_battle_2eproto.base,}};

static void InitDefaultsscc_info_MSG_retEnterBattle_SC_battle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::battle::_MSG_retEnterBattle_SC_default_instance_;
    new (ptr) ::battle::MSG_retEnterBattle_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::battle::MSG_retEnterBattle_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_retEnterBattle_SC_battle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_retEnterBattle_SC_battle_2eproto}, {}};

static void InitDefaultsscc_info_MatchMember_battle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::battle::_MatchMember_default_instance_;
    new (ptr) ::battle::MatchMember();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::battle::MatchMember::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MatchMember_battle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MatchMember_battle_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_battle_2eproto[24];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_battle_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_battle_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_battle_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::battle::MatchMember, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::battle::MatchMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::battle::MatchMember, userid_),
  PROTOBUF_FIELD_OFFSET(::battle::MatchMember, captain_),
  PROTOBUF_FIELD_OFFSET(::battle::MatchMember, heroid_),
  PROTOBUF_FIELD_OFFSET(::battle::MatchMember, name_),
  PROTOBUF_FIELD_OFFSET(::battle::MatchMember, level_),
  PROTOBUF_FIELD_OFFSET(::battle::MatchMember, camp_),
  PROTOBUF_FIELD_OFFSET(::battle::MatchMember, gid_),
  1,
  2,
  3,
  0,
  4,
  6,
  5,
  PROTOBUF_FIELD_OFFSET(::battle::MSG_ReqBattleTimes_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::battle::MSG_ReqBattleTimes_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::battle::MSG_ReqBattleTimes_CS, battleid_),
  0,
  PROTOBUF_FIELD_OFFSET(::battle::MSG_RetBattleTimes_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::battle::MSG_RetBattleTimes_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::battle::MSG_RetBattleTimes_SC, winbattletimes_),
  0,
  PROTOBUF_FIELD_OFFSET(::battle::MSG_ReqBattleMatch_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::battle::MSG_ReqBattleMatch_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::battle::MSG_ReqBattleMatch_CS, battleid_),
  0,
  PROTOBUF_FIELD_OFFSET(::battle::MSG_ReqBattleMatch_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::battle::MSG_ReqBattleMatch_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::battle::MSG_ReqBattleMatch_SC, errorcode_),
  PROTOBUF_FIELD_OFFSET(::battle::MSG_ReqBattleMatch_SC, averwaittime_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::battle::MSG_ReqBattleCancelMatch_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::battle::MSG_ReqBattleCancelMatch_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::battle::MSG_ReqBattleCancelMatch_CS, battleid_),
  0,
  PROTOBUF_FIELD_OFFSET(::battle::MSG_ReqBattleCancelMatch_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::battle::MSG_ReqBattleCancelMatch_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::battle::MSG_ReqBattleCancelMatch_SC, errorcode_),
  0,
  PROTOBUF_FIELD_OFFSET(::battle::MSG_RetMatchMember_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::battle::MSG_RetMatchMember_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::battle::MSG_RetMatchMember_SC, members_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::battle::MSG_RetBattleValid_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::battle::MSG_RetBattleValid_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::battle::MSG_RetBattleValid_SC, endtimestamp_),
  0,
  PROTOBUF_FIELD_OFFSET(::battle::MSG_ReqEnterBattle_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::battle::MSG_ReqEnterBattle_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::battle::MSG_retEnterBattle_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::battle::MSG_retEnterBattle_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::battle::MSG_retEnterBattle_SC, errorcode_),
  0,
  PROTOBUF_FIELD_OFFSET(::battle::MSG_ReqChangeGroupLeader_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::battle::MSG_ReqChangeGroupLeader_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::battle::MSG_ReqChangeGroupLeader_CS, newcaptain_),
  0,
  PROTOBUF_FIELD_OFFSET(::battle::HoldFlagReport, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::battle::HoldFlagReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::battle::HoldFlagReport, name_),
  PROTOBUF_FIELD_OFFSET(::battle::HoldFlagReport, campid_),
  PROTOBUF_FIELD_OFFSET(::battle::HoldFlagReport, teamid_),
  PROTOBUF_FIELD_OFFSET(::battle::HoldFlagReport, userid_),
  PROTOBUF_FIELD_OFFSET(::battle::HoldFlagReport, hurtnum_),
  PROTOBUF_FIELD_OFFSET(::battle::HoldFlagReport, curenum_),
  PROTOBUF_FIELD_OFFSET(::battle::HoldFlagReport, killnum_),
  PROTOBUF_FIELD_OFFSET(::battle::HoldFlagReport, deadnum_),
  PROTOBUF_FIELD_OFFSET(::battle::HoldFlagReport, backdbnum_),
  PROTOBUF_FIELD_OFFSET(::battle::HoldFlagReport, capturedbnum_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::battle::HoldFlagCampScore, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::battle::HoldFlagCampScore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::battle::HoldFlagCampScore, campid_),
  PROTOBUF_FIELD_OFFSET(::battle::HoldFlagCampScore, score_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::battle::HoldFlagDBState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::battle::HoldFlagDBState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::battle::HoldFlagDBState, tempid_),
  PROTOBUF_FIELD_OFFSET(::battle::HoldFlagDBState, campid_),
  PROTOBUF_FIELD_OFFSET(::battle::HoldFlagDBState, dbstate_),
  PROTOBUF_FIELD_OFFSET(::battle::HoldFlagDBState, capuserid_),
  PROTOBUF_FIELD_OFFSET(::battle::HoldFlagDBState, isinbase_),
  0,
  1,
  2,
  4,
  3,
  PROTOBUF_FIELD_OFFSET(::battle::MSG_RetHoldFlagTeamScore_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::battle::MSG_RetHoldFlagTeamScore_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::battle::MSG_RetHoldFlagTeamScore_SC, campscore_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::battle::MSG_RetHoldFlagDBState_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::battle::MSG_RetHoldFlagDBState_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::battle::MSG_RetHoldFlagDBState_SC, dbstates_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::battle::MSG_ReqHoldFlagReport_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::battle::MSG_ReqHoldFlagReport_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::battle::MSG_ReqHoldFlagCaptureDB_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::battle::MSG_ReqHoldFlagCaptureDB_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::battle::MSG_ReqHoldFlagCaptureDB_CS, npcid_),
  0,
  PROTOBUF_FIELD_OFFSET(::battle::MSG_ReqHoldFlagPutDownDB_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::battle::MSG_ReqHoldFlagPutDownDB_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::battle::MSG_RetHoldFlagReport_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::battle::MSG_RetHoldFlagReport_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::battle::MSG_RetHoldFlagReport_SC, reports_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::battle::MSG_RetHoldFlagAccount_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::battle::MSG_RetHoldFlagAccount_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::battle::MSG_RetHoldFlagAccount_SC, reports_),
  PROTOBUF_FIELD_OFFSET(::battle::MSG_RetHoldFlagAccount_SC, wincampid_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::battle::MSG_RetHoldFlagCountDown_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::battle::MSG_RetHoldFlagCountDown_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::battle::MSG_RetHoldFlagCountDown_SC, stage_),
  PROTOBUF_FIELD_OFFSET(::battle::MSG_RetHoldFlagCountDown_SC, endtimestamp_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::battle::MSG_RetHoldFlagEvent_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::battle::MSG_RetHoldFlagEvent_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::battle::MSG_RetHoldFlagEvent_SC, tipid_),
  PROTOBUF_FIELD_OFFSET(::battle::MSG_RetHoldFlagEvent_SC, camp_),
  PROTOBUF_FIELD_OFFSET(::battle::MSG_RetHoldFlagEvent_SC, username_),
  1,
  2,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::battle::MatchMember)},
  { 19, 25, sizeof(::battle::MSG_ReqBattleTimes_CS)},
  { 26, 32, sizeof(::battle::MSG_RetBattleTimes_SC)},
  { 33, 39, sizeof(::battle::MSG_ReqBattleMatch_CS)},
  { 40, 47, sizeof(::battle::MSG_ReqBattleMatch_SC)},
  { 49, 55, sizeof(::battle::MSG_ReqBattleCancelMatch_CS)},
  { 56, 62, sizeof(::battle::MSG_ReqBattleCancelMatch_SC)},
  { 63, 69, sizeof(::battle::MSG_RetMatchMember_SC)},
  { 70, 76, sizeof(::battle::MSG_RetBattleValid_SC)},
  { 77, 82, sizeof(::battle::MSG_ReqEnterBattle_CS)},
  { 82, 88, sizeof(::battle::MSG_retEnterBattle_SC)},
  { 89, 95, sizeof(::battle::MSG_ReqChangeGroupLeader_CS)},
  { 96, 111, sizeof(::battle::HoldFlagReport)},
  { 121, 128, sizeof(::battle::HoldFlagCampScore)},
  { 130, 140, sizeof(::battle::HoldFlagDBState)},
  { 145, 151, sizeof(::battle::MSG_RetHoldFlagTeamScore_SC)},
  { 152, 158, sizeof(::battle::MSG_RetHoldFlagDBState_SC)},
  { 159, 164, sizeof(::battle::MSG_ReqHoldFlagReport_CS)},
  { 164, 170, sizeof(::battle::MSG_ReqHoldFlagCaptureDB_CS)},
  { 171, 176, sizeof(::battle::MSG_ReqHoldFlagPutDownDB_CS)},
  { 176, 182, sizeof(::battle::MSG_RetHoldFlagReport_SC)},
  { 183, 190, sizeof(::battle::MSG_RetHoldFlagAccount_SC)},
  { 192, 199, sizeof(::battle::MSG_RetHoldFlagCountDown_SC)},
  { 201, 209, sizeof(::battle::MSG_RetHoldFlagEvent_SC)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::battle::_MatchMember_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::battle::_MSG_ReqBattleTimes_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::battle::_MSG_RetBattleTimes_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::battle::_MSG_ReqBattleMatch_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::battle::_MSG_ReqBattleMatch_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::battle::_MSG_ReqBattleCancelMatch_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::battle::_MSG_ReqBattleCancelMatch_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::battle::_MSG_RetMatchMember_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::battle::_MSG_RetBattleValid_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::battle::_MSG_ReqEnterBattle_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::battle::_MSG_retEnterBattle_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::battle::_MSG_ReqChangeGroupLeader_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::battle::_HoldFlagReport_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::battle::_HoldFlagCampScore_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::battle::_HoldFlagDBState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::battle::_MSG_RetHoldFlagTeamScore_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::battle::_MSG_RetHoldFlagDBState_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::battle::_MSG_ReqHoldFlagReport_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::battle::_MSG_ReqHoldFlagCaptureDB_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::battle::_MSG_ReqHoldFlagPutDownDB_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::battle::_MSG_RetHoldFlagReport_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::battle::_MSG_RetHoldFlagAccount_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::battle::_MSG_RetHoldFlagCountDown_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::battle::_MSG_RetHoldFlagEvent_SC_default_instance_),
};

const char descriptor_table_protodef_battle_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014battle.proto\022\006battle\"v\n\013MatchMember\022\016\n"
  "\006userid\030\001 \001(\004\022\017\n\007captain\030\002 \001(\004\022\016\n\006heroid"
  "\030\003 \001(\r\022\014\n\004name\030\004 \001(\t\022\r\n\005level\030\005 \001(\r\022\014\n\004c"
  "amp\030\006 \001(\r\022\013\n\003gid\030\007 \001(\004\")\n\025MSG_ReqBattleT"
  "imes_CS\022\020\n\010battleId\030\001 \001(\r\"/\n\025MSG_RetBatt"
  "leTimes_SC\022\026\n\016winBattleTimes\030\001 \001(\r\")\n\025MS"
  "G_ReqBattleMatch_CS\022\020\n\010battleId\030\001 \001(\r\"X\n"
  "\025MSG_ReqBattleMatch_SC\022)\n\terrorCode\030\001 \001("
  "\0162\026.battle.BatteMatchCode\022\024\n\014averWaitTim"
  "e\030\002 \001(\004\"/\n\033MSG_ReqBattleCancelMatch_CS\022\020"
  "\n\010battleId\030\001 \001(\r\"N\n\033MSG_ReqBattleCancelM"
  "atch_SC\022/\n\terrorCode\030\001 \001(\0162\034.battle.Canc"
  "elBatteMatchCode\"=\n\025MSG_RetMatchMember_S"
  "C\022$\n\007members\030\001 \003(\0132\023.battle.MatchMember\""
  "-\n\025MSG_RetBattleValid_SC\022\024\n\014endTimeStamp"
  "\030\001 \001(\r\"\027\n\025MSG_ReqEnterBattle_CS\"C\n\025MSG_r"
  "etEnterBattle_SC\022*\n\terrorCode\030\001 \001(\0162\027.ba"
  "ttle.EnterBattleCode\"1\n\033MSG_ReqChangeGro"
  "upLeader_CS\022\022\n\nnewCaptain\030\001 \001(\004\"\273\001\n\016Hold"
  "FlagReport\022\014\n\004name\030\001 \001(\t\022\016\n\006campId\030\002 \001(\r"
  "\022\016\n\006teamId\030\003 \001(\r\022\016\n\006userid\030\004 \001(\004\022\017\n\007hurt"
  "Num\030\005 \001(\r\022\017\n\007cureNum\030\006 \001(\r\022\017\n\007killNum\030\007 "
  "\001(\r\022\017\n\007deadNum\030\010 \001(\r\022\021\n\tbackDBNum\030\t \001(\r\022"
  "\024\n\014captureDBNum\030\n \001(\r\"2\n\021HoldFlagCampSco"
  "re\022\016\n\006campId\030\001 \001(\r\022\r\n\005score\030\002 \001(\r\"g\n\017Hol"
  "dFlagDBState\022\016\n\006tempId\030\001 \001(\004\022\016\n\006campId\030\002"
  " \001(\r\022\017\n\007DBState\030\003 \001(\010\022\021\n\tcapUserId\030\004 \001(\004"
  "\022\020\n\010isInBase\030\005 \001(\010\"K\n\033MSG_RetHoldFlagTea"
  "mScore_SC\022,\n\tcampScore\030\001 \003(\0132\031.battle.Ho"
  "ldFlagCampScore\"F\n\031MSG_RetHoldFlagDBStat"
  "e_SC\022)\n\010DBStates\030\001 \003(\0132\027.battle.HoldFlag"
  "DBState\"\032\n\030MSG_ReqHoldFlagReport_CS\",\n\033M"
  "SG_ReqHoldFlagCaptureDB_CS\022\r\n\005npcid\030\001 \001("
  "\004\"\035\n\033MSG_ReqHoldFlagPutDownDB_CS\"C\n\030MSG_"
  "RetHoldFlagReport_SC\022\'\n\007reports\030\001 \003(\0132\026."
  "battle.HoldFlagReport\"W\n\031MSG_RetHoldFlag"
  "Account_SC\022\'\n\007reports\030\001 \003(\0132\026.battle.Hol"
  "dFlagReport\022\021\n\twinCampId\030\002 \001(\r\"Y\n\033MSG_Re"
  "tHoldFlagCountDown_SC\022$\n\005stage\030\001 \001(\0162\025.b"
  "attle.HoldFlagStage\022\024\n\014endTimeStamp\030\002 \001("
  "\r\"H\n\027MSG_RetHoldFlagEvent_SC\022\r\n\005tipId\030\001 "
  "\001(\r\022\014\n\004camp\030\002 \001(\r\022\020\n\010userName\030\003 \001(\t*\227\002\n\016"
  "BatteMatchCode\022\030\n\024BATTLE_MATCH_SUCCESS\020\001"
  "\022\035\n\031BATTLE_MATCH_LEVEL_FAILED\020\002\022\037\n\033BATTL"
  "E_MATCH_COPYMAP_FAILED\020\003\022 \n\034BATTLE_MATCH"
  "_MATCHING_FAILED\020\004\022!\n\035BATTLE_MATCH_TEAML"
  "EVEL_FAILED\020\005\022!\n\035BATTLE_MATCH_TEAMRIGHT_"
  "FAILED\020\006\022%\n!BATTLE_MATCH_MEMBEROFFLINE_F"
  "AILED\020\007\022\034\n\030BATTLE_MATCH_TIME_FAILED\020\010*\324\001"
  "\n\024CancelBatteMatchCode\022\036\n\032BATTLE_CANCELM"
  "ATCH_SUCCESS\020\001\022\'\n#BATTLE_CANCELMATCH_TEA"
  "MRIGHT_FAILED\020\002\022%\n!BATTLE_CANCELMATCH_NO"
  "MATCH_FAILED\020\003\022#\n\037BATTLE_CANCELMATCH_INT"
  "ER_FAILED\020\004\022\'\n#BATTLE_CANCELMATCH_MATCHO"
  "VER_FAILED\020\005*\202\004\n\020CreateBattleCode\022\035\n\031BAT"
  "TLE_CREATE_ALL_SUCCESS\020\001\022(\n$BATTLE_CREAT"
  "E_SESSION_NOSCENE_FAILED\020\002\022*\n&BATTLE_CRE"
  "ATE_SESSION_CPMCREATE_FAILED\020\003\022&\n\"BATTLE"
  "_CREATE_SESSION_NOCPM_FAILED\020\004\022+\n\'BATTLE"
  "_CREATE_SESSION_SCENEEXIST_FAILED\020\005\022\'\n#B"
  "ATTLE_CREATE_SESSION_MEMERR_FAILED\020\006\022)\n%"
  "BATTLE_CREATE_SESSION_SCENEMGR_FAILED\020\007\022"
  "*\n&BATTLE_CREATE_SESSION_FINDSCENE_FAILE"
  "D\020\010\022(\n$BATTLE_CREATE_SCENE_CPMCREATE_FAI"
  "LED\020\t\022\"\n\036BATTLE_CREATE_SCENE_REG_FAILED\020"
  "\n\022(\n$BATTLE_CREATE_FUNCTION_CREATE_FAILE"
  "D\020\013\022,\n(BATTLE_CREATE_FUNCTION_CREATEROOM"
  "_FAILED\020\014*\323\001\n\017EnterBattleCode\022\030\n\024BATTLE_"
  "ENTER_SUCCESS\020\001\022!\n\035BATTLE_ENTER_INCOPYMA"
  "P_FAILED\020\002\022!\n\035BATTLE_ENTER_ENTERROOM_FAI"
  "LED\020\003\022 \n\034BATTLE_ENTER_OVERTIME_FAILED\020\004\022"
  "\036\n\032BATTLE_ENTER_NOROOM_FAILED\020\005\022\036\n\032BATTL"
  "E_ENTER_KICKED_FAILED\020\006*#\n\004Camp\022\010\n\004NONE\020"
  "\000\022\007\n\003RED\020\001\022\010\n\004BLUE\020\002*\262\001\n\rHoldFlagStage\022\030"
  "\n\024HOLD_FLAG_STAGE_NONE\020\000\022\031\n\025HOLD_FLAG_ST"
  "AGE_ENTER\020\001\022\033\n\027HOLD_FLAG_STAGE_PREPARE\020\002"
  "\022\031\n\025HOLD_FLAG_STAGE_FIGHT\020\003\022\033\n\027HOLD_FLAG"
  "_STAGE_ACCOUNT\020\004\022\027\n\023HOLD_FLAG_STAGE_MAX\020"
  "\005"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_battle_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_battle_2eproto_sccs[24] = {
  &scc_info_HoldFlagCampScore_battle_2eproto.base,
  &scc_info_HoldFlagDBState_battle_2eproto.base,
  &scc_info_HoldFlagReport_battle_2eproto.base,
  &scc_info_MSG_ReqBattleCancelMatch_CS_battle_2eproto.base,
  &scc_info_MSG_ReqBattleCancelMatch_SC_battle_2eproto.base,
  &scc_info_MSG_ReqBattleMatch_CS_battle_2eproto.base,
  &scc_info_MSG_ReqBattleMatch_SC_battle_2eproto.base,
  &scc_info_MSG_ReqBattleTimes_CS_battle_2eproto.base,
  &scc_info_MSG_ReqChangeGroupLeader_CS_battle_2eproto.base,
  &scc_info_MSG_ReqEnterBattle_CS_battle_2eproto.base,
  &scc_info_MSG_ReqHoldFlagCaptureDB_CS_battle_2eproto.base,
  &scc_info_MSG_ReqHoldFlagPutDownDB_CS_battle_2eproto.base,
  &scc_info_MSG_ReqHoldFlagReport_CS_battle_2eproto.base,
  &scc_info_MSG_RetBattleTimes_SC_battle_2eproto.base,
  &scc_info_MSG_RetBattleValid_SC_battle_2eproto.base,
  &scc_info_MSG_RetHoldFlagAccount_SC_battle_2eproto.base,
  &scc_info_MSG_RetHoldFlagCountDown_SC_battle_2eproto.base,
  &scc_info_MSG_RetHoldFlagDBState_SC_battle_2eproto.base,
  &scc_info_MSG_RetHoldFlagEvent_SC_battle_2eproto.base,
  &scc_info_MSG_RetHoldFlagReport_SC_battle_2eproto.base,
  &scc_info_MSG_RetHoldFlagTeamScore_SC_battle_2eproto.base,
  &scc_info_MSG_RetMatchMember_SC_battle_2eproto.base,
  &scc_info_MSG_retEnterBattle_SC_battle_2eproto.base,
  &scc_info_MatchMember_battle_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_battle_2eproto_once;
static bool descriptor_table_battle_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_battle_2eproto = {
  &descriptor_table_battle_2eproto_initialized, descriptor_table_protodef_battle_2eproto, "battle.proto", 3121,
  &descriptor_table_battle_2eproto_once, descriptor_table_battle_2eproto_sccs, descriptor_table_battle_2eproto_deps, 24, 0,
  schemas, file_default_instances, TableStruct_battle_2eproto::offsets,
  file_level_metadata_battle_2eproto, 24, file_level_enum_descriptors_battle_2eproto, file_level_service_descriptors_battle_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_battle_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_battle_2eproto)), true);
namespace battle {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BatteMatchCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_battle_2eproto);
  return file_level_enum_descriptors_battle_2eproto[0];
}
bool BatteMatchCode_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CancelBatteMatchCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_battle_2eproto);
  return file_level_enum_descriptors_battle_2eproto[1];
}
bool CancelBatteMatchCode_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CreateBattleCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_battle_2eproto);
  return file_level_enum_descriptors_battle_2eproto[2];
}
bool CreateBattleCode_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EnterBattleCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_battle_2eproto);
  return file_level_enum_descriptors_battle_2eproto[3];
}
bool EnterBattleCode_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Camp_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_battle_2eproto);
  return file_level_enum_descriptors_battle_2eproto[4];
}
bool Camp_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HoldFlagStage_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_battle_2eproto);
  return file_level_enum_descriptors_battle_2eproto[5];
}
bool HoldFlagStage_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void MatchMember::InitAsDefaultInstance() {
}
class MatchMember::_Internal {
 public:
  using HasBits = decltype(std::declval<MatchMember>()._has_bits_);
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_captain(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_heroid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_camp(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_gid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

MatchMember::MatchMember()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:battle.MatchMember)
}
MatchMember::MatchMember(const MatchMember& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&camp_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(camp_));
  // @@protoc_insertion_point(copy_constructor:battle.MatchMember)
}

void MatchMember::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MatchMember_battle_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&camp_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(camp_));
}

MatchMember::~MatchMember() {
  // @@protoc_insertion_point(destructor:battle.MatchMember)
  SharedDtor();
}

void MatchMember::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MatchMember::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MatchMember& MatchMember::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MatchMember_battle_2eproto.base);
  return *internal_default_instance();
}


void MatchMember::Clear() {
// @@protoc_insertion_point(message_clear_start:battle.MatchMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&userid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&camp_) -
        reinterpret_cast<char*>(&userid_)) + sizeof(camp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MatchMember::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 userid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_userid(&has_bits);
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 captain = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_captain(&has_bits);
          captain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 heroid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_heroid(&has_bits);
          heroid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "battle.MatchMember.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 level = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 camp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_camp(&has_bits);
          camp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 gid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_gid(&has_bits);
          gid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MatchMember::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:battle.MatchMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 userid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_userid(), target);
  }

  // optional uint64 captain = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_captain(), target);
  }

  // optional uint32 heroid = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_heroid(), target);
  }

  // optional string name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "battle.MatchMember.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  // optional uint32 level = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_level(), target);
  }

  // optional uint32 camp = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_camp(), target);
  }

  // optional uint64 gid = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_gid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:battle.MatchMember)
  return target;
}

size_t MatchMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:battle.MatchMember)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string name = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint64 userid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_userid());
    }

    // optional uint64 captain = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_captain());
    }

    // optional uint32 heroid = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_heroid());
    }

    // optional uint32 level = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_level());
    }

    // optional uint64 gid = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_gid());
    }

    // optional uint32 camp = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_camp());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MatchMember::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:battle.MatchMember)
  GOOGLE_DCHECK_NE(&from, this);
  const MatchMember* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MatchMember>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:battle.MatchMember)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:battle.MatchMember)
    MergeFrom(*source);
  }
}

void MatchMember::MergeFrom(const MatchMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:battle.MatchMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000004u) {
      captain_ = from.captain_;
    }
    if (cached_has_bits & 0x00000008u) {
      heroid_ = from.heroid_;
    }
    if (cached_has_bits & 0x00000010u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000020u) {
      gid_ = from.gid_;
    }
    if (cached_has_bits & 0x00000040u) {
      camp_ = from.camp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MatchMember::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:battle.MatchMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchMember::CopyFrom(const MatchMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:battle.MatchMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchMember::IsInitialized() const {
  return true;
}

void MatchMember::InternalSwap(MatchMember* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(userid_, other->userid_);
  swap(captain_, other->captain_);
  swap(heroid_, other->heroid_);
  swap(level_, other->level_);
  swap(gid_, other->gid_);
  swap(camp_, other->camp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchMember::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqBattleTimes_CS::InitAsDefaultInstance() {
}
class MSG_ReqBattleTimes_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqBattleTimes_CS>()._has_bits_);
  static void set_has_battleid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_ReqBattleTimes_CS::MSG_ReqBattleTimes_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:battle.MSG_ReqBattleTimes_CS)
}
MSG_ReqBattleTimes_CS::MSG_ReqBattleTimes_CS(const MSG_ReqBattleTimes_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  battleid_ = from.battleid_;
  // @@protoc_insertion_point(copy_constructor:battle.MSG_ReqBattleTimes_CS)
}

void MSG_ReqBattleTimes_CS::SharedCtor() {
  battleid_ = 0u;
}

MSG_ReqBattleTimes_CS::~MSG_ReqBattleTimes_CS() {
  // @@protoc_insertion_point(destructor:battle.MSG_ReqBattleTimes_CS)
  SharedDtor();
}

void MSG_ReqBattleTimes_CS::SharedDtor() {
}

void MSG_ReqBattleTimes_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqBattleTimes_CS& MSG_ReqBattleTimes_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqBattleTimes_CS_battle_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqBattleTimes_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:battle.MSG_ReqBattleTimes_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  battleid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqBattleTimes_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 battleId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_battleid(&has_bits);
          battleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqBattleTimes_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:battle.MSG_ReqBattleTimes_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 battleId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_battleid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:battle.MSG_ReqBattleTimes_CS)
  return target;
}

size_t MSG_ReqBattleTimes_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:battle.MSG_ReqBattleTimes_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 battleId = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_battleid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqBattleTimes_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:battle.MSG_ReqBattleTimes_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqBattleTimes_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqBattleTimes_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:battle.MSG_ReqBattleTimes_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:battle.MSG_ReqBattleTimes_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqBattleTimes_CS::MergeFrom(const MSG_ReqBattleTimes_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:battle.MSG_ReqBattleTimes_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_battleid()) {
    _internal_set_battleid(from._internal_battleid());
  }
}

void MSG_ReqBattleTimes_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:battle.MSG_ReqBattleTimes_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqBattleTimes_CS::CopyFrom(const MSG_ReqBattleTimes_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:battle.MSG_ReqBattleTimes_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqBattleTimes_CS::IsInitialized() const {
  return true;
}

void MSG_ReqBattleTimes_CS::InternalSwap(MSG_ReqBattleTimes_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(battleid_, other->battleid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqBattleTimes_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetBattleTimes_SC::InitAsDefaultInstance() {
}
class MSG_RetBattleTimes_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetBattleTimes_SC>()._has_bits_);
  static void set_has_winbattletimes(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_RetBattleTimes_SC::MSG_RetBattleTimes_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:battle.MSG_RetBattleTimes_SC)
}
MSG_RetBattleTimes_SC::MSG_RetBattleTimes_SC(const MSG_RetBattleTimes_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  winbattletimes_ = from.winbattletimes_;
  // @@protoc_insertion_point(copy_constructor:battle.MSG_RetBattleTimes_SC)
}

void MSG_RetBattleTimes_SC::SharedCtor() {
  winbattletimes_ = 0u;
}

MSG_RetBattleTimes_SC::~MSG_RetBattleTimes_SC() {
  // @@protoc_insertion_point(destructor:battle.MSG_RetBattleTimes_SC)
  SharedDtor();
}

void MSG_RetBattleTimes_SC::SharedDtor() {
}

void MSG_RetBattleTimes_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetBattleTimes_SC& MSG_RetBattleTimes_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetBattleTimes_SC_battle_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetBattleTimes_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:battle.MSG_RetBattleTimes_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  winbattletimes_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetBattleTimes_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 winBattleTimes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_winbattletimes(&has_bits);
          winbattletimes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetBattleTimes_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:battle.MSG_RetBattleTimes_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 winBattleTimes = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_winbattletimes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:battle.MSG_RetBattleTimes_SC)
  return target;
}

size_t MSG_RetBattleTimes_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:battle.MSG_RetBattleTimes_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 winBattleTimes = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_winbattletimes());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetBattleTimes_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:battle.MSG_RetBattleTimes_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetBattleTimes_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetBattleTimes_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:battle.MSG_RetBattleTimes_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:battle.MSG_RetBattleTimes_SC)
    MergeFrom(*source);
  }
}

void MSG_RetBattleTimes_SC::MergeFrom(const MSG_RetBattleTimes_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:battle.MSG_RetBattleTimes_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_winbattletimes()) {
    _internal_set_winbattletimes(from._internal_winbattletimes());
  }
}

void MSG_RetBattleTimes_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:battle.MSG_RetBattleTimes_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetBattleTimes_SC::CopyFrom(const MSG_RetBattleTimes_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:battle.MSG_RetBattleTimes_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetBattleTimes_SC::IsInitialized() const {
  return true;
}

void MSG_RetBattleTimes_SC::InternalSwap(MSG_RetBattleTimes_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(winbattletimes_, other->winbattletimes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetBattleTimes_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqBattleMatch_CS::InitAsDefaultInstance() {
}
class MSG_ReqBattleMatch_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqBattleMatch_CS>()._has_bits_);
  static void set_has_battleid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_ReqBattleMatch_CS::MSG_ReqBattleMatch_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:battle.MSG_ReqBattleMatch_CS)
}
MSG_ReqBattleMatch_CS::MSG_ReqBattleMatch_CS(const MSG_ReqBattleMatch_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  battleid_ = from.battleid_;
  // @@protoc_insertion_point(copy_constructor:battle.MSG_ReqBattleMatch_CS)
}

void MSG_ReqBattleMatch_CS::SharedCtor() {
  battleid_ = 0u;
}

MSG_ReqBattleMatch_CS::~MSG_ReqBattleMatch_CS() {
  // @@protoc_insertion_point(destructor:battle.MSG_ReqBattleMatch_CS)
  SharedDtor();
}

void MSG_ReqBattleMatch_CS::SharedDtor() {
}

void MSG_ReqBattleMatch_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqBattleMatch_CS& MSG_ReqBattleMatch_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqBattleMatch_CS_battle_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqBattleMatch_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:battle.MSG_ReqBattleMatch_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  battleid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqBattleMatch_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 battleId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_battleid(&has_bits);
          battleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqBattleMatch_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:battle.MSG_ReqBattleMatch_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 battleId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_battleid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:battle.MSG_ReqBattleMatch_CS)
  return target;
}

size_t MSG_ReqBattleMatch_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:battle.MSG_ReqBattleMatch_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 battleId = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_battleid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqBattleMatch_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:battle.MSG_ReqBattleMatch_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqBattleMatch_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqBattleMatch_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:battle.MSG_ReqBattleMatch_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:battle.MSG_ReqBattleMatch_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqBattleMatch_CS::MergeFrom(const MSG_ReqBattleMatch_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:battle.MSG_ReqBattleMatch_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_battleid()) {
    _internal_set_battleid(from._internal_battleid());
  }
}

void MSG_ReqBattleMatch_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:battle.MSG_ReqBattleMatch_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqBattleMatch_CS::CopyFrom(const MSG_ReqBattleMatch_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:battle.MSG_ReqBattleMatch_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqBattleMatch_CS::IsInitialized() const {
  return true;
}

void MSG_ReqBattleMatch_CS::InternalSwap(MSG_ReqBattleMatch_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(battleid_, other->battleid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqBattleMatch_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqBattleMatch_SC::InitAsDefaultInstance() {
}
class MSG_ReqBattleMatch_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqBattleMatch_SC>()._has_bits_);
  static void set_has_errorcode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_averwaittime(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_ReqBattleMatch_SC::MSG_ReqBattleMatch_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:battle.MSG_ReqBattleMatch_SC)
}
MSG_ReqBattleMatch_SC::MSG_ReqBattleMatch_SC(const MSG_ReqBattleMatch_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&averwaittime_, &from.averwaittime_,
    static_cast<size_t>(reinterpret_cast<char*>(&errorcode_) -
    reinterpret_cast<char*>(&averwaittime_)) + sizeof(errorcode_));
  // @@protoc_insertion_point(copy_constructor:battle.MSG_ReqBattleMatch_SC)
}

void MSG_ReqBattleMatch_SC::SharedCtor() {
  averwaittime_ = PROTOBUF_ULONGLONG(0);
  errorcode_ = 1;
}

MSG_ReqBattleMatch_SC::~MSG_ReqBattleMatch_SC() {
  // @@protoc_insertion_point(destructor:battle.MSG_ReqBattleMatch_SC)
  SharedDtor();
}

void MSG_ReqBattleMatch_SC::SharedDtor() {
}

void MSG_ReqBattleMatch_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqBattleMatch_SC& MSG_ReqBattleMatch_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqBattleMatch_SC_battle_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqBattleMatch_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:battle.MSG_ReqBattleMatch_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    averwaittime_ = PROTOBUF_ULONGLONG(0);
    errorcode_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqBattleMatch_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .battle.BatteMatchCode errorCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::battle::BatteMatchCode_IsValid(val))) {
            _internal_set_errorcode(static_cast<::battle::BatteMatchCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint64 averWaitTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_averwaittime(&has_bits);
          averwaittime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqBattleMatch_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:battle.MSG_ReqBattleMatch_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .battle.BatteMatchCode errorCode = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_errorcode(), target);
  }

  // optional uint64 averWaitTime = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_averwaittime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:battle.MSG_ReqBattleMatch_SC)
  return target;
}

size_t MSG_ReqBattleMatch_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:battle.MSG_ReqBattleMatch_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 averWaitTime = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_averwaittime());
    }

    // optional .battle.BatteMatchCode errorCode = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_errorcode());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqBattleMatch_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:battle.MSG_ReqBattleMatch_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqBattleMatch_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqBattleMatch_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:battle.MSG_ReqBattleMatch_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:battle.MSG_ReqBattleMatch_SC)
    MergeFrom(*source);
  }
}

void MSG_ReqBattleMatch_SC::MergeFrom(const MSG_ReqBattleMatch_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:battle.MSG_ReqBattleMatch_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      averwaittime_ = from.averwaittime_;
    }
    if (cached_has_bits & 0x00000002u) {
      errorcode_ = from.errorcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_ReqBattleMatch_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:battle.MSG_ReqBattleMatch_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqBattleMatch_SC::CopyFrom(const MSG_ReqBattleMatch_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:battle.MSG_ReqBattleMatch_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqBattleMatch_SC::IsInitialized() const {
  return true;
}

void MSG_ReqBattleMatch_SC::InternalSwap(MSG_ReqBattleMatch_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(averwaittime_, other->averwaittime_);
  swap(errorcode_, other->errorcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqBattleMatch_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqBattleCancelMatch_CS::InitAsDefaultInstance() {
}
class MSG_ReqBattleCancelMatch_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqBattleCancelMatch_CS>()._has_bits_);
  static void set_has_battleid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_ReqBattleCancelMatch_CS::MSG_ReqBattleCancelMatch_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:battle.MSG_ReqBattleCancelMatch_CS)
}
MSG_ReqBattleCancelMatch_CS::MSG_ReqBattleCancelMatch_CS(const MSG_ReqBattleCancelMatch_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  battleid_ = from.battleid_;
  // @@protoc_insertion_point(copy_constructor:battle.MSG_ReqBattleCancelMatch_CS)
}

void MSG_ReqBattleCancelMatch_CS::SharedCtor() {
  battleid_ = 0u;
}

MSG_ReqBattleCancelMatch_CS::~MSG_ReqBattleCancelMatch_CS() {
  // @@protoc_insertion_point(destructor:battle.MSG_ReqBattleCancelMatch_CS)
  SharedDtor();
}

void MSG_ReqBattleCancelMatch_CS::SharedDtor() {
}

void MSG_ReqBattleCancelMatch_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqBattleCancelMatch_CS& MSG_ReqBattleCancelMatch_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqBattleCancelMatch_CS_battle_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqBattleCancelMatch_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:battle.MSG_ReqBattleCancelMatch_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  battleid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqBattleCancelMatch_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 battleId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_battleid(&has_bits);
          battleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqBattleCancelMatch_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:battle.MSG_ReqBattleCancelMatch_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 battleId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_battleid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:battle.MSG_ReqBattleCancelMatch_CS)
  return target;
}

size_t MSG_ReqBattleCancelMatch_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:battle.MSG_ReqBattleCancelMatch_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 battleId = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_battleid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqBattleCancelMatch_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:battle.MSG_ReqBattleCancelMatch_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqBattleCancelMatch_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqBattleCancelMatch_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:battle.MSG_ReqBattleCancelMatch_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:battle.MSG_ReqBattleCancelMatch_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqBattleCancelMatch_CS::MergeFrom(const MSG_ReqBattleCancelMatch_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:battle.MSG_ReqBattleCancelMatch_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_battleid()) {
    _internal_set_battleid(from._internal_battleid());
  }
}

void MSG_ReqBattleCancelMatch_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:battle.MSG_ReqBattleCancelMatch_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqBattleCancelMatch_CS::CopyFrom(const MSG_ReqBattleCancelMatch_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:battle.MSG_ReqBattleCancelMatch_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqBattleCancelMatch_CS::IsInitialized() const {
  return true;
}

void MSG_ReqBattleCancelMatch_CS::InternalSwap(MSG_ReqBattleCancelMatch_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(battleid_, other->battleid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqBattleCancelMatch_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqBattleCancelMatch_SC::InitAsDefaultInstance() {
}
class MSG_ReqBattleCancelMatch_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqBattleCancelMatch_SC>()._has_bits_);
  static void set_has_errorcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_ReqBattleCancelMatch_SC::MSG_ReqBattleCancelMatch_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:battle.MSG_ReqBattleCancelMatch_SC)
}
MSG_ReqBattleCancelMatch_SC::MSG_ReqBattleCancelMatch_SC(const MSG_ReqBattleCancelMatch_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errorcode_ = from.errorcode_;
  // @@protoc_insertion_point(copy_constructor:battle.MSG_ReqBattleCancelMatch_SC)
}

void MSG_ReqBattleCancelMatch_SC::SharedCtor() {
  errorcode_ = 1;
}

MSG_ReqBattleCancelMatch_SC::~MSG_ReqBattleCancelMatch_SC() {
  // @@protoc_insertion_point(destructor:battle.MSG_ReqBattleCancelMatch_SC)
  SharedDtor();
}

void MSG_ReqBattleCancelMatch_SC::SharedDtor() {
}

void MSG_ReqBattleCancelMatch_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqBattleCancelMatch_SC& MSG_ReqBattleCancelMatch_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqBattleCancelMatch_SC_battle_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqBattleCancelMatch_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:battle.MSG_ReqBattleCancelMatch_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errorcode_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqBattleCancelMatch_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .battle.CancelBatteMatchCode errorCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::battle::CancelBatteMatchCode_IsValid(val))) {
            _internal_set_errorcode(static_cast<::battle::CancelBatteMatchCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqBattleCancelMatch_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:battle.MSG_ReqBattleCancelMatch_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .battle.CancelBatteMatchCode errorCode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_errorcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:battle.MSG_ReqBattleCancelMatch_SC)
  return target;
}

size_t MSG_ReqBattleCancelMatch_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:battle.MSG_ReqBattleCancelMatch_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .battle.CancelBatteMatchCode errorCode = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_errorcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqBattleCancelMatch_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:battle.MSG_ReqBattleCancelMatch_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqBattleCancelMatch_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqBattleCancelMatch_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:battle.MSG_ReqBattleCancelMatch_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:battle.MSG_ReqBattleCancelMatch_SC)
    MergeFrom(*source);
  }
}

void MSG_ReqBattleCancelMatch_SC::MergeFrom(const MSG_ReqBattleCancelMatch_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:battle.MSG_ReqBattleCancelMatch_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_errorcode()) {
    _internal_set_errorcode(from._internal_errorcode());
  }
}

void MSG_ReqBattleCancelMatch_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:battle.MSG_ReqBattleCancelMatch_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqBattleCancelMatch_SC::CopyFrom(const MSG_ReqBattleCancelMatch_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:battle.MSG_ReqBattleCancelMatch_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqBattleCancelMatch_SC::IsInitialized() const {
  return true;
}

void MSG_ReqBattleCancelMatch_SC::InternalSwap(MSG_ReqBattleCancelMatch_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(errorcode_, other->errorcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqBattleCancelMatch_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetMatchMember_SC::InitAsDefaultInstance() {
}
class MSG_RetMatchMember_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetMatchMember_SC>()._has_bits_);
};

MSG_RetMatchMember_SC::MSG_RetMatchMember_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:battle.MSG_RetMatchMember_SC)
}
MSG_RetMatchMember_SC::MSG_RetMatchMember_SC(const MSG_RetMatchMember_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      members_(from.members_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:battle.MSG_RetMatchMember_SC)
}

void MSG_RetMatchMember_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_RetMatchMember_SC_battle_2eproto.base);
}

MSG_RetMatchMember_SC::~MSG_RetMatchMember_SC() {
  // @@protoc_insertion_point(destructor:battle.MSG_RetMatchMember_SC)
  SharedDtor();
}

void MSG_RetMatchMember_SC::SharedDtor() {
}

void MSG_RetMatchMember_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetMatchMember_SC& MSG_RetMatchMember_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetMatchMember_SC_battle_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetMatchMember_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:battle.MSG_RetMatchMember_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetMatchMember_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .battle.MatchMember members = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetMatchMember_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:battle.MSG_RetMatchMember_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .battle.MatchMember members = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_members_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_members(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:battle.MSG_RetMatchMember_SC)
  return target;
}

size_t MSG_RetMatchMember_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:battle.MSG_RetMatchMember_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .battle.MatchMember members = 1;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetMatchMember_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:battle.MSG_RetMatchMember_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetMatchMember_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetMatchMember_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:battle.MSG_RetMatchMember_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:battle.MSG_RetMatchMember_SC)
    MergeFrom(*source);
  }
}

void MSG_RetMatchMember_SC::MergeFrom(const MSG_RetMatchMember_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:battle.MSG_RetMatchMember_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
}

void MSG_RetMatchMember_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:battle.MSG_RetMatchMember_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetMatchMember_SC::CopyFrom(const MSG_RetMatchMember_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:battle.MSG_RetMatchMember_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetMatchMember_SC::IsInitialized() const {
  return true;
}

void MSG_RetMatchMember_SC::InternalSwap(MSG_RetMatchMember_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  members_.InternalSwap(&other->members_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetMatchMember_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetBattleValid_SC::InitAsDefaultInstance() {
}
class MSG_RetBattleValid_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetBattleValid_SC>()._has_bits_);
  static void set_has_endtimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_RetBattleValid_SC::MSG_RetBattleValid_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:battle.MSG_RetBattleValid_SC)
}
MSG_RetBattleValid_SC::MSG_RetBattleValid_SC(const MSG_RetBattleValid_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  endtimestamp_ = from.endtimestamp_;
  // @@protoc_insertion_point(copy_constructor:battle.MSG_RetBattleValid_SC)
}

void MSG_RetBattleValid_SC::SharedCtor() {
  endtimestamp_ = 0u;
}

MSG_RetBattleValid_SC::~MSG_RetBattleValid_SC() {
  // @@protoc_insertion_point(destructor:battle.MSG_RetBattleValid_SC)
  SharedDtor();
}

void MSG_RetBattleValid_SC::SharedDtor() {
}

void MSG_RetBattleValid_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetBattleValid_SC& MSG_RetBattleValid_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetBattleValid_SC_battle_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetBattleValid_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:battle.MSG_RetBattleValid_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  endtimestamp_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetBattleValid_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 endTimeStamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_endtimestamp(&has_bits);
          endtimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetBattleValid_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:battle.MSG_RetBattleValid_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 endTimeStamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_endtimestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:battle.MSG_RetBattleValid_SC)
  return target;
}

size_t MSG_RetBattleValid_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:battle.MSG_RetBattleValid_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 endTimeStamp = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_endtimestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetBattleValid_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:battle.MSG_RetBattleValid_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetBattleValid_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetBattleValid_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:battle.MSG_RetBattleValid_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:battle.MSG_RetBattleValid_SC)
    MergeFrom(*source);
  }
}

void MSG_RetBattleValid_SC::MergeFrom(const MSG_RetBattleValid_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:battle.MSG_RetBattleValid_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_endtimestamp()) {
    _internal_set_endtimestamp(from._internal_endtimestamp());
  }
}

void MSG_RetBattleValid_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:battle.MSG_RetBattleValid_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetBattleValid_SC::CopyFrom(const MSG_RetBattleValid_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:battle.MSG_RetBattleValid_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetBattleValid_SC::IsInitialized() const {
  return true;
}

void MSG_RetBattleValid_SC::InternalSwap(MSG_RetBattleValid_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(endtimestamp_, other->endtimestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetBattleValid_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqEnterBattle_CS::InitAsDefaultInstance() {
}
class MSG_ReqEnterBattle_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqEnterBattle_CS>()._has_bits_);
};

MSG_ReqEnterBattle_CS::MSG_ReqEnterBattle_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:battle.MSG_ReqEnterBattle_CS)
}
MSG_ReqEnterBattle_CS::MSG_ReqEnterBattle_CS(const MSG_ReqEnterBattle_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:battle.MSG_ReqEnterBattle_CS)
}

void MSG_ReqEnterBattle_CS::SharedCtor() {
}

MSG_ReqEnterBattle_CS::~MSG_ReqEnterBattle_CS() {
  // @@protoc_insertion_point(destructor:battle.MSG_ReqEnterBattle_CS)
  SharedDtor();
}

void MSG_ReqEnterBattle_CS::SharedDtor() {
}

void MSG_ReqEnterBattle_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqEnterBattle_CS& MSG_ReqEnterBattle_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqEnterBattle_CS_battle_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqEnterBattle_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:battle.MSG_ReqEnterBattle_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqEnterBattle_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqEnterBattle_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:battle.MSG_ReqEnterBattle_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:battle.MSG_ReqEnterBattle_CS)
  return target;
}

size_t MSG_ReqEnterBattle_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:battle.MSG_ReqEnterBattle_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqEnterBattle_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:battle.MSG_ReqEnterBattle_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqEnterBattle_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqEnterBattle_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:battle.MSG_ReqEnterBattle_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:battle.MSG_ReqEnterBattle_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqEnterBattle_CS::MergeFrom(const MSG_ReqEnterBattle_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:battle.MSG_ReqEnterBattle_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_ReqEnterBattle_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:battle.MSG_ReqEnterBattle_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqEnterBattle_CS::CopyFrom(const MSG_ReqEnterBattle_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:battle.MSG_ReqEnterBattle_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqEnterBattle_CS::IsInitialized() const {
  return true;
}

void MSG_ReqEnterBattle_CS::InternalSwap(MSG_ReqEnterBattle_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqEnterBattle_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_retEnterBattle_SC::InitAsDefaultInstance() {
}
class MSG_retEnterBattle_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_retEnterBattle_SC>()._has_bits_);
  static void set_has_errorcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_retEnterBattle_SC::MSG_retEnterBattle_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:battle.MSG_retEnterBattle_SC)
}
MSG_retEnterBattle_SC::MSG_retEnterBattle_SC(const MSG_retEnterBattle_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errorcode_ = from.errorcode_;
  // @@protoc_insertion_point(copy_constructor:battle.MSG_retEnterBattle_SC)
}

void MSG_retEnterBattle_SC::SharedCtor() {
  errorcode_ = 1;
}

MSG_retEnterBattle_SC::~MSG_retEnterBattle_SC() {
  // @@protoc_insertion_point(destructor:battle.MSG_retEnterBattle_SC)
  SharedDtor();
}

void MSG_retEnterBattle_SC::SharedDtor() {
}

void MSG_retEnterBattle_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_retEnterBattle_SC& MSG_retEnterBattle_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_retEnterBattle_SC_battle_2eproto.base);
  return *internal_default_instance();
}


void MSG_retEnterBattle_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:battle.MSG_retEnterBattle_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errorcode_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_retEnterBattle_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .battle.EnterBattleCode errorCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::battle::EnterBattleCode_IsValid(val))) {
            _internal_set_errorcode(static_cast<::battle::EnterBattleCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_retEnterBattle_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:battle.MSG_retEnterBattle_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .battle.EnterBattleCode errorCode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_errorcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:battle.MSG_retEnterBattle_SC)
  return target;
}

size_t MSG_retEnterBattle_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:battle.MSG_retEnterBattle_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .battle.EnterBattleCode errorCode = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_errorcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_retEnterBattle_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:battle.MSG_retEnterBattle_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_retEnterBattle_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_retEnterBattle_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:battle.MSG_retEnterBattle_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:battle.MSG_retEnterBattle_SC)
    MergeFrom(*source);
  }
}

void MSG_retEnterBattle_SC::MergeFrom(const MSG_retEnterBattle_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:battle.MSG_retEnterBattle_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_errorcode()) {
    _internal_set_errorcode(from._internal_errorcode());
  }
}

void MSG_retEnterBattle_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:battle.MSG_retEnterBattle_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_retEnterBattle_SC::CopyFrom(const MSG_retEnterBattle_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:battle.MSG_retEnterBattle_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_retEnterBattle_SC::IsInitialized() const {
  return true;
}

void MSG_retEnterBattle_SC::InternalSwap(MSG_retEnterBattle_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(errorcode_, other->errorcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_retEnterBattle_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqChangeGroupLeader_CS::InitAsDefaultInstance() {
}
class MSG_ReqChangeGroupLeader_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqChangeGroupLeader_CS>()._has_bits_);
  static void set_has_newcaptain(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_ReqChangeGroupLeader_CS::MSG_ReqChangeGroupLeader_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:battle.MSG_ReqChangeGroupLeader_CS)
}
MSG_ReqChangeGroupLeader_CS::MSG_ReqChangeGroupLeader_CS(const MSG_ReqChangeGroupLeader_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  newcaptain_ = from.newcaptain_;
  // @@protoc_insertion_point(copy_constructor:battle.MSG_ReqChangeGroupLeader_CS)
}

void MSG_ReqChangeGroupLeader_CS::SharedCtor() {
  newcaptain_ = PROTOBUF_ULONGLONG(0);
}

MSG_ReqChangeGroupLeader_CS::~MSG_ReqChangeGroupLeader_CS() {
  // @@protoc_insertion_point(destructor:battle.MSG_ReqChangeGroupLeader_CS)
  SharedDtor();
}

void MSG_ReqChangeGroupLeader_CS::SharedDtor() {
}

void MSG_ReqChangeGroupLeader_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqChangeGroupLeader_CS& MSG_ReqChangeGroupLeader_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqChangeGroupLeader_CS_battle_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqChangeGroupLeader_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:battle.MSG_ReqChangeGroupLeader_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  newcaptain_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqChangeGroupLeader_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 newCaptain = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_newcaptain(&has_bits);
          newcaptain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqChangeGroupLeader_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:battle.MSG_ReqChangeGroupLeader_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 newCaptain = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_newcaptain(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:battle.MSG_ReqChangeGroupLeader_CS)
  return target;
}

size_t MSG_ReqChangeGroupLeader_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:battle.MSG_ReqChangeGroupLeader_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 newCaptain = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_newcaptain());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqChangeGroupLeader_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:battle.MSG_ReqChangeGroupLeader_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqChangeGroupLeader_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqChangeGroupLeader_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:battle.MSG_ReqChangeGroupLeader_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:battle.MSG_ReqChangeGroupLeader_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqChangeGroupLeader_CS::MergeFrom(const MSG_ReqChangeGroupLeader_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:battle.MSG_ReqChangeGroupLeader_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_newcaptain()) {
    _internal_set_newcaptain(from._internal_newcaptain());
  }
}

void MSG_ReqChangeGroupLeader_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:battle.MSG_ReqChangeGroupLeader_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqChangeGroupLeader_CS::CopyFrom(const MSG_ReqChangeGroupLeader_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:battle.MSG_ReqChangeGroupLeader_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqChangeGroupLeader_CS::IsInitialized() const {
  return true;
}

void MSG_ReqChangeGroupLeader_CS::InternalSwap(MSG_ReqChangeGroupLeader_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(newcaptain_, other->newcaptain_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqChangeGroupLeader_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HoldFlagReport::InitAsDefaultInstance() {
}
class HoldFlagReport::_Internal {
 public:
  using HasBits = decltype(std::declval<HoldFlagReport>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_campid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_teamid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_hurtnum(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_curenum(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_killnum(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_deadnum(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_backdbnum(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_capturedbnum(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

HoldFlagReport::HoldFlagReport()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:battle.HoldFlagReport)
}
HoldFlagReport::HoldFlagReport(const HoldFlagReport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&campid_, &from.campid_,
    static_cast<size_t>(reinterpret_cast<char*>(&capturedbnum_) -
    reinterpret_cast<char*>(&campid_)) + sizeof(capturedbnum_));
  // @@protoc_insertion_point(copy_constructor:battle.HoldFlagReport)
}

void HoldFlagReport::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HoldFlagReport_battle_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&campid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&capturedbnum_) -
      reinterpret_cast<char*>(&campid_)) + sizeof(capturedbnum_));
}

HoldFlagReport::~HoldFlagReport() {
  // @@protoc_insertion_point(destructor:battle.HoldFlagReport)
  SharedDtor();
}

void HoldFlagReport::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HoldFlagReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HoldFlagReport& HoldFlagReport::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HoldFlagReport_battle_2eproto.base);
  return *internal_default_instance();
}


void HoldFlagReport::Clear() {
// @@protoc_insertion_point(message_clear_start:battle.HoldFlagReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&campid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&deadnum_) -
        reinterpret_cast<char*>(&campid_)) + sizeof(deadnum_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&backdbnum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&capturedbnum_) -
        reinterpret_cast<char*>(&backdbnum_)) + sizeof(capturedbnum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* HoldFlagReport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "battle.HoldFlagReport.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 campId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_campid(&has_bits);
          campid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 teamId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_teamid(&has_bits);
          teamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 userid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_userid(&has_bits);
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hurtNum = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_hurtnum(&has_bits);
          hurtnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 cureNum = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_curenum(&has_bits);
          curenum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 killNum = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_killnum(&has_bits);
          killnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 deadNum = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_deadnum(&has_bits);
          deadnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 backDBNum = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_backdbnum(&has_bits);
          backdbnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 captureDBNum = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_capturedbnum(&has_bits);
          capturedbnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HoldFlagReport::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:battle.HoldFlagReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "battle.HoldFlagReport.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional uint32 campId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_campid(), target);
  }

  // optional uint32 teamId = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_teamid(), target);
  }

  // optional uint64 userid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_userid(), target);
  }

  // optional uint32 hurtNum = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_hurtnum(), target);
  }

  // optional uint32 cureNum = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_curenum(), target);
  }

  // optional uint32 killNum = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_killnum(), target);
  }

  // optional uint32 deadNum = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_deadnum(), target);
  }

  // optional uint32 backDBNum = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_backdbnum(), target);
  }

  // optional uint32 captureDBNum = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_capturedbnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:battle.HoldFlagReport)
  return target;
}

size_t HoldFlagReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:battle.HoldFlagReport)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint32 campId = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_campid());
    }

    // optional uint32 teamId = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_teamid());
    }

    // optional uint64 userid = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_userid());
    }

    // optional uint32 hurtNum = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hurtnum());
    }

    // optional uint32 cureNum = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_curenum());
    }

    // optional uint32 killNum = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_killnum());
    }

    // optional uint32 deadNum = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_deadnum());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 backDBNum = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_backdbnum());
    }

    // optional uint32 captureDBNum = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_capturedbnum());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HoldFlagReport::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:battle.HoldFlagReport)
  GOOGLE_DCHECK_NE(&from, this);
  const HoldFlagReport* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HoldFlagReport>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:battle.HoldFlagReport)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:battle.HoldFlagReport)
    MergeFrom(*source);
  }
}

void HoldFlagReport::MergeFrom(const HoldFlagReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:battle.HoldFlagReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      campid_ = from.campid_;
    }
    if (cached_has_bits & 0x00000004u) {
      teamid_ = from.teamid_;
    }
    if (cached_has_bits & 0x00000008u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000010u) {
      hurtnum_ = from.hurtnum_;
    }
    if (cached_has_bits & 0x00000020u) {
      curenum_ = from.curenum_;
    }
    if (cached_has_bits & 0x00000040u) {
      killnum_ = from.killnum_;
    }
    if (cached_has_bits & 0x00000080u) {
      deadnum_ = from.deadnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      backdbnum_ = from.backdbnum_;
    }
    if (cached_has_bits & 0x00000200u) {
      capturedbnum_ = from.capturedbnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HoldFlagReport::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:battle.HoldFlagReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HoldFlagReport::CopyFrom(const HoldFlagReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:battle.HoldFlagReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HoldFlagReport::IsInitialized() const {
  return true;
}

void HoldFlagReport::InternalSwap(HoldFlagReport* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(campid_, other->campid_);
  swap(teamid_, other->teamid_);
  swap(userid_, other->userid_);
  swap(hurtnum_, other->hurtnum_);
  swap(curenum_, other->curenum_);
  swap(killnum_, other->killnum_);
  swap(deadnum_, other->deadnum_);
  swap(backdbnum_, other->backdbnum_);
  swap(capturedbnum_, other->capturedbnum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HoldFlagReport::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HoldFlagCampScore::InitAsDefaultInstance() {
}
class HoldFlagCampScore::_Internal {
 public:
  using HasBits = decltype(std::declval<HoldFlagCampScore>()._has_bits_);
  static void set_has_campid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

HoldFlagCampScore::HoldFlagCampScore()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:battle.HoldFlagCampScore)
}
HoldFlagCampScore::HoldFlagCampScore(const HoldFlagCampScore& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&campid_, &from.campid_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&campid_)) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:battle.HoldFlagCampScore)
}

void HoldFlagCampScore::SharedCtor() {
  ::memset(&campid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&campid_)) + sizeof(score_));
}

HoldFlagCampScore::~HoldFlagCampScore() {
  // @@protoc_insertion_point(destructor:battle.HoldFlagCampScore)
  SharedDtor();
}

void HoldFlagCampScore::SharedDtor() {
}

void HoldFlagCampScore::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HoldFlagCampScore& HoldFlagCampScore::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HoldFlagCampScore_battle_2eproto.base);
  return *internal_default_instance();
}


void HoldFlagCampScore::Clear() {
// @@protoc_insertion_point(message_clear_start:battle.HoldFlagCampScore)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&campid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&score_) -
        reinterpret_cast<char*>(&campid_)) + sizeof(score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* HoldFlagCampScore::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 campId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_campid(&has_bits);
          campid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_score(&has_bits);
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HoldFlagCampScore::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:battle.HoldFlagCampScore)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 campId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_campid(), target);
  }

  // optional uint32 score = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:battle.HoldFlagCampScore)
  return target;
}

size_t HoldFlagCampScore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:battle.HoldFlagCampScore)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 campId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_campid());
    }

    // optional uint32 score = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_score());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HoldFlagCampScore::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:battle.HoldFlagCampScore)
  GOOGLE_DCHECK_NE(&from, this);
  const HoldFlagCampScore* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HoldFlagCampScore>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:battle.HoldFlagCampScore)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:battle.HoldFlagCampScore)
    MergeFrom(*source);
  }
}

void HoldFlagCampScore::MergeFrom(const HoldFlagCampScore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:battle.HoldFlagCampScore)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      campid_ = from.campid_;
    }
    if (cached_has_bits & 0x00000002u) {
      score_ = from.score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HoldFlagCampScore::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:battle.HoldFlagCampScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HoldFlagCampScore::CopyFrom(const HoldFlagCampScore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:battle.HoldFlagCampScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HoldFlagCampScore::IsInitialized() const {
  return true;
}

void HoldFlagCampScore::InternalSwap(HoldFlagCampScore* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(campid_, other->campid_);
  swap(score_, other->score_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HoldFlagCampScore::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HoldFlagDBState::InitAsDefaultInstance() {
}
class HoldFlagDBState::_Internal {
 public:
  using HasBits = decltype(std::declval<HoldFlagDBState>()._has_bits_);
  static void set_has_tempid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_campid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_dbstate(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_capuserid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_isinbase(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

HoldFlagDBState::HoldFlagDBState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:battle.HoldFlagDBState)
}
HoldFlagDBState::HoldFlagDBState(const HoldFlagDBState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tempid_, &from.tempid_,
    static_cast<size_t>(reinterpret_cast<char*>(&capuserid_) -
    reinterpret_cast<char*>(&tempid_)) + sizeof(capuserid_));
  // @@protoc_insertion_point(copy_constructor:battle.HoldFlagDBState)
}

void HoldFlagDBState::SharedCtor() {
  ::memset(&tempid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&capuserid_) -
      reinterpret_cast<char*>(&tempid_)) + sizeof(capuserid_));
}

HoldFlagDBState::~HoldFlagDBState() {
  // @@protoc_insertion_point(destructor:battle.HoldFlagDBState)
  SharedDtor();
}

void HoldFlagDBState::SharedDtor() {
}

void HoldFlagDBState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HoldFlagDBState& HoldFlagDBState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HoldFlagDBState_battle_2eproto.base);
  return *internal_default_instance();
}


void HoldFlagDBState::Clear() {
// @@protoc_insertion_point(message_clear_start:battle.HoldFlagDBState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&tempid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&capuserid_) -
        reinterpret_cast<char*>(&tempid_)) + sizeof(capuserid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* HoldFlagDBState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 tempId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tempid(&has_bits);
          tempid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 campId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_campid(&has_bits);
          campid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool DBState = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_dbstate(&has_bits);
          dbstate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 capUserId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_capuserid(&has_bits);
          capuserid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isInBase = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_isinbase(&has_bits);
          isinbase_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HoldFlagDBState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:battle.HoldFlagDBState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 tempId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_tempid(), target);
  }

  // optional uint32 campId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_campid(), target);
  }

  // optional bool DBState = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_dbstate(), target);
  }

  // optional uint64 capUserId = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_capuserid(), target);
  }

  // optional bool isInBase = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_isinbase(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:battle.HoldFlagDBState)
  return target;
}

size_t HoldFlagDBState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:battle.HoldFlagDBState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint64 tempId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_tempid());
    }

    // optional uint32 campId = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_campid());
    }

    // optional bool DBState = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool isInBase = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional uint64 capUserId = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_capuserid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HoldFlagDBState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:battle.HoldFlagDBState)
  GOOGLE_DCHECK_NE(&from, this);
  const HoldFlagDBState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HoldFlagDBState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:battle.HoldFlagDBState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:battle.HoldFlagDBState)
    MergeFrom(*source);
  }
}

void HoldFlagDBState::MergeFrom(const HoldFlagDBState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:battle.HoldFlagDBState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      tempid_ = from.tempid_;
    }
    if (cached_has_bits & 0x00000002u) {
      campid_ = from.campid_;
    }
    if (cached_has_bits & 0x00000004u) {
      dbstate_ = from.dbstate_;
    }
    if (cached_has_bits & 0x00000008u) {
      isinbase_ = from.isinbase_;
    }
    if (cached_has_bits & 0x00000010u) {
      capuserid_ = from.capuserid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HoldFlagDBState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:battle.HoldFlagDBState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HoldFlagDBState::CopyFrom(const HoldFlagDBState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:battle.HoldFlagDBState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HoldFlagDBState::IsInitialized() const {
  return true;
}

void HoldFlagDBState::InternalSwap(HoldFlagDBState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(tempid_, other->tempid_);
  swap(campid_, other->campid_);
  swap(dbstate_, other->dbstate_);
  swap(isinbase_, other->isinbase_);
  swap(capuserid_, other->capuserid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HoldFlagDBState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetHoldFlagTeamScore_SC::InitAsDefaultInstance() {
}
class MSG_RetHoldFlagTeamScore_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetHoldFlagTeamScore_SC>()._has_bits_);
};

MSG_RetHoldFlagTeamScore_SC::MSG_RetHoldFlagTeamScore_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:battle.MSG_RetHoldFlagTeamScore_SC)
}
MSG_RetHoldFlagTeamScore_SC::MSG_RetHoldFlagTeamScore_SC(const MSG_RetHoldFlagTeamScore_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      campscore_(from.campscore_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:battle.MSG_RetHoldFlagTeamScore_SC)
}

void MSG_RetHoldFlagTeamScore_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_RetHoldFlagTeamScore_SC_battle_2eproto.base);
}

MSG_RetHoldFlagTeamScore_SC::~MSG_RetHoldFlagTeamScore_SC() {
  // @@protoc_insertion_point(destructor:battle.MSG_RetHoldFlagTeamScore_SC)
  SharedDtor();
}

void MSG_RetHoldFlagTeamScore_SC::SharedDtor() {
}

void MSG_RetHoldFlagTeamScore_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetHoldFlagTeamScore_SC& MSG_RetHoldFlagTeamScore_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetHoldFlagTeamScore_SC_battle_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetHoldFlagTeamScore_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:battle.MSG_RetHoldFlagTeamScore_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  campscore_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetHoldFlagTeamScore_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .battle.HoldFlagCampScore campScore = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_campscore(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetHoldFlagTeamScore_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:battle.MSG_RetHoldFlagTeamScore_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .battle.HoldFlagCampScore campScore = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_campscore_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_campscore(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:battle.MSG_RetHoldFlagTeamScore_SC)
  return target;
}

size_t MSG_RetHoldFlagTeamScore_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:battle.MSG_RetHoldFlagTeamScore_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .battle.HoldFlagCampScore campScore = 1;
  total_size += 1UL * this->_internal_campscore_size();
  for (const auto& msg : this->campscore_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetHoldFlagTeamScore_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:battle.MSG_RetHoldFlagTeamScore_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetHoldFlagTeamScore_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetHoldFlagTeamScore_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:battle.MSG_RetHoldFlagTeamScore_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:battle.MSG_RetHoldFlagTeamScore_SC)
    MergeFrom(*source);
  }
}

void MSG_RetHoldFlagTeamScore_SC::MergeFrom(const MSG_RetHoldFlagTeamScore_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:battle.MSG_RetHoldFlagTeamScore_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  campscore_.MergeFrom(from.campscore_);
}

void MSG_RetHoldFlagTeamScore_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:battle.MSG_RetHoldFlagTeamScore_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetHoldFlagTeamScore_SC::CopyFrom(const MSG_RetHoldFlagTeamScore_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:battle.MSG_RetHoldFlagTeamScore_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetHoldFlagTeamScore_SC::IsInitialized() const {
  return true;
}

void MSG_RetHoldFlagTeamScore_SC::InternalSwap(MSG_RetHoldFlagTeamScore_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  campscore_.InternalSwap(&other->campscore_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetHoldFlagTeamScore_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetHoldFlagDBState_SC::InitAsDefaultInstance() {
}
class MSG_RetHoldFlagDBState_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetHoldFlagDBState_SC>()._has_bits_);
};

MSG_RetHoldFlagDBState_SC::MSG_RetHoldFlagDBState_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:battle.MSG_RetHoldFlagDBState_SC)
}
MSG_RetHoldFlagDBState_SC::MSG_RetHoldFlagDBState_SC(const MSG_RetHoldFlagDBState_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      dbstates_(from.dbstates_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:battle.MSG_RetHoldFlagDBState_SC)
}

void MSG_RetHoldFlagDBState_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_RetHoldFlagDBState_SC_battle_2eproto.base);
}

MSG_RetHoldFlagDBState_SC::~MSG_RetHoldFlagDBState_SC() {
  // @@protoc_insertion_point(destructor:battle.MSG_RetHoldFlagDBState_SC)
  SharedDtor();
}

void MSG_RetHoldFlagDBState_SC::SharedDtor() {
}

void MSG_RetHoldFlagDBState_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetHoldFlagDBState_SC& MSG_RetHoldFlagDBState_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetHoldFlagDBState_SC_battle_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetHoldFlagDBState_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:battle.MSG_RetHoldFlagDBState_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dbstates_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetHoldFlagDBState_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .battle.HoldFlagDBState DBStates = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dbstates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetHoldFlagDBState_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:battle.MSG_RetHoldFlagDBState_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .battle.HoldFlagDBState DBStates = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dbstates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_dbstates(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:battle.MSG_RetHoldFlagDBState_SC)
  return target;
}

size_t MSG_RetHoldFlagDBState_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:battle.MSG_RetHoldFlagDBState_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .battle.HoldFlagDBState DBStates = 1;
  total_size += 1UL * this->_internal_dbstates_size();
  for (const auto& msg : this->dbstates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetHoldFlagDBState_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:battle.MSG_RetHoldFlagDBState_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetHoldFlagDBState_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetHoldFlagDBState_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:battle.MSG_RetHoldFlagDBState_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:battle.MSG_RetHoldFlagDBState_SC)
    MergeFrom(*source);
  }
}

void MSG_RetHoldFlagDBState_SC::MergeFrom(const MSG_RetHoldFlagDBState_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:battle.MSG_RetHoldFlagDBState_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dbstates_.MergeFrom(from.dbstates_);
}

void MSG_RetHoldFlagDBState_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:battle.MSG_RetHoldFlagDBState_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetHoldFlagDBState_SC::CopyFrom(const MSG_RetHoldFlagDBState_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:battle.MSG_RetHoldFlagDBState_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetHoldFlagDBState_SC::IsInitialized() const {
  return true;
}

void MSG_RetHoldFlagDBState_SC::InternalSwap(MSG_RetHoldFlagDBState_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  dbstates_.InternalSwap(&other->dbstates_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetHoldFlagDBState_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqHoldFlagReport_CS::InitAsDefaultInstance() {
}
class MSG_ReqHoldFlagReport_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqHoldFlagReport_CS>()._has_bits_);
};

MSG_ReqHoldFlagReport_CS::MSG_ReqHoldFlagReport_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:battle.MSG_ReqHoldFlagReport_CS)
}
MSG_ReqHoldFlagReport_CS::MSG_ReqHoldFlagReport_CS(const MSG_ReqHoldFlagReport_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:battle.MSG_ReqHoldFlagReport_CS)
}

void MSG_ReqHoldFlagReport_CS::SharedCtor() {
}

MSG_ReqHoldFlagReport_CS::~MSG_ReqHoldFlagReport_CS() {
  // @@protoc_insertion_point(destructor:battle.MSG_ReqHoldFlagReport_CS)
  SharedDtor();
}

void MSG_ReqHoldFlagReport_CS::SharedDtor() {
}

void MSG_ReqHoldFlagReport_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqHoldFlagReport_CS& MSG_ReqHoldFlagReport_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqHoldFlagReport_CS_battle_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqHoldFlagReport_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:battle.MSG_ReqHoldFlagReport_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqHoldFlagReport_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqHoldFlagReport_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:battle.MSG_ReqHoldFlagReport_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:battle.MSG_ReqHoldFlagReport_CS)
  return target;
}

size_t MSG_ReqHoldFlagReport_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:battle.MSG_ReqHoldFlagReport_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqHoldFlagReport_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:battle.MSG_ReqHoldFlagReport_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqHoldFlagReport_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqHoldFlagReport_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:battle.MSG_ReqHoldFlagReport_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:battle.MSG_ReqHoldFlagReport_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqHoldFlagReport_CS::MergeFrom(const MSG_ReqHoldFlagReport_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:battle.MSG_ReqHoldFlagReport_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_ReqHoldFlagReport_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:battle.MSG_ReqHoldFlagReport_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqHoldFlagReport_CS::CopyFrom(const MSG_ReqHoldFlagReport_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:battle.MSG_ReqHoldFlagReport_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqHoldFlagReport_CS::IsInitialized() const {
  return true;
}

void MSG_ReqHoldFlagReport_CS::InternalSwap(MSG_ReqHoldFlagReport_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqHoldFlagReport_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqHoldFlagCaptureDB_CS::InitAsDefaultInstance() {
}
class MSG_ReqHoldFlagCaptureDB_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqHoldFlagCaptureDB_CS>()._has_bits_);
  static void set_has_npcid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_ReqHoldFlagCaptureDB_CS::MSG_ReqHoldFlagCaptureDB_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:battle.MSG_ReqHoldFlagCaptureDB_CS)
}
MSG_ReqHoldFlagCaptureDB_CS::MSG_ReqHoldFlagCaptureDB_CS(const MSG_ReqHoldFlagCaptureDB_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  npcid_ = from.npcid_;
  // @@protoc_insertion_point(copy_constructor:battle.MSG_ReqHoldFlagCaptureDB_CS)
}

void MSG_ReqHoldFlagCaptureDB_CS::SharedCtor() {
  npcid_ = PROTOBUF_ULONGLONG(0);
}

MSG_ReqHoldFlagCaptureDB_CS::~MSG_ReqHoldFlagCaptureDB_CS() {
  // @@protoc_insertion_point(destructor:battle.MSG_ReqHoldFlagCaptureDB_CS)
  SharedDtor();
}

void MSG_ReqHoldFlagCaptureDB_CS::SharedDtor() {
}

void MSG_ReqHoldFlagCaptureDB_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqHoldFlagCaptureDB_CS& MSG_ReqHoldFlagCaptureDB_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqHoldFlagCaptureDB_CS_battle_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqHoldFlagCaptureDB_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:battle.MSG_ReqHoldFlagCaptureDB_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  npcid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqHoldFlagCaptureDB_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 npcid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_npcid(&has_bits);
          npcid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqHoldFlagCaptureDB_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:battle.MSG_ReqHoldFlagCaptureDB_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 npcid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_npcid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:battle.MSG_ReqHoldFlagCaptureDB_CS)
  return target;
}

size_t MSG_ReqHoldFlagCaptureDB_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:battle.MSG_ReqHoldFlagCaptureDB_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 npcid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_npcid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqHoldFlagCaptureDB_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:battle.MSG_ReqHoldFlagCaptureDB_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqHoldFlagCaptureDB_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqHoldFlagCaptureDB_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:battle.MSG_ReqHoldFlagCaptureDB_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:battle.MSG_ReqHoldFlagCaptureDB_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqHoldFlagCaptureDB_CS::MergeFrom(const MSG_ReqHoldFlagCaptureDB_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:battle.MSG_ReqHoldFlagCaptureDB_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_npcid()) {
    _internal_set_npcid(from._internal_npcid());
  }
}

void MSG_ReqHoldFlagCaptureDB_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:battle.MSG_ReqHoldFlagCaptureDB_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqHoldFlagCaptureDB_CS::CopyFrom(const MSG_ReqHoldFlagCaptureDB_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:battle.MSG_ReqHoldFlagCaptureDB_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqHoldFlagCaptureDB_CS::IsInitialized() const {
  return true;
}

void MSG_ReqHoldFlagCaptureDB_CS::InternalSwap(MSG_ReqHoldFlagCaptureDB_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(npcid_, other->npcid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqHoldFlagCaptureDB_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqHoldFlagPutDownDB_CS::InitAsDefaultInstance() {
}
class MSG_ReqHoldFlagPutDownDB_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqHoldFlagPutDownDB_CS>()._has_bits_);
};

MSG_ReqHoldFlagPutDownDB_CS::MSG_ReqHoldFlagPutDownDB_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:battle.MSG_ReqHoldFlagPutDownDB_CS)
}
MSG_ReqHoldFlagPutDownDB_CS::MSG_ReqHoldFlagPutDownDB_CS(const MSG_ReqHoldFlagPutDownDB_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:battle.MSG_ReqHoldFlagPutDownDB_CS)
}

void MSG_ReqHoldFlagPutDownDB_CS::SharedCtor() {
}

MSG_ReqHoldFlagPutDownDB_CS::~MSG_ReqHoldFlagPutDownDB_CS() {
  // @@protoc_insertion_point(destructor:battle.MSG_ReqHoldFlagPutDownDB_CS)
  SharedDtor();
}

void MSG_ReqHoldFlagPutDownDB_CS::SharedDtor() {
}

void MSG_ReqHoldFlagPutDownDB_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqHoldFlagPutDownDB_CS& MSG_ReqHoldFlagPutDownDB_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqHoldFlagPutDownDB_CS_battle_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqHoldFlagPutDownDB_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:battle.MSG_ReqHoldFlagPutDownDB_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqHoldFlagPutDownDB_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqHoldFlagPutDownDB_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:battle.MSG_ReqHoldFlagPutDownDB_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:battle.MSG_ReqHoldFlagPutDownDB_CS)
  return target;
}

size_t MSG_ReqHoldFlagPutDownDB_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:battle.MSG_ReqHoldFlagPutDownDB_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqHoldFlagPutDownDB_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:battle.MSG_ReqHoldFlagPutDownDB_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqHoldFlagPutDownDB_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqHoldFlagPutDownDB_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:battle.MSG_ReqHoldFlagPutDownDB_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:battle.MSG_ReqHoldFlagPutDownDB_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqHoldFlagPutDownDB_CS::MergeFrom(const MSG_ReqHoldFlagPutDownDB_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:battle.MSG_ReqHoldFlagPutDownDB_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_ReqHoldFlagPutDownDB_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:battle.MSG_ReqHoldFlagPutDownDB_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqHoldFlagPutDownDB_CS::CopyFrom(const MSG_ReqHoldFlagPutDownDB_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:battle.MSG_ReqHoldFlagPutDownDB_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqHoldFlagPutDownDB_CS::IsInitialized() const {
  return true;
}

void MSG_ReqHoldFlagPutDownDB_CS::InternalSwap(MSG_ReqHoldFlagPutDownDB_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqHoldFlagPutDownDB_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetHoldFlagReport_SC::InitAsDefaultInstance() {
}
class MSG_RetHoldFlagReport_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetHoldFlagReport_SC>()._has_bits_);
};

MSG_RetHoldFlagReport_SC::MSG_RetHoldFlagReport_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:battle.MSG_RetHoldFlagReport_SC)
}
MSG_RetHoldFlagReport_SC::MSG_RetHoldFlagReport_SC(const MSG_RetHoldFlagReport_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      reports_(from.reports_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:battle.MSG_RetHoldFlagReport_SC)
}

void MSG_RetHoldFlagReport_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_RetHoldFlagReport_SC_battle_2eproto.base);
}

MSG_RetHoldFlagReport_SC::~MSG_RetHoldFlagReport_SC() {
  // @@protoc_insertion_point(destructor:battle.MSG_RetHoldFlagReport_SC)
  SharedDtor();
}

void MSG_RetHoldFlagReport_SC::SharedDtor() {
}

void MSG_RetHoldFlagReport_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetHoldFlagReport_SC& MSG_RetHoldFlagReport_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetHoldFlagReport_SC_battle_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetHoldFlagReport_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:battle.MSG_RetHoldFlagReport_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reports_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetHoldFlagReport_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .battle.HoldFlagReport reports = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reports(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetHoldFlagReport_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:battle.MSG_RetHoldFlagReport_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .battle.HoldFlagReport reports = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reports_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_reports(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:battle.MSG_RetHoldFlagReport_SC)
  return target;
}

size_t MSG_RetHoldFlagReport_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:battle.MSG_RetHoldFlagReport_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .battle.HoldFlagReport reports = 1;
  total_size += 1UL * this->_internal_reports_size();
  for (const auto& msg : this->reports_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetHoldFlagReport_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:battle.MSG_RetHoldFlagReport_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetHoldFlagReport_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetHoldFlagReport_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:battle.MSG_RetHoldFlagReport_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:battle.MSG_RetHoldFlagReport_SC)
    MergeFrom(*source);
  }
}

void MSG_RetHoldFlagReport_SC::MergeFrom(const MSG_RetHoldFlagReport_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:battle.MSG_RetHoldFlagReport_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reports_.MergeFrom(from.reports_);
}

void MSG_RetHoldFlagReport_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:battle.MSG_RetHoldFlagReport_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetHoldFlagReport_SC::CopyFrom(const MSG_RetHoldFlagReport_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:battle.MSG_RetHoldFlagReport_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetHoldFlagReport_SC::IsInitialized() const {
  return true;
}

void MSG_RetHoldFlagReport_SC::InternalSwap(MSG_RetHoldFlagReport_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  reports_.InternalSwap(&other->reports_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetHoldFlagReport_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetHoldFlagAccount_SC::InitAsDefaultInstance() {
}
class MSG_RetHoldFlagAccount_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetHoldFlagAccount_SC>()._has_bits_);
  static void set_has_wincampid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_RetHoldFlagAccount_SC::MSG_RetHoldFlagAccount_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:battle.MSG_RetHoldFlagAccount_SC)
}
MSG_RetHoldFlagAccount_SC::MSG_RetHoldFlagAccount_SC(const MSG_RetHoldFlagAccount_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      reports_(from.reports_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  wincampid_ = from.wincampid_;
  // @@protoc_insertion_point(copy_constructor:battle.MSG_RetHoldFlagAccount_SC)
}

void MSG_RetHoldFlagAccount_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_RetHoldFlagAccount_SC_battle_2eproto.base);
  wincampid_ = 0u;
}

MSG_RetHoldFlagAccount_SC::~MSG_RetHoldFlagAccount_SC() {
  // @@protoc_insertion_point(destructor:battle.MSG_RetHoldFlagAccount_SC)
  SharedDtor();
}

void MSG_RetHoldFlagAccount_SC::SharedDtor() {
}

void MSG_RetHoldFlagAccount_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetHoldFlagAccount_SC& MSG_RetHoldFlagAccount_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetHoldFlagAccount_SC_battle_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetHoldFlagAccount_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:battle.MSG_RetHoldFlagAccount_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reports_.Clear();
  wincampid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetHoldFlagAccount_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .battle.HoldFlagReport reports = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reports(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 winCampId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_wincampid(&has_bits);
          wincampid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetHoldFlagAccount_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:battle.MSG_RetHoldFlagAccount_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .battle.HoldFlagReport reports = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reports_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_reports(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 winCampId = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_wincampid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:battle.MSG_RetHoldFlagAccount_SC)
  return target;
}

size_t MSG_RetHoldFlagAccount_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:battle.MSG_RetHoldFlagAccount_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .battle.HoldFlagReport reports = 1;
  total_size += 1UL * this->_internal_reports_size();
  for (const auto& msg : this->reports_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 winCampId = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_wincampid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetHoldFlagAccount_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:battle.MSG_RetHoldFlagAccount_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetHoldFlagAccount_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetHoldFlagAccount_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:battle.MSG_RetHoldFlagAccount_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:battle.MSG_RetHoldFlagAccount_SC)
    MergeFrom(*source);
  }
}

void MSG_RetHoldFlagAccount_SC::MergeFrom(const MSG_RetHoldFlagAccount_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:battle.MSG_RetHoldFlagAccount_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reports_.MergeFrom(from.reports_);
  if (from._internal_has_wincampid()) {
    _internal_set_wincampid(from._internal_wincampid());
  }
}

void MSG_RetHoldFlagAccount_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:battle.MSG_RetHoldFlagAccount_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetHoldFlagAccount_SC::CopyFrom(const MSG_RetHoldFlagAccount_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:battle.MSG_RetHoldFlagAccount_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetHoldFlagAccount_SC::IsInitialized() const {
  return true;
}

void MSG_RetHoldFlagAccount_SC::InternalSwap(MSG_RetHoldFlagAccount_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  reports_.InternalSwap(&other->reports_);
  swap(wincampid_, other->wincampid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetHoldFlagAccount_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetHoldFlagCountDown_SC::InitAsDefaultInstance() {
}
class MSG_RetHoldFlagCountDown_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetHoldFlagCountDown_SC>()._has_bits_);
  static void set_has_stage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_endtimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_RetHoldFlagCountDown_SC::MSG_RetHoldFlagCountDown_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:battle.MSG_RetHoldFlagCountDown_SC)
}
MSG_RetHoldFlagCountDown_SC::MSG_RetHoldFlagCountDown_SC(const MSG_RetHoldFlagCountDown_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stage_, &from.stage_,
    static_cast<size_t>(reinterpret_cast<char*>(&endtimestamp_) -
    reinterpret_cast<char*>(&stage_)) + sizeof(endtimestamp_));
  // @@protoc_insertion_point(copy_constructor:battle.MSG_RetHoldFlagCountDown_SC)
}

void MSG_RetHoldFlagCountDown_SC::SharedCtor() {
  ::memset(&stage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&endtimestamp_) -
      reinterpret_cast<char*>(&stage_)) + sizeof(endtimestamp_));
}

MSG_RetHoldFlagCountDown_SC::~MSG_RetHoldFlagCountDown_SC() {
  // @@protoc_insertion_point(destructor:battle.MSG_RetHoldFlagCountDown_SC)
  SharedDtor();
}

void MSG_RetHoldFlagCountDown_SC::SharedDtor() {
}

void MSG_RetHoldFlagCountDown_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetHoldFlagCountDown_SC& MSG_RetHoldFlagCountDown_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetHoldFlagCountDown_SC_battle_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetHoldFlagCountDown_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:battle.MSG_RetHoldFlagCountDown_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&stage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&endtimestamp_) -
        reinterpret_cast<char*>(&stage_)) + sizeof(endtimestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetHoldFlagCountDown_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .battle.HoldFlagStage stage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::battle::HoldFlagStage_IsValid(val))) {
            _internal_set_stage(static_cast<::battle::HoldFlagStage>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 endTimeStamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_endtimestamp(&has_bits);
          endtimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetHoldFlagCountDown_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:battle.MSG_RetHoldFlagCountDown_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .battle.HoldFlagStage stage = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_stage(), target);
  }

  // optional uint32 endTimeStamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_endtimestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:battle.MSG_RetHoldFlagCountDown_SC)
  return target;
}

size_t MSG_RetHoldFlagCountDown_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:battle.MSG_RetHoldFlagCountDown_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .battle.HoldFlagStage stage = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_stage());
    }

    // optional uint32 endTimeStamp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_endtimestamp());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetHoldFlagCountDown_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:battle.MSG_RetHoldFlagCountDown_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetHoldFlagCountDown_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetHoldFlagCountDown_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:battle.MSG_RetHoldFlagCountDown_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:battle.MSG_RetHoldFlagCountDown_SC)
    MergeFrom(*source);
  }
}

void MSG_RetHoldFlagCountDown_SC::MergeFrom(const MSG_RetHoldFlagCountDown_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:battle.MSG_RetHoldFlagCountDown_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      stage_ = from.stage_;
    }
    if (cached_has_bits & 0x00000002u) {
      endtimestamp_ = from.endtimestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_RetHoldFlagCountDown_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:battle.MSG_RetHoldFlagCountDown_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetHoldFlagCountDown_SC::CopyFrom(const MSG_RetHoldFlagCountDown_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:battle.MSG_RetHoldFlagCountDown_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetHoldFlagCountDown_SC::IsInitialized() const {
  return true;
}

void MSG_RetHoldFlagCountDown_SC::InternalSwap(MSG_RetHoldFlagCountDown_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(stage_, other->stage_);
  swap(endtimestamp_, other->endtimestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetHoldFlagCountDown_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetHoldFlagEvent_SC::InitAsDefaultInstance() {
}
class MSG_RetHoldFlagEvent_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetHoldFlagEvent_SC>()._has_bits_);
  static void set_has_tipid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_camp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_username(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_RetHoldFlagEvent_SC::MSG_RetHoldFlagEvent_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:battle.MSG_RetHoldFlagEvent_SC)
}
MSG_RetHoldFlagEvent_SC::MSG_RetHoldFlagEvent_SC(const MSG_RetHoldFlagEvent_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_username()) {
    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  ::memcpy(&tipid_, &from.tipid_,
    static_cast<size_t>(reinterpret_cast<char*>(&camp_) -
    reinterpret_cast<char*>(&tipid_)) + sizeof(camp_));
  // @@protoc_insertion_point(copy_constructor:battle.MSG_RetHoldFlagEvent_SC)
}

void MSG_RetHoldFlagEvent_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_RetHoldFlagEvent_SC_battle_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&tipid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&camp_) -
      reinterpret_cast<char*>(&tipid_)) + sizeof(camp_));
}

MSG_RetHoldFlagEvent_SC::~MSG_RetHoldFlagEvent_SC() {
  // @@protoc_insertion_point(destructor:battle.MSG_RetHoldFlagEvent_SC)
  SharedDtor();
}

void MSG_RetHoldFlagEvent_SC::SharedDtor() {
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_RetHoldFlagEvent_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetHoldFlagEvent_SC& MSG_RetHoldFlagEvent_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetHoldFlagEvent_SC_battle_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetHoldFlagEvent_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:battle.MSG_RetHoldFlagEvent_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    username_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&tipid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&camp_) -
        reinterpret_cast<char*>(&tipid_)) + sizeof(camp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetHoldFlagEvent_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 tipId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tipid(&has_bits);
          tipid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 camp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_camp(&has_bits);
          camp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string userName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "battle.MSG_RetHoldFlagEvent_SC.userName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetHoldFlagEvent_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:battle.MSG_RetHoldFlagEvent_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 tipId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tipid(), target);
  }

  // optional uint32 camp = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_camp(), target);
  }

  // optional string userName = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "battle.MSG_RetHoldFlagEvent_SC.userName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_username(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:battle.MSG_RetHoldFlagEvent_SC)
  return target;
}

size_t MSG_RetHoldFlagEvent_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:battle.MSG_RetHoldFlagEvent_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string userName = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_username());
    }

    // optional uint32 tipId = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tipid());
    }

    // optional uint32 camp = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_camp());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetHoldFlagEvent_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:battle.MSG_RetHoldFlagEvent_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetHoldFlagEvent_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetHoldFlagEvent_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:battle.MSG_RetHoldFlagEvent_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:battle.MSG_RetHoldFlagEvent_SC)
    MergeFrom(*source);
  }
}

void MSG_RetHoldFlagEvent_SC::MergeFrom(const MSG_RetHoldFlagEvent_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:battle.MSG_RetHoldFlagEvent_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000002u) {
      tipid_ = from.tipid_;
    }
    if (cached_has_bits & 0x00000004u) {
      camp_ = from.camp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_RetHoldFlagEvent_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:battle.MSG_RetHoldFlagEvent_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetHoldFlagEvent_SC::CopyFrom(const MSG_RetHoldFlagEvent_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:battle.MSG_RetHoldFlagEvent_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetHoldFlagEvent_SC::IsInitialized() const {
  return true;
}

void MSG_RetHoldFlagEvent_SC::InternalSwap(MSG_RetHoldFlagEvent_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(tipid_, other->tipid_);
  swap(camp_, other->camp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetHoldFlagEvent_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace battle
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::battle::MatchMember* Arena::CreateMaybeMessage< ::battle::MatchMember >(Arena* arena) {
  return Arena::CreateInternal< ::battle::MatchMember >(arena);
}
template<> PROTOBUF_NOINLINE ::battle::MSG_ReqBattleTimes_CS* Arena::CreateMaybeMessage< ::battle::MSG_ReqBattleTimes_CS >(Arena* arena) {
  return Arena::CreateInternal< ::battle::MSG_ReqBattleTimes_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::battle::MSG_RetBattleTimes_SC* Arena::CreateMaybeMessage< ::battle::MSG_RetBattleTimes_SC >(Arena* arena) {
  return Arena::CreateInternal< ::battle::MSG_RetBattleTimes_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::battle::MSG_ReqBattleMatch_CS* Arena::CreateMaybeMessage< ::battle::MSG_ReqBattleMatch_CS >(Arena* arena) {
  return Arena::CreateInternal< ::battle::MSG_ReqBattleMatch_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::battle::MSG_ReqBattleMatch_SC* Arena::CreateMaybeMessage< ::battle::MSG_ReqBattleMatch_SC >(Arena* arena) {
  return Arena::CreateInternal< ::battle::MSG_ReqBattleMatch_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::battle::MSG_ReqBattleCancelMatch_CS* Arena::CreateMaybeMessage< ::battle::MSG_ReqBattleCancelMatch_CS >(Arena* arena) {
  return Arena::CreateInternal< ::battle::MSG_ReqBattleCancelMatch_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::battle::MSG_ReqBattleCancelMatch_SC* Arena::CreateMaybeMessage< ::battle::MSG_ReqBattleCancelMatch_SC >(Arena* arena) {
  return Arena::CreateInternal< ::battle::MSG_ReqBattleCancelMatch_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::battle::MSG_RetMatchMember_SC* Arena::CreateMaybeMessage< ::battle::MSG_RetMatchMember_SC >(Arena* arena) {
  return Arena::CreateInternal< ::battle::MSG_RetMatchMember_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::battle::MSG_RetBattleValid_SC* Arena::CreateMaybeMessage< ::battle::MSG_RetBattleValid_SC >(Arena* arena) {
  return Arena::CreateInternal< ::battle::MSG_RetBattleValid_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::battle::MSG_ReqEnterBattle_CS* Arena::CreateMaybeMessage< ::battle::MSG_ReqEnterBattle_CS >(Arena* arena) {
  return Arena::CreateInternal< ::battle::MSG_ReqEnterBattle_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::battle::MSG_retEnterBattle_SC* Arena::CreateMaybeMessage< ::battle::MSG_retEnterBattle_SC >(Arena* arena) {
  return Arena::CreateInternal< ::battle::MSG_retEnterBattle_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::battle::MSG_ReqChangeGroupLeader_CS* Arena::CreateMaybeMessage< ::battle::MSG_ReqChangeGroupLeader_CS >(Arena* arena) {
  return Arena::CreateInternal< ::battle::MSG_ReqChangeGroupLeader_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::battle::HoldFlagReport* Arena::CreateMaybeMessage< ::battle::HoldFlagReport >(Arena* arena) {
  return Arena::CreateInternal< ::battle::HoldFlagReport >(arena);
}
template<> PROTOBUF_NOINLINE ::battle::HoldFlagCampScore* Arena::CreateMaybeMessage< ::battle::HoldFlagCampScore >(Arena* arena) {
  return Arena::CreateInternal< ::battle::HoldFlagCampScore >(arena);
}
template<> PROTOBUF_NOINLINE ::battle::HoldFlagDBState* Arena::CreateMaybeMessage< ::battle::HoldFlagDBState >(Arena* arena) {
  return Arena::CreateInternal< ::battle::HoldFlagDBState >(arena);
}
template<> PROTOBUF_NOINLINE ::battle::MSG_RetHoldFlagTeamScore_SC* Arena::CreateMaybeMessage< ::battle::MSG_RetHoldFlagTeamScore_SC >(Arena* arena) {
  return Arena::CreateInternal< ::battle::MSG_RetHoldFlagTeamScore_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::battle::MSG_RetHoldFlagDBState_SC* Arena::CreateMaybeMessage< ::battle::MSG_RetHoldFlagDBState_SC >(Arena* arena) {
  return Arena::CreateInternal< ::battle::MSG_RetHoldFlagDBState_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::battle::MSG_ReqHoldFlagReport_CS* Arena::CreateMaybeMessage< ::battle::MSG_ReqHoldFlagReport_CS >(Arena* arena) {
  return Arena::CreateInternal< ::battle::MSG_ReqHoldFlagReport_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::battle::MSG_ReqHoldFlagCaptureDB_CS* Arena::CreateMaybeMessage< ::battle::MSG_ReqHoldFlagCaptureDB_CS >(Arena* arena) {
  return Arena::CreateInternal< ::battle::MSG_ReqHoldFlagCaptureDB_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::battle::MSG_ReqHoldFlagPutDownDB_CS* Arena::CreateMaybeMessage< ::battle::MSG_ReqHoldFlagPutDownDB_CS >(Arena* arena) {
  return Arena::CreateInternal< ::battle::MSG_ReqHoldFlagPutDownDB_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::battle::MSG_RetHoldFlagReport_SC* Arena::CreateMaybeMessage< ::battle::MSG_RetHoldFlagReport_SC >(Arena* arena) {
  return Arena::CreateInternal< ::battle::MSG_RetHoldFlagReport_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::battle::MSG_RetHoldFlagAccount_SC* Arena::CreateMaybeMessage< ::battle::MSG_RetHoldFlagAccount_SC >(Arena* arena) {
  return Arena::CreateInternal< ::battle::MSG_RetHoldFlagAccount_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::battle::MSG_RetHoldFlagCountDown_SC* Arena::CreateMaybeMessage< ::battle::MSG_RetHoldFlagCountDown_SC >(Arena* arena) {
  return Arena::CreateInternal< ::battle::MSG_RetHoldFlagCountDown_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::battle::MSG_RetHoldFlagEvent_SC* Arena::CreateMaybeMessage< ::battle::MSG_RetHoldFlagEvent_SC >(Arena* arena) {
  return Arena::CreateInternal< ::battle::MSG_RetHoldFlagEvent_SC >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
