// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_chat_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_chat_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_chat_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_chat_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chat_2eproto;
namespace Chat {
class ChatData;
class ChatDataDefaultTypeInternal;
extern ChatDataDefaultTypeInternal _ChatData_default_instance_;
class ChatLink;
class ChatLinkDefaultTypeInternal;
extern ChatLinkDefaultTypeInternal _ChatLink_default_instance_;
class MSG_Req_ChannleChat_CS;
class MSG_Req_ChannleChat_CSDefaultTypeInternal;
extern MSG_Req_ChannleChat_CSDefaultTypeInternal _MSG_Req_ChannleChat_CS_default_instance_;
class MSG_Req_ChatUserInfo_CS;
class MSG_Req_ChatUserInfo_CSDefaultTypeInternal;
extern MSG_Req_ChatUserInfo_CSDefaultTypeInternal _MSG_Req_ChatUserInfo_CS_default_instance_;
class MSG_Req_Chat_CS;
class MSG_Req_Chat_CSDefaultTypeInternal;
extern MSG_Req_Chat_CSDefaultTypeInternal _MSG_Req_Chat_CS_default_instance_;
class MSG_Req_ImportantBroadcast_CS;
class MSG_Req_ImportantBroadcast_CSDefaultTypeInternal;
extern MSG_Req_ImportantBroadcast_CSDefaultTypeInternal _MSG_Req_ImportantBroadcast_CS_default_instance_;
class MSG_Req_OfflineChat_CS;
class MSG_Req_OfflineChat_CSDefaultTypeInternal;
extern MSG_Req_OfflineChat_CSDefaultTypeInternal _MSG_Req_OfflineChat_CS_default_instance_;
class MSG_Ret_ChannelChat_SC;
class MSG_Ret_ChannelChat_SCDefaultTypeInternal;
extern MSG_Ret_ChannelChat_SCDefaultTypeInternal _MSG_Ret_ChannelChat_SC_default_instance_;
class MSG_Ret_ChatUserInfo_SC;
class MSG_Ret_ChatUserInfo_SCDefaultTypeInternal;
extern MSG_Ret_ChatUserInfo_SCDefaultTypeInternal _MSG_Ret_ChatUserInfo_SC_default_instance_;
class MSG_Ret_Chat_SC;
class MSG_Ret_Chat_SCDefaultTypeInternal;
extern MSG_Ret_Chat_SCDefaultTypeInternal _MSG_Ret_Chat_SC_default_instance_;
class MSG_Ret_OfflineChat_SC;
class MSG_Ret_OfflineChat_SCDefaultTypeInternal;
extern MSG_Ret_OfflineChat_SCDefaultTypeInternal _MSG_Ret_OfflineChat_SC_default_instance_;
}  // namespace Chat
PROTOBUF_NAMESPACE_OPEN
template<> ::Chat::ChatData* Arena::CreateMaybeMessage<::Chat::ChatData>(Arena*);
template<> ::Chat::ChatLink* Arena::CreateMaybeMessage<::Chat::ChatLink>(Arena*);
template<> ::Chat::MSG_Req_ChannleChat_CS* Arena::CreateMaybeMessage<::Chat::MSG_Req_ChannleChat_CS>(Arena*);
template<> ::Chat::MSG_Req_ChatUserInfo_CS* Arena::CreateMaybeMessage<::Chat::MSG_Req_ChatUserInfo_CS>(Arena*);
template<> ::Chat::MSG_Req_Chat_CS* Arena::CreateMaybeMessage<::Chat::MSG_Req_Chat_CS>(Arena*);
template<> ::Chat::MSG_Req_ImportantBroadcast_CS* Arena::CreateMaybeMessage<::Chat::MSG_Req_ImportantBroadcast_CS>(Arena*);
template<> ::Chat::MSG_Req_OfflineChat_CS* Arena::CreateMaybeMessage<::Chat::MSG_Req_OfflineChat_CS>(Arena*);
template<> ::Chat::MSG_Ret_ChannelChat_SC* Arena::CreateMaybeMessage<::Chat::MSG_Ret_ChannelChat_SC>(Arena*);
template<> ::Chat::MSG_Ret_ChatUserInfo_SC* Arena::CreateMaybeMessage<::Chat::MSG_Ret_ChatUserInfo_SC>(Arena*);
template<> ::Chat::MSG_Ret_Chat_SC* Arena::CreateMaybeMessage<::Chat::MSG_Ret_Chat_SC>(Arena*);
template<> ::Chat::MSG_Ret_OfflineChat_SC* Arena::CreateMaybeMessage<::Chat::MSG_Ret_OfflineChat_SC>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Chat {

enum ChannelType : int {
  ChannelType_None = 0,
  ChannelType_Sys = 1,
  ChannelType_Team = 2,
  ChannelType_Guild = 3,
  ChannelType_Camp = 4,
  ChannelType_World = 5,
  ChannelType_Scene = 6,
  ChannelType_Private = 7,
  ChannelType_GmTool = 8,
  ChannelType_Moba = 9,
  ChannelType_Secret = 10
};
bool ChannelType_IsValid(int value);
constexpr ChannelType ChannelType_MIN = ChannelType_None;
constexpr ChannelType ChannelType_MAX = ChannelType_Secret;
constexpr int ChannelType_ARRAYSIZE = ChannelType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChannelType_descriptor();
template<typename T>
inline const std::string& ChannelType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChannelType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChannelType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ChannelType_descriptor(), enum_t_value);
}
inline bool ChannelType_Parse(
    const std::string& name, ChannelType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChannelType>(
    ChannelType_descriptor(), name, value);
}
enum ChatShowType : int {
  ChatShowType_MessageBox = 1,
  ChatShowType_Sys = 2,
  ChatShowType_Tips_Red = 3,
  ChatShowType_Tips_Green = 4,
  ChatShowType_Tips_BossPk = 5,
  ChatShowType_Tips_Task = 6,
  ChatShowType_TimerTips = 7
};
bool ChatShowType_IsValid(int value);
constexpr ChatShowType ChatShowType_MIN = ChatShowType_MessageBox;
constexpr ChatShowType ChatShowType_MAX = ChatShowType_TimerTips;
constexpr int ChatShowType_ARRAYSIZE = ChatShowType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChatShowType_descriptor();
template<typename T>
inline const std::string& ChatShowType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChatShowType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChatShowType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ChatShowType_descriptor(), enum_t_value);
}
inline bool ChatShowType_Parse(
    const std::string& name, ChatShowType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChatShowType>(
    ChatShowType_descriptor(), name, value);
}
enum ChatTextType : int {
  ChatTextType_Plain = 1,
  ChatTextType_Rich = 2
};
bool ChatTextType_IsValid(int value);
constexpr ChatTextType ChatTextType_MIN = ChatTextType_Plain;
constexpr ChatTextType ChatTextType_MAX = ChatTextType_Rich;
constexpr int ChatTextType_ARRAYSIZE = ChatTextType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChatTextType_descriptor();
template<typename T>
inline const std::string& ChatTextType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChatTextType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChatTextType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ChatTextType_descriptor(), enum_t_value);
}
inline bool ChatTextType_Parse(
    const std::string& name, ChatTextType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChatTextType>(
    ChatTextType_descriptor(), name, value);
}
// ===================================================================

class MSG_Req_ChannleChat_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Chat.MSG_Req_ChannleChat_CS) */ {
 public:
  MSG_Req_ChannleChat_CS();
  virtual ~MSG_Req_ChannleChat_CS();

  MSG_Req_ChannleChat_CS(const MSG_Req_ChannleChat_CS& from);
  MSG_Req_ChannleChat_CS(MSG_Req_ChannleChat_CS&& from) noexcept
    : MSG_Req_ChannleChat_CS() {
    *this = ::std::move(from);
  }

  inline MSG_Req_ChannleChat_CS& operator=(const MSG_Req_ChannleChat_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Req_ChannleChat_CS& operator=(MSG_Req_ChannleChat_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Req_ChannleChat_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Req_ChannleChat_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_Req_ChannleChat_CS*>(
               &_MSG_Req_ChannleChat_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MSG_Req_ChannleChat_CS& a, MSG_Req_ChannleChat_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Req_ChannleChat_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Req_ChannleChat_CS* New() const final {
    return CreateMaybeMessage<MSG_Req_ChannleChat_CS>(nullptr);
  }

  MSG_Req_ChannleChat_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Req_ChannleChat_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Req_ChannleChat_CS& from);
  void MergeFrom(const MSG_Req_ChannleChat_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Req_ChannleChat_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Chat.MSG_Req_ChannleChat_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2eproto);
    return ::descriptor_table_chat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrChatFieldNumber = 1,
    kSrcNameFieldNumber = 2,
    kChannelTypeFieldNumber = 3,
  };
  // optional string str_chat = 1;
  bool has_str_chat() const;
  private:
  bool _internal_has_str_chat() const;
  public:
  void clear_str_chat();
  const std::string& str_chat() const;
  void set_str_chat(const std::string& value);
  void set_str_chat(std::string&& value);
  void set_str_chat(const char* value);
  void set_str_chat(const char* value, size_t size);
  std::string* mutable_str_chat();
  std::string* release_str_chat();
  void set_allocated_str_chat(std::string* str_chat);
  private:
  const std::string& _internal_str_chat() const;
  void _internal_set_str_chat(const std::string& value);
  std::string* _internal_mutable_str_chat();
  public:

  // optional string src_name = 2;
  bool has_src_name() const;
  private:
  bool _internal_has_src_name() const;
  public:
  void clear_src_name();
  const std::string& src_name() const;
  void set_src_name(const std::string& value);
  void set_src_name(std::string&& value);
  void set_src_name(const char* value);
  void set_src_name(const char* value, size_t size);
  std::string* mutable_src_name();
  std::string* release_src_name();
  void set_allocated_src_name(std::string* src_name);
  private:
  const std::string& _internal_src_name() const;
  void _internal_set_src_name(const std::string& value);
  std::string* _internal_mutable_src_name();
  public:

  // optional .Chat.ChannelType channel_type = 3;
  bool has_channel_type() const;
  private:
  bool _internal_has_channel_type() const;
  public:
  void clear_channel_type();
  ::Chat::ChannelType channel_type() const;
  void set_channel_type(::Chat::ChannelType value);
  private:
  ::Chat::ChannelType _internal_channel_type() const;
  void _internal_set_channel_type(::Chat::ChannelType value);
  public:

  // @@protoc_insertion_point(class_scope:Chat.MSG_Req_ChannleChat_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_chat_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_name_;
  int channel_type_;
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class MSG_Ret_ChannelChat_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Chat.MSG_Ret_ChannelChat_SC) */ {
 public:
  MSG_Ret_ChannelChat_SC();
  virtual ~MSG_Ret_ChannelChat_SC();

  MSG_Ret_ChannelChat_SC(const MSG_Ret_ChannelChat_SC& from);
  MSG_Ret_ChannelChat_SC(MSG_Ret_ChannelChat_SC&& from) noexcept
    : MSG_Ret_ChannelChat_SC() {
    *this = ::std::move(from);
  }

  inline MSG_Ret_ChannelChat_SC& operator=(const MSG_Ret_ChannelChat_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Ret_ChannelChat_SC& operator=(MSG_Ret_ChannelChat_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Ret_ChannelChat_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Ret_ChannelChat_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_Ret_ChannelChat_SC*>(
               &_MSG_Ret_ChannelChat_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MSG_Ret_ChannelChat_SC& a, MSG_Ret_ChannelChat_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Ret_ChannelChat_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Ret_ChannelChat_SC* New() const final {
    return CreateMaybeMessage<MSG_Ret_ChannelChat_SC>(nullptr);
  }

  MSG_Ret_ChannelChat_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Ret_ChannelChat_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Ret_ChannelChat_SC& from);
  void MergeFrom(const MSG_Ret_ChannelChat_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Ret_ChannelChat_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Chat.MSG_Ret_ChannelChat_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2eproto);
    return ::descriptor_table_chat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrChatFieldNumber = 1,
    kSrcNameFieldNumber = 2,
    kTextidFieldNumber = 3,
    kChannelTypeFieldNumber = 4,
  };
  // optional string str_chat = 1;
  bool has_str_chat() const;
  private:
  bool _internal_has_str_chat() const;
  public:
  void clear_str_chat();
  const std::string& str_chat() const;
  void set_str_chat(const std::string& value);
  void set_str_chat(std::string&& value);
  void set_str_chat(const char* value);
  void set_str_chat(const char* value, size_t size);
  std::string* mutable_str_chat();
  std::string* release_str_chat();
  void set_allocated_str_chat(std::string* str_chat);
  private:
  const std::string& _internal_str_chat() const;
  void _internal_set_str_chat(const std::string& value);
  std::string* _internal_mutable_str_chat();
  public:

  // optional string src_name = 2;
  bool has_src_name() const;
  private:
  bool _internal_has_src_name() const;
  public:
  void clear_src_name();
  const std::string& src_name() const;
  void set_src_name(const std::string& value);
  void set_src_name(std::string&& value);
  void set_src_name(const char* value);
  void set_src_name(const char* value, size_t size);
  std::string* mutable_src_name();
  std::string* release_src_name();
  void set_allocated_src_name(std::string* src_name);
  private:
  const std::string& _internal_src_name() const;
  void _internal_set_src_name(const std::string& value);
  std::string* _internal_mutable_src_name();
  public:

  // optional uint32 textid = 3;
  bool has_textid() const;
  private:
  bool _internal_has_textid() const;
  public:
  void clear_textid();
  ::PROTOBUF_NAMESPACE_ID::uint32 textid() const;
  void set_textid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_textid() const;
  void _internal_set_textid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .Chat.ChannelType channel_type = 4;
  bool has_channel_type() const;
  private:
  bool _internal_has_channel_type() const;
  public:
  void clear_channel_type();
  ::Chat::ChannelType channel_type() const;
  void set_channel_type(::Chat::ChannelType value);
  private:
  ::Chat::ChannelType _internal_channel_type() const;
  void _internal_set_channel_type(::Chat::ChannelType value);
  public:

  // @@protoc_insertion_point(class_scope:Chat.MSG_Ret_ChannelChat_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_chat_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 textid_;
  int channel_type_;
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class ChatLink :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Chat.ChatLink) */ {
 public:
  ChatLink();
  virtual ~ChatLink();

  ChatLink(const ChatLink& from);
  ChatLink(ChatLink&& from) noexcept
    : ChatLink() {
    *this = ::std::move(from);
  }

  inline ChatLink& operator=(const ChatLink& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatLink& operator=(ChatLink&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChatLink& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatLink* internal_default_instance() {
    return reinterpret_cast<const ChatLink*>(
               &_ChatLink_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ChatLink& a, ChatLink& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatLink* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChatLink* New() const final {
    return CreateMaybeMessage<ChatLink>(nullptr);
  }

  ChatLink* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChatLink>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChatLink& from);
  void MergeFrom(const ChatLink& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatLink* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Chat.ChatLink";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2eproto);
    return ::descriptor_table_chat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataArgsFieldNumber = 2,
    kLinktypeFieldNumber = 1,
  };
  // repeated string data_args = 2;
  int data_args_size() const;
  private:
  int _internal_data_args_size() const;
  public:
  void clear_data_args();
  const std::string& data_args(int index) const;
  std::string* mutable_data_args(int index);
  void set_data_args(int index, const std::string& value);
  void set_data_args(int index, std::string&& value);
  void set_data_args(int index, const char* value);
  void set_data_args(int index, const char* value, size_t size);
  std::string* add_data_args();
  void add_data_args(const std::string& value);
  void add_data_args(std::string&& value);
  void add_data_args(const char* value);
  void add_data_args(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& data_args() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_data_args();
  private:
  const std::string& _internal_data_args(int index) const;
  std::string* _internal_add_data_args();
  public:

  // optional uint32 linktype = 1;
  bool has_linktype() const;
  private:
  bool _internal_has_linktype() const;
  public:
  void clear_linktype();
  ::PROTOBUF_NAMESPACE_ID::uint32 linktype() const;
  void set_linktype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_linktype() const;
  void _internal_set_linktype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Chat.ChatLink)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> data_args_;
  ::PROTOBUF_NAMESPACE_ID::uint32 linktype_;
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class ChatData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Chat.ChatData) */ {
 public:
  ChatData();
  virtual ~ChatData();

  ChatData(const ChatData& from);
  ChatData(ChatData&& from) noexcept
    : ChatData() {
    *this = ::std::move(from);
  }

  inline ChatData& operator=(const ChatData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatData& operator=(ChatData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChatData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatData* internal_default_instance() {
    return reinterpret_cast<const ChatData*>(
               &_ChatData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ChatData& a, ChatData& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChatData* New() const final {
    return CreateMaybeMessage<ChatData>(nullptr);
  }

  ChatData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChatData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChatData& from);
  void MergeFrom(const ChatData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Chat.ChatData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2eproto);
    return ::descriptor_table_chat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinkFieldNumber = 7,
    kCharnameFieldNumber = 3,
    kContentFieldNumber = 6,
    kTonameFieldNumber = 10,
    kCharidFieldNumber = 2,
    kChannelFieldNumber = 1,
    kCharcountryFieldNumber = 4,
    kChattimeFieldNumber = 5,
    kShowTypeFieldNumber = 8,
    kTocharidFieldNumber = 9,
  };
  // repeated .Chat.ChatLink link = 7;
  int link_size() const;
  private:
  int _internal_link_size() const;
  public:
  void clear_link();
  ::Chat::ChatLink* mutable_link(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Chat::ChatLink >*
      mutable_link();
  private:
  const ::Chat::ChatLink& _internal_link(int index) const;
  ::Chat::ChatLink* _internal_add_link();
  public:
  const ::Chat::ChatLink& link(int index) const;
  ::Chat::ChatLink* add_link();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Chat::ChatLink >&
      link() const;

  // optional string charname = 3;
  bool has_charname() const;
  private:
  bool _internal_has_charname() const;
  public:
  void clear_charname();
  const std::string& charname() const;
  void set_charname(const std::string& value);
  void set_charname(std::string&& value);
  void set_charname(const char* value);
  void set_charname(const char* value, size_t size);
  std::string* mutable_charname();
  std::string* release_charname();
  void set_allocated_charname(std::string* charname);
  private:
  const std::string& _internal_charname() const;
  void _internal_set_charname(const std::string& value);
  std::string* _internal_mutable_charname();
  public:

  // optional string content = 6;
  bool has_content() const;
  private:
  bool _internal_has_content() const;
  public:
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // optional string toname = 10;
  bool has_toname() const;
  private:
  bool _internal_has_toname() const;
  public:
  void clear_toname();
  const std::string& toname() const;
  void set_toname(const std::string& value);
  void set_toname(std::string&& value);
  void set_toname(const char* value);
  void set_toname(const char* value, size_t size);
  std::string* mutable_toname();
  std::string* release_toname();
  void set_allocated_toname(std::string* toname);
  private:
  const std::string& _internal_toname() const;
  void _internal_set_toname(const std::string& value);
  std::string* _internal_mutable_toname();
  public:

  // optional uint64 charid = 2;
  bool has_charid() const;
  private:
  bool _internal_has_charid() const;
  public:
  void clear_charid();
  ::PROTOBUF_NAMESPACE_ID::uint64 charid() const;
  void set_charid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_charid() const;
  void _internal_set_charid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 channel = 1;
  bool has_channel() const;
  private:
  bool _internal_has_channel() const;
  public:
  void clear_channel();
  ::PROTOBUF_NAMESPACE_ID::uint32 channel() const;
  void set_channel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_channel() const;
  void _internal_set_channel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 charcountry = 4;
  bool has_charcountry() const;
  private:
  bool _internal_has_charcountry() const;
  public:
  void clear_charcountry();
  ::PROTOBUF_NAMESPACE_ID::uint32 charcountry() const;
  void set_charcountry(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_charcountry() const;
  void _internal_set_charcountry(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 chattime = 5;
  bool has_chattime() const;
  private:
  bool _internal_has_chattime() const;
  public:
  void clear_chattime();
  ::PROTOBUF_NAMESPACE_ID::uint32 chattime() const;
  void set_chattime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_chattime() const;
  void _internal_set_chattime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 show_type = 8;
  bool has_show_type() const;
  private:
  bool _internal_has_show_type() const;
  public:
  void clear_show_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 show_type() const;
  void set_show_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_show_type() const;
  void _internal_set_show_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 tocharid = 9;
  bool has_tocharid() const;
  private:
  bool _internal_has_tocharid() const;
  public:
  void clear_tocharid();
  ::PROTOBUF_NAMESPACE_ID::uint64 tocharid() const;
  void set_tocharid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tocharid() const;
  void _internal_set_tocharid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Chat.ChatData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Chat::ChatLink > link_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr charname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr toname_;
  ::PROTOBUF_NAMESPACE_ID::uint64 charid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 channel_;
  ::PROTOBUF_NAMESPACE_ID::uint32 charcountry_;
  ::PROTOBUF_NAMESPACE_ID::uint32 chattime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 show_type_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tocharid_;
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class MSG_Req_Chat_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Chat.MSG_Req_Chat_CS) */ {
 public:
  MSG_Req_Chat_CS();
  virtual ~MSG_Req_Chat_CS();

  MSG_Req_Chat_CS(const MSG_Req_Chat_CS& from);
  MSG_Req_Chat_CS(MSG_Req_Chat_CS&& from) noexcept
    : MSG_Req_Chat_CS() {
    *this = ::std::move(from);
  }

  inline MSG_Req_Chat_CS& operator=(const MSG_Req_Chat_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Req_Chat_CS& operator=(MSG_Req_Chat_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Req_Chat_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Req_Chat_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_Req_Chat_CS*>(
               &_MSG_Req_Chat_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MSG_Req_Chat_CS& a, MSG_Req_Chat_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Req_Chat_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Req_Chat_CS* New() const final {
    return CreateMaybeMessage<MSG_Req_Chat_CS>(nullptr);
  }

  MSG_Req_Chat_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Req_Chat_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Req_Chat_CS& from);
  void MergeFrom(const MSG_Req_Chat_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Req_Chat_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Chat.MSG_Req_Chat_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2eproto);
    return ::descriptor_table_chat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kShakeFieldNumber = 2,
  };
  // optional .Chat.ChatData data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::Chat::ChatData& data() const;
  ::Chat::ChatData* release_data();
  ::Chat::ChatData* mutable_data();
  void set_allocated_data(::Chat::ChatData* data);
  private:
  const ::Chat::ChatData& _internal_data() const;
  ::Chat::ChatData* _internal_mutable_data();
  public:

  // optional bool shake = 2;
  bool has_shake() const;
  private:
  bool _internal_has_shake() const;
  public:
  void clear_shake();
  bool shake() const;
  void set_shake(bool value);
  private:
  bool _internal_shake() const;
  void _internal_set_shake(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Chat.MSG_Req_Chat_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Chat::ChatData* data_;
  bool shake_;
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class MSG_Ret_Chat_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Chat.MSG_Ret_Chat_SC) */ {
 public:
  MSG_Ret_Chat_SC();
  virtual ~MSG_Ret_Chat_SC();

  MSG_Ret_Chat_SC(const MSG_Ret_Chat_SC& from);
  MSG_Ret_Chat_SC(MSG_Ret_Chat_SC&& from) noexcept
    : MSG_Ret_Chat_SC() {
    *this = ::std::move(from);
  }

  inline MSG_Ret_Chat_SC& operator=(const MSG_Ret_Chat_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Ret_Chat_SC& operator=(MSG_Ret_Chat_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Ret_Chat_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Ret_Chat_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_Ret_Chat_SC*>(
               &_MSG_Ret_Chat_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MSG_Ret_Chat_SC& a, MSG_Ret_Chat_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Ret_Chat_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Ret_Chat_SC* New() const final {
    return CreateMaybeMessage<MSG_Ret_Chat_SC>(nullptr);
  }

  MSG_Ret_Chat_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Ret_Chat_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Ret_Chat_SC& from);
  void MergeFrom(const MSG_Ret_Chat_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Ret_Chat_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Chat.MSG_Ret_Chat_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2eproto);
    return ::descriptor_table_chat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kShakeFieldNumber = 2,
  };
  // optional .Chat.ChatData data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::Chat::ChatData& data() const;
  ::Chat::ChatData* release_data();
  ::Chat::ChatData* mutable_data();
  void set_allocated_data(::Chat::ChatData* data);
  private:
  const ::Chat::ChatData& _internal_data() const;
  ::Chat::ChatData* _internal_mutable_data();
  public:

  // optional bool shake = 2;
  bool has_shake() const;
  private:
  bool _internal_has_shake() const;
  public:
  void clear_shake();
  bool shake() const;
  void set_shake(bool value);
  private:
  bool _internal_shake() const;
  void _internal_set_shake(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Chat.MSG_Ret_Chat_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Chat::ChatData* data_;
  bool shake_;
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class MSG_Req_ChatUserInfo_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Chat.MSG_Req_ChatUserInfo_CS) */ {
 public:
  MSG_Req_ChatUserInfo_CS();
  virtual ~MSG_Req_ChatUserInfo_CS();

  MSG_Req_ChatUserInfo_CS(const MSG_Req_ChatUserInfo_CS& from);
  MSG_Req_ChatUserInfo_CS(MSG_Req_ChatUserInfo_CS&& from) noexcept
    : MSG_Req_ChatUserInfo_CS() {
    *this = ::std::move(from);
  }

  inline MSG_Req_ChatUserInfo_CS& operator=(const MSG_Req_ChatUserInfo_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Req_ChatUserInfo_CS& operator=(MSG_Req_ChatUserInfo_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Req_ChatUserInfo_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Req_ChatUserInfo_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_Req_ChatUserInfo_CS*>(
               &_MSG_Req_ChatUserInfo_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MSG_Req_ChatUserInfo_CS& a, MSG_Req_ChatUserInfo_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Req_ChatUserInfo_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Req_ChatUserInfo_CS* New() const final {
    return CreateMaybeMessage<MSG_Req_ChatUserInfo_CS>(nullptr);
  }

  MSG_Req_ChatUserInfo_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Req_ChatUserInfo_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Req_ChatUserInfo_CS& from);
  void MergeFrom(const MSG_Req_ChatUserInfo_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Req_ChatUserInfo_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Chat.MSG_Req_ChatUserInfo_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2eproto);
    return ::descriptor_table_chat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOtheridFieldNumber = 1,
  };
  // optional uint64 otherid = 1;
  bool has_otherid() const;
  private:
  bool _internal_has_otherid() const;
  public:
  void clear_otherid();
  ::PROTOBUF_NAMESPACE_ID::uint64 otherid() const;
  void set_otherid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_otherid() const;
  void _internal_set_otherid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Chat.MSG_Req_ChatUserInfo_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 otherid_;
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class MSG_Ret_ChatUserInfo_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Chat.MSG_Ret_ChatUserInfo_SC) */ {
 public:
  MSG_Ret_ChatUserInfo_SC();
  virtual ~MSG_Ret_ChatUserInfo_SC();

  MSG_Ret_ChatUserInfo_SC(const MSG_Ret_ChatUserInfo_SC& from);
  MSG_Ret_ChatUserInfo_SC(MSG_Ret_ChatUserInfo_SC&& from) noexcept
    : MSG_Ret_ChatUserInfo_SC() {
    *this = ::std::move(from);
  }

  inline MSG_Ret_ChatUserInfo_SC& operator=(const MSG_Ret_ChatUserInfo_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Ret_ChatUserInfo_SC& operator=(MSG_Ret_ChatUserInfo_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Ret_ChatUserInfo_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Ret_ChatUserInfo_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_Ret_ChatUserInfo_SC*>(
               &_MSG_Ret_ChatUserInfo_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MSG_Ret_ChatUserInfo_SC& a, MSG_Ret_ChatUserInfo_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Ret_ChatUserInfo_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Ret_ChatUserInfo_SC* New() const final {
    return CreateMaybeMessage<MSG_Ret_ChatUserInfo_SC>(nullptr);
  }

  MSG_Ret_ChatUserInfo_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Ret_ChatUserInfo_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Ret_ChatUserInfo_SC& from);
  void MergeFrom(const MSG_Ret_ChatUserInfo_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Ret_ChatUserInfo_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Chat.MSG_Ret_ChatUserInfo_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2eproto);
    return ::descriptor_table_chat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharnameFieldNumber = 2,
    kCharidFieldNumber = 1,
    kLevelFieldNumber = 3,
    kOccupationFieldNumber = 4,
    kOccupationlevelFieldNumber = 5,
    kCanTakeMasterFieldNumber = 6,
    kCanTakeApprentFieldNumber = 7,
  };
  // optional string charname = 2;
  bool has_charname() const;
  private:
  bool _internal_has_charname() const;
  public:
  void clear_charname();
  const std::string& charname() const;
  void set_charname(const std::string& value);
  void set_charname(std::string&& value);
  void set_charname(const char* value);
  void set_charname(const char* value, size_t size);
  std::string* mutable_charname();
  std::string* release_charname();
  void set_allocated_charname(std::string* charname);
  private:
  const std::string& _internal_charname() const;
  void _internal_set_charname(const std::string& value);
  std::string* _internal_mutable_charname();
  public:

  // optional uint64 charid = 1;
  bool has_charid() const;
  private:
  bool _internal_has_charid() const;
  public:
  void clear_charid();
  ::PROTOBUF_NAMESPACE_ID::uint64 charid() const;
  void set_charid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_charid() const;
  void _internal_set_charid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 level = 3;
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 occupation = 4;
  bool has_occupation() const;
  private:
  bool _internal_has_occupation() const;
  public:
  void clear_occupation();
  ::PROTOBUF_NAMESPACE_ID::uint32 occupation() const;
  void set_occupation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_occupation() const;
  void _internal_set_occupation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 occupationlevel = 5;
  bool has_occupationlevel() const;
  private:
  bool _internal_has_occupationlevel() const;
  public:
  void clear_occupationlevel();
  ::PROTOBUF_NAMESPACE_ID::uint32 occupationlevel() const;
  void set_occupationlevel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_occupationlevel() const;
  void _internal_set_occupationlevel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool can_take_master = 6 [default = false];
  bool has_can_take_master() const;
  private:
  bool _internal_has_can_take_master() const;
  public:
  void clear_can_take_master();
  bool can_take_master() const;
  void set_can_take_master(bool value);
  private:
  bool _internal_can_take_master() const;
  void _internal_set_can_take_master(bool value);
  public:

  // optional bool can_take_apprent = 7 [default = false];
  bool has_can_take_apprent() const;
  private:
  bool _internal_has_can_take_apprent() const;
  public:
  void clear_can_take_apprent();
  bool can_take_apprent() const;
  void set_can_take_apprent(bool value);
  private:
  bool _internal_can_take_apprent() const;
  void _internal_set_can_take_apprent(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Chat.MSG_Ret_ChatUserInfo_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr charname_;
  ::PROTOBUF_NAMESPACE_ID::uint64 charid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 level_;
  ::PROTOBUF_NAMESPACE_ID::uint32 occupation_;
  ::PROTOBUF_NAMESPACE_ID::uint32 occupationlevel_;
  bool can_take_master_;
  bool can_take_apprent_;
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class MSG_Req_OfflineChat_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Chat.MSG_Req_OfflineChat_CS) */ {
 public:
  MSG_Req_OfflineChat_CS();
  virtual ~MSG_Req_OfflineChat_CS();

  MSG_Req_OfflineChat_CS(const MSG_Req_OfflineChat_CS& from);
  MSG_Req_OfflineChat_CS(MSG_Req_OfflineChat_CS&& from) noexcept
    : MSG_Req_OfflineChat_CS() {
    *this = ::std::move(from);
  }

  inline MSG_Req_OfflineChat_CS& operator=(const MSG_Req_OfflineChat_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Req_OfflineChat_CS& operator=(MSG_Req_OfflineChat_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Req_OfflineChat_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Req_OfflineChat_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_Req_OfflineChat_CS*>(
               &_MSG_Req_OfflineChat_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(MSG_Req_OfflineChat_CS& a, MSG_Req_OfflineChat_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Req_OfflineChat_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Req_OfflineChat_CS* New() const final {
    return CreateMaybeMessage<MSG_Req_OfflineChat_CS>(nullptr);
  }

  MSG_Req_OfflineChat_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Req_OfflineChat_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Req_OfflineChat_CS& from);
  void MergeFrom(const MSG_Req_OfflineChat_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Req_OfflineChat_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Chat.MSG_Req_OfflineChat_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2eproto);
    return ::descriptor_table_chat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Chat.MSG_Req_OfflineChat_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class MSG_Ret_OfflineChat_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Chat.MSG_Ret_OfflineChat_SC) */ {
 public:
  MSG_Ret_OfflineChat_SC();
  virtual ~MSG_Ret_OfflineChat_SC();

  MSG_Ret_OfflineChat_SC(const MSG_Ret_OfflineChat_SC& from);
  MSG_Ret_OfflineChat_SC(MSG_Ret_OfflineChat_SC&& from) noexcept
    : MSG_Ret_OfflineChat_SC() {
    *this = ::std::move(from);
  }

  inline MSG_Ret_OfflineChat_SC& operator=(const MSG_Ret_OfflineChat_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Ret_OfflineChat_SC& operator=(MSG_Ret_OfflineChat_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Ret_OfflineChat_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Ret_OfflineChat_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_Ret_OfflineChat_SC*>(
               &_MSG_Ret_OfflineChat_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(MSG_Ret_OfflineChat_SC& a, MSG_Ret_OfflineChat_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Ret_OfflineChat_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Ret_OfflineChat_SC* New() const final {
    return CreateMaybeMessage<MSG_Ret_OfflineChat_SC>(nullptr);
  }

  MSG_Ret_OfflineChat_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Ret_OfflineChat_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Ret_OfflineChat_SC& from);
  void MergeFrom(const MSG_Ret_OfflineChat_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Ret_OfflineChat_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Chat.MSG_Ret_OfflineChat_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2eproto);
    return ::descriptor_table_chat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatasFieldNumber = 1,
  };
  // repeated .Chat.ChatData datas = 1;
  int datas_size() const;
  private:
  int _internal_datas_size() const;
  public:
  void clear_datas();
  ::Chat::ChatData* mutable_datas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Chat::ChatData >*
      mutable_datas();
  private:
  const ::Chat::ChatData& _internal_datas(int index) const;
  ::Chat::ChatData* _internal_add_datas();
  public:
  const ::Chat::ChatData& datas(int index) const;
  ::Chat::ChatData* add_datas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Chat::ChatData >&
      datas() const;

  // @@protoc_insertion_point(class_scope:Chat.MSG_Ret_OfflineChat_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Chat::ChatData > datas_;
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class MSG_Req_ImportantBroadcast_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Chat.MSG_Req_ImportantBroadcast_CS) */ {
 public:
  MSG_Req_ImportantBroadcast_CS();
  virtual ~MSG_Req_ImportantBroadcast_CS();

  MSG_Req_ImportantBroadcast_CS(const MSG_Req_ImportantBroadcast_CS& from);
  MSG_Req_ImportantBroadcast_CS(MSG_Req_ImportantBroadcast_CS&& from) noexcept
    : MSG_Req_ImportantBroadcast_CS() {
    *this = ::std::move(from);
  }

  inline MSG_Req_ImportantBroadcast_CS& operator=(const MSG_Req_ImportantBroadcast_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Req_ImportantBroadcast_CS& operator=(MSG_Req_ImportantBroadcast_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Req_ImportantBroadcast_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Req_ImportantBroadcast_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_Req_ImportantBroadcast_CS*>(
               &_MSG_Req_ImportantBroadcast_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(MSG_Req_ImportantBroadcast_CS& a, MSG_Req_ImportantBroadcast_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Req_ImportantBroadcast_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Req_ImportantBroadcast_CS* New() const final {
    return CreateMaybeMessage<MSG_Req_ImportantBroadcast_CS>(nullptr);
  }

  MSG_Req_ImportantBroadcast_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Req_ImportantBroadcast_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Req_ImportantBroadcast_CS& from);
  void MergeFrom(const MSG_Req_ImportantBroadcast_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Req_ImportantBroadcast_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Chat.MSG_Req_ImportantBroadcast_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2eproto);
    return ::descriptor_table_chat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Chat.MSG_Req_ImportantBroadcast_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MSG_Req_ChannleChat_CS

// optional string str_chat = 1;
inline bool MSG_Req_ChannleChat_CS::_internal_has_str_chat() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_Req_ChannleChat_CS::has_str_chat() const {
  return _internal_has_str_chat();
}
inline void MSG_Req_ChannleChat_CS::clear_str_chat() {
  str_chat_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MSG_Req_ChannleChat_CS::str_chat() const {
  // @@protoc_insertion_point(field_get:Chat.MSG_Req_ChannleChat_CS.str_chat)
  return _internal_str_chat();
}
inline void MSG_Req_ChannleChat_CS::set_str_chat(const std::string& value) {
  _internal_set_str_chat(value);
  // @@protoc_insertion_point(field_set:Chat.MSG_Req_ChannleChat_CS.str_chat)
}
inline std::string* MSG_Req_ChannleChat_CS::mutable_str_chat() {
  // @@protoc_insertion_point(field_mutable:Chat.MSG_Req_ChannleChat_CS.str_chat)
  return _internal_mutable_str_chat();
}
inline const std::string& MSG_Req_ChannleChat_CS::_internal_str_chat() const {
  return str_chat_.GetNoArena();
}
inline void MSG_Req_ChannleChat_CS::_internal_set_str_chat(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  str_chat_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_Req_ChannleChat_CS::set_str_chat(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  str_chat_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Chat.MSG_Req_ChannleChat_CS.str_chat)
}
inline void MSG_Req_ChannleChat_CS::set_str_chat(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  str_chat_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Chat.MSG_Req_ChannleChat_CS.str_chat)
}
inline void MSG_Req_ChannleChat_CS::set_str_chat(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  str_chat_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Chat.MSG_Req_ChannleChat_CS.str_chat)
}
inline std::string* MSG_Req_ChannleChat_CS::_internal_mutable_str_chat() {
  _has_bits_[0] |= 0x00000001u;
  return str_chat_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_Req_ChannleChat_CS::release_str_chat() {
  // @@protoc_insertion_point(field_release:Chat.MSG_Req_ChannleChat_CS.str_chat)
  if (!_internal_has_str_chat()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return str_chat_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_Req_ChannleChat_CS::set_allocated_str_chat(std::string* str_chat) {
  if (str_chat != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  str_chat_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), str_chat);
  // @@protoc_insertion_point(field_set_allocated:Chat.MSG_Req_ChannleChat_CS.str_chat)
}

// optional string src_name = 2;
inline bool MSG_Req_ChannleChat_CS::_internal_has_src_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_Req_ChannleChat_CS::has_src_name() const {
  return _internal_has_src_name();
}
inline void MSG_Req_ChannleChat_CS::clear_src_name() {
  src_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MSG_Req_ChannleChat_CS::src_name() const {
  // @@protoc_insertion_point(field_get:Chat.MSG_Req_ChannleChat_CS.src_name)
  return _internal_src_name();
}
inline void MSG_Req_ChannleChat_CS::set_src_name(const std::string& value) {
  _internal_set_src_name(value);
  // @@protoc_insertion_point(field_set:Chat.MSG_Req_ChannleChat_CS.src_name)
}
inline std::string* MSG_Req_ChannleChat_CS::mutable_src_name() {
  // @@protoc_insertion_point(field_mutable:Chat.MSG_Req_ChannleChat_CS.src_name)
  return _internal_mutable_src_name();
}
inline const std::string& MSG_Req_ChannleChat_CS::_internal_src_name() const {
  return src_name_.GetNoArena();
}
inline void MSG_Req_ChannleChat_CS::_internal_set_src_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  src_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_Req_ChannleChat_CS::set_src_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  src_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Chat.MSG_Req_ChannleChat_CS.src_name)
}
inline void MSG_Req_ChannleChat_CS::set_src_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  src_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Chat.MSG_Req_ChannleChat_CS.src_name)
}
inline void MSG_Req_ChannleChat_CS::set_src_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  src_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Chat.MSG_Req_ChannleChat_CS.src_name)
}
inline std::string* MSG_Req_ChannleChat_CS::_internal_mutable_src_name() {
  _has_bits_[0] |= 0x00000002u;
  return src_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_Req_ChannleChat_CS::release_src_name() {
  // @@protoc_insertion_point(field_release:Chat.MSG_Req_ChannleChat_CS.src_name)
  if (!_internal_has_src_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return src_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_Req_ChannleChat_CS::set_allocated_src_name(std::string* src_name) {
  if (src_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  src_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), src_name);
  // @@protoc_insertion_point(field_set_allocated:Chat.MSG_Req_ChannleChat_CS.src_name)
}

// optional .Chat.ChannelType channel_type = 3;
inline bool MSG_Req_ChannleChat_CS::_internal_has_channel_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MSG_Req_ChannleChat_CS::has_channel_type() const {
  return _internal_has_channel_type();
}
inline void MSG_Req_ChannleChat_CS::clear_channel_type() {
  channel_type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::Chat::ChannelType MSG_Req_ChannleChat_CS::_internal_channel_type() const {
  return static_cast< ::Chat::ChannelType >(channel_type_);
}
inline ::Chat::ChannelType MSG_Req_ChannleChat_CS::channel_type() const {
  // @@protoc_insertion_point(field_get:Chat.MSG_Req_ChannleChat_CS.channel_type)
  return _internal_channel_type();
}
inline void MSG_Req_ChannleChat_CS::_internal_set_channel_type(::Chat::ChannelType value) {
  assert(::Chat::ChannelType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  channel_type_ = value;
}
inline void MSG_Req_ChannleChat_CS::set_channel_type(::Chat::ChannelType value) {
  _internal_set_channel_type(value);
  // @@protoc_insertion_point(field_set:Chat.MSG_Req_ChannleChat_CS.channel_type)
}

// -------------------------------------------------------------------

// MSG_Ret_ChannelChat_SC

// optional string str_chat = 1;
inline bool MSG_Ret_ChannelChat_SC::_internal_has_str_chat() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_Ret_ChannelChat_SC::has_str_chat() const {
  return _internal_has_str_chat();
}
inline void MSG_Ret_ChannelChat_SC::clear_str_chat() {
  str_chat_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MSG_Ret_ChannelChat_SC::str_chat() const {
  // @@protoc_insertion_point(field_get:Chat.MSG_Ret_ChannelChat_SC.str_chat)
  return _internal_str_chat();
}
inline void MSG_Ret_ChannelChat_SC::set_str_chat(const std::string& value) {
  _internal_set_str_chat(value);
  // @@protoc_insertion_point(field_set:Chat.MSG_Ret_ChannelChat_SC.str_chat)
}
inline std::string* MSG_Ret_ChannelChat_SC::mutable_str_chat() {
  // @@protoc_insertion_point(field_mutable:Chat.MSG_Ret_ChannelChat_SC.str_chat)
  return _internal_mutable_str_chat();
}
inline const std::string& MSG_Ret_ChannelChat_SC::_internal_str_chat() const {
  return str_chat_.GetNoArena();
}
inline void MSG_Ret_ChannelChat_SC::_internal_set_str_chat(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  str_chat_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_Ret_ChannelChat_SC::set_str_chat(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  str_chat_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Chat.MSG_Ret_ChannelChat_SC.str_chat)
}
inline void MSG_Ret_ChannelChat_SC::set_str_chat(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  str_chat_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Chat.MSG_Ret_ChannelChat_SC.str_chat)
}
inline void MSG_Ret_ChannelChat_SC::set_str_chat(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  str_chat_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Chat.MSG_Ret_ChannelChat_SC.str_chat)
}
inline std::string* MSG_Ret_ChannelChat_SC::_internal_mutable_str_chat() {
  _has_bits_[0] |= 0x00000001u;
  return str_chat_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_Ret_ChannelChat_SC::release_str_chat() {
  // @@protoc_insertion_point(field_release:Chat.MSG_Ret_ChannelChat_SC.str_chat)
  if (!_internal_has_str_chat()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return str_chat_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_Ret_ChannelChat_SC::set_allocated_str_chat(std::string* str_chat) {
  if (str_chat != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  str_chat_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), str_chat);
  // @@protoc_insertion_point(field_set_allocated:Chat.MSG_Ret_ChannelChat_SC.str_chat)
}

// optional string src_name = 2;
inline bool MSG_Ret_ChannelChat_SC::_internal_has_src_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_Ret_ChannelChat_SC::has_src_name() const {
  return _internal_has_src_name();
}
inline void MSG_Ret_ChannelChat_SC::clear_src_name() {
  src_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MSG_Ret_ChannelChat_SC::src_name() const {
  // @@protoc_insertion_point(field_get:Chat.MSG_Ret_ChannelChat_SC.src_name)
  return _internal_src_name();
}
inline void MSG_Ret_ChannelChat_SC::set_src_name(const std::string& value) {
  _internal_set_src_name(value);
  // @@protoc_insertion_point(field_set:Chat.MSG_Ret_ChannelChat_SC.src_name)
}
inline std::string* MSG_Ret_ChannelChat_SC::mutable_src_name() {
  // @@protoc_insertion_point(field_mutable:Chat.MSG_Ret_ChannelChat_SC.src_name)
  return _internal_mutable_src_name();
}
inline const std::string& MSG_Ret_ChannelChat_SC::_internal_src_name() const {
  return src_name_.GetNoArena();
}
inline void MSG_Ret_ChannelChat_SC::_internal_set_src_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  src_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_Ret_ChannelChat_SC::set_src_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  src_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Chat.MSG_Ret_ChannelChat_SC.src_name)
}
inline void MSG_Ret_ChannelChat_SC::set_src_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  src_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Chat.MSG_Ret_ChannelChat_SC.src_name)
}
inline void MSG_Ret_ChannelChat_SC::set_src_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  src_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Chat.MSG_Ret_ChannelChat_SC.src_name)
}
inline std::string* MSG_Ret_ChannelChat_SC::_internal_mutable_src_name() {
  _has_bits_[0] |= 0x00000002u;
  return src_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_Ret_ChannelChat_SC::release_src_name() {
  // @@protoc_insertion_point(field_release:Chat.MSG_Ret_ChannelChat_SC.src_name)
  if (!_internal_has_src_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return src_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_Ret_ChannelChat_SC::set_allocated_src_name(std::string* src_name) {
  if (src_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  src_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), src_name);
  // @@protoc_insertion_point(field_set_allocated:Chat.MSG_Ret_ChannelChat_SC.src_name)
}

// optional uint32 textid = 3;
inline bool MSG_Ret_ChannelChat_SC::_internal_has_textid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MSG_Ret_ChannelChat_SC::has_textid() const {
  return _internal_has_textid();
}
inline void MSG_Ret_ChannelChat_SC::clear_textid() {
  textid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Ret_ChannelChat_SC::_internal_textid() const {
  return textid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Ret_ChannelChat_SC::textid() const {
  // @@protoc_insertion_point(field_get:Chat.MSG_Ret_ChannelChat_SC.textid)
  return _internal_textid();
}
inline void MSG_Ret_ChannelChat_SC::_internal_set_textid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  textid_ = value;
}
inline void MSG_Ret_ChannelChat_SC::set_textid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_textid(value);
  // @@protoc_insertion_point(field_set:Chat.MSG_Ret_ChannelChat_SC.textid)
}

// optional .Chat.ChannelType channel_type = 4;
inline bool MSG_Ret_ChannelChat_SC::_internal_has_channel_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MSG_Ret_ChannelChat_SC::has_channel_type() const {
  return _internal_has_channel_type();
}
inline void MSG_Ret_ChannelChat_SC::clear_channel_type() {
  channel_type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::Chat::ChannelType MSG_Ret_ChannelChat_SC::_internal_channel_type() const {
  return static_cast< ::Chat::ChannelType >(channel_type_);
}
inline ::Chat::ChannelType MSG_Ret_ChannelChat_SC::channel_type() const {
  // @@protoc_insertion_point(field_get:Chat.MSG_Ret_ChannelChat_SC.channel_type)
  return _internal_channel_type();
}
inline void MSG_Ret_ChannelChat_SC::_internal_set_channel_type(::Chat::ChannelType value) {
  assert(::Chat::ChannelType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  channel_type_ = value;
}
inline void MSG_Ret_ChannelChat_SC::set_channel_type(::Chat::ChannelType value) {
  _internal_set_channel_type(value);
  // @@protoc_insertion_point(field_set:Chat.MSG_Ret_ChannelChat_SC.channel_type)
}

// -------------------------------------------------------------------

// ChatLink

// optional uint32 linktype = 1;
inline bool ChatLink::_internal_has_linktype() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChatLink::has_linktype() const {
  return _internal_has_linktype();
}
inline void ChatLink::clear_linktype() {
  linktype_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChatLink::_internal_linktype() const {
  return linktype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChatLink::linktype() const {
  // @@protoc_insertion_point(field_get:Chat.ChatLink.linktype)
  return _internal_linktype();
}
inline void ChatLink::_internal_set_linktype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  linktype_ = value;
}
inline void ChatLink::set_linktype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_linktype(value);
  // @@protoc_insertion_point(field_set:Chat.ChatLink.linktype)
}

// repeated string data_args = 2;
inline int ChatLink::_internal_data_args_size() const {
  return data_args_.size();
}
inline int ChatLink::data_args_size() const {
  return _internal_data_args_size();
}
inline void ChatLink::clear_data_args() {
  data_args_.Clear();
}
inline std::string* ChatLink::add_data_args() {
  // @@protoc_insertion_point(field_add_mutable:Chat.ChatLink.data_args)
  return _internal_add_data_args();
}
inline const std::string& ChatLink::_internal_data_args(int index) const {
  return data_args_.Get(index);
}
inline const std::string& ChatLink::data_args(int index) const {
  // @@protoc_insertion_point(field_get:Chat.ChatLink.data_args)
  return _internal_data_args(index);
}
inline std::string* ChatLink::mutable_data_args(int index) {
  // @@protoc_insertion_point(field_mutable:Chat.ChatLink.data_args)
  return data_args_.Mutable(index);
}
inline void ChatLink::set_data_args(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Chat.ChatLink.data_args)
  data_args_.Mutable(index)->assign(value);
}
inline void ChatLink::set_data_args(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Chat.ChatLink.data_args)
  data_args_.Mutable(index)->assign(std::move(value));
}
inline void ChatLink::set_data_args(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_args_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Chat.ChatLink.data_args)
}
inline void ChatLink::set_data_args(int index, const char* value, size_t size) {
  data_args_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Chat.ChatLink.data_args)
}
inline std::string* ChatLink::_internal_add_data_args() {
  return data_args_.Add();
}
inline void ChatLink::add_data_args(const std::string& value) {
  data_args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Chat.ChatLink.data_args)
}
inline void ChatLink::add_data_args(std::string&& value) {
  data_args_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Chat.ChatLink.data_args)
}
inline void ChatLink::add_data_args(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Chat.ChatLink.data_args)
}
inline void ChatLink::add_data_args(const char* value, size_t size) {
  data_args_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Chat.ChatLink.data_args)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ChatLink::data_args() const {
  // @@protoc_insertion_point(field_list:Chat.ChatLink.data_args)
  return data_args_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ChatLink::mutable_data_args() {
  // @@protoc_insertion_point(field_mutable_list:Chat.ChatLink.data_args)
  return &data_args_;
}

// -------------------------------------------------------------------

// ChatData

// optional uint32 channel = 1;
inline bool ChatData::_internal_has_channel() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ChatData::has_channel() const {
  return _internal_has_channel();
}
inline void ChatData::clear_channel() {
  channel_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChatData::_internal_channel() const {
  return channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChatData::channel() const {
  // @@protoc_insertion_point(field_get:Chat.ChatData.channel)
  return _internal_channel();
}
inline void ChatData::_internal_set_channel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  channel_ = value;
}
inline void ChatData::set_channel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:Chat.ChatData.channel)
}

// optional uint64 charid = 2;
inline bool ChatData::_internal_has_charid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ChatData::has_charid() const {
  return _internal_has_charid();
}
inline void ChatData::clear_charid() {
  charid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChatData::_internal_charid() const {
  return charid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChatData::charid() const {
  // @@protoc_insertion_point(field_get:Chat.ChatData.charid)
  return _internal_charid();
}
inline void ChatData::_internal_set_charid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  charid_ = value;
}
inline void ChatData::set_charid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_charid(value);
  // @@protoc_insertion_point(field_set:Chat.ChatData.charid)
}

// optional string charname = 3;
inline bool ChatData::_internal_has_charname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChatData::has_charname() const {
  return _internal_has_charname();
}
inline void ChatData::clear_charname() {
  charname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChatData::charname() const {
  // @@protoc_insertion_point(field_get:Chat.ChatData.charname)
  return _internal_charname();
}
inline void ChatData::set_charname(const std::string& value) {
  _internal_set_charname(value);
  // @@protoc_insertion_point(field_set:Chat.ChatData.charname)
}
inline std::string* ChatData::mutable_charname() {
  // @@protoc_insertion_point(field_mutable:Chat.ChatData.charname)
  return _internal_mutable_charname();
}
inline const std::string& ChatData::_internal_charname() const {
  return charname_.GetNoArena();
}
inline void ChatData::_internal_set_charname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  charname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ChatData::set_charname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  charname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Chat.ChatData.charname)
}
inline void ChatData::set_charname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  charname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Chat.ChatData.charname)
}
inline void ChatData::set_charname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  charname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Chat.ChatData.charname)
}
inline std::string* ChatData::_internal_mutable_charname() {
  _has_bits_[0] |= 0x00000001u;
  return charname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChatData::release_charname() {
  // @@protoc_insertion_point(field_release:Chat.ChatData.charname)
  if (!_internal_has_charname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return charname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChatData::set_allocated_charname(std::string* charname) {
  if (charname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  charname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), charname);
  // @@protoc_insertion_point(field_set_allocated:Chat.ChatData.charname)
}

// optional uint32 charcountry = 4;
inline bool ChatData::_internal_has_charcountry() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ChatData::has_charcountry() const {
  return _internal_has_charcountry();
}
inline void ChatData::clear_charcountry() {
  charcountry_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChatData::_internal_charcountry() const {
  return charcountry_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChatData::charcountry() const {
  // @@protoc_insertion_point(field_get:Chat.ChatData.charcountry)
  return _internal_charcountry();
}
inline void ChatData::_internal_set_charcountry(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  charcountry_ = value;
}
inline void ChatData::set_charcountry(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_charcountry(value);
  // @@protoc_insertion_point(field_set:Chat.ChatData.charcountry)
}

// optional uint32 chattime = 5;
inline bool ChatData::_internal_has_chattime() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ChatData::has_chattime() const {
  return _internal_has_chattime();
}
inline void ChatData::clear_chattime() {
  chattime_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChatData::_internal_chattime() const {
  return chattime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChatData::chattime() const {
  // @@protoc_insertion_point(field_get:Chat.ChatData.chattime)
  return _internal_chattime();
}
inline void ChatData::_internal_set_chattime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  chattime_ = value;
}
inline void ChatData::set_chattime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_chattime(value);
  // @@protoc_insertion_point(field_set:Chat.ChatData.chattime)
}

// optional string content = 6;
inline bool ChatData::_internal_has_content() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChatData::has_content() const {
  return _internal_has_content();
}
inline void ChatData::clear_content() {
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ChatData::content() const {
  // @@protoc_insertion_point(field_get:Chat.ChatData.content)
  return _internal_content();
}
inline void ChatData::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:Chat.ChatData.content)
}
inline std::string* ChatData::mutable_content() {
  // @@protoc_insertion_point(field_mutable:Chat.ChatData.content)
  return _internal_mutable_content();
}
inline const std::string& ChatData::_internal_content() const {
  return content_.GetNoArena();
}
inline void ChatData::_internal_set_content(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ChatData::set_content(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  content_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Chat.ChatData.content)
}
inline void ChatData::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Chat.ChatData.content)
}
inline void ChatData::set_content(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Chat.ChatData.content)
}
inline std::string* ChatData::_internal_mutable_content() {
  _has_bits_[0] |= 0x00000002u;
  return content_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChatData::release_content() {
  // @@protoc_insertion_point(field_release:Chat.ChatData.content)
  if (!_internal_has_content()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return content_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChatData::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  content_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:Chat.ChatData.content)
}

// repeated .Chat.ChatLink link = 7;
inline int ChatData::_internal_link_size() const {
  return link_.size();
}
inline int ChatData::link_size() const {
  return _internal_link_size();
}
inline void ChatData::clear_link() {
  link_.Clear();
}
inline ::Chat::ChatLink* ChatData::mutable_link(int index) {
  // @@protoc_insertion_point(field_mutable:Chat.ChatData.link)
  return link_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Chat::ChatLink >*
ChatData::mutable_link() {
  // @@protoc_insertion_point(field_mutable_list:Chat.ChatData.link)
  return &link_;
}
inline const ::Chat::ChatLink& ChatData::_internal_link(int index) const {
  return link_.Get(index);
}
inline const ::Chat::ChatLink& ChatData::link(int index) const {
  // @@protoc_insertion_point(field_get:Chat.ChatData.link)
  return _internal_link(index);
}
inline ::Chat::ChatLink* ChatData::_internal_add_link() {
  return link_.Add();
}
inline ::Chat::ChatLink* ChatData::add_link() {
  // @@protoc_insertion_point(field_add:Chat.ChatData.link)
  return _internal_add_link();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Chat::ChatLink >&
ChatData::link() const {
  // @@protoc_insertion_point(field_list:Chat.ChatData.link)
  return link_;
}

// optional uint32 show_type = 8;
inline bool ChatData::_internal_has_show_type() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ChatData::has_show_type() const {
  return _internal_has_show_type();
}
inline void ChatData::clear_show_type() {
  show_type_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChatData::_internal_show_type() const {
  return show_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChatData::show_type() const {
  // @@protoc_insertion_point(field_get:Chat.ChatData.show_type)
  return _internal_show_type();
}
inline void ChatData::_internal_set_show_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  show_type_ = value;
}
inline void ChatData::set_show_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_show_type(value);
  // @@protoc_insertion_point(field_set:Chat.ChatData.show_type)
}

// optional uint64 tocharid = 9;
inline bool ChatData::_internal_has_tocharid() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ChatData::has_tocharid() const {
  return _internal_has_tocharid();
}
inline void ChatData::clear_tocharid() {
  tocharid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChatData::_internal_tocharid() const {
  return tocharid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChatData::tocharid() const {
  // @@protoc_insertion_point(field_get:Chat.ChatData.tocharid)
  return _internal_tocharid();
}
inline void ChatData::_internal_set_tocharid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000100u;
  tocharid_ = value;
}
inline void ChatData::set_tocharid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tocharid(value);
  // @@protoc_insertion_point(field_set:Chat.ChatData.tocharid)
}

// optional string toname = 10;
inline bool ChatData::_internal_has_toname() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ChatData::has_toname() const {
  return _internal_has_toname();
}
inline void ChatData::clear_toname() {
  toname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ChatData::toname() const {
  // @@protoc_insertion_point(field_get:Chat.ChatData.toname)
  return _internal_toname();
}
inline void ChatData::set_toname(const std::string& value) {
  _internal_set_toname(value);
  // @@protoc_insertion_point(field_set:Chat.ChatData.toname)
}
inline std::string* ChatData::mutable_toname() {
  // @@protoc_insertion_point(field_mutable:Chat.ChatData.toname)
  return _internal_mutable_toname();
}
inline const std::string& ChatData::_internal_toname() const {
  return toname_.GetNoArena();
}
inline void ChatData::_internal_set_toname(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  toname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ChatData::set_toname(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  toname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Chat.ChatData.toname)
}
inline void ChatData::set_toname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  toname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Chat.ChatData.toname)
}
inline void ChatData::set_toname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  toname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Chat.ChatData.toname)
}
inline std::string* ChatData::_internal_mutable_toname() {
  _has_bits_[0] |= 0x00000004u;
  return toname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChatData::release_toname() {
  // @@protoc_insertion_point(field_release:Chat.ChatData.toname)
  if (!_internal_has_toname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return toname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChatData::set_allocated_toname(std::string* toname) {
  if (toname != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  toname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), toname);
  // @@protoc_insertion_point(field_set_allocated:Chat.ChatData.toname)
}

// -------------------------------------------------------------------

// MSG_Req_Chat_CS

// optional .Chat.ChatData data = 1;
inline bool MSG_Req_Chat_CS::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || data_ != nullptr);
  return value;
}
inline bool MSG_Req_Chat_CS::has_data() const {
  return _internal_has_data();
}
inline void MSG_Req_Chat_CS::clear_data() {
  if (data_ != nullptr) data_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Chat::ChatData& MSG_Req_Chat_CS::_internal_data() const {
  const ::Chat::ChatData* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Chat::ChatData*>(
      &::Chat::_ChatData_default_instance_);
}
inline const ::Chat::ChatData& MSG_Req_Chat_CS::data() const {
  // @@protoc_insertion_point(field_get:Chat.MSG_Req_Chat_CS.data)
  return _internal_data();
}
inline ::Chat::ChatData* MSG_Req_Chat_CS::release_data() {
  // @@protoc_insertion_point(field_release:Chat.MSG_Req_Chat_CS.data)
  _has_bits_[0] &= ~0x00000001u;
  ::Chat::ChatData* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::Chat::ChatData* MSG_Req_Chat_CS::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::Chat::ChatData>(GetArenaNoVirtual());
    data_ = p;
  }
  return data_;
}
inline ::Chat::ChatData* MSG_Req_Chat_CS::mutable_data() {
  // @@protoc_insertion_point(field_mutable:Chat.MSG_Req_Chat_CS.data)
  return _internal_mutable_data();
}
inline void MSG_Req_Chat_CS::set_allocated_data(::Chat::ChatData* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:Chat.MSG_Req_Chat_CS.data)
}

// optional bool shake = 2;
inline bool MSG_Req_Chat_CS::_internal_has_shake() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_Req_Chat_CS::has_shake() const {
  return _internal_has_shake();
}
inline void MSG_Req_Chat_CS::clear_shake() {
  shake_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool MSG_Req_Chat_CS::_internal_shake() const {
  return shake_;
}
inline bool MSG_Req_Chat_CS::shake() const {
  // @@protoc_insertion_point(field_get:Chat.MSG_Req_Chat_CS.shake)
  return _internal_shake();
}
inline void MSG_Req_Chat_CS::_internal_set_shake(bool value) {
  _has_bits_[0] |= 0x00000002u;
  shake_ = value;
}
inline void MSG_Req_Chat_CS::set_shake(bool value) {
  _internal_set_shake(value);
  // @@protoc_insertion_point(field_set:Chat.MSG_Req_Chat_CS.shake)
}

// -------------------------------------------------------------------

// MSG_Ret_Chat_SC

// optional .Chat.ChatData data = 1;
inline bool MSG_Ret_Chat_SC::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || data_ != nullptr);
  return value;
}
inline bool MSG_Ret_Chat_SC::has_data() const {
  return _internal_has_data();
}
inline void MSG_Ret_Chat_SC::clear_data() {
  if (data_ != nullptr) data_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Chat::ChatData& MSG_Ret_Chat_SC::_internal_data() const {
  const ::Chat::ChatData* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Chat::ChatData*>(
      &::Chat::_ChatData_default_instance_);
}
inline const ::Chat::ChatData& MSG_Ret_Chat_SC::data() const {
  // @@protoc_insertion_point(field_get:Chat.MSG_Ret_Chat_SC.data)
  return _internal_data();
}
inline ::Chat::ChatData* MSG_Ret_Chat_SC::release_data() {
  // @@protoc_insertion_point(field_release:Chat.MSG_Ret_Chat_SC.data)
  _has_bits_[0] &= ~0x00000001u;
  ::Chat::ChatData* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::Chat::ChatData* MSG_Ret_Chat_SC::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::Chat::ChatData>(GetArenaNoVirtual());
    data_ = p;
  }
  return data_;
}
inline ::Chat::ChatData* MSG_Ret_Chat_SC::mutable_data() {
  // @@protoc_insertion_point(field_mutable:Chat.MSG_Ret_Chat_SC.data)
  return _internal_mutable_data();
}
inline void MSG_Ret_Chat_SC::set_allocated_data(::Chat::ChatData* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:Chat.MSG_Ret_Chat_SC.data)
}

// optional bool shake = 2;
inline bool MSG_Ret_Chat_SC::_internal_has_shake() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_Ret_Chat_SC::has_shake() const {
  return _internal_has_shake();
}
inline void MSG_Ret_Chat_SC::clear_shake() {
  shake_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool MSG_Ret_Chat_SC::_internal_shake() const {
  return shake_;
}
inline bool MSG_Ret_Chat_SC::shake() const {
  // @@protoc_insertion_point(field_get:Chat.MSG_Ret_Chat_SC.shake)
  return _internal_shake();
}
inline void MSG_Ret_Chat_SC::_internal_set_shake(bool value) {
  _has_bits_[0] |= 0x00000002u;
  shake_ = value;
}
inline void MSG_Ret_Chat_SC::set_shake(bool value) {
  _internal_set_shake(value);
  // @@protoc_insertion_point(field_set:Chat.MSG_Ret_Chat_SC.shake)
}

// -------------------------------------------------------------------

// MSG_Req_ChatUserInfo_CS

// optional uint64 otherid = 1;
inline bool MSG_Req_ChatUserInfo_CS::_internal_has_otherid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_Req_ChatUserInfo_CS::has_otherid() const {
  return _internal_has_otherid();
}
inline void MSG_Req_ChatUserInfo_CS::clear_otherid() {
  otherid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_Req_ChatUserInfo_CS::_internal_otherid() const {
  return otherid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_Req_ChatUserInfo_CS::otherid() const {
  // @@protoc_insertion_point(field_get:Chat.MSG_Req_ChatUserInfo_CS.otherid)
  return _internal_otherid();
}
inline void MSG_Req_ChatUserInfo_CS::_internal_set_otherid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  otherid_ = value;
}
inline void MSG_Req_ChatUserInfo_CS::set_otherid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_otherid(value);
  // @@protoc_insertion_point(field_set:Chat.MSG_Req_ChatUserInfo_CS.otherid)
}

// -------------------------------------------------------------------

// MSG_Ret_ChatUserInfo_SC

// optional uint64 charid = 1;
inline bool MSG_Ret_ChatUserInfo_SC::_internal_has_charid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_Ret_ChatUserInfo_SC::has_charid() const {
  return _internal_has_charid();
}
inline void MSG_Ret_ChatUserInfo_SC::clear_charid() {
  charid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_Ret_ChatUserInfo_SC::_internal_charid() const {
  return charid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_Ret_ChatUserInfo_SC::charid() const {
  // @@protoc_insertion_point(field_get:Chat.MSG_Ret_ChatUserInfo_SC.charid)
  return _internal_charid();
}
inline void MSG_Ret_ChatUserInfo_SC::_internal_set_charid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  charid_ = value;
}
inline void MSG_Ret_ChatUserInfo_SC::set_charid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_charid(value);
  // @@protoc_insertion_point(field_set:Chat.MSG_Ret_ChatUserInfo_SC.charid)
}

// optional string charname = 2;
inline bool MSG_Ret_ChatUserInfo_SC::_internal_has_charname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_Ret_ChatUserInfo_SC::has_charname() const {
  return _internal_has_charname();
}
inline void MSG_Ret_ChatUserInfo_SC::clear_charname() {
  charname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MSG_Ret_ChatUserInfo_SC::charname() const {
  // @@protoc_insertion_point(field_get:Chat.MSG_Ret_ChatUserInfo_SC.charname)
  return _internal_charname();
}
inline void MSG_Ret_ChatUserInfo_SC::set_charname(const std::string& value) {
  _internal_set_charname(value);
  // @@protoc_insertion_point(field_set:Chat.MSG_Ret_ChatUserInfo_SC.charname)
}
inline std::string* MSG_Ret_ChatUserInfo_SC::mutable_charname() {
  // @@protoc_insertion_point(field_mutable:Chat.MSG_Ret_ChatUserInfo_SC.charname)
  return _internal_mutable_charname();
}
inline const std::string& MSG_Ret_ChatUserInfo_SC::_internal_charname() const {
  return charname_.GetNoArena();
}
inline void MSG_Ret_ChatUserInfo_SC::_internal_set_charname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  charname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_Ret_ChatUserInfo_SC::set_charname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  charname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Chat.MSG_Ret_ChatUserInfo_SC.charname)
}
inline void MSG_Ret_ChatUserInfo_SC::set_charname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  charname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Chat.MSG_Ret_ChatUserInfo_SC.charname)
}
inline void MSG_Ret_ChatUserInfo_SC::set_charname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  charname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Chat.MSG_Ret_ChatUserInfo_SC.charname)
}
inline std::string* MSG_Ret_ChatUserInfo_SC::_internal_mutable_charname() {
  _has_bits_[0] |= 0x00000001u;
  return charname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_Ret_ChatUserInfo_SC::release_charname() {
  // @@protoc_insertion_point(field_release:Chat.MSG_Ret_ChatUserInfo_SC.charname)
  if (!_internal_has_charname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return charname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_Ret_ChatUserInfo_SC::set_allocated_charname(std::string* charname) {
  if (charname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  charname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), charname);
  // @@protoc_insertion_point(field_set_allocated:Chat.MSG_Ret_ChatUserInfo_SC.charname)
}

// optional uint32 level = 3;
inline bool MSG_Ret_ChatUserInfo_SC::_internal_has_level() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MSG_Ret_ChatUserInfo_SC::has_level() const {
  return _internal_has_level();
}
inline void MSG_Ret_ChatUserInfo_SC::clear_level() {
  level_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Ret_ChatUserInfo_SC::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Ret_ChatUserInfo_SC::level() const {
  // @@protoc_insertion_point(field_get:Chat.MSG_Ret_ChatUserInfo_SC.level)
  return _internal_level();
}
inline void MSG_Ret_ChatUserInfo_SC::_internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  level_ = value;
}
inline void MSG_Ret_ChatUserInfo_SC::set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:Chat.MSG_Ret_ChatUserInfo_SC.level)
}

// optional uint32 occupation = 4;
inline bool MSG_Ret_ChatUserInfo_SC::_internal_has_occupation() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MSG_Ret_ChatUserInfo_SC::has_occupation() const {
  return _internal_has_occupation();
}
inline void MSG_Ret_ChatUserInfo_SC::clear_occupation() {
  occupation_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Ret_ChatUserInfo_SC::_internal_occupation() const {
  return occupation_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Ret_ChatUserInfo_SC::occupation() const {
  // @@protoc_insertion_point(field_get:Chat.MSG_Ret_ChatUserInfo_SC.occupation)
  return _internal_occupation();
}
inline void MSG_Ret_ChatUserInfo_SC::_internal_set_occupation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  occupation_ = value;
}
inline void MSG_Ret_ChatUserInfo_SC::set_occupation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_occupation(value);
  // @@protoc_insertion_point(field_set:Chat.MSG_Ret_ChatUserInfo_SC.occupation)
}

// optional uint32 occupationlevel = 5;
inline bool MSG_Ret_ChatUserInfo_SC::_internal_has_occupationlevel() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool MSG_Ret_ChatUserInfo_SC::has_occupationlevel() const {
  return _internal_has_occupationlevel();
}
inline void MSG_Ret_ChatUserInfo_SC::clear_occupationlevel() {
  occupationlevel_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Ret_ChatUserInfo_SC::_internal_occupationlevel() const {
  return occupationlevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Ret_ChatUserInfo_SC::occupationlevel() const {
  // @@protoc_insertion_point(field_get:Chat.MSG_Ret_ChatUserInfo_SC.occupationlevel)
  return _internal_occupationlevel();
}
inline void MSG_Ret_ChatUserInfo_SC::_internal_set_occupationlevel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  occupationlevel_ = value;
}
inline void MSG_Ret_ChatUserInfo_SC::set_occupationlevel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_occupationlevel(value);
  // @@protoc_insertion_point(field_set:Chat.MSG_Ret_ChatUserInfo_SC.occupationlevel)
}

// optional bool can_take_master = 6 [default = false];
inline bool MSG_Ret_ChatUserInfo_SC::_internal_has_can_take_master() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool MSG_Ret_ChatUserInfo_SC::has_can_take_master() const {
  return _internal_has_can_take_master();
}
inline void MSG_Ret_ChatUserInfo_SC::clear_can_take_master() {
  can_take_master_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool MSG_Ret_ChatUserInfo_SC::_internal_can_take_master() const {
  return can_take_master_;
}
inline bool MSG_Ret_ChatUserInfo_SC::can_take_master() const {
  // @@protoc_insertion_point(field_get:Chat.MSG_Ret_ChatUserInfo_SC.can_take_master)
  return _internal_can_take_master();
}
inline void MSG_Ret_ChatUserInfo_SC::_internal_set_can_take_master(bool value) {
  _has_bits_[0] |= 0x00000020u;
  can_take_master_ = value;
}
inline void MSG_Ret_ChatUserInfo_SC::set_can_take_master(bool value) {
  _internal_set_can_take_master(value);
  // @@protoc_insertion_point(field_set:Chat.MSG_Ret_ChatUserInfo_SC.can_take_master)
}

// optional bool can_take_apprent = 7 [default = false];
inline bool MSG_Ret_ChatUserInfo_SC::_internal_has_can_take_apprent() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool MSG_Ret_ChatUserInfo_SC::has_can_take_apprent() const {
  return _internal_has_can_take_apprent();
}
inline void MSG_Ret_ChatUserInfo_SC::clear_can_take_apprent() {
  can_take_apprent_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool MSG_Ret_ChatUserInfo_SC::_internal_can_take_apprent() const {
  return can_take_apprent_;
}
inline bool MSG_Ret_ChatUserInfo_SC::can_take_apprent() const {
  // @@protoc_insertion_point(field_get:Chat.MSG_Ret_ChatUserInfo_SC.can_take_apprent)
  return _internal_can_take_apprent();
}
inline void MSG_Ret_ChatUserInfo_SC::_internal_set_can_take_apprent(bool value) {
  _has_bits_[0] |= 0x00000040u;
  can_take_apprent_ = value;
}
inline void MSG_Ret_ChatUserInfo_SC::set_can_take_apprent(bool value) {
  _internal_set_can_take_apprent(value);
  // @@protoc_insertion_point(field_set:Chat.MSG_Ret_ChatUserInfo_SC.can_take_apprent)
}

// -------------------------------------------------------------------

// MSG_Req_OfflineChat_CS

// -------------------------------------------------------------------

// MSG_Ret_OfflineChat_SC

// repeated .Chat.ChatData datas = 1;
inline int MSG_Ret_OfflineChat_SC::_internal_datas_size() const {
  return datas_.size();
}
inline int MSG_Ret_OfflineChat_SC::datas_size() const {
  return _internal_datas_size();
}
inline void MSG_Ret_OfflineChat_SC::clear_datas() {
  datas_.Clear();
}
inline ::Chat::ChatData* MSG_Ret_OfflineChat_SC::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:Chat.MSG_Ret_OfflineChat_SC.datas)
  return datas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Chat::ChatData >*
MSG_Ret_OfflineChat_SC::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:Chat.MSG_Ret_OfflineChat_SC.datas)
  return &datas_;
}
inline const ::Chat::ChatData& MSG_Ret_OfflineChat_SC::_internal_datas(int index) const {
  return datas_.Get(index);
}
inline const ::Chat::ChatData& MSG_Ret_OfflineChat_SC::datas(int index) const {
  // @@protoc_insertion_point(field_get:Chat.MSG_Ret_OfflineChat_SC.datas)
  return _internal_datas(index);
}
inline ::Chat::ChatData* MSG_Ret_OfflineChat_SC::_internal_add_datas() {
  return datas_.Add();
}
inline ::Chat::ChatData* MSG_Ret_OfflineChat_SC::add_datas() {
  // @@protoc_insertion_point(field_add:Chat.MSG_Ret_OfflineChat_SC.datas)
  return _internal_add_datas();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Chat::ChatData >&
MSG_Ret_OfflineChat_SC::datas() const {
  // @@protoc_insertion_point(field_list:Chat.MSG_Ret_OfflineChat_SC.datas)
  return datas_;
}

// -------------------------------------------------------------------

// MSG_Req_ImportantBroadcast_CS

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Chat

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Chat::ChannelType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Chat::ChannelType>() {
  return ::Chat::ChannelType_descriptor();
}
template <> struct is_proto_enum< ::Chat::ChatShowType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Chat::ChatShowType>() {
  return ::Chat::ChatShowType_descriptor();
}
template <> struct is_proto_enum< ::Chat::ChatTextType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Chat::ChatTextType>() {
  return ::Chat::ChatTextType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_chat_2eproto
