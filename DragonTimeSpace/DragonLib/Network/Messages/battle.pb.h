// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: battle.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_battle_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_battle_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_battle_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_battle_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[24]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_battle_2eproto;
namespace battle {
class HoldFlagCampScore;
class HoldFlagCampScoreDefaultTypeInternal;
extern HoldFlagCampScoreDefaultTypeInternal _HoldFlagCampScore_default_instance_;
class HoldFlagDBState;
class HoldFlagDBStateDefaultTypeInternal;
extern HoldFlagDBStateDefaultTypeInternal _HoldFlagDBState_default_instance_;
class HoldFlagReport;
class HoldFlagReportDefaultTypeInternal;
extern HoldFlagReportDefaultTypeInternal _HoldFlagReport_default_instance_;
class MSG_ReqBattleCancelMatch_CS;
class MSG_ReqBattleCancelMatch_CSDefaultTypeInternal;
extern MSG_ReqBattleCancelMatch_CSDefaultTypeInternal _MSG_ReqBattleCancelMatch_CS_default_instance_;
class MSG_ReqBattleCancelMatch_SC;
class MSG_ReqBattleCancelMatch_SCDefaultTypeInternal;
extern MSG_ReqBattleCancelMatch_SCDefaultTypeInternal _MSG_ReqBattleCancelMatch_SC_default_instance_;
class MSG_ReqBattleMatch_CS;
class MSG_ReqBattleMatch_CSDefaultTypeInternal;
extern MSG_ReqBattleMatch_CSDefaultTypeInternal _MSG_ReqBattleMatch_CS_default_instance_;
class MSG_ReqBattleMatch_SC;
class MSG_ReqBattleMatch_SCDefaultTypeInternal;
extern MSG_ReqBattleMatch_SCDefaultTypeInternal _MSG_ReqBattleMatch_SC_default_instance_;
class MSG_ReqBattleTimes_CS;
class MSG_ReqBattleTimes_CSDefaultTypeInternal;
extern MSG_ReqBattleTimes_CSDefaultTypeInternal _MSG_ReqBattleTimes_CS_default_instance_;
class MSG_ReqChangeGroupLeader_CS;
class MSG_ReqChangeGroupLeader_CSDefaultTypeInternal;
extern MSG_ReqChangeGroupLeader_CSDefaultTypeInternal _MSG_ReqChangeGroupLeader_CS_default_instance_;
class MSG_ReqEnterBattle_CS;
class MSG_ReqEnterBattle_CSDefaultTypeInternal;
extern MSG_ReqEnterBattle_CSDefaultTypeInternal _MSG_ReqEnterBattle_CS_default_instance_;
class MSG_ReqHoldFlagCaptureDB_CS;
class MSG_ReqHoldFlagCaptureDB_CSDefaultTypeInternal;
extern MSG_ReqHoldFlagCaptureDB_CSDefaultTypeInternal _MSG_ReqHoldFlagCaptureDB_CS_default_instance_;
class MSG_ReqHoldFlagPutDownDB_CS;
class MSG_ReqHoldFlagPutDownDB_CSDefaultTypeInternal;
extern MSG_ReqHoldFlagPutDownDB_CSDefaultTypeInternal _MSG_ReqHoldFlagPutDownDB_CS_default_instance_;
class MSG_ReqHoldFlagReport_CS;
class MSG_ReqHoldFlagReport_CSDefaultTypeInternal;
extern MSG_ReqHoldFlagReport_CSDefaultTypeInternal _MSG_ReqHoldFlagReport_CS_default_instance_;
class MSG_RetBattleTimes_SC;
class MSG_RetBattleTimes_SCDefaultTypeInternal;
extern MSG_RetBattleTimes_SCDefaultTypeInternal _MSG_RetBattleTimes_SC_default_instance_;
class MSG_RetBattleValid_SC;
class MSG_RetBattleValid_SCDefaultTypeInternal;
extern MSG_RetBattleValid_SCDefaultTypeInternal _MSG_RetBattleValid_SC_default_instance_;
class MSG_RetHoldFlagAccount_SC;
class MSG_RetHoldFlagAccount_SCDefaultTypeInternal;
extern MSG_RetHoldFlagAccount_SCDefaultTypeInternal _MSG_RetHoldFlagAccount_SC_default_instance_;
class MSG_RetHoldFlagCountDown_SC;
class MSG_RetHoldFlagCountDown_SCDefaultTypeInternal;
extern MSG_RetHoldFlagCountDown_SCDefaultTypeInternal _MSG_RetHoldFlagCountDown_SC_default_instance_;
class MSG_RetHoldFlagDBState_SC;
class MSG_RetHoldFlagDBState_SCDefaultTypeInternal;
extern MSG_RetHoldFlagDBState_SCDefaultTypeInternal _MSG_RetHoldFlagDBState_SC_default_instance_;
class MSG_RetHoldFlagEvent_SC;
class MSG_RetHoldFlagEvent_SCDefaultTypeInternal;
extern MSG_RetHoldFlagEvent_SCDefaultTypeInternal _MSG_RetHoldFlagEvent_SC_default_instance_;
class MSG_RetHoldFlagReport_SC;
class MSG_RetHoldFlagReport_SCDefaultTypeInternal;
extern MSG_RetHoldFlagReport_SCDefaultTypeInternal _MSG_RetHoldFlagReport_SC_default_instance_;
class MSG_RetHoldFlagTeamScore_SC;
class MSG_RetHoldFlagTeamScore_SCDefaultTypeInternal;
extern MSG_RetHoldFlagTeamScore_SCDefaultTypeInternal _MSG_RetHoldFlagTeamScore_SC_default_instance_;
class MSG_RetMatchMember_SC;
class MSG_RetMatchMember_SCDefaultTypeInternal;
extern MSG_RetMatchMember_SCDefaultTypeInternal _MSG_RetMatchMember_SC_default_instance_;
class MSG_retEnterBattle_SC;
class MSG_retEnterBattle_SCDefaultTypeInternal;
extern MSG_retEnterBattle_SCDefaultTypeInternal _MSG_retEnterBattle_SC_default_instance_;
class MatchMember;
class MatchMemberDefaultTypeInternal;
extern MatchMemberDefaultTypeInternal _MatchMember_default_instance_;
}  // namespace battle
PROTOBUF_NAMESPACE_OPEN
template<> ::battle::HoldFlagCampScore* Arena::CreateMaybeMessage<::battle::HoldFlagCampScore>(Arena*);
template<> ::battle::HoldFlagDBState* Arena::CreateMaybeMessage<::battle::HoldFlagDBState>(Arena*);
template<> ::battle::HoldFlagReport* Arena::CreateMaybeMessage<::battle::HoldFlagReport>(Arena*);
template<> ::battle::MSG_ReqBattleCancelMatch_CS* Arena::CreateMaybeMessage<::battle::MSG_ReqBattleCancelMatch_CS>(Arena*);
template<> ::battle::MSG_ReqBattleCancelMatch_SC* Arena::CreateMaybeMessage<::battle::MSG_ReqBattleCancelMatch_SC>(Arena*);
template<> ::battle::MSG_ReqBattleMatch_CS* Arena::CreateMaybeMessage<::battle::MSG_ReqBattleMatch_CS>(Arena*);
template<> ::battle::MSG_ReqBattleMatch_SC* Arena::CreateMaybeMessage<::battle::MSG_ReqBattleMatch_SC>(Arena*);
template<> ::battle::MSG_ReqBattleTimes_CS* Arena::CreateMaybeMessage<::battle::MSG_ReqBattleTimes_CS>(Arena*);
template<> ::battle::MSG_ReqChangeGroupLeader_CS* Arena::CreateMaybeMessage<::battle::MSG_ReqChangeGroupLeader_CS>(Arena*);
template<> ::battle::MSG_ReqEnterBattle_CS* Arena::CreateMaybeMessage<::battle::MSG_ReqEnterBattle_CS>(Arena*);
template<> ::battle::MSG_ReqHoldFlagCaptureDB_CS* Arena::CreateMaybeMessage<::battle::MSG_ReqHoldFlagCaptureDB_CS>(Arena*);
template<> ::battle::MSG_ReqHoldFlagPutDownDB_CS* Arena::CreateMaybeMessage<::battle::MSG_ReqHoldFlagPutDownDB_CS>(Arena*);
template<> ::battle::MSG_ReqHoldFlagReport_CS* Arena::CreateMaybeMessage<::battle::MSG_ReqHoldFlagReport_CS>(Arena*);
template<> ::battle::MSG_RetBattleTimes_SC* Arena::CreateMaybeMessage<::battle::MSG_RetBattleTimes_SC>(Arena*);
template<> ::battle::MSG_RetBattleValid_SC* Arena::CreateMaybeMessage<::battle::MSG_RetBattleValid_SC>(Arena*);
template<> ::battle::MSG_RetHoldFlagAccount_SC* Arena::CreateMaybeMessage<::battle::MSG_RetHoldFlagAccount_SC>(Arena*);
template<> ::battle::MSG_RetHoldFlagCountDown_SC* Arena::CreateMaybeMessage<::battle::MSG_RetHoldFlagCountDown_SC>(Arena*);
template<> ::battle::MSG_RetHoldFlagDBState_SC* Arena::CreateMaybeMessage<::battle::MSG_RetHoldFlagDBState_SC>(Arena*);
template<> ::battle::MSG_RetHoldFlagEvent_SC* Arena::CreateMaybeMessage<::battle::MSG_RetHoldFlagEvent_SC>(Arena*);
template<> ::battle::MSG_RetHoldFlagReport_SC* Arena::CreateMaybeMessage<::battle::MSG_RetHoldFlagReport_SC>(Arena*);
template<> ::battle::MSG_RetHoldFlagTeamScore_SC* Arena::CreateMaybeMessage<::battle::MSG_RetHoldFlagTeamScore_SC>(Arena*);
template<> ::battle::MSG_RetMatchMember_SC* Arena::CreateMaybeMessage<::battle::MSG_RetMatchMember_SC>(Arena*);
template<> ::battle::MSG_retEnterBattle_SC* Arena::CreateMaybeMessage<::battle::MSG_retEnterBattle_SC>(Arena*);
template<> ::battle::MatchMember* Arena::CreateMaybeMessage<::battle::MatchMember>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace battle {

enum BatteMatchCode : int {
  BATTLE_MATCH_SUCCESS = 1,
  BATTLE_MATCH_LEVEL_FAILED = 2,
  BATTLE_MATCH_COPYMAP_FAILED = 3,
  BATTLE_MATCH_MATCHING_FAILED = 4,
  BATTLE_MATCH_TEAMLEVEL_FAILED = 5,
  BATTLE_MATCH_TEAMRIGHT_FAILED = 6,
  BATTLE_MATCH_MEMBEROFFLINE_FAILED = 7,
  BATTLE_MATCH_TIME_FAILED = 8
};
bool BatteMatchCode_IsValid(int value);
constexpr BatteMatchCode BatteMatchCode_MIN = BATTLE_MATCH_SUCCESS;
constexpr BatteMatchCode BatteMatchCode_MAX = BATTLE_MATCH_TIME_FAILED;
constexpr int BatteMatchCode_ARRAYSIZE = BatteMatchCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BatteMatchCode_descriptor();
template<typename T>
inline const std::string& BatteMatchCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BatteMatchCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BatteMatchCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BatteMatchCode_descriptor(), enum_t_value);
}
inline bool BatteMatchCode_Parse(
    const std::string& name, BatteMatchCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BatteMatchCode>(
    BatteMatchCode_descriptor(), name, value);
}
enum CancelBatteMatchCode : int {
  BATTLE_CANCELMATCH_SUCCESS = 1,
  BATTLE_CANCELMATCH_TEAMRIGHT_FAILED = 2,
  BATTLE_CANCELMATCH_NOMATCH_FAILED = 3,
  BATTLE_CANCELMATCH_INTER_FAILED = 4,
  BATTLE_CANCELMATCH_MATCHOVER_FAILED = 5
};
bool CancelBatteMatchCode_IsValid(int value);
constexpr CancelBatteMatchCode CancelBatteMatchCode_MIN = BATTLE_CANCELMATCH_SUCCESS;
constexpr CancelBatteMatchCode CancelBatteMatchCode_MAX = BATTLE_CANCELMATCH_MATCHOVER_FAILED;
constexpr int CancelBatteMatchCode_ARRAYSIZE = CancelBatteMatchCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CancelBatteMatchCode_descriptor();
template<typename T>
inline const std::string& CancelBatteMatchCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CancelBatteMatchCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CancelBatteMatchCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CancelBatteMatchCode_descriptor(), enum_t_value);
}
inline bool CancelBatteMatchCode_Parse(
    const std::string& name, CancelBatteMatchCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CancelBatteMatchCode>(
    CancelBatteMatchCode_descriptor(), name, value);
}
enum CreateBattleCode : int {
  BATTLE_CREATE_ALL_SUCCESS = 1,
  BATTLE_CREATE_SESSION_NOSCENE_FAILED = 2,
  BATTLE_CREATE_SESSION_CPMCREATE_FAILED = 3,
  BATTLE_CREATE_SESSION_NOCPM_FAILED = 4,
  BATTLE_CREATE_SESSION_SCENEEXIST_FAILED = 5,
  BATTLE_CREATE_SESSION_MEMERR_FAILED = 6,
  BATTLE_CREATE_SESSION_SCENEMGR_FAILED = 7,
  BATTLE_CREATE_SESSION_FINDSCENE_FAILED = 8,
  BATTLE_CREATE_SCENE_CPMCREATE_FAILED = 9,
  BATTLE_CREATE_SCENE_REG_FAILED = 10,
  BATTLE_CREATE_FUNCTION_CREATE_FAILED = 11,
  BATTLE_CREATE_FUNCTION_CREATEROOM_FAILED = 12
};
bool CreateBattleCode_IsValid(int value);
constexpr CreateBattleCode CreateBattleCode_MIN = BATTLE_CREATE_ALL_SUCCESS;
constexpr CreateBattleCode CreateBattleCode_MAX = BATTLE_CREATE_FUNCTION_CREATEROOM_FAILED;
constexpr int CreateBattleCode_ARRAYSIZE = CreateBattleCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CreateBattleCode_descriptor();
template<typename T>
inline const std::string& CreateBattleCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CreateBattleCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CreateBattleCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CreateBattleCode_descriptor(), enum_t_value);
}
inline bool CreateBattleCode_Parse(
    const std::string& name, CreateBattleCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CreateBattleCode>(
    CreateBattleCode_descriptor(), name, value);
}
enum EnterBattleCode : int {
  BATTLE_ENTER_SUCCESS = 1,
  BATTLE_ENTER_INCOPYMAP_FAILED = 2,
  BATTLE_ENTER_ENTERROOM_FAILED = 3,
  BATTLE_ENTER_OVERTIME_FAILED = 4,
  BATTLE_ENTER_NOROOM_FAILED = 5,
  BATTLE_ENTER_KICKED_FAILED = 6
};
bool EnterBattleCode_IsValid(int value);
constexpr EnterBattleCode EnterBattleCode_MIN = BATTLE_ENTER_SUCCESS;
constexpr EnterBattleCode EnterBattleCode_MAX = BATTLE_ENTER_KICKED_FAILED;
constexpr int EnterBattleCode_ARRAYSIZE = EnterBattleCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EnterBattleCode_descriptor();
template<typename T>
inline const std::string& EnterBattleCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EnterBattleCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EnterBattleCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EnterBattleCode_descriptor(), enum_t_value);
}
inline bool EnterBattleCode_Parse(
    const std::string& name, EnterBattleCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EnterBattleCode>(
    EnterBattleCode_descriptor(), name, value);
}
enum Camp : int {
  NONE = 0,
  RED = 1,
  BLUE = 2
};
bool Camp_IsValid(int value);
constexpr Camp Camp_MIN = NONE;
constexpr Camp Camp_MAX = BLUE;
constexpr int Camp_ARRAYSIZE = Camp_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Camp_descriptor();
template<typename T>
inline const std::string& Camp_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Camp>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Camp_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Camp_descriptor(), enum_t_value);
}
inline bool Camp_Parse(
    const std::string& name, Camp* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Camp>(
    Camp_descriptor(), name, value);
}
enum HoldFlagStage : int {
  HOLD_FLAG_STAGE_NONE = 0,
  HOLD_FLAG_STAGE_ENTER = 1,
  HOLD_FLAG_STAGE_PREPARE = 2,
  HOLD_FLAG_STAGE_FIGHT = 3,
  HOLD_FLAG_STAGE_ACCOUNT = 4,
  HOLD_FLAG_STAGE_MAX = 5
};
bool HoldFlagStage_IsValid(int value);
constexpr HoldFlagStage HoldFlagStage_MIN = HOLD_FLAG_STAGE_NONE;
constexpr HoldFlagStage HoldFlagStage_MAX = HOLD_FLAG_STAGE_MAX;
constexpr int HoldFlagStage_ARRAYSIZE = HoldFlagStage_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HoldFlagStage_descriptor();
template<typename T>
inline const std::string& HoldFlagStage_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HoldFlagStage>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HoldFlagStage_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HoldFlagStage_descriptor(), enum_t_value);
}
inline bool HoldFlagStage_Parse(
    const std::string& name, HoldFlagStage* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HoldFlagStage>(
    HoldFlagStage_descriptor(), name, value);
}
// ===================================================================

class MatchMember :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:battle.MatchMember) */ {
 public:
  MatchMember();
  virtual ~MatchMember();

  MatchMember(const MatchMember& from);
  MatchMember(MatchMember&& from) noexcept
    : MatchMember() {
    *this = ::std::move(from);
  }

  inline MatchMember& operator=(const MatchMember& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatchMember& operator=(MatchMember&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MatchMember& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MatchMember* internal_default_instance() {
    return reinterpret_cast<const MatchMember*>(
               &_MatchMember_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MatchMember& a, MatchMember& b) {
    a.Swap(&b);
  }
  inline void Swap(MatchMember* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MatchMember* New() const final {
    return CreateMaybeMessage<MatchMember>(nullptr);
  }

  MatchMember* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MatchMember>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MatchMember& from);
  void MergeFrom(const MatchMember& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatchMember* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "battle.MatchMember";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_battle_2eproto);
    return ::descriptor_table_battle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 4,
    kUseridFieldNumber = 1,
    kCaptainFieldNumber = 2,
    kHeroidFieldNumber = 3,
    kLevelFieldNumber = 5,
    kGidFieldNumber = 7,
    kCampFieldNumber = 6,
  };
  // optional string name = 4;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional uint64 userid = 1;
  bool has_userid() const;
  private:
  bool _internal_has_userid() const;
  public:
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::uint64 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 captain = 2;
  bool has_captain() const;
  private:
  bool _internal_has_captain() const;
  public:
  void clear_captain();
  ::PROTOBUF_NAMESPACE_ID::uint64 captain() const;
  void set_captain(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_captain() const;
  void _internal_set_captain(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 heroid = 3;
  bool has_heroid() const;
  private:
  bool _internal_has_heroid() const;
  public:
  void clear_heroid();
  ::PROTOBUF_NAMESPACE_ID::uint32 heroid() const;
  void set_heroid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_heroid() const;
  void _internal_set_heroid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 level = 5;
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 gid = 7;
  bool has_gid() const;
  private:
  bool _internal_has_gid() const;
  public:
  void clear_gid();
  ::PROTOBUF_NAMESPACE_ID::uint64 gid() const;
  void set_gid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_gid() const;
  void _internal_set_gid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 camp = 6;
  bool has_camp() const;
  private:
  bool _internal_has_camp() const;
  public:
  void clear_camp();
  ::PROTOBUF_NAMESPACE_ID::uint32 camp() const;
  void set_camp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_camp() const;
  void _internal_set_camp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:battle.MatchMember)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 userid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 captain_;
  ::PROTOBUF_NAMESPACE_ID::uint32 heroid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 level_;
  ::PROTOBUF_NAMESPACE_ID::uint64 gid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 camp_;
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class MSG_ReqBattleTimes_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:battle.MSG_ReqBattleTimes_CS) */ {
 public:
  MSG_ReqBattleTimes_CS();
  virtual ~MSG_ReqBattleTimes_CS();

  MSG_ReqBattleTimes_CS(const MSG_ReqBattleTimes_CS& from);
  MSG_ReqBattleTimes_CS(MSG_ReqBattleTimes_CS&& from) noexcept
    : MSG_ReqBattleTimes_CS() {
    *this = ::std::move(from);
  }

  inline MSG_ReqBattleTimes_CS& operator=(const MSG_ReqBattleTimes_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_ReqBattleTimes_CS& operator=(MSG_ReqBattleTimes_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_ReqBattleTimes_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_ReqBattleTimes_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_ReqBattleTimes_CS*>(
               &_MSG_ReqBattleTimes_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MSG_ReqBattleTimes_CS& a, MSG_ReqBattleTimes_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_ReqBattleTimes_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_ReqBattleTimes_CS* New() const final {
    return CreateMaybeMessage<MSG_ReqBattleTimes_CS>(nullptr);
  }

  MSG_ReqBattleTimes_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_ReqBattleTimes_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_ReqBattleTimes_CS& from);
  void MergeFrom(const MSG_ReqBattleTimes_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_ReqBattleTimes_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "battle.MSG_ReqBattleTimes_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_battle_2eproto);
    return ::descriptor_table_battle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBattleIdFieldNumber = 1,
  };
  // optional uint32 battleId = 1;
  bool has_battleid() const;
  private:
  bool _internal_has_battleid() const;
  public:
  void clear_battleid();
  ::PROTOBUF_NAMESPACE_ID::uint32 battleid() const;
  void set_battleid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_battleid() const;
  void _internal_set_battleid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:battle.MSG_ReqBattleTimes_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 battleid_;
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class MSG_RetBattleTimes_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:battle.MSG_RetBattleTimes_SC) */ {
 public:
  MSG_RetBattleTimes_SC();
  virtual ~MSG_RetBattleTimes_SC();

  MSG_RetBattleTimes_SC(const MSG_RetBattleTimes_SC& from);
  MSG_RetBattleTimes_SC(MSG_RetBattleTimes_SC&& from) noexcept
    : MSG_RetBattleTimes_SC() {
    *this = ::std::move(from);
  }

  inline MSG_RetBattleTimes_SC& operator=(const MSG_RetBattleTimes_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_RetBattleTimes_SC& operator=(MSG_RetBattleTimes_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_RetBattleTimes_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_RetBattleTimes_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_RetBattleTimes_SC*>(
               &_MSG_RetBattleTimes_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MSG_RetBattleTimes_SC& a, MSG_RetBattleTimes_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_RetBattleTimes_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_RetBattleTimes_SC* New() const final {
    return CreateMaybeMessage<MSG_RetBattleTimes_SC>(nullptr);
  }

  MSG_RetBattleTimes_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_RetBattleTimes_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_RetBattleTimes_SC& from);
  void MergeFrom(const MSG_RetBattleTimes_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_RetBattleTimes_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "battle.MSG_RetBattleTimes_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_battle_2eproto);
    return ::descriptor_table_battle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWinBattleTimesFieldNumber = 1,
  };
  // optional uint32 winBattleTimes = 1;
  bool has_winbattletimes() const;
  private:
  bool _internal_has_winbattletimes() const;
  public:
  void clear_winbattletimes();
  ::PROTOBUF_NAMESPACE_ID::uint32 winbattletimes() const;
  void set_winbattletimes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_winbattletimes() const;
  void _internal_set_winbattletimes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:battle.MSG_RetBattleTimes_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 winbattletimes_;
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class MSG_ReqBattleMatch_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:battle.MSG_ReqBattleMatch_CS) */ {
 public:
  MSG_ReqBattleMatch_CS();
  virtual ~MSG_ReqBattleMatch_CS();

  MSG_ReqBattleMatch_CS(const MSG_ReqBattleMatch_CS& from);
  MSG_ReqBattleMatch_CS(MSG_ReqBattleMatch_CS&& from) noexcept
    : MSG_ReqBattleMatch_CS() {
    *this = ::std::move(from);
  }

  inline MSG_ReqBattleMatch_CS& operator=(const MSG_ReqBattleMatch_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_ReqBattleMatch_CS& operator=(MSG_ReqBattleMatch_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_ReqBattleMatch_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_ReqBattleMatch_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_ReqBattleMatch_CS*>(
               &_MSG_ReqBattleMatch_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MSG_ReqBattleMatch_CS& a, MSG_ReqBattleMatch_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_ReqBattleMatch_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_ReqBattleMatch_CS* New() const final {
    return CreateMaybeMessage<MSG_ReqBattleMatch_CS>(nullptr);
  }

  MSG_ReqBattleMatch_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_ReqBattleMatch_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_ReqBattleMatch_CS& from);
  void MergeFrom(const MSG_ReqBattleMatch_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_ReqBattleMatch_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "battle.MSG_ReqBattleMatch_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_battle_2eproto);
    return ::descriptor_table_battle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBattleIdFieldNumber = 1,
  };
  // optional uint32 battleId = 1;
  bool has_battleid() const;
  private:
  bool _internal_has_battleid() const;
  public:
  void clear_battleid();
  ::PROTOBUF_NAMESPACE_ID::uint32 battleid() const;
  void set_battleid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_battleid() const;
  void _internal_set_battleid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:battle.MSG_ReqBattleMatch_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 battleid_;
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class MSG_ReqBattleMatch_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:battle.MSG_ReqBattleMatch_SC) */ {
 public:
  MSG_ReqBattleMatch_SC();
  virtual ~MSG_ReqBattleMatch_SC();

  MSG_ReqBattleMatch_SC(const MSG_ReqBattleMatch_SC& from);
  MSG_ReqBattleMatch_SC(MSG_ReqBattleMatch_SC&& from) noexcept
    : MSG_ReqBattleMatch_SC() {
    *this = ::std::move(from);
  }

  inline MSG_ReqBattleMatch_SC& operator=(const MSG_ReqBattleMatch_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_ReqBattleMatch_SC& operator=(MSG_ReqBattleMatch_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_ReqBattleMatch_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_ReqBattleMatch_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_ReqBattleMatch_SC*>(
               &_MSG_ReqBattleMatch_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MSG_ReqBattleMatch_SC& a, MSG_ReqBattleMatch_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_ReqBattleMatch_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_ReqBattleMatch_SC* New() const final {
    return CreateMaybeMessage<MSG_ReqBattleMatch_SC>(nullptr);
  }

  MSG_ReqBattleMatch_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_ReqBattleMatch_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_ReqBattleMatch_SC& from);
  void MergeFrom(const MSG_ReqBattleMatch_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_ReqBattleMatch_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "battle.MSG_ReqBattleMatch_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_battle_2eproto);
    return ::descriptor_table_battle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAverWaitTimeFieldNumber = 2,
    kErrorCodeFieldNumber = 1,
  };
  // optional uint64 averWaitTime = 2;
  bool has_averwaittime() const;
  private:
  bool _internal_has_averwaittime() const;
  public:
  void clear_averwaittime();
  ::PROTOBUF_NAMESPACE_ID::uint64 averwaittime() const;
  void set_averwaittime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_averwaittime() const;
  void _internal_set_averwaittime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .battle.BatteMatchCode errorCode = 1;
  bool has_errorcode() const;
  private:
  bool _internal_has_errorcode() const;
  public:
  void clear_errorcode();
  ::battle::BatteMatchCode errorcode() const;
  void set_errorcode(::battle::BatteMatchCode value);
  private:
  ::battle::BatteMatchCode _internal_errorcode() const;
  void _internal_set_errorcode(::battle::BatteMatchCode value);
  public:

  // @@protoc_insertion_point(class_scope:battle.MSG_ReqBattleMatch_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 averwaittime_;
  int errorcode_;
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class MSG_ReqBattleCancelMatch_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:battle.MSG_ReqBattleCancelMatch_CS) */ {
 public:
  MSG_ReqBattleCancelMatch_CS();
  virtual ~MSG_ReqBattleCancelMatch_CS();

  MSG_ReqBattleCancelMatch_CS(const MSG_ReqBattleCancelMatch_CS& from);
  MSG_ReqBattleCancelMatch_CS(MSG_ReqBattleCancelMatch_CS&& from) noexcept
    : MSG_ReqBattleCancelMatch_CS() {
    *this = ::std::move(from);
  }

  inline MSG_ReqBattleCancelMatch_CS& operator=(const MSG_ReqBattleCancelMatch_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_ReqBattleCancelMatch_CS& operator=(MSG_ReqBattleCancelMatch_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_ReqBattleCancelMatch_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_ReqBattleCancelMatch_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_ReqBattleCancelMatch_CS*>(
               &_MSG_ReqBattleCancelMatch_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MSG_ReqBattleCancelMatch_CS& a, MSG_ReqBattleCancelMatch_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_ReqBattleCancelMatch_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_ReqBattleCancelMatch_CS* New() const final {
    return CreateMaybeMessage<MSG_ReqBattleCancelMatch_CS>(nullptr);
  }

  MSG_ReqBattleCancelMatch_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_ReqBattleCancelMatch_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_ReqBattleCancelMatch_CS& from);
  void MergeFrom(const MSG_ReqBattleCancelMatch_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_ReqBattleCancelMatch_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "battle.MSG_ReqBattleCancelMatch_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_battle_2eproto);
    return ::descriptor_table_battle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBattleIdFieldNumber = 1,
  };
  // optional uint32 battleId = 1;
  bool has_battleid() const;
  private:
  bool _internal_has_battleid() const;
  public:
  void clear_battleid();
  ::PROTOBUF_NAMESPACE_ID::uint32 battleid() const;
  void set_battleid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_battleid() const;
  void _internal_set_battleid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:battle.MSG_ReqBattleCancelMatch_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 battleid_;
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class MSG_ReqBattleCancelMatch_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:battle.MSG_ReqBattleCancelMatch_SC) */ {
 public:
  MSG_ReqBattleCancelMatch_SC();
  virtual ~MSG_ReqBattleCancelMatch_SC();

  MSG_ReqBattleCancelMatch_SC(const MSG_ReqBattleCancelMatch_SC& from);
  MSG_ReqBattleCancelMatch_SC(MSG_ReqBattleCancelMatch_SC&& from) noexcept
    : MSG_ReqBattleCancelMatch_SC() {
    *this = ::std::move(from);
  }

  inline MSG_ReqBattleCancelMatch_SC& operator=(const MSG_ReqBattleCancelMatch_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_ReqBattleCancelMatch_SC& operator=(MSG_ReqBattleCancelMatch_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_ReqBattleCancelMatch_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_ReqBattleCancelMatch_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_ReqBattleCancelMatch_SC*>(
               &_MSG_ReqBattleCancelMatch_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MSG_ReqBattleCancelMatch_SC& a, MSG_ReqBattleCancelMatch_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_ReqBattleCancelMatch_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_ReqBattleCancelMatch_SC* New() const final {
    return CreateMaybeMessage<MSG_ReqBattleCancelMatch_SC>(nullptr);
  }

  MSG_ReqBattleCancelMatch_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_ReqBattleCancelMatch_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_ReqBattleCancelMatch_SC& from);
  void MergeFrom(const MSG_ReqBattleCancelMatch_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_ReqBattleCancelMatch_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "battle.MSG_ReqBattleCancelMatch_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_battle_2eproto);
    return ::descriptor_table_battle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorCodeFieldNumber = 1,
  };
  // optional .battle.CancelBatteMatchCode errorCode = 1;
  bool has_errorcode() const;
  private:
  bool _internal_has_errorcode() const;
  public:
  void clear_errorcode();
  ::battle::CancelBatteMatchCode errorcode() const;
  void set_errorcode(::battle::CancelBatteMatchCode value);
  private:
  ::battle::CancelBatteMatchCode _internal_errorcode() const;
  void _internal_set_errorcode(::battle::CancelBatteMatchCode value);
  public:

  // @@protoc_insertion_point(class_scope:battle.MSG_ReqBattleCancelMatch_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int errorcode_;
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class MSG_RetMatchMember_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:battle.MSG_RetMatchMember_SC) */ {
 public:
  MSG_RetMatchMember_SC();
  virtual ~MSG_RetMatchMember_SC();

  MSG_RetMatchMember_SC(const MSG_RetMatchMember_SC& from);
  MSG_RetMatchMember_SC(MSG_RetMatchMember_SC&& from) noexcept
    : MSG_RetMatchMember_SC() {
    *this = ::std::move(from);
  }

  inline MSG_RetMatchMember_SC& operator=(const MSG_RetMatchMember_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_RetMatchMember_SC& operator=(MSG_RetMatchMember_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_RetMatchMember_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_RetMatchMember_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_RetMatchMember_SC*>(
               &_MSG_RetMatchMember_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MSG_RetMatchMember_SC& a, MSG_RetMatchMember_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_RetMatchMember_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_RetMatchMember_SC* New() const final {
    return CreateMaybeMessage<MSG_RetMatchMember_SC>(nullptr);
  }

  MSG_RetMatchMember_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_RetMatchMember_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_RetMatchMember_SC& from);
  void MergeFrom(const MSG_RetMatchMember_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_RetMatchMember_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "battle.MSG_RetMatchMember_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_battle_2eproto);
    return ::descriptor_table_battle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 1,
  };
  // repeated .battle.MatchMember members = 1;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  ::battle::MatchMember* mutable_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::battle::MatchMember >*
      mutable_members();
  private:
  const ::battle::MatchMember& _internal_members(int index) const;
  ::battle::MatchMember* _internal_add_members();
  public:
  const ::battle::MatchMember& members(int index) const;
  ::battle::MatchMember* add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::battle::MatchMember >&
      members() const;

  // @@protoc_insertion_point(class_scope:battle.MSG_RetMatchMember_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::battle::MatchMember > members_;
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class MSG_RetBattleValid_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:battle.MSG_RetBattleValid_SC) */ {
 public:
  MSG_RetBattleValid_SC();
  virtual ~MSG_RetBattleValid_SC();

  MSG_RetBattleValid_SC(const MSG_RetBattleValid_SC& from);
  MSG_RetBattleValid_SC(MSG_RetBattleValid_SC&& from) noexcept
    : MSG_RetBattleValid_SC() {
    *this = ::std::move(from);
  }

  inline MSG_RetBattleValid_SC& operator=(const MSG_RetBattleValid_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_RetBattleValid_SC& operator=(MSG_RetBattleValid_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_RetBattleValid_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_RetBattleValid_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_RetBattleValid_SC*>(
               &_MSG_RetBattleValid_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(MSG_RetBattleValid_SC& a, MSG_RetBattleValid_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_RetBattleValid_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_RetBattleValid_SC* New() const final {
    return CreateMaybeMessage<MSG_RetBattleValid_SC>(nullptr);
  }

  MSG_RetBattleValid_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_RetBattleValid_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_RetBattleValid_SC& from);
  void MergeFrom(const MSG_RetBattleValid_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_RetBattleValid_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "battle.MSG_RetBattleValid_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_battle_2eproto);
    return ::descriptor_table_battle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEndTimeStampFieldNumber = 1,
  };
  // optional uint32 endTimeStamp = 1;
  bool has_endtimestamp() const;
  private:
  bool _internal_has_endtimestamp() const;
  public:
  void clear_endtimestamp();
  ::PROTOBUF_NAMESPACE_ID::uint32 endtimestamp() const;
  void set_endtimestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_endtimestamp() const;
  void _internal_set_endtimestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:battle.MSG_RetBattleValid_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 endtimestamp_;
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class MSG_ReqEnterBattle_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:battle.MSG_ReqEnterBattle_CS) */ {
 public:
  MSG_ReqEnterBattle_CS();
  virtual ~MSG_ReqEnterBattle_CS();

  MSG_ReqEnterBattle_CS(const MSG_ReqEnterBattle_CS& from);
  MSG_ReqEnterBattle_CS(MSG_ReqEnterBattle_CS&& from) noexcept
    : MSG_ReqEnterBattle_CS() {
    *this = ::std::move(from);
  }

  inline MSG_ReqEnterBattle_CS& operator=(const MSG_ReqEnterBattle_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_ReqEnterBattle_CS& operator=(MSG_ReqEnterBattle_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_ReqEnterBattle_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_ReqEnterBattle_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_ReqEnterBattle_CS*>(
               &_MSG_ReqEnterBattle_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(MSG_ReqEnterBattle_CS& a, MSG_ReqEnterBattle_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_ReqEnterBattle_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_ReqEnterBattle_CS* New() const final {
    return CreateMaybeMessage<MSG_ReqEnterBattle_CS>(nullptr);
  }

  MSG_ReqEnterBattle_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_ReqEnterBattle_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_ReqEnterBattle_CS& from);
  void MergeFrom(const MSG_ReqEnterBattle_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_ReqEnterBattle_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "battle.MSG_ReqEnterBattle_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_battle_2eproto);
    return ::descriptor_table_battle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:battle.MSG_ReqEnterBattle_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class MSG_retEnterBattle_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:battle.MSG_retEnterBattle_SC) */ {
 public:
  MSG_retEnterBattle_SC();
  virtual ~MSG_retEnterBattle_SC();

  MSG_retEnterBattle_SC(const MSG_retEnterBattle_SC& from);
  MSG_retEnterBattle_SC(MSG_retEnterBattle_SC&& from) noexcept
    : MSG_retEnterBattle_SC() {
    *this = ::std::move(from);
  }

  inline MSG_retEnterBattle_SC& operator=(const MSG_retEnterBattle_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_retEnterBattle_SC& operator=(MSG_retEnterBattle_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_retEnterBattle_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_retEnterBattle_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_retEnterBattle_SC*>(
               &_MSG_retEnterBattle_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(MSG_retEnterBattle_SC& a, MSG_retEnterBattle_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_retEnterBattle_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_retEnterBattle_SC* New() const final {
    return CreateMaybeMessage<MSG_retEnterBattle_SC>(nullptr);
  }

  MSG_retEnterBattle_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_retEnterBattle_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_retEnterBattle_SC& from);
  void MergeFrom(const MSG_retEnterBattle_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_retEnterBattle_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "battle.MSG_retEnterBattle_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_battle_2eproto);
    return ::descriptor_table_battle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorCodeFieldNumber = 1,
  };
  // optional .battle.EnterBattleCode errorCode = 1;
  bool has_errorcode() const;
  private:
  bool _internal_has_errorcode() const;
  public:
  void clear_errorcode();
  ::battle::EnterBattleCode errorcode() const;
  void set_errorcode(::battle::EnterBattleCode value);
  private:
  ::battle::EnterBattleCode _internal_errorcode() const;
  void _internal_set_errorcode(::battle::EnterBattleCode value);
  public:

  // @@protoc_insertion_point(class_scope:battle.MSG_retEnterBattle_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int errorcode_;
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class MSG_ReqChangeGroupLeader_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:battle.MSG_ReqChangeGroupLeader_CS) */ {
 public:
  MSG_ReqChangeGroupLeader_CS();
  virtual ~MSG_ReqChangeGroupLeader_CS();

  MSG_ReqChangeGroupLeader_CS(const MSG_ReqChangeGroupLeader_CS& from);
  MSG_ReqChangeGroupLeader_CS(MSG_ReqChangeGroupLeader_CS&& from) noexcept
    : MSG_ReqChangeGroupLeader_CS() {
    *this = ::std::move(from);
  }

  inline MSG_ReqChangeGroupLeader_CS& operator=(const MSG_ReqChangeGroupLeader_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_ReqChangeGroupLeader_CS& operator=(MSG_ReqChangeGroupLeader_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_ReqChangeGroupLeader_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_ReqChangeGroupLeader_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_ReqChangeGroupLeader_CS*>(
               &_MSG_ReqChangeGroupLeader_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(MSG_ReqChangeGroupLeader_CS& a, MSG_ReqChangeGroupLeader_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_ReqChangeGroupLeader_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_ReqChangeGroupLeader_CS* New() const final {
    return CreateMaybeMessage<MSG_ReqChangeGroupLeader_CS>(nullptr);
  }

  MSG_ReqChangeGroupLeader_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_ReqChangeGroupLeader_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_ReqChangeGroupLeader_CS& from);
  void MergeFrom(const MSG_ReqChangeGroupLeader_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_ReqChangeGroupLeader_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "battle.MSG_ReqChangeGroupLeader_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_battle_2eproto);
    return ::descriptor_table_battle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewCaptainFieldNumber = 1,
  };
  // optional uint64 newCaptain = 1;
  bool has_newcaptain() const;
  private:
  bool _internal_has_newcaptain() const;
  public:
  void clear_newcaptain();
  ::PROTOBUF_NAMESPACE_ID::uint64 newcaptain() const;
  void set_newcaptain(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_newcaptain() const;
  void _internal_set_newcaptain(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:battle.MSG_ReqChangeGroupLeader_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 newcaptain_;
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class HoldFlagReport :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:battle.HoldFlagReport) */ {
 public:
  HoldFlagReport();
  virtual ~HoldFlagReport();

  HoldFlagReport(const HoldFlagReport& from);
  HoldFlagReport(HoldFlagReport&& from) noexcept
    : HoldFlagReport() {
    *this = ::std::move(from);
  }

  inline HoldFlagReport& operator=(const HoldFlagReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline HoldFlagReport& operator=(HoldFlagReport&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HoldFlagReport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HoldFlagReport* internal_default_instance() {
    return reinterpret_cast<const HoldFlagReport*>(
               &_HoldFlagReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(HoldFlagReport& a, HoldFlagReport& b) {
    a.Swap(&b);
  }
  inline void Swap(HoldFlagReport* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HoldFlagReport* New() const final {
    return CreateMaybeMessage<HoldFlagReport>(nullptr);
  }

  HoldFlagReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HoldFlagReport>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HoldFlagReport& from);
  void MergeFrom(const HoldFlagReport& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HoldFlagReport* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "battle.HoldFlagReport";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_battle_2eproto);
    return ::descriptor_table_battle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kCampIdFieldNumber = 2,
    kTeamIdFieldNumber = 3,
    kUseridFieldNumber = 4,
    kHurtNumFieldNumber = 5,
    kCureNumFieldNumber = 6,
    kKillNumFieldNumber = 7,
    kDeadNumFieldNumber = 8,
    kBackDBNumFieldNumber = 9,
    kCaptureDBNumFieldNumber = 10,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional uint32 campId = 2;
  bool has_campid() const;
  private:
  bool _internal_has_campid() const;
  public:
  void clear_campid();
  ::PROTOBUF_NAMESPACE_ID::uint32 campid() const;
  void set_campid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_campid() const;
  void _internal_set_campid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 teamId = 3;
  bool has_teamid() const;
  private:
  bool _internal_has_teamid() const;
  public:
  void clear_teamid();
  ::PROTOBUF_NAMESPACE_ID::uint32 teamid() const;
  void set_teamid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_teamid() const;
  void _internal_set_teamid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 userid = 4;
  bool has_userid() const;
  private:
  bool _internal_has_userid() const;
  public:
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::uint64 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 hurtNum = 5;
  bool has_hurtnum() const;
  private:
  bool _internal_has_hurtnum() const;
  public:
  void clear_hurtnum();
  ::PROTOBUF_NAMESPACE_ID::uint32 hurtnum() const;
  void set_hurtnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hurtnum() const;
  void _internal_set_hurtnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 cureNum = 6;
  bool has_curenum() const;
  private:
  bool _internal_has_curenum() const;
  public:
  void clear_curenum();
  ::PROTOBUF_NAMESPACE_ID::uint32 curenum() const;
  void set_curenum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_curenum() const;
  void _internal_set_curenum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 killNum = 7;
  bool has_killnum() const;
  private:
  bool _internal_has_killnum() const;
  public:
  void clear_killnum();
  ::PROTOBUF_NAMESPACE_ID::uint32 killnum() const;
  void set_killnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_killnum() const;
  void _internal_set_killnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 deadNum = 8;
  bool has_deadnum() const;
  private:
  bool _internal_has_deadnum() const;
  public:
  void clear_deadnum();
  ::PROTOBUF_NAMESPACE_ID::uint32 deadnum() const;
  void set_deadnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_deadnum() const;
  void _internal_set_deadnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 backDBNum = 9;
  bool has_backdbnum() const;
  private:
  bool _internal_has_backdbnum() const;
  public:
  void clear_backdbnum();
  ::PROTOBUF_NAMESPACE_ID::uint32 backdbnum() const;
  void set_backdbnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_backdbnum() const;
  void _internal_set_backdbnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 captureDBNum = 10;
  bool has_capturedbnum() const;
  private:
  bool _internal_has_capturedbnum() const;
  public:
  void clear_capturedbnum();
  ::PROTOBUF_NAMESPACE_ID::uint32 capturedbnum() const;
  void set_capturedbnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_capturedbnum() const;
  void _internal_set_capturedbnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:battle.HoldFlagReport)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 campid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 teamid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 userid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hurtnum_;
  ::PROTOBUF_NAMESPACE_ID::uint32 curenum_;
  ::PROTOBUF_NAMESPACE_ID::uint32 killnum_;
  ::PROTOBUF_NAMESPACE_ID::uint32 deadnum_;
  ::PROTOBUF_NAMESPACE_ID::uint32 backdbnum_;
  ::PROTOBUF_NAMESPACE_ID::uint32 capturedbnum_;
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class HoldFlagCampScore :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:battle.HoldFlagCampScore) */ {
 public:
  HoldFlagCampScore();
  virtual ~HoldFlagCampScore();

  HoldFlagCampScore(const HoldFlagCampScore& from);
  HoldFlagCampScore(HoldFlagCampScore&& from) noexcept
    : HoldFlagCampScore() {
    *this = ::std::move(from);
  }

  inline HoldFlagCampScore& operator=(const HoldFlagCampScore& from) {
    CopyFrom(from);
    return *this;
  }
  inline HoldFlagCampScore& operator=(HoldFlagCampScore&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HoldFlagCampScore& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HoldFlagCampScore* internal_default_instance() {
    return reinterpret_cast<const HoldFlagCampScore*>(
               &_HoldFlagCampScore_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(HoldFlagCampScore& a, HoldFlagCampScore& b) {
    a.Swap(&b);
  }
  inline void Swap(HoldFlagCampScore* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HoldFlagCampScore* New() const final {
    return CreateMaybeMessage<HoldFlagCampScore>(nullptr);
  }

  HoldFlagCampScore* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HoldFlagCampScore>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HoldFlagCampScore& from);
  void MergeFrom(const HoldFlagCampScore& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HoldFlagCampScore* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "battle.HoldFlagCampScore";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_battle_2eproto);
    return ::descriptor_table_battle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCampIdFieldNumber = 1,
    kScoreFieldNumber = 2,
  };
  // optional uint32 campId = 1;
  bool has_campid() const;
  private:
  bool _internal_has_campid() const;
  public:
  void clear_campid();
  ::PROTOBUF_NAMESPACE_ID::uint32 campid() const;
  void set_campid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_campid() const;
  void _internal_set_campid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 score = 2;
  bool has_score() const;
  private:
  bool _internal_has_score() const;
  public:
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::uint32 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:battle.HoldFlagCampScore)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 campid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 score_;
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class HoldFlagDBState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:battle.HoldFlagDBState) */ {
 public:
  HoldFlagDBState();
  virtual ~HoldFlagDBState();

  HoldFlagDBState(const HoldFlagDBState& from);
  HoldFlagDBState(HoldFlagDBState&& from) noexcept
    : HoldFlagDBState() {
    *this = ::std::move(from);
  }

  inline HoldFlagDBState& operator=(const HoldFlagDBState& from) {
    CopyFrom(from);
    return *this;
  }
  inline HoldFlagDBState& operator=(HoldFlagDBState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HoldFlagDBState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HoldFlagDBState* internal_default_instance() {
    return reinterpret_cast<const HoldFlagDBState*>(
               &_HoldFlagDBState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(HoldFlagDBState& a, HoldFlagDBState& b) {
    a.Swap(&b);
  }
  inline void Swap(HoldFlagDBState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HoldFlagDBState* New() const final {
    return CreateMaybeMessage<HoldFlagDBState>(nullptr);
  }

  HoldFlagDBState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HoldFlagDBState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HoldFlagDBState& from);
  void MergeFrom(const HoldFlagDBState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HoldFlagDBState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "battle.HoldFlagDBState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_battle_2eproto);
    return ::descriptor_table_battle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTempIdFieldNumber = 1,
    kCampIdFieldNumber = 2,
    kDBStateFieldNumber = 3,
    kIsInBaseFieldNumber = 5,
    kCapUserIdFieldNumber = 4,
  };
  // optional uint64 tempId = 1;
  bool has_tempid() const;
  private:
  bool _internal_has_tempid() const;
  public:
  void clear_tempid();
  ::PROTOBUF_NAMESPACE_ID::uint64 tempid() const;
  void set_tempid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tempid() const;
  void _internal_set_tempid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 campId = 2;
  bool has_campid() const;
  private:
  bool _internal_has_campid() const;
  public:
  void clear_campid();
  ::PROTOBUF_NAMESPACE_ID::uint32 campid() const;
  void set_campid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_campid() const;
  void _internal_set_campid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool DBState = 3;
  bool has_dbstate() const;
  private:
  bool _internal_has_dbstate() const;
  public:
  void clear_dbstate();
  bool dbstate() const;
  void set_dbstate(bool value);
  private:
  bool _internal_dbstate() const;
  void _internal_set_dbstate(bool value);
  public:

  // optional bool isInBase = 5;
  bool has_isinbase() const;
  private:
  bool _internal_has_isinbase() const;
  public:
  void clear_isinbase();
  bool isinbase() const;
  void set_isinbase(bool value);
  private:
  bool _internal_isinbase() const;
  void _internal_set_isinbase(bool value);
  public:

  // optional uint64 capUserId = 4;
  bool has_capuserid() const;
  private:
  bool _internal_has_capuserid() const;
  public:
  void clear_capuserid();
  ::PROTOBUF_NAMESPACE_ID::uint64 capuserid() const;
  void set_capuserid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_capuserid() const;
  void _internal_set_capuserid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:battle.HoldFlagDBState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tempid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 campid_;
  bool dbstate_;
  bool isinbase_;
  ::PROTOBUF_NAMESPACE_ID::uint64 capuserid_;
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class MSG_RetHoldFlagTeamScore_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:battle.MSG_RetHoldFlagTeamScore_SC) */ {
 public:
  MSG_RetHoldFlagTeamScore_SC();
  virtual ~MSG_RetHoldFlagTeamScore_SC();

  MSG_RetHoldFlagTeamScore_SC(const MSG_RetHoldFlagTeamScore_SC& from);
  MSG_RetHoldFlagTeamScore_SC(MSG_RetHoldFlagTeamScore_SC&& from) noexcept
    : MSG_RetHoldFlagTeamScore_SC() {
    *this = ::std::move(from);
  }

  inline MSG_RetHoldFlagTeamScore_SC& operator=(const MSG_RetHoldFlagTeamScore_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_RetHoldFlagTeamScore_SC& operator=(MSG_RetHoldFlagTeamScore_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_RetHoldFlagTeamScore_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_RetHoldFlagTeamScore_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_RetHoldFlagTeamScore_SC*>(
               &_MSG_RetHoldFlagTeamScore_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(MSG_RetHoldFlagTeamScore_SC& a, MSG_RetHoldFlagTeamScore_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_RetHoldFlagTeamScore_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_RetHoldFlagTeamScore_SC* New() const final {
    return CreateMaybeMessage<MSG_RetHoldFlagTeamScore_SC>(nullptr);
  }

  MSG_RetHoldFlagTeamScore_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_RetHoldFlagTeamScore_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_RetHoldFlagTeamScore_SC& from);
  void MergeFrom(const MSG_RetHoldFlagTeamScore_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_RetHoldFlagTeamScore_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "battle.MSG_RetHoldFlagTeamScore_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_battle_2eproto);
    return ::descriptor_table_battle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCampScoreFieldNumber = 1,
  };
  // repeated .battle.HoldFlagCampScore campScore = 1;
  int campscore_size() const;
  private:
  int _internal_campscore_size() const;
  public:
  void clear_campscore();
  ::battle::HoldFlagCampScore* mutable_campscore(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::battle::HoldFlagCampScore >*
      mutable_campscore();
  private:
  const ::battle::HoldFlagCampScore& _internal_campscore(int index) const;
  ::battle::HoldFlagCampScore* _internal_add_campscore();
  public:
  const ::battle::HoldFlagCampScore& campscore(int index) const;
  ::battle::HoldFlagCampScore* add_campscore();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::battle::HoldFlagCampScore >&
      campscore() const;

  // @@protoc_insertion_point(class_scope:battle.MSG_RetHoldFlagTeamScore_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::battle::HoldFlagCampScore > campscore_;
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class MSG_RetHoldFlagDBState_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:battle.MSG_RetHoldFlagDBState_SC) */ {
 public:
  MSG_RetHoldFlagDBState_SC();
  virtual ~MSG_RetHoldFlagDBState_SC();

  MSG_RetHoldFlagDBState_SC(const MSG_RetHoldFlagDBState_SC& from);
  MSG_RetHoldFlagDBState_SC(MSG_RetHoldFlagDBState_SC&& from) noexcept
    : MSG_RetHoldFlagDBState_SC() {
    *this = ::std::move(from);
  }

  inline MSG_RetHoldFlagDBState_SC& operator=(const MSG_RetHoldFlagDBState_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_RetHoldFlagDBState_SC& operator=(MSG_RetHoldFlagDBState_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_RetHoldFlagDBState_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_RetHoldFlagDBState_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_RetHoldFlagDBState_SC*>(
               &_MSG_RetHoldFlagDBState_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(MSG_RetHoldFlagDBState_SC& a, MSG_RetHoldFlagDBState_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_RetHoldFlagDBState_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_RetHoldFlagDBState_SC* New() const final {
    return CreateMaybeMessage<MSG_RetHoldFlagDBState_SC>(nullptr);
  }

  MSG_RetHoldFlagDBState_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_RetHoldFlagDBState_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_RetHoldFlagDBState_SC& from);
  void MergeFrom(const MSG_RetHoldFlagDBState_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_RetHoldFlagDBState_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "battle.MSG_RetHoldFlagDBState_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_battle_2eproto);
    return ::descriptor_table_battle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDBStatesFieldNumber = 1,
  };
  // repeated .battle.HoldFlagDBState DBStates = 1;
  int dbstates_size() const;
  private:
  int _internal_dbstates_size() const;
  public:
  void clear_dbstates();
  ::battle::HoldFlagDBState* mutable_dbstates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::battle::HoldFlagDBState >*
      mutable_dbstates();
  private:
  const ::battle::HoldFlagDBState& _internal_dbstates(int index) const;
  ::battle::HoldFlagDBState* _internal_add_dbstates();
  public:
  const ::battle::HoldFlagDBState& dbstates(int index) const;
  ::battle::HoldFlagDBState* add_dbstates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::battle::HoldFlagDBState >&
      dbstates() const;

  // @@protoc_insertion_point(class_scope:battle.MSG_RetHoldFlagDBState_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::battle::HoldFlagDBState > dbstates_;
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class MSG_ReqHoldFlagReport_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:battle.MSG_ReqHoldFlagReport_CS) */ {
 public:
  MSG_ReqHoldFlagReport_CS();
  virtual ~MSG_ReqHoldFlagReport_CS();

  MSG_ReqHoldFlagReport_CS(const MSG_ReqHoldFlagReport_CS& from);
  MSG_ReqHoldFlagReport_CS(MSG_ReqHoldFlagReport_CS&& from) noexcept
    : MSG_ReqHoldFlagReport_CS() {
    *this = ::std::move(from);
  }

  inline MSG_ReqHoldFlagReport_CS& operator=(const MSG_ReqHoldFlagReport_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_ReqHoldFlagReport_CS& operator=(MSG_ReqHoldFlagReport_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_ReqHoldFlagReport_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_ReqHoldFlagReport_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_ReqHoldFlagReport_CS*>(
               &_MSG_ReqHoldFlagReport_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(MSG_ReqHoldFlagReport_CS& a, MSG_ReqHoldFlagReport_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_ReqHoldFlagReport_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_ReqHoldFlagReport_CS* New() const final {
    return CreateMaybeMessage<MSG_ReqHoldFlagReport_CS>(nullptr);
  }

  MSG_ReqHoldFlagReport_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_ReqHoldFlagReport_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_ReqHoldFlagReport_CS& from);
  void MergeFrom(const MSG_ReqHoldFlagReport_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_ReqHoldFlagReport_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "battle.MSG_ReqHoldFlagReport_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_battle_2eproto);
    return ::descriptor_table_battle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:battle.MSG_ReqHoldFlagReport_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class MSG_ReqHoldFlagCaptureDB_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:battle.MSG_ReqHoldFlagCaptureDB_CS) */ {
 public:
  MSG_ReqHoldFlagCaptureDB_CS();
  virtual ~MSG_ReqHoldFlagCaptureDB_CS();

  MSG_ReqHoldFlagCaptureDB_CS(const MSG_ReqHoldFlagCaptureDB_CS& from);
  MSG_ReqHoldFlagCaptureDB_CS(MSG_ReqHoldFlagCaptureDB_CS&& from) noexcept
    : MSG_ReqHoldFlagCaptureDB_CS() {
    *this = ::std::move(from);
  }

  inline MSG_ReqHoldFlagCaptureDB_CS& operator=(const MSG_ReqHoldFlagCaptureDB_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_ReqHoldFlagCaptureDB_CS& operator=(MSG_ReqHoldFlagCaptureDB_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_ReqHoldFlagCaptureDB_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_ReqHoldFlagCaptureDB_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_ReqHoldFlagCaptureDB_CS*>(
               &_MSG_ReqHoldFlagCaptureDB_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(MSG_ReqHoldFlagCaptureDB_CS& a, MSG_ReqHoldFlagCaptureDB_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_ReqHoldFlagCaptureDB_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_ReqHoldFlagCaptureDB_CS* New() const final {
    return CreateMaybeMessage<MSG_ReqHoldFlagCaptureDB_CS>(nullptr);
  }

  MSG_ReqHoldFlagCaptureDB_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_ReqHoldFlagCaptureDB_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_ReqHoldFlagCaptureDB_CS& from);
  void MergeFrom(const MSG_ReqHoldFlagCaptureDB_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_ReqHoldFlagCaptureDB_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "battle.MSG_ReqHoldFlagCaptureDB_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_battle_2eproto);
    return ::descriptor_table_battle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNpcidFieldNumber = 1,
  };
  // optional uint64 npcid = 1;
  bool has_npcid() const;
  private:
  bool _internal_has_npcid() const;
  public:
  void clear_npcid();
  ::PROTOBUF_NAMESPACE_ID::uint64 npcid() const;
  void set_npcid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_npcid() const;
  void _internal_set_npcid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:battle.MSG_ReqHoldFlagCaptureDB_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 npcid_;
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class MSG_ReqHoldFlagPutDownDB_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:battle.MSG_ReqHoldFlagPutDownDB_CS) */ {
 public:
  MSG_ReqHoldFlagPutDownDB_CS();
  virtual ~MSG_ReqHoldFlagPutDownDB_CS();

  MSG_ReqHoldFlagPutDownDB_CS(const MSG_ReqHoldFlagPutDownDB_CS& from);
  MSG_ReqHoldFlagPutDownDB_CS(MSG_ReqHoldFlagPutDownDB_CS&& from) noexcept
    : MSG_ReqHoldFlagPutDownDB_CS() {
    *this = ::std::move(from);
  }

  inline MSG_ReqHoldFlagPutDownDB_CS& operator=(const MSG_ReqHoldFlagPutDownDB_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_ReqHoldFlagPutDownDB_CS& operator=(MSG_ReqHoldFlagPutDownDB_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_ReqHoldFlagPutDownDB_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_ReqHoldFlagPutDownDB_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_ReqHoldFlagPutDownDB_CS*>(
               &_MSG_ReqHoldFlagPutDownDB_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(MSG_ReqHoldFlagPutDownDB_CS& a, MSG_ReqHoldFlagPutDownDB_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_ReqHoldFlagPutDownDB_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_ReqHoldFlagPutDownDB_CS* New() const final {
    return CreateMaybeMessage<MSG_ReqHoldFlagPutDownDB_CS>(nullptr);
  }

  MSG_ReqHoldFlagPutDownDB_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_ReqHoldFlagPutDownDB_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_ReqHoldFlagPutDownDB_CS& from);
  void MergeFrom(const MSG_ReqHoldFlagPutDownDB_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_ReqHoldFlagPutDownDB_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "battle.MSG_ReqHoldFlagPutDownDB_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_battle_2eproto);
    return ::descriptor_table_battle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:battle.MSG_ReqHoldFlagPutDownDB_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class MSG_RetHoldFlagReport_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:battle.MSG_RetHoldFlagReport_SC) */ {
 public:
  MSG_RetHoldFlagReport_SC();
  virtual ~MSG_RetHoldFlagReport_SC();

  MSG_RetHoldFlagReport_SC(const MSG_RetHoldFlagReport_SC& from);
  MSG_RetHoldFlagReport_SC(MSG_RetHoldFlagReport_SC&& from) noexcept
    : MSG_RetHoldFlagReport_SC() {
    *this = ::std::move(from);
  }

  inline MSG_RetHoldFlagReport_SC& operator=(const MSG_RetHoldFlagReport_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_RetHoldFlagReport_SC& operator=(MSG_RetHoldFlagReport_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_RetHoldFlagReport_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_RetHoldFlagReport_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_RetHoldFlagReport_SC*>(
               &_MSG_RetHoldFlagReport_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(MSG_RetHoldFlagReport_SC& a, MSG_RetHoldFlagReport_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_RetHoldFlagReport_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_RetHoldFlagReport_SC* New() const final {
    return CreateMaybeMessage<MSG_RetHoldFlagReport_SC>(nullptr);
  }

  MSG_RetHoldFlagReport_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_RetHoldFlagReport_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_RetHoldFlagReport_SC& from);
  void MergeFrom(const MSG_RetHoldFlagReport_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_RetHoldFlagReport_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "battle.MSG_RetHoldFlagReport_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_battle_2eproto);
    return ::descriptor_table_battle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReportsFieldNumber = 1,
  };
  // repeated .battle.HoldFlagReport reports = 1;
  int reports_size() const;
  private:
  int _internal_reports_size() const;
  public:
  void clear_reports();
  ::battle::HoldFlagReport* mutable_reports(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::battle::HoldFlagReport >*
      mutable_reports();
  private:
  const ::battle::HoldFlagReport& _internal_reports(int index) const;
  ::battle::HoldFlagReport* _internal_add_reports();
  public:
  const ::battle::HoldFlagReport& reports(int index) const;
  ::battle::HoldFlagReport* add_reports();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::battle::HoldFlagReport >&
      reports() const;

  // @@protoc_insertion_point(class_scope:battle.MSG_RetHoldFlagReport_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::battle::HoldFlagReport > reports_;
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class MSG_RetHoldFlagAccount_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:battle.MSG_RetHoldFlagAccount_SC) */ {
 public:
  MSG_RetHoldFlagAccount_SC();
  virtual ~MSG_RetHoldFlagAccount_SC();

  MSG_RetHoldFlagAccount_SC(const MSG_RetHoldFlagAccount_SC& from);
  MSG_RetHoldFlagAccount_SC(MSG_RetHoldFlagAccount_SC&& from) noexcept
    : MSG_RetHoldFlagAccount_SC() {
    *this = ::std::move(from);
  }

  inline MSG_RetHoldFlagAccount_SC& operator=(const MSG_RetHoldFlagAccount_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_RetHoldFlagAccount_SC& operator=(MSG_RetHoldFlagAccount_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_RetHoldFlagAccount_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_RetHoldFlagAccount_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_RetHoldFlagAccount_SC*>(
               &_MSG_RetHoldFlagAccount_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(MSG_RetHoldFlagAccount_SC& a, MSG_RetHoldFlagAccount_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_RetHoldFlagAccount_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_RetHoldFlagAccount_SC* New() const final {
    return CreateMaybeMessage<MSG_RetHoldFlagAccount_SC>(nullptr);
  }

  MSG_RetHoldFlagAccount_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_RetHoldFlagAccount_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_RetHoldFlagAccount_SC& from);
  void MergeFrom(const MSG_RetHoldFlagAccount_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_RetHoldFlagAccount_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "battle.MSG_RetHoldFlagAccount_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_battle_2eproto);
    return ::descriptor_table_battle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReportsFieldNumber = 1,
    kWinCampIdFieldNumber = 2,
  };
  // repeated .battle.HoldFlagReport reports = 1;
  int reports_size() const;
  private:
  int _internal_reports_size() const;
  public:
  void clear_reports();
  ::battle::HoldFlagReport* mutable_reports(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::battle::HoldFlagReport >*
      mutable_reports();
  private:
  const ::battle::HoldFlagReport& _internal_reports(int index) const;
  ::battle::HoldFlagReport* _internal_add_reports();
  public:
  const ::battle::HoldFlagReport& reports(int index) const;
  ::battle::HoldFlagReport* add_reports();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::battle::HoldFlagReport >&
      reports() const;

  // optional uint32 winCampId = 2;
  bool has_wincampid() const;
  private:
  bool _internal_has_wincampid() const;
  public:
  void clear_wincampid();
  ::PROTOBUF_NAMESPACE_ID::uint32 wincampid() const;
  void set_wincampid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_wincampid() const;
  void _internal_set_wincampid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:battle.MSG_RetHoldFlagAccount_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::battle::HoldFlagReport > reports_;
  ::PROTOBUF_NAMESPACE_ID::uint32 wincampid_;
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class MSG_RetHoldFlagCountDown_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:battle.MSG_RetHoldFlagCountDown_SC) */ {
 public:
  MSG_RetHoldFlagCountDown_SC();
  virtual ~MSG_RetHoldFlagCountDown_SC();

  MSG_RetHoldFlagCountDown_SC(const MSG_RetHoldFlagCountDown_SC& from);
  MSG_RetHoldFlagCountDown_SC(MSG_RetHoldFlagCountDown_SC&& from) noexcept
    : MSG_RetHoldFlagCountDown_SC() {
    *this = ::std::move(from);
  }

  inline MSG_RetHoldFlagCountDown_SC& operator=(const MSG_RetHoldFlagCountDown_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_RetHoldFlagCountDown_SC& operator=(MSG_RetHoldFlagCountDown_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_RetHoldFlagCountDown_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_RetHoldFlagCountDown_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_RetHoldFlagCountDown_SC*>(
               &_MSG_RetHoldFlagCountDown_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(MSG_RetHoldFlagCountDown_SC& a, MSG_RetHoldFlagCountDown_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_RetHoldFlagCountDown_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_RetHoldFlagCountDown_SC* New() const final {
    return CreateMaybeMessage<MSG_RetHoldFlagCountDown_SC>(nullptr);
  }

  MSG_RetHoldFlagCountDown_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_RetHoldFlagCountDown_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_RetHoldFlagCountDown_SC& from);
  void MergeFrom(const MSG_RetHoldFlagCountDown_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_RetHoldFlagCountDown_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "battle.MSG_RetHoldFlagCountDown_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_battle_2eproto);
    return ::descriptor_table_battle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStageFieldNumber = 1,
    kEndTimeStampFieldNumber = 2,
  };
  // optional .battle.HoldFlagStage stage = 1;
  bool has_stage() const;
  private:
  bool _internal_has_stage() const;
  public:
  void clear_stage();
  ::battle::HoldFlagStage stage() const;
  void set_stage(::battle::HoldFlagStage value);
  private:
  ::battle::HoldFlagStage _internal_stage() const;
  void _internal_set_stage(::battle::HoldFlagStage value);
  public:

  // optional uint32 endTimeStamp = 2;
  bool has_endtimestamp() const;
  private:
  bool _internal_has_endtimestamp() const;
  public:
  void clear_endtimestamp();
  ::PROTOBUF_NAMESPACE_ID::uint32 endtimestamp() const;
  void set_endtimestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_endtimestamp() const;
  void _internal_set_endtimestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:battle.MSG_RetHoldFlagCountDown_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int stage_;
  ::PROTOBUF_NAMESPACE_ID::uint32 endtimestamp_;
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class MSG_RetHoldFlagEvent_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:battle.MSG_RetHoldFlagEvent_SC) */ {
 public:
  MSG_RetHoldFlagEvent_SC();
  virtual ~MSG_RetHoldFlagEvent_SC();

  MSG_RetHoldFlagEvent_SC(const MSG_RetHoldFlagEvent_SC& from);
  MSG_RetHoldFlagEvent_SC(MSG_RetHoldFlagEvent_SC&& from) noexcept
    : MSG_RetHoldFlagEvent_SC() {
    *this = ::std::move(from);
  }

  inline MSG_RetHoldFlagEvent_SC& operator=(const MSG_RetHoldFlagEvent_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_RetHoldFlagEvent_SC& operator=(MSG_RetHoldFlagEvent_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_RetHoldFlagEvent_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_RetHoldFlagEvent_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_RetHoldFlagEvent_SC*>(
               &_MSG_RetHoldFlagEvent_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(MSG_RetHoldFlagEvent_SC& a, MSG_RetHoldFlagEvent_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_RetHoldFlagEvent_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_RetHoldFlagEvent_SC* New() const final {
    return CreateMaybeMessage<MSG_RetHoldFlagEvent_SC>(nullptr);
  }

  MSG_RetHoldFlagEvent_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_RetHoldFlagEvent_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_RetHoldFlagEvent_SC& from);
  void MergeFrom(const MSG_RetHoldFlagEvent_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_RetHoldFlagEvent_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "battle.MSG_RetHoldFlagEvent_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_battle_2eproto);
    return ::descriptor_table_battle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 3,
    kTipIdFieldNumber = 1,
    kCampFieldNumber = 2,
  };
  // optional string userName = 3;
  bool has_username() const;
  private:
  bool _internal_has_username() const;
  public:
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // optional uint32 tipId = 1;
  bool has_tipid() const;
  private:
  bool _internal_has_tipid() const;
  public:
  void clear_tipid();
  ::PROTOBUF_NAMESPACE_ID::uint32 tipid() const;
  void set_tipid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tipid() const;
  void _internal_set_tipid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 camp = 2;
  bool has_camp() const;
  private:
  bool _internal_has_camp() const;
  public:
  void clear_camp();
  ::PROTOBUF_NAMESPACE_ID::uint32 camp() const;
  void set_camp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_camp() const;
  void _internal_set_camp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:battle.MSG_RetHoldFlagEvent_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tipid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 camp_;
  friend struct ::TableStruct_battle_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MatchMember

// optional uint64 userid = 1;
inline bool MatchMember::_internal_has_userid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MatchMember::has_userid() const {
  return _internal_has_userid();
}
inline void MatchMember::clear_userid() {
  userid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MatchMember::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MatchMember::userid() const {
  // @@protoc_insertion_point(field_get:battle.MatchMember.userid)
  return _internal_userid();
}
inline void MatchMember::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  userid_ = value;
}
inline void MatchMember::set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:battle.MatchMember.userid)
}

// optional uint64 captain = 2;
inline bool MatchMember::_internal_has_captain() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MatchMember::has_captain() const {
  return _internal_has_captain();
}
inline void MatchMember::clear_captain() {
  captain_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MatchMember::_internal_captain() const {
  return captain_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MatchMember::captain() const {
  // @@protoc_insertion_point(field_get:battle.MatchMember.captain)
  return _internal_captain();
}
inline void MatchMember::_internal_set_captain(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  captain_ = value;
}
inline void MatchMember::set_captain(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_captain(value);
  // @@protoc_insertion_point(field_set:battle.MatchMember.captain)
}

// optional uint32 heroid = 3;
inline bool MatchMember::_internal_has_heroid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MatchMember::has_heroid() const {
  return _internal_has_heroid();
}
inline void MatchMember::clear_heroid() {
  heroid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MatchMember::_internal_heroid() const {
  return heroid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MatchMember::heroid() const {
  // @@protoc_insertion_point(field_get:battle.MatchMember.heroid)
  return _internal_heroid();
}
inline void MatchMember::_internal_set_heroid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  heroid_ = value;
}
inline void MatchMember::set_heroid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_heroid(value);
  // @@protoc_insertion_point(field_set:battle.MatchMember.heroid)
}

// optional string name = 4;
inline bool MatchMember::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MatchMember::has_name() const {
  return _internal_has_name();
}
inline void MatchMember::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MatchMember::name() const {
  // @@protoc_insertion_point(field_get:battle.MatchMember.name)
  return _internal_name();
}
inline void MatchMember::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:battle.MatchMember.name)
}
inline std::string* MatchMember::mutable_name() {
  // @@protoc_insertion_point(field_mutable:battle.MatchMember.name)
  return _internal_mutable_name();
}
inline const std::string& MatchMember::_internal_name() const {
  return name_.GetNoArena();
}
inline void MatchMember::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MatchMember::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:battle.MatchMember.name)
}
inline void MatchMember::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:battle.MatchMember.name)
}
inline void MatchMember::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:battle.MatchMember.name)
}
inline std::string* MatchMember::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MatchMember::release_name() {
  // @@protoc_insertion_point(field_release:battle.MatchMember.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MatchMember::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:battle.MatchMember.name)
}

// optional uint32 level = 5;
inline bool MatchMember::_internal_has_level() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool MatchMember::has_level() const {
  return _internal_has_level();
}
inline void MatchMember::clear_level() {
  level_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MatchMember::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MatchMember::level() const {
  // @@protoc_insertion_point(field_get:battle.MatchMember.level)
  return _internal_level();
}
inline void MatchMember::_internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  level_ = value;
}
inline void MatchMember::set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:battle.MatchMember.level)
}

// optional uint32 camp = 6;
inline bool MatchMember::_internal_has_camp() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool MatchMember::has_camp() const {
  return _internal_has_camp();
}
inline void MatchMember::clear_camp() {
  camp_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MatchMember::_internal_camp() const {
  return camp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MatchMember::camp() const {
  // @@protoc_insertion_point(field_get:battle.MatchMember.camp)
  return _internal_camp();
}
inline void MatchMember::_internal_set_camp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  camp_ = value;
}
inline void MatchMember::set_camp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_camp(value);
  // @@protoc_insertion_point(field_set:battle.MatchMember.camp)
}

// optional uint64 gid = 7;
inline bool MatchMember::_internal_has_gid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool MatchMember::has_gid() const {
  return _internal_has_gid();
}
inline void MatchMember::clear_gid() {
  gid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MatchMember::_internal_gid() const {
  return gid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MatchMember::gid() const {
  // @@protoc_insertion_point(field_get:battle.MatchMember.gid)
  return _internal_gid();
}
inline void MatchMember::_internal_set_gid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  gid_ = value;
}
inline void MatchMember::set_gid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_gid(value);
  // @@protoc_insertion_point(field_set:battle.MatchMember.gid)
}

// -------------------------------------------------------------------

// MSG_ReqBattleTimes_CS

// optional uint32 battleId = 1;
inline bool MSG_ReqBattleTimes_CS::_internal_has_battleid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_ReqBattleTimes_CS::has_battleid() const {
  return _internal_has_battleid();
}
inline void MSG_ReqBattleTimes_CS::clear_battleid() {
  battleid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_ReqBattleTimes_CS::_internal_battleid() const {
  return battleid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_ReqBattleTimes_CS::battleid() const {
  // @@protoc_insertion_point(field_get:battle.MSG_ReqBattleTimes_CS.battleId)
  return _internal_battleid();
}
inline void MSG_ReqBattleTimes_CS::_internal_set_battleid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  battleid_ = value;
}
inline void MSG_ReqBattleTimes_CS::set_battleid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_battleid(value);
  // @@protoc_insertion_point(field_set:battle.MSG_ReqBattleTimes_CS.battleId)
}

// -------------------------------------------------------------------

// MSG_RetBattleTimes_SC

// optional uint32 winBattleTimes = 1;
inline bool MSG_RetBattleTimes_SC::_internal_has_winbattletimes() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_RetBattleTimes_SC::has_winbattletimes() const {
  return _internal_has_winbattletimes();
}
inline void MSG_RetBattleTimes_SC::clear_winbattletimes() {
  winbattletimes_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetBattleTimes_SC::_internal_winbattletimes() const {
  return winbattletimes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetBattleTimes_SC::winbattletimes() const {
  // @@protoc_insertion_point(field_get:battle.MSG_RetBattleTimes_SC.winBattleTimes)
  return _internal_winbattletimes();
}
inline void MSG_RetBattleTimes_SC::_internal_set_winbattletimes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  winbattletimes_ = value;
}
inline void MSG_RetBattleTimes_SC::set_winbattletimes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_winbattletimes(value);
  // @@protoc_insertion_point(field_set:battle.MSG_RetBattleTimes_SC.winBattleTimes)
}

// -------------------------------------------------------------------

// MSG_ReqBattleMatch_CS

// optional uint32 battleId = 1;
inline bool MSG_ReqBattleMatch_CS::_internal_has_battleid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_ReqBattleMatch_CS::has_battleid() const {
  return _internal_has_battleid();
}
inline void MSG_ReqBattleMatch_CS::clear_battleid() {
  battleid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_ReqBattleMatch_CS::_internal_battleid() const {
  return battleid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_ReqBattleMatch_CS::battleid() const {
  // @@protoc_insertion_point(field_get:battle.MSG_ReqBattleMatch_CS.battleId)
  return _internal_battleid();
}
inline void MSG_ReqBattleMatch_CS::_internal_set_battleid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  battleid_ = value;
}
inline void MSG_ReqBattleMatch_CS::set_battleid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_battleid(value);
  // @@protoc_insertion_point(field_set:battle.MSG_ReqBattleMatch_CS.battleId)
}

// -------------------------------------------------------------------

// MSG_ReqBattleMatch_SC

// optional .battle.BatteMatchCode errorCode = 1;
inline bool MSG_ReqBattleMatch_SC::_internal_has_errorcode() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_ReqBattleMatch_SC::has_errorcode() const {
  return _internal_has_errorcode();
}
inline void MSG_ReqBattleMatch_SC::clear_errorcode() {
  errorcode_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::battle::BatteMatchCode MSG_ReqBattleMatch_SC::_internal_errorcode() const {
  return static_cast< ::battle::BatteMatchCode >(errorcode_);
}
inline ::battle::BatteMatchCode MSG_ReqBattleMatch_SC::errorcode() const {
  // @@protoc_insertion_point(field_get:battle.MSG_ReqBattleMatch_SC.errorCode)
  return _internal_errorcode();
}
inline void MSG_ReqBattleMatch_SC::_internal_set_errorcode(::battle::BatteMatchCode value) {
  assert(::battle::BatteMatchCode_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  errorcode_ = value;
}
inline void MSG_ReqBattleMatch_SC::set_errorcode(::battle::BatteMatchCode value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:battle.MSG_ReqBattleMatch_SC.errorCode)
}

// optional uint64 averWaitTime = 2;
inline bool MSG_ReqBattleMatch_SC::_internal_has_averwaittime() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_ReqBattleMatch_SC::has_averwaittime() const {
  return _internal_has_averwaittime();
}
inline void MSG_ReqBattleMatch_SC::clear_averwaittime() {
  averwaittime_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_ReqBattleMatch_SC::_internal_averwaittime() const {
  return averwaittime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_ReqBattleMatch_SC::averwaittime() const {
  // @@protoc_insertion_point(field_get:battle.MSG_ReqBattleMatch_SC.averWaitTime)
  return _internal_averwaittime();
}
inline void MSG_ReqBattleMatch_SC::_internal_set_averwaittime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  averwaittime_ = value;
}
inline void MSG_ReqBattleMatch_SC::set_averwaittime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_averwaittime(value);
  // @@protoc_insertion_point(field_set:battle.MSG_ReqBattleMatch_SC.averWaitTime)
}

// -------------------------------------------------------------------

// MSG_ReqBattleCancelMatch_CS

// optional uint32 battleId = 1;
inline bool MSG_ReqBattleCancelMatch_CS::_internal_has_battleid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_ReqBattleCancelMatch_CS::has_battleid() const {
  return _internal_has_battleid();
}
inline void MSG_ReqBattleCancelMatch_CS::clear_battleid() {
  battleid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_ReqBattleCancelMatch_CS::_internal_battleid() const {
  return battleid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_ReqBattleCancelMatch_CS::battleid() const {
  // @@protoc_insertion_point(field_get:battle.MSG_ReqBattleCancelMatch_CS.battleId)
  return _internal_battleid();
}
inline void MSG_ReqBattleCancelMatch_CS::_internal_set_battleid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  battleid_ = value;
}
inline void MSG_ReqBattleCancelMatch_CS::set_battleid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_battleid(value);
  // @@protoc_insertion_point(field_set:battle.MSG_ReqBattleCancelMatch_CS.battleId)
}

// -------------------------------------------------------------------

// MSG_ReqBattleCancelMatch_SC

// optional .battle.CancelBatteMatchCode errorCode = 1;
inline bool MSG_ReqBattleCancelMatch_SC::_internal_has_errorcode() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_ReqBattleCancelMatch_SC::has_errorcode() const {
  return _internal_has_errorcode();
}
inline void MSG_ReqBattleCancelMatch_SC::clear_errorcode() {
  errorcode_ = 1;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::battle::CancelBatteMatchCode MSG_ReqBattleCancelMatch_SC::_internal_errorcode() const {
  return static_cast< ::battle::CancelBatteMatchCode >(errorcode_);
}
inline ::battle::CancelBatteMatchCode MSG_ReqBattleCancelMatch_SC::errorcode() const {
  // @@protoc_insertion_point(field_get:battle.MSG_ReqBattleCancelMatch_SC.errorCode)
  return _internal_errorcode();
}
inline void MSG_ReqBattleCancelMatch_SC::_internal_set_errorcode(::battle::CancelBatteMatchCode value) {
  assert(::battle::CancelBatteMatchCode_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  errorcode_ = value;
}
inline void MSG_ReqBattleCancelMatch_SC::set_errorcode(::battle::CancelBatteMatchCode value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:battle.MSG_ReqBattleCancelMatch_SC.errorCode)
}

// -------------------------------------------------------------------

// MSG_RetMatchMember_SC

// repeated .battle.MatchMember members = 1;
inline int MSG_RetMatchMember_SC::_internal_members_size() const {
  return members_.size();
}
inline int MSG_RetMatchMember_SC::members_size() const {
  return _internal_members_size();
}
inline void MSG_RetMatchMember_SC::clear_members() {
  members_.Clear();
}
inline ::battle::MatchMember* MSG_RetMatchMember_SC::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:battle.MSG_RetMatchMember_SC.members)
  return members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::battle::MatchMember >*
MSG_RetMatchMember_SC::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:battle.MSG_RetMatchMember_SC.members)
  return &members_;
}
inline const ::battle::MatchMember& MSG_RetMatchMember_SC::_internal_members(int index) const {
  return members_.Get(index);
}
inline const ::battle::MatchMember& MSG_RetMatchMember_SC::members(int index) const {
  // @@protoc_insertion_point(field_get:battle.MSG_RetMatchMember_SC.members)
  return _internal_members(index);
}
inline ::battle::MatchMember* MSG_RetMatchMember_SC::_internal_add_members() {
  return members_.Add();
}
inline ::battle::MatchMember* MSG_RetMatchMember_SC::add_members() {
  // @@protoc_insertion_point(field_add:battle.MSG_RetMatchMember_SC.members)
  return _internal_add_members();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::battle::MatchMember >&
MSG_RetMatchMember_SC::members() const {
  // @@protoc_insertion_point(field_list:battle.MSG_RetMatchMember_SC.members)
  return members_;
}

// -------------------------------------------------------------------

// MSG_RetBattleValid_SC

// optional uint32 endTimeStamp = 1;
inline bool MSG_RetBattleValid_SC::_internal_has_endtimestamp() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_RetBattleValid_SC::has_endtimestamp() const {
  return _internal_has_endtimestamp();
}
inline void MSG_RetBattleValid_SC::clear_endtimestamp() {
  endtimestamp_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetBattleValid_SC::_internal_endtimestamp() const {
  return endtimestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetBattleValid_SC::endtimestamp() const {
  // @@protoc_insertion_point(field_get:battle.MSG_RetBattleValid_SC.endTimeStamp)
  return _internal_endtimestamp();
}
inline void MSG_RetBattleValid_SC::_internal_set_endtimestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  endtimestamp_ = value;
}
inline void MSG_RetBattleValid_SC::set_endtimestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_endtimestamp(value);
  // @@protoc_insertion_point(field_set:battle.MSG_RetBattleValid_SC.endTimeStamp)
}

// -------------------------------------------------------------------

// MSG_ReqEnterBattle_CS

// -------------------------------------------------------------------

// MSG_retEnterBattle_SC

// optional .battle.EnterBattleCode errorCode = 1;
inline bool MSG_retEnterBattle_SC::_internal_has_errorcode() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_retEnterBattle_SC::has_errorcode() const {
  return _internal_has_errorcode();
}
inline void MSG_retEnterBattle_SC::clear_errorcode() {
  errorcode_ = 1;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::battle::EnterBattleCode MSG_retEnterBattle_SC::_internal_errorcode() const {
  return static_cast< ::battle::EnterBattleCode >(errorcode_);
}
inline ::battle::EnterBattleCode MSG_retEnterBattle_SC::errorcode() const {
  // @@protoc_insertion_point(field_get:battle.MSG_retEnterBattle_SC.errorCode)
  return _internal_errorcode();
}
inline void MSG_retEnterBattle_SC::_internal_set_errorcode(::battle::EnterBattleCode value) {
  assert(::battle::EnterBattleCode_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  errorcode_ = value;
}
inline void MSG_retEnterBattle_SC::set_errorcode(::battle::EnterBattleCode value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:battle.MSG_retEnterBattle_SC.errorCode)
}

// -------------------------------------------------------------------

// MSG_ReqChangeGroupLeader_CS

// optional uint64 newCaptain = 1;
inline bool MSG_ReqChangeGroupLeader_CS::_internal_has_newcaptain() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_ReqChangeGroupLeader_CS::has_newcaptain() const {
  return _internal_has_newcaptain();
}
inline void MSG_ReqChangeGroupLeader_CS::clear_newcaptain() {
  newcaptain_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_ReqChangeGroupLeader_CS::_internal_newcaptain() const {
  return newcaptain_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_ReqChangeGroupLeader_CS::newcaptain() const {
  // @@protoc_insertion_point(field_get:battle.MSG_ReqChangeGroupLeader_CS.newCaptain)
  return _internal_newcaptain();
}
inline void MSG_ReqChangeGroupLeader_CS::_internal_set_newcaptain(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  newcaptain_ = value;
}
inline void MSG_ReqChangeGroupLeader_CS::set_newcaptain(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_newcaptain(value);
  // @@protoc_insertion_point(field_set:battle.MSG_ReqChangeGroupLeader_CS.newCaptain)
}

// -------------------------------------------------------------------

// HoldFlagReport

// optional string name = 1;
inline bool HoldFlagReport::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HoldFlagReport::has_name() const {
  return _internal_has_name();
}
inline void HoldFlagReport::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HoldFlagReport::name() const {
  // @@protoc_insertion_point(field_get:battle.HoldFlagReport.name)
  return _internal_name();
}
inline void HoldFlagReport::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:battle.HoldFlagReport.name)
}
inline std::string* HoldFlagReport::mutable_name() {
  // @@protoc_insertion_point(field_mutable:battle.HoldFlagReport.name)
  return _internal_mutable_name();
}
inline const std::string& HoldFlagReport::_internal_name() const {
  return name_.GetNoArena();
}
inline void HoldFlagReport::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void HoldFlagReport::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:battle.HoldFlagReport.name)
}
inline void HoldFlagReport::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:battle.HoldFlagReport.name)
}
inline void HoldFlagReport::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:battle.HoldFlagReport.name)
}
inline std::string* HoldFlagReport::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HoldFlagReport::release_name() {
  // @@protoc_insertion_point(field_release:battle.HoldFlagReport.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HoldFlagReport::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:battle.HoldFlagReport.name)
}

// optional uint32 campId = 2;
inline bool HoldFlagReport::_internal_has_campid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HoldFlagReport::has_campid() const {
  return _internal_has_campid();
}
inline void HoldFlagReport::clear_campid() {
  campid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HoldFlagReport::_internal_campid() const {
  return campid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HoldFlagReport::campid() const {
  // @@protoc_insertion_point(field_get:battle.HoldFlagReport.campId)
  return _internal_campid();
}
inline void HoldFlagReport::_internal_set_campid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  campid_ = value;
}
inline void HoldFlagReport::set_campid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_campid(value);
  // @@protoc_insertion_point(field_set:battle.HoldFlagReport.campId)
}

// optional uint32 teamId = 3;
inline bool HoldFlagReport::_internal_has_teamid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool HoldFlagReport::has_teamid() const {
  return _internal_has_teamid();
}
inline void HoldFlagReport::clear_teamid() {
  teamid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HoldFlagReport::_internal_teamid() const {
  return teamid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HoldFlagReport::teamid() const {
  // @@protoc_insertion_point(field_get:battle.HoldFlagReport.teamId)
  return _internal_teamid();
}
inline void HoldFlagReport::_internal_set_teamid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  teamid_ = value;
}
inline void HoldFlagReport::set_teamid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_teamid(value);
  // @@protoc_insertion_point(field_set:battle.HoldFlagReport.teamId)
}

// optional uint64 userid = 4;
inline bool HoldFlagReport::_internal_has_userid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool HoldFlagReport::has_userid() const {
  return _internal_has_userid();
}
inline void HoldFlagReport::clear_userid() {
  userid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HoldFlagReport::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HoldFlagReport::userid() const {
  // @@protoc_insertion_point(field_get:battle.HoldFlagReport.userid)
  return _internal_userid();
}
inline void HoldFlagReport::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  userid_ = value;
}
inline void HoldFlagReport::set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:battle.HoldFlagReport.userid)
}

// optional uint32 hurtNum = 5;
inline bool HoldFlagReport::_internal_has_hurtnum() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool HoldFlagReport::has_hurtnum() const {
  return _internal_has_hurtnum();
}
inline void HoldFlagReport::clear_hurtnum() {
  hurtnum_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HoldFlagReport::_internal_hurtnum() const {
  return hurtnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HoldFlagReport::hurtnum() const {
  // @@protoc_insertion_point(field_get:battle.HoldFlagReport.hurtNum)
  return _internal_hurtnum();
}
inline void HoldFlagReport::_internal_set_hurtnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  hurtnum_ = value;
}
inline void HoldFlagReport::set_hurtnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hurtnum(value);
  // @@protoc_insertion_point(field_set:battle.HoldFlagReport.hurtNum)
}

// optional uint32 cureNum = 6;
inline bool HoldFlagReport::_internal_has_curenum() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool HoldFlagReport::has_curenum() const {
  return _internal_has_curenum();
}
inline void HoldFlagReport::clear_curenum() {
  curenum_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HoldFlagReport::_internal_curenum() const {
  return curenum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HoldFlagReport::curenum() const {
  // @@protoc_insertion_point(field_get:battle.HoldFlagReport.cureNum)
  return _internal_curenum();
}
inline void HoldFlagReport::_internal_set_curenum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  curenum_ = value;
}
inline void HoldFlagReport::set_curenum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_curenum(value);
  // @@protoc_insertion_point(field_set:battle.HoldFlagReport.cureNum)
}

// optional uint32 killNum = 7;
inline bool HoldFlagReport::_internal_has_killnum() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool HoldFlagReport::has_killnum() const {
  return _internal_has_killnum();
}
inline void HoldFlagReport::clear_killnum() {
  killnum_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HoldFlagReport::_internal_killnum() const {
  return killnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HoldFlagReport::killnum() const {
  // @@protoc_insertion_point(field_get:battle.HoldFlagReport.killNum)
  return _internal_killnum();
}
inline void HoldFlagReport::_internal_set_killnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  killnum_ = value;
}
inline void HoldFlagReport::set_killnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_killnum(value);
  // @@protoc_insertion_point(field_set:battle.HoldFlagReport.killNum)
}

// optional uint32 deadNum = 8;
inline bool HoldFlagReport::_internal_has_deadnum() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool HoldFlagReport::has_deadnum() const {
  return _internal_has_deadnum();
}
inline void HoldFlagReport::clear_deadnum() {
  deadnum_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HoldFlagReport::_internal_deadnum() const {
  return deadnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HoldFlagReport::deadnum() const {
  // @@protoc_insertion_point(field_get:battle.HoldFlagReport.deadNum)
  return _internal_deadnum();
}
inline void HoldFlagReport::_internal_set_deadnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  deadnum_ = value;
}
inline void HoldFlagReport::set_deadnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_deadnum(value);
  // @@protoc_insertion_point(field_set:battle.HoldFlagReport.deadNum)
}

// optional uint32 backDBNum = 9;
inline bool HoldFlagReport::_internal_has_backdbnum() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool HoldFlagReport::has_backdbnum() const {
  return _internal_has_backdbnum();
}
inline void HoldFlagReport::clear_backdbnum() {
  backdbnum_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HoldFlagReport::_internal_backdbnum() const {
  return backdbnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HoldFlagReport::backdbnum() const {
  // @@protoc_insertion_point(field_get:battle.HoldFlagReport.backDBNum)
  return _internal_backdbnum();
}
inline void HoldFlagReport::_internal_set_backdbnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  backdbnum_ = value;
}
inline void HoldFlagReport::set_backdbnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_backdbnum(value);
  // @@protoc_insertion_point(field_set:battle.HoldFlagReport.backDBNum)
}

// optional uint32 captureDBNum = 10;
inline bool HoldFlagReport::_internal_has_capturedbnum() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool HoldFlagReport::has_capturedbnum() const {
  return _internal_has_capturedbnum();
}
inline void HoldFlagReport::clear_capturedbnum() {
  capturedbnum_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HoldFlagReport::_internal_capturedbnum() const {
  return capturedbnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HoldFlagReport::capturedbnum() const {
  // @@protoc_insertion_point(field_get:battle.HoldFlagReport.captureDBNum)
  return _internal_capturedbnum();
}
inline void HoldFlagReport::_internal_set_capturedbnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  capturedbnum_ = value;
}
inline void HoldFlagReport::set_capturedbnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_capturedbnum(value);
  // @@protoc_insertion_point(field_set:battle.HoldFlagReport.captureDBNum)
}

// -------------------------------------------------------------------

// HoldFlagCampScore

// optional uint32 campId = 1;
inline bool HoldFlagCampScore::_internal_has_campid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HoldFlagCampScore::has_campid() const {
  return _internal_has_campid();
}
inline void HoldFlagCampScore::clear_campid() {
  campid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HoldFlagCampScore::_internal_campid() const {
  return campid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HoldFlagCampScore::campid() const {
  // @@protoc_insertion_point(field_get:battle.HoldFlagCampScore.campId)
  return _internal_campid();
}
inline void HoldFlagCampScore::_internal_set_campid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  campid_ = value;
}
inline void HoldFlagCampScore::set_campid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_campid(value);
  // @@protoc_insertion_point(field_set:battle.HoldFlagCampScore.campId)
}

// optional uint32 score = 2;
inline bool HoldFlagCampScore::_internal_has_score() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HoldFlagCampScore::has_score() const {
  return _internal_has_score();
}
inline void HoldFlagCampScore::clear_score() {
  score_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HoldFlagCampScore::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HoldFlagCampScore::score() const {
  // @@protoc_insertion_point(field_get:battle.HoldFlagCampScore.score)
  return _internal_score();
}
inline void HoldFlagCampScore::_internal_set_score(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  score_ = value;
}
inline void HoldFlagCampScore::set_score(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:battle.HoldFlagCampScore.score)
}

// -------------------------------------------------------------------

// HoldFlagDBState

// optional uint64 tempId = 1;
inline bool HoldFlagDBState::_internal_has_tempid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HoldFlagDBState::has_tempid() const {
  return _internal_has_tempid();
}
inline void HoldFlagDBState::clear_tempid() {
  tempid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HoldFlagDBState::_internal_tempid() const {
  return tempid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HoldFlagDBState::tempid() const {
  // @@protoc_insertion_point(field_get:battle.HoldFlagDBState.tempId)
  return _internal_tempid();
}
inline void HoldFlagDBState::_internal_set_tempid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  tempid_ = value;
}
inline void HoldFlagDBState::set_tempid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tempid(value);
  // @@protoc_insertion_point(field_set:battle.HoldFlagDBState.tempId)
}

// optional uint32 campId = 2;
inline bool HoldFlagDBState::_internal_has_campid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HoldFlagDBState::has_campid() const {
  return _internal_has_campid();
}
inline void HoldFlagDBState::clear_campid() {
  campid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HoldFlagDBState::_internal_campid() const {
  return campid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HoldFlagDBState::campid() const {
  // @@protoc_insertion_point(field_get:battle.HoldFlagDBState.campId)
  return _internal_campid();
}
inline void HoldFlagDBState::_internal_set_campid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  campid_ = value;
}
inline void HoldFlagDBState::set_campid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_campid(value);
  // @@protoc_insertion_point(field_set:battle.HoldFlagDBState.campId)
}

// optional bool DBState = 3;
inline bool HoldFlagDBState::_internal_has_dbstate() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool HoldFlagDBState::has_dbstate() const {
  return _internal_has_dbstate();
}
inline void HoldFlagDBState::clear_dbstate() {
  dbstate_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool HoldFlagDBState::_internal_dbstate() const {
  return dbstate_;
}
inline bool HoldFlagDBState::dbstate() const {
  // @@protoc_insertion_point(field_get:battle.HoldFlagDBState.DBState)
  return _internal_dbstate();
}
inline void HoldFlagDBState::_internal_set_dbstate(bool value) {
  _has_bits_[0] |= 0x00000004u;
  dbstate_ = value;
}
inline void HoldFlagDBState::set_dbstate(bool value) {
  _internal_set_dbstate(value);
  // @@protoc_insertion_point(field_set:battle.HoldFlagDBState.DBState)
}

// optional uint64 capUserId = 4;
inline bool HoldFlagDBState::_internal_has_capuserid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool HoldFlagDBState::has_capuserid() const {
  return _internal_has_capuserid();
}
inline void HoldFlagDBState::clear_capuserid() {
  capuserid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HoldFlagDBState::_internal_capuserid() const {
  return capuserid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HoldFlagDBState::capuserid() const {
  // @@protoc_insertion_point(field_get:battle.HoldFlagDBState.capUserId)
  return _internal_capuserid();
}
inline void HoldFlagDBState::_internal_set_capuserid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  capuserid_ = value;
}
inline void HoldFlagDBState::set_capuserid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_capuserid(value);
  // @@protoc_insertion_point(field_set:battle.HoldFlagDBState.capUserId)
}

// optional bool isInBase = 5;
inline bool HoldFlagDBState::_internal_has_isinbase() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool HoldFlagDBState::has_isinbase() const {
  return _internal_has_isinbase();
}
inline void HoldFlagDBState::clear_isinbase() {
  isinbase_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool HoldFlagDBState::_internal_isinbase() const {
  return isinbase_;
}
inline bool HoldFlagDBState::isinbase() const {
  // @@protoc_insertion_point(field_get:battle.HoldFlagDBState.isInBase)
  return _internal_isinbase();
}
inline void HoldFlagDBState::_internal_set_isinbase(bool value) {
  _has_bits_[0] |= 0x00000008u;
  isinbase_ = value;
}
inline void HoldFlagDBState::set_isinbase(bool value) {
  _internal_set_isinbase(value);
  // @@protoc_insertion_point(field_set:battle.HoldFlagDBState.isInBase)
}

// -------------------------------------------------------------------

// MSG_RetHoldFlagTeamScore_SC

// repeated .battle.HoldFlagCampScore campScore = 1;
inline int MSG_RetHoldFlagTeamScore_SC::_internal_campscore_size() const {
  return campscore_.size();
}
inline int MSG_RetHoldFlagTeamScore_SC::campscore_size() const {
  return _internal_campscore_size();
}
inline void MSG_RetHoldFlagTeamScore_SC::clear_campscore() {
  campscore_.Clear();
}
inline ::battle::HoldFlagCampScore* MSG_RetHoldFlagTeamScore_SC::mutable_campscore(int index) {
  // @@protoc_insertion_point(field_mutable:battle.MSG_RetHoldFlagTeamScore_SC.campScore)
  return campscore_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::battle::HoldFlagCampScore >*
MSG_RetHoldFlagTeamScore_SC::mutable_campscore() {
  // @@protoc_insertion_point(field_mutable_list:battle.MSG_RetHoldFlagTeamScore_SC.campScore)
  return &campscore_;
}
inline const ::battle::HoldFlagCampScore& MSG_RetHoldFlagTeamScore_SC::_internal_campscore(int index) const {
  return campscore_.Get(index);
}
inline const ::battle::HoldFlagCampScore& MSG_RetHoldFlagTeamScore_SC::campscore(int index) const {
  // @@protoc_insertion_point(field_get:battle.MSG_RetHoldFlagTeamScore_SC.campScore)
  return _internal_campscore(index);
}
inline ::battle::HoldFlagCampScore* MSG_RetHoldFlagTeamScore_SC::_internal_add_campscore() {
  return campscore_.Add();
}
inline ::battle::HoldFlagCampScore* MSG_RetHoldFlagTeamScore_SC::add_campscore() {
  // @@protoc_insertion_point(field_add:battle.MSG_RetHoldFlagTeamScore_SC.campScore)
  return _internal_add_campscore();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::battle::HoldFlagCampScore >&
MSG_RetHoldFlagTeamScore_SC::campscore() const {
  // @@protoc_insertion_point(field_list:battle.MSG_RetHoldFlagTeamScore_SC.campScore)
  return campscore_;
}

// -------------------------------------------------------------------

// MSG_RetHoldFlagDBState_SC

// repeated .battle.HoldFlagDBState DBStates = 1;
inline int MSG_RetHoldFlagDBState_SC::_internal_dbstates_size() const {
  return dbstates_.size();
}
inline int MSG_RetHoldFlagDBState_SC::dbstates_size() const {
  return _internal_dbstates_size();
}
inline void MSG_RetHoldFlagDBState_SC::clear_dbstates() {
  dbstates_.Clear();
}
inline ::battle::HoldFlagDBState* MSG_RetHoldFlagDBState_SC::mutable_dbstates(int index) {
  // @@protoc_insertion_point(field_mutable:battle.MSG_RetHoldFlagDBState_SC.DBStates)
  return dbstates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::battle::HoldFlagDBState >*
MSG_RetHoldFlagDBState_SC::mutable_dbstates() {
  // @@protoc_insertion_point(field_mutable_list:battle.MSG_RetHoldFlagDBState_SC.DBStates)
  return &dbstates_;
}
inline const ::battle::HoldFlagDBState& MSG_RetHoldFlagDBState_SC::_internal_dbstates(int index) const {
  return dbstates_.Get(index);
}
inline const ::battle::HoldFlagDBState& MSG_RetHoldFlagDBState_SC::dbstates(int index) const {
  // @@protoc_insertion_point(field_get:battle.MSG_RetHoldFlagDBState_SC.DBStates)
  return _internal_dbstates(index);
}
inline ::battle::HoldFlagDBState* MSG_RetHoldFlagDBState_SC::_internal_add_dbstates() {
  return dbstates_.Add();
}
inline ::battle::HoldFlagDBState* MSG_RetHoldFlagDBState_SC::add_dbstates() {
  // @@protoc_insertion_point(field_add:battle.MSG_RetHoldFlagDBState_SC.DBStates)
  return _internal_add_dbstates();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::battle::HoldFlagDBState >&
MSG_RetHoldFlagDBState_SC::dbstates() const {
  // @@protoc_insertion_point(field_list:battle.MSG_RetHoldFlagDBState_SC.DBStates)
  return dbstates_;
}

// -------------------------------------------------------------------

// MSG_ReqHoldFlagReport_CS

// -------------------------------------------------------------------

// MSG_ReqHoldFlagCaptureDB_CS

// optional uint64 npcid = 1;
inline bool MSG_ReqHoldFlagCaptureDB_CS::_internal_has_npcid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_ReqHoldFlagCaptureDB_CS::has_npcid() const {
  return _internal_has_npcid();
}
inline void MSG_ReqHoldFlagCaptureDB_CS::clear_npcid() {
  npcid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_ReqHoldFlagCaptureDB_CS::_internal_npcid() const {
  return npcid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_ReqHoldFlagCaptureDB_CS::npcid() const {
  // @@protoc_insertion_point(field_get:battle.MSG_ReqHoldFlagCaptureDB_CS.npcid)
  return _internal_npcid();
}
inline void MSG_ReqHoldFlagCaptureDB_CS::_internal_set_npcid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  npcid_ = value;
}
inline void MSG_ReqHoldFlagCaptureDB_CS::set_npcid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_npcid(value);
  // @@protoc_insertion_point(field_set:battle.MSG_ReqHoldFlagCaptureDB_CS.npcid)
}

// -------------------------------------------------------------------

// MSG_ReqHoldFlagPutDownDB_CS

// -------------------------------------------------------------------

// MSG_RetHoldFlagReport_SC

// repeated .battle.HoldFlagReport reports = 1;
inline int MSG_RetHoldFlagReport_SC::_internal_reports_size() const {
  return reports_.size();
}
inline int MSG_RetHoldFlagReport_SC::reports_size() const {
  return _internal_reports_size();
}
inline void MSG_RetHoldFlagReport_SC::clear_reports() {
  reports_.Clear();
}
inline ::battle::HoldFlagReport* MSG_RetHoldFlagReport_SC::mutable_reports(int index) {
  // @@protoc_insertion_point(field_mutable:battle.MSG_RetHoldFlagReport_SC.reports)
  return reports_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::battle::HoldFlagReport >*
MSG_RetHoldFlagReport_SC::mutable_reports() {
  // @@protoc_insertion_point(field_mutable_list:battle.MSG_RetHoldFlagReport_SC.reports)
  return &reports_;
}
inline const ::battle::HoldFlagReport& MSG_RetHoldFlagReport_SC::_internal_reports(int index) const {
  return reports_.Get(index);
}
inline const ::battle::HoldFlagReport& MSG_RetHoldFlagReport_SC::reports(int index) const {
  // @@protoc_insertion_point(field_get:battle.MSG_RetHoldFlagReport_SC.reports)
  return _internal_reports(index);
}
inline ::battle::HoldFlagReport* MSG_RetHoldFlagReport_SC::_internal_add_reports() {
  return reports_.Add();
}
inline ::battle::HoldFlagReport* MSG_RetHoldFlagReport_SC::add_reports() {
  // @@protoc_insertion_point(field_add:battle.MSG_RetHoldFlagReport_SC.reports)
  return _internal_add_reports();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::battle::HoldFlagReport >&
MSG_RetHoldFlagReport_SC::reports() const {
  // @@protoc_insertion_point(field_list:battle.MSG_RetHoldFlagReport_SC.reports)
  return reports_;
}

// -------------------------------------------------------------------

// MSG_RetHoldFlagAccount_SC

// repeated .battle.HoldFlagReport reports = 1;
inline int MSG_RetHoldFlagAccount_SC::_internal_reports_size() const {
  return reports_.size();
}
inline int MSG_RetHoldFlagAccount_SC::reports_size() const {
  return _internal_reports_size();
}
inline void MSG_RetHoldFlagAccount_SC::clear_reports() {
  reports_.Clear();
}
inline ::battle::HoldFlagReport* MSG_RetHoldFlagAccount_SC::mutable_reports(int index) {
  // @@protoc_insertion_point(field_mutable:battle.MSG_RetHoldFlagAccount_SC.reports)
  return reports_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::battle::HoldFlagReport >*
MSG_RetHoldFlagAccount_SC::mutable_reports() {
  // @@protoc_insertion_point(field_mutable_list:battle.MSG_RetHoldFlagAccount_SC.reports)
  return &reports_;
}
inline const ::battle::HoldFlagReport& MSG_RetHoldFlagAccount_SC::_internal_reports(int index) const {
  return reports_.Get(index);
}
inline const ::battle::HoldFlagReport& MSG_RetHoldFlagAccount_SC::reports(int index) const {
  // @@protoc_insertion_point(field_get:battle.MSG_RetHoldFlagAccount_SC.reports)
  return _internal_reports(index);
}
inline ::battle::HoldFlagReport* MSG_RetHoldFlagAccount_SC::_internal_add_reports() {
  return reports_.Add();
}
inline ::battle::HoldFlagReport* MSG_RetHoldFlagAccount_SC::add_reports() {
  // @@protoc_insertion_point(field_add:battle.MSG_RetHoldFlagAccount_SC.reports)
  return _internal_add_reports();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::battle::HoldFlagReport >&
MSG_RetHoldFlagAccount_SC::reports() const {
  // @@protoc_insertion_point(field_list:battle.MSG_RetHoldFlagAccount_SC.reports)
  return reports_;
}

// optional uint32 winCampId = 2;
inline bool MSG_RetHoldFlagAccount_SC::_internal_has_wincampid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_RetHoldFlagAccount_SC::has_wincampid() const {
  return _internal_has_wincampid();
}
inline void MSG_RetHoldFlagAccount_SC::clear_wincampid() {
  wincampid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetHoldFlagAccount_SC::_internal_wincampid() const {
  return wincampid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetHoldFlagAccount_SC::wincampid() const {
  // @@protoc_insertion_point(field_get:battle.MSG_RetHoldFlagAccount_SC.winCampId)
  return _internal_wincampid();
}
inline void MSG_RetHoldFlagAccount_SC::_internal_set_wincampid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  wincampid_ = value;
}
inline void MSG_RetHoldFlagAccount_SC::set_wincampid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_wincampid(value);
  // @@protoc_insertion_point(field_set:battle.MSG_RetHoldFlagAccount_SC.winCampId)
}

// -------------------------------------------------------------------

// MSG_RetHoldFlagCountDown_SC

// optional .battle.HoldFlagStage stage = 1;
inline bool MSG_RetHoldFlagCountDown_SC::_internal_has_stage() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_RetHoldFlagCountDown_SC::has_stage() const {
  return _internal_has_stage();
}
inline void MSG_RetHoldFlagCountDown_SC::clear_stage() {
  stage_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::battle::HoldFlagStage MSG_RetHoldFlagCountDown_SC::_internal_stage() const {
  return static_cast< ::battle::HoldFlagStage >(stage_);
}
inline ::battle::HoldFlagStage MSG_RetHoldFlagCountDown_SC::stage() const {
  // @@protoc_insertion_point(field_get:battle.MSG_RetHoldFlagCountDown_SC.stage)
  return _internal_stage();
}
inline void MSG_RetHoldFlagCountDown_SC::_internal_set_stage(::battle::HoldFlagStage value) {
  assert(::battle::HoldFlagStage_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  stage_ = value;
}
inline void MSG_RetHoldFlagCountDown_SC::set_stage(::battle::HoldFlagStage value) {
  _internal_set_stage(value);
  // @@protoc_insertion_point(field_set:battle.MSG_RetHoldFlagCountDown_SC.stage)
}

// optional uint32 endTimeStamp = 2;
inline bool MSG_RetHoldFlagCountDown_SC::_internal_has_endtimestamp() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_RetHoldFlagCountDown_SC::has_endtimestamp() const {
  return _internal_has_endtimestamp();
}
inline void MSG_RetHoldFlagCountDown_SC::clear_endtimestamp() {
  endtimestamp_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetHoldFlagCountDown_SC::_internal_endtimestamp() const {
  return endtimestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetHoldFlagCountDown_SC::endtimestamp() const {
  // @@protoc_insertion_point(field_get:battle.MSG_RetHoldFlagCountDown_SC.endTimeStamp)
  return _internal_endtimestamp();
}
inline void MSG_RetHoldFlagCountDown_SC::_internal_set_endtimestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  endtimestamp_ = value;
}
inline void MSG_RetHoldFlagCountDown_SC::set_endtimestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_endtimestamp(value);
  // @@protoc_insertion_point(field_set:battle.MSG_RetHoldFlagCountDown_SC.endTimeStamp)
}

// -------------------------------------------------------------------

// MSG_RetHoldFlagEvent_SC

// optional uint32 tipId = 1;
inline bool MSG_RetHoldFlagEvent_SC::_internal_has_tipid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_RetHoldFlagEvent_SC::has_tipid() const {
  return _internal_has_tipid();
}
inline void MSG_RetHoldFlagEvent_SC::clear_tipid() {
  tipid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetHoldFlagEvent_SC::_internal_tipid() const {
  return tipid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetHoldFlagEvent_SC::tipid() const {
  // @@protoc_insertion_point(field_get:battle.MSG_RetHoldFlagEvent_SC.tipId)
  return _internal_tipid();
}
inline void MSG_RetHoldFlagEvent_SC::_internal_set_tipid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  tipid_ = value;
}
inline void MSG_RetHoldFlagEvent_SC::set_tipid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tipid(value);
  // @@protoc_insertion_point(field_set:battle.MSG_RetHoldFlagEvent_SC.tipId)
}

// optional uint32 camp = 2;
inline bool MSG_RetHoldFlagEvent_SC::_internal_has_camp() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MSG_RetHoldFlagEvent_SC::has_camp() const {
  return _internal_has_camp();
}
inline void MSG_RetHoldFlagEvent_SC::clear_camp() {
  camp_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetHoldFlagEvent_SC::_internal_camp() const {
  return camp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetHoldFlagEvent_SC::camp() const {
  // @@protoc_insertion_point(field_get:battle.MSG_RetHoldFlagEvent_SC.camp)
  return _internal_camp();
}
inline void MSG_RetHoldFlagEvent_SC::_internal_set_camp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  camp_ = value;
}
inline void MSG_RetHoldFlagEvent_SC::set_camp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_camp(value);
  // @@protoc_insertion_point(field_set:battle.MSG_RetHoldFlagEvent_SC.camp)
}

// optional string userName = 3;
inline bool MSG_RetHoldFlagEvent_SC::_internal_has_username() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_RetHoldFlagEvent_SC::has_username() const {
  return _internal_has_username();
}
inline void MSG_RetHoldFlagEvent_SC::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MSG_RetHoldFlagEvent_SC::username() const {
  // @@protoc_insertion_point(field_get:battle.MSG_RetHoldFlagEvent_SC.userName)
  return _internal_username();
}
inline void MSG_RetHoldFlagEvent_SC::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:battle.MSG_RetHoldFlagEvent_SC.userName)
}
inline std::string* MSG_RetHoldFlagEvent_SC::mutable_username() {
  // @@protoc_insertion_point(field_mutable:battle.MSG_RetHoldFlagEvent_SC.userName)
  return _internal_mutable_username();
}
inline const std::string& MSG_RetHoldFlagEvent_SC::_internal_username() const {
  return username_.GetNoArena();
}
inline void MSG_RetHoldFlagEvent_SC::_internal_set_username(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_RetHoldFlagEvent_SC::set_username(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:battle.MSG_RetHoldFlagEvent_SC.userName)
}
inline void MSG_RetHoldFlagEvent_SC::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:battle.MSG_RetHoldFlagEvent_SC.userName)
}
inline void MSG_RetHoldFlagEvent_SC::set_username(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:battle.MSG_RetHoldFlagEvent_SC.userName)
}
inline std::string* MSG_RetHoldFlagEvent_SC::_internal_mutable_username() {
  _has_bits_[0] |= 0x00000001u;
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_RetHoldFlagEvent_SC::release_username() {
  // @@protoc_insertion_point(field_release:battle.MSG_RetHoldFlagEvent_SC.userName)
  if (!_internal_has_username()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return username_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_RetHoldFlagEvent_SC::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:battle.MSG_RetHoldFlagEvent_SC.userName)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace battle

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::battle::BatteMatchCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::battle::BatteMatchCode>() {
  return ::battle::BatteMatchCode_descriptor();
}
template <> struct is_proto_enum< ::battle::CancelBatteMatchCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::battle::CancelBatteMatchCode>() {
  return ::battle::CancelBatteMatchCode_descriptor();
}
template <> struct is_proto_enum< ::battle::CreateBattleCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::battle::CreateBattleCode>() {
  return ::battle::CreateBattleCode_descriptor();
}
template <> struct is_proto_enum< ::battle::EnterBattleCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::battle::EnterBattleCode>() {
  return ::battle::EnterBattleCode_descriptor();
}
template <> struct is_proto_enum< ::battle::Camp> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::battle::Camp>() {
  return ::battle::Camp_descriptor();
}
template <> struct is_proto_enum< ::battle::HoldFlagStage> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::battle::HoldFlagStage>() {
  return ::battle::HoldFlagStage_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_battle_2eproto
