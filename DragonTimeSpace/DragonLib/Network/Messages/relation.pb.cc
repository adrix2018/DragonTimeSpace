// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: relation.proto

#include "relation.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_relation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlackItem_relation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_relation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PageItem_relation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_relation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_relation_item_relation_2eproto;
namespace relation {
class relation_itemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<relation_item> _instance;
} _relation_item_default_instance_;
class MSG_Ret_RelationList_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_RelationList_SC> _instance;
} _MSG_Ret_RelationList_SC_default_instance_;
class MSG_Ret_RefreshRelation_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_RefreshRelation_SC> _instance;
} _MSG_Ret_RefreshRelation_SC_default_instance_;
class MSG_Req_ApplyRelation_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_ApplyRelation_CS> _instance;
} _MSG_Req_ApplyRelation_CS_default_instance_;
class MSG_Req_AnswerApplyRelation_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_AnswerApplyRelation_CS> _instance;
} _MSG_Req_AnswerApplyRelation_CS_default_instance_;
class MSG_Ret_AnswerApplyRelation_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_AnswerApplyRelation_SC> _instance;
} _MSG_Ret_AnswerApplyRelation_SC_default_instance_;
class MSG_Req_DeleteRelation_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_DeleteRelation_CS> _instance;
} _MSG_Req_DeleteRelation_CS_default_instance_;
class MSG_Ret_DeleteRelation_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_DeleteRelation_SC> _instance;
} _MSG_Ret_DeleteRelation_SC_default_instance_;
class MSG_Req_OfflineInteractive_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_OfflineInteractive_CS> _instance;
} _MSG_Req_OfflineInteractive_CS_default_instance_;
class MSG_Ret_AddInteractive_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_AddInteractive_SC> _instance;
} _MSG_Ret_AddInteractive_SC_default_instance_;
class MSG_Req_SearchRelation_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_SearchRelation_CS> _instance;
} _MSG_Req_SearchRelation_CS_default_instance_;
class MSG_Ret_SearchRelation_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_SearchRelation_SC> _instance;
} _MSG_Ret_SearchRelation_SC_default_instance_;
class MSG_ModifyPageName_CSCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ModifyPageName_CSC> _instance;
} _MSG_ModifyPageName_CSC_default_instance_;
class MSG_MoveFriendToPage_CSCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_MoveFriendToPage_CSC> _instance;
} _MSG_MoveFriendToPage_CSC_default_instance_;
class PageItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PageItem> _instance;
} _PageItem_default_instance_;
class MSG_AllFriendPage_CSCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_AllFriendPage_CSC> _instance;
} _MSG_AllFriendPage_CSC_default_instance_;
class BlackItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlackItem> _instance;
} _BlackItem_default_instance_;
class MSG_BlackList_CSCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_BlackList_CSC> _instance;
} _MSG_BlackList_CSC_default_instance_;
class MSG_OperateBlackList_CSCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_OperateBlackList_CSC> _instance;
} _MSG_OperateBlackList_CSC_default_instance_;
class MSG_ChangeNickName_CSCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ChangeNickName_CSC> _instance;
} _MSG_ChangeNickName_CSC_default_instance_;
}  // namespace relation
static void InitDefaultsscc_info_BlackItem_relation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::relation::_BlackItem_default_instance_;
    new (ptr) ::relation::BlackItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::relation::BlackItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlackItem_relation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BlackItem_relation_2eproto}, {}};

static void InitDefaultsscc_info_MSG_AllFriendPage_CSC_relation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::relation::_MSG_AllFriendPage_CSC_default_instance_;
    new (ptr) ::relation::MSG_AllFriendPage_CSC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::relation::MSG_AllFriendPage_CSC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_AllFriendPage_CSC_relation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_AllFriendPage_CSC_relation_2eproto}, {
      &scc_info_PageItem_relation_2eproto.base,}};

static void InitDefaultsscc_info_MSG_BlackList_CSC_relation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::relation::_MSG_BlackList_CSC_default_instance_;
    new (ptr) ::relation::MSG_BlackList_CSC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::relation::MSG_BlackList_CSC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_BlackList_CSC_relation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_BlackList_CSC_relation_2eproto}, {
      &scc_info_BlackItem_relation_2eproto.base,}};

static void InitDefaultsscc_info_MSG_ChangeNickName_CSC_relation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::relation::_MSG_ChangeNickName_CSC_default_instance_;
    new (ptr) ::relation::MSG_ChangeNickName_CSC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::relation::MSG_ChangeNickName_CSC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ChangeNickName_CSC_relation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ChangeNickName_CSC_relation_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ModifyPageName_CSC_relation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::relation::_MSG_ModifyPageName_CSC_default_instance_;
    new (ptr) ::relation::MSG_ModifyPageName_CSC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::relation::MSG_ModifyPageName_CSC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ModifyPageName_CSC_relation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ModifyPageName_CSC_relation_2eproto}, {}};

static void InitDefaultsscc_info_MSG_MoveFriendToPage_CSC_relation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::relation::_MSG_MoveFriendToPage_CSC_default_instance_;
    new (ptr) ::relation::MSG_MoveFriendToPage_CSC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::relation::MSG_MoveFriendToPage_CSC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_MoveFriendToPage_CSC_relation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_MoveFriendToPage_CSC_relation_2eproto}, {}};

static void InitDefaultsscc_info_MSG_OperateBlackList_CSC_relation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::relation::_MSG_OperateBlackList_CSC_default_instance_;
    new (ptr) ::relation::MSG_OperateBlackList_CSC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::relation::MSG_OperateBlackList_CSC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_OperateBlackList_CSC_relation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_OperateBlackList_CSC_relation_2eproto}, {
      &scc_info_BlackItem_relation_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Req_AnswerApplyRelation_CS_relation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::relation::_MSG_Req_AnswerApplyRelation_CS_default_instance_;
    new (ptr) ::relation::MSG_Req_AnswerApplyRelation_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::relation::MSG_Req_AnswerApplyRelation_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_AnswerApplyRelation_CS_relation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_AnswerApplyRelation_CS_relation_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_ApplyRelation_CS_relation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::relation::_MSG_Req_ApplyRelation_CS_default_instance_;
    new (ptr) ::relation::MSG_Req_ApplyRelation_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::relation::MSG_Req_ApplyRelation_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_ApplyRelation_CS_relation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_ApplyRelation_CS_relation_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_DeleteRelation_CS_relation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::relation::_MSG_Req_DeleteRelation_CS_default_instance_;
    new (ptr) ::relation::MSG_Req_DeleteRelation_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::relation::MSG_Req_DeleteRelation_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_DeleteRelation_CS_relation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_DeleteRelation_CS_relation_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_OfflineInteractive_CS_relation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::relation::_MSG_Req_OfflineInteractive_CS_default_instance_;
    new (ptr) ::relation::MSG_Req_OfflineInteractive_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::relation::MSG_Req_OfflineInteractive_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_OfflineInteractive_CS_relation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_OfflineInteractive_CS_relation_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_SearchRelation_CS_relation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::relation::_MSG_Req_SearchRelation_CS_default_instance_;
    new (ptr) ::relation::MSG_Req_SearchRelation_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::relation::MSG_Req_SearchRelation_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_SearchRelation_CS_relation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_SearchRelation_CS_relation_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_AddInteractive_SC_relation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::relation::_MSG_Ret_AddInteractive_SC_default_instance_;
    new (ptr) ::relation::MSG_Ret_AddInteractive_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::relation::MSG_Ret_AddInteractive_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Ret_AddInteractive_SC_relation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Ret_AddInteractive_SC_relation_2eproto}, {
      &scc_info_relation_item_relation_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Ret_AnswerApplyRelation_SC_relation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::relation::_MSG_Ret_AnswerApplyRelation_SC_default_instance_;
    new (ptr) ::relation::MSG_Ret_AnswerApplyRelation_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::relation::MSG_Ret_AnswerApplyRelation_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_AnswerApplyRelation_SC_relation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_AnswerApplyRelation_SC_relation_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_DeleteRelation_SC_relation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::relation::_MSG_Ret_DeleteRelation_SC_default_instance_;
    new (ptr) ::relation::MSG_Ret_DeleteRelation_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::relation::MSG_Ret_DeleteRelation_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_DeleteRelation_SC_relation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_DeleteRelation_SC_relation_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_RefreshRelation_SC_relation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::relation::_MSG_Ret_RefreshRelation_SC_default_instance_;
    new (ptr) ::relation::MSG_Ret_RefreshRelation_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::relation::MSG_Ret_RefreshRelation_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Ret_RefreshRelation_SC_relation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Ret_RefreshRelation_SC_relation_2eproto}, {
      &scc_info_relation_item_relation_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Ret_RelationList_SC_relation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::relation::_MSG_Ret_RelationList_SC_default_instance_;
    new (ptr) ::relation::MSG_Ret_RelationList_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::relation::MSG_Ret_RelationList_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Ret_RelationList_SC_relation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Ret_RelationList_SC_relation_2eproto}, {
      &scc_info_relation_item_relation_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Ret_SearchRelation_SC_relation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::relation::_MSG_Ret_SearchRelation_SC_default_instance_;
    new (ptr) ::relation::MSG_Ret_SearchRelation_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::relation::MSG_Ret_SearchRelation_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Ret_SearchRelation_SC_relation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Ret_SearchRelation_SC_relation_2eproto}, {
      &scc_info_relation_item_relation_2eproto.base,}};

static void InitDefaultsscc_info_PageItem_relation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::relation::_PageItem_default_instance_;
    new (ptr) ::relation::PageItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::relation::PageItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PageItem_relation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PageItem_relation_2eproto}, {}};

static void InitDefaultsscc_info_relation_item_relation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::relation::_relation_item_default_instance_;
    new (ptr) ::relation::relation_item();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::relation::relation_item::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_relation_item_relation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_relation_item_relation_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_relation_2eproto[20];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_relation_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_relation_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_relation_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::relation::relation_item, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::relation::relation_item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::relation::relation_item, relationid_),
  PROTOBUF_FIELD_OFFSET(::relation::relation_item, relationname_),
  PROTOBUF_FIELD_OFFSET(::relation::relation_item, level_),
  PROTOBUF_FIELD_OFFSET(::relation::relation_item, career_),
  PROTOBUF_FIELD_OFFSET(::relation::relation_item, type_),
  PROTOBUF_FIELD_OFFSET(::relation::relation_item, status_),
  PROTOBUF_FIELD_OFFSET(::relation::relation_item, love_degree_),
  PROTOBUF_FIELD_OFFSET(::relation::relation_item, lastchattime_),
  PROTOBUF_FIELD_OFFSET(::relation::relation_item, page_),
  PROTOBUF_FIELD_OFFSET(::relation::relation_item, nickname_),
  PROTOBUF_FIELD_OFFSET(::relation::relation_item, offlinetime_),
  PROTOBUF_FIELD_OFFSET(::relation::relation_item, headpic_),
  PROTOBUF_FIELD_OFFSET(::relation::relation_item, viplevel_),
  PROTOBUF_FIELD_OFFSET(::relation::relation_item, power_),
  PROTOBUF_FIELD_OFFSET(::relation::relation_item, friendrate_),
  PROTOBUF_FIELD_OFFSET(::relation::relation_item, createtime_),
  3,
  0,
  4,
  5,
  6,
  7,
  8,
  9,
  1,
  2,
  10,
  11,
  12,
  13,
  14,
  15,
  PROTOBUF_FIELD_OFFSET(::relation::MSG_Ret_RelationList_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::relation::MSG_Ret_RelationList_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::relation::MSG_Ret_RelationList_SC, relations_),
  PROTOBUF_FIELD_OFFSET(::relation::MSG_Ret_RelationList_SC, type_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::relation::MSG_Ret_RefreshRelation_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::relation::MSG_Ret_RefreshRelation_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::relation::MSG_Ret_RefreshRelation_SC, data_),
  0,
  PROTOBUF_FIELD_OFFSET(::relation::MSG_Req_ApplyRelation_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::relation::MSG_Req_ApplyRelation_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::relation::MSG_Req_ApplyRelation_CS, relationid_),
  0,
  PROTOBUF_FIELD_OFFSET(::relation::MSG_Req_AnswerApplyRelation_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::relation::MSG_Req_AnswerApplyRelation_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::relation::MSG_Req_AnswerApplyRelation_CS, relationid_),
  PROTOBUF_FIELD_OFFSET(::relation::MSG_Req_AnswerApplyRelation_CS, type_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::relation::MSG_Ret_AnswerApplyRelation_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::relation::MSG_Ret_AnswerApplyRelation_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::relation::MSG_Ret_AnswerApplyRelation_SC, relationid_),
  PROTOBUF_FIELD_OFFSET(::relation::MSG_Ret_AnswerApplyRelation_SC, issucc_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::relation::MSG_Req_DeleteRelation_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::relation::MSG_Req_DeleteRelation_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::relation::MSG_Req_DeleteRelation_CS, relationid_),
  0,
  PROTOBUF_FIELD_OFFSET(::relation::MSG_Ret_DeleteRelation_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::relation::MSG_Ret_DeleteRelation_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::relation::MSG_Ret_DeleteRelation_SC, relationid_),
  PROTOBUF_FIELD_OFFSET(::relation::MSG_Ret_DeleteRelation_SC, issucc_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::relation::MSG_Req_OfflineInteractive_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::relation::MSG_Req_OfflineInteractive_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::relation::MSG_Ret_AddInteractive_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::relation::MSG_Ret_AddInteractive_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::relation::MSG_Ret_AddInteractive_SC, data_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::relation::MSG_Req_SearchRelation_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::relation::MSG_Req_SearchRelation_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::relation::MSG_Req_SearchRelation_CS, condition_),
  0,
  PROTOBUF_FIELD_OFFSET(::relation::MSG_Ret_SearchRelation_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::relation::MSG_Ret_SearchRelation_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::relation::MSG_Ret_SearchRelation_SC, relation_),
  0,
  PROTOBUF_FIELD_OFFSET(::relation::MSG_ModifyPageName_CSC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::relation::MSG_ModifyPageName_CSC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::relation::MSG_ModifyPageName_CSC, page_),
  PROTOBUF_FIELD_OFFSET(::relation::MSG_ModifyPageName_CSC, new_page_),
  PROTOBUF_FIELD_OFFSET(::relation::MSG_ModifyPageName_CSC, opcode_),
  PROTOBUF_FIELD_OFFSET(::relation::MSG_ModifyPageName_CSC, success_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::relation::MSG_MoveFriendToPage_CSC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::relation::MSG_MoveFriendToPage_CSC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::relation::MSG_MoveFriendToPage_CSC, charid_),
  PROTOBUF_FIELD_OFFSET(::relation::MSG_MoveFriendToPage_CSC, page_),
  PROTOBUF_FIELD_OFFSET(::relation::MSG_MoveFriendToPage_CSC, success_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::relation::PageItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::relation::PageItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::relation::PageItem, page_name_),
  PROTOBUF_FIELD_OFFSET(::relation::PageItem, createtime_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::relation::MSG_AllFriendPage_CSC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::relation::MSG_AllFriendPage_CSC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::relation::MSG_AllFriendPage_CSC, pages_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::relation::BlackItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::relation::BlackItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::relation::BlackItem, charid_),
  PROTOBUF_FIELD_OFFSET(::relation::BlackItem, name_),
  PROTOBUF_FIELD_OFFSET(::relation::BlackItem, level_),
  PROTOBUF_FIELD_OFFSET(::relation::BlackItem, viplevel_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::relation::MSG_BlackList_CSC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::relation::MSG_BlackList_CSC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::relation::MSG_BlackList_CSC, blacklist_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::relation::MSG_OperateBlackList_CSC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::relation::MSG_OperateBlackList_CSC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::relation::MSG_OperateBlackList_CSC, charid_),
  PROTOBUF_FIELD_OFFSET(::relation::MSG_OperateBlackList_CSC, opcode_),
  PROTOBUF_FIELD_OFFSET(::relation::MSG_OperateBlackList_CSC, data_),
  PROTOBUF_FIELD_OFFSET(::relation::MSG_OperateBlackList_CSC, success_),
  1,
  2,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::relation::MSG_ChangeNickName_CSC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::relation::MSG_ChangeNickName_CSC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::relation::MSG_ChangeNickName_CSC, charid_),
  PROTOBUF_FIELD_OFFSET(::relation::MSG_ChangeNickName_CSC, nickname_),
  PROTOBUF_FIELD_OFFSET(::relation::MSG_ChangeNickName_CSC, success_),
  1,
  0,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 21, sizeof(::relation::relation_item)},
  { 37, 44, sizeof(::relation::MSG_Ret_RelationList_SC)},
  { 46, 52, sizeof(::relation::MSG_Ret_RefreshRelation_SC)},
  { 53, 59, sizeof(::relation::MSG_Req_ApplyRelation_CS)},
  { 60, 67, sizeof(::relation::MSG_Req_AnswerApplyRelation_CS)},
  { 69, 76, sizeof(::relation::MSG_Ret_AnswerApplyRelation_SC)},
  { 78, 84, sizeof(::relation::MSG_Req_DeleteRelation_CS)},
  { 85, 92, sizeof(::relation::MSG_Ret_DeleteRelation_SC)},
  { 94, 99, sizeof(::relation::MSG_Req_OfflineInteractive_CS)},
  { 99, 105, sizeof(::relation::MSG_Ret_AddInteractive_SC)},
  { 106, 112, sizeof(::relation::MSG_Req_SearchRelation_CS)},
  { 113, 119, sizeof(::relation::MSG_Ret_SearchRelation_SC)},
  { 120, 129, sizeof(::relation::MSG_ModifyPageName_CSC)},
  { 133, 141, sizeof(::relation::MSG_MoveFriendToPage_CSC)},
  { 144, 151, sizeof(::relation::PageItem)},
  { 153, 159, sizeof(::relation::MSG_AllFriendPage_CSC)},
  { 160, 169, sizeof(::relation::BlackItem)},
  { 173, 179, sizeof(::relation::MSG_BlackList_CSC)},
  { 180, 189, sizeof(::relation::MSG_OperateBlackList_CSC)},
  { 193, 201, sizeof(::relation::MSG_ChangeNickName_CSC)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::relation::_relation_item_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::relation::_MSG_Ret_RelationList_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::relation::_MSG_Ret_RefreshRelation_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::relation::_MSG_Req_ApplyRelation_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::relation::_MSG_Req_AnswerApplyRelation_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::relation::_MSG_Ret_AnswerApplyRelation_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::relation::_MSG_Req_DeleteRelation_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::relation::_MSG_Ret_DeleteRelation_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::relation::_MSG_Req_OfflineInteractive_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::relation::_MSG_Ret_AddInteractive_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::relation::_MSG_Req_SearchRelation_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::relation::_MSG_Ret_SearchRelation_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::relation::_MSG_ModifyPageName_CSC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::relation::_MSG_MoveFriendToPage_CSC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::relation::_PageItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::relation::_MSG_AllFriendPage_CSC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::relation::_BlackItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::relation::_MSG_BlackList_CSC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::relation::_MSG_OperateBlackList_CSC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::relation::_MSG_ChangeNickName_CSC_default_instance_),
};

const char descriptor_table_protodef_relation_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016relation.proto\022\010relation\"\260\002\n\rrelation_"
  "item\022\022\n\nrelationid\030\001 \001(\004\022\024\n\014relationname"
  "\030\002 \001(\t\022\r\n\005level\030\003 \001(\r\022\016\n\006career\030\004 \001(\r\022\014\n"
  "\004type\030\005 \001(\r\022\016\n\006status\030\006 \001(\r\022\023\n\013love_degr"
  "ee\030\007 \001(\r\022\024\n\014lastchattime\030\010 \001(\r\022\014\n\004page\030\t"
  " \001(\t\022\020\n\010nickName\030\n \001(\t\022\023\n\013offlineTime\030\013 "
  "\001(\r\022\017\n\007headPic\030\014 \001(\r\022\020\n\010viplevel\030\r \001(\r\022\r"
  "\n\005power\030\016 \001(\r\022\022\n\nfriendrate\030\017 \001(\r\022\022\n\ncre"
  "ateTime\030\020 \001(\r\"S\n\027MSG_Ret_RelationList_SC"
  "\022*\n\trelations\030\001 \003(\0132\027.relation.relation_"
  "item\022\014\n\004type\030\002 \001(\r\"C\n\032MSG_Ret_RefreshRel"
  "ation_SC\022%\n\004data\030\001 \001(\0132\027.relation.relati"
  "on_item\".\n\030MSG_Req_ApplyRelation_CS\022\022\n\nr"
  "elationid\030\001 \001(\004\"B\n\036MSG_Req_AnswerApplyRe"
  "lation_CS\022\022\n\nrelationid\030\001 \001(\004\022\014\n\004type\030\002 "
  "\001(\r\"D\n\036MSG_Ret_AnswerApplyRelation_SC\022\022\n"
  "\nrelationid\030\001 \001(\004\022\016\n\006issucc\030\002 \001(\010\"/\n\031MSG"
  "_Req_DeleteRelation_CS\022\022\n\nrelationid\030\001 \001"
  "(\004\"\?\n\031MSG_Ret_DeleteRelation_SC\022\022\n\nrelat"
  "ionid\030\001 \001(\004\022\016\n\006issucc\030\002 \001(\010\"\037\n\035MSG_Req_O"
  "fflineInteractive_CS\"B\n\031MSG_Ret_AddInter"
  "active_SC\022%\n\004data\030\001 \003(\0132\027.relation.relat"
  "ion_item\".\n\031MSG_Req_SearchRelation_CS\022\021\n"
  "\tcondition\030\001 \001(\t\"F\n\031MSG_Ret_SearchRelati"
  "on_SC\022)\n\010relation\030\001 \001(\0132\027.relation.relat"
  "ion_item\"Y\n\026MSG_ModifyPageName_CSC\022\014\n\004pa"
  "ge\030\001 \001(\t\022\020\n\010new_page\030\002 \001(\t\022\016\n\006opcode\030\003 \001"
  "(\r\022\017\n\007success\030\004 \001(\010\"I\n\030MSG_MoveFriendToP"
  "age_CSC\022\016\n\006charid\030\001 \001(\004\022\014\n\004page\030\002 \001(\t\022\017\n"
  "\007success\030\003 \001(\010\"1\n\010PageItem\022\021\n\tpage_name\030"
  "\001 \001(\t\022\022\n\ncreatetime\030\002 \001(\r\":\n\025MSG_AllFrie"
  "ndPage_CSC\022!\n\005pages\030\001 \003(\0132\022.relation.Pag"
  "eItem\"J\n\tBlackItem\022\016\n\006charid\030\001 \001(\004\022\014\n\004na"
  "me\030\002 \001(\t\022\r\n\005level\030\003 \001(\r\022\020\n\010viplevel\030\004 \001("
  "\r\";\n\021MSG_BlackList_CSC\022&\n\tblackList\030\001 \003("
  "\0132\023.relation.BlackItem\"n\n\030MSG_OperateBla"
  "ckList_CSC\022\016\n\006charid\030\001 \001(\004\022\016\n\006opcode\030\002 \001"
  "(\r\022!\n\004data\030\003 \001(\0132\023.relation.BlackItem\022\017\n"
  "\007success\030\004 \001(\010\"K\n\026MSG_ChangeNickName_CSC"
  "\022\016\n\006charid\030\001 \001(\004\022\020\n\010nickname\030\002 \001(\t\022\017\n\007su"
  "ccess\030\003 \001(\010*~\n\014RelationType\022\025\n\021RELATION_"
  "STRANGER\020\000\022\023\n\017RELATION_FRIEND\020\001\022\022\n\016RELAT"
  "ION_APPLY\020\002\022\025\n\021RELATION_BE_APPLY\020\003\022\027\n\023RE"
  "LATION_BOTH_APPLY\020\004"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_relation_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_relation_2eproto_sccs[20] = {
  &scc_info_BlackItem_relation_2eproto.base,
  &scc_info_MSG_AllFriendPage_CSC_relation_2eproto.base,
  &scc_info_MSG_BlackList_CSC_relation_2eproto.base,
  &scc_info_MSG_ChangeNickName_CSC_relation_2eproto.base,
  &scc_info_MSG_ModifyPageName_CSC_relation_2eproto.base,
  &scc_info_MSG_MoveFriendToPage_CSC_relation_2eproto.base,
  &scc_info_MSG_OperateBlackList_CSC_relation_2eproto.base,
  &scc_info_MSG_Req_AnswerApplyRelation_CS_relation_2eproto.base,
  &scc_info_MSG_Req_ApplyRelation_CS_relation_2eproto.base,
  &scc_info_MSG_Req_DeleteRelation_CS_relation_2eproto.base,
  &scc_info_MSG_Req_OfflineInteractive_CS_relation_2eproto.base,
  &scc_info_MSG_Req_SearchRelation_CS_relation_2eproto.base,
  &scc_info_MSG_Ret_AddInteractive_SC_relation_2eproto.base,
  &scc_info_MSG_Ret_AnswerApplyRelation_SC_relation_2eproto.base,
  &scc_info_MSG_Ret_DeleteRelation_SC_relation_2eproto.base,
  &scc_info_MSG_Ret_RefreshRelation_SC_relation_2eproto.base,
  &scc_info_MSG_Ret_RelationList_SC_relation_2eproto.base,
  &scc_info_MSG_Ret_SearchRelation_SC_relation_2eproto.base,
  &scc_info_PageItem_relation_2eproto.base,
  &scc_info_relation_item_relation_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_relation_2eproto_once;
static bool descriptor_table_relation_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_relation_2eproto = {
  &descriptor_table_relation_2eproto_initialized, descriptor_table_protodef_relation_2eproto, "relation.proto", 1739,
  &descriptor_table_relation_2eproto_once, descriptor_table_relation_2eproto_sccs, descriptor_table_relation_2eproto_deps, 20, 0,
  schemas, file_default_instances, TableStruct_relation_2eproto::offsets,
  file_level_metadata_relation_2eproto, 20, file_level_enum_descriptors_relation_2eproto, file_level_service_descriptors_relation_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_relation_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_relation_2eproto)), true);
namespace relation {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RelationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_relation_2eproto);
  return file_level_enum_descriptors_relation_2eproto[0];
}
bool RelationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void relation_item::InitAsDefaultInstance() {
}
class relation_item::_Internal {
 public:
  using HasBits = decltype(std::declval<relation_item>()._has_bits_);
  static void set_has_relationid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_relationname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_career(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_love_degree(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_lastchattime(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_page(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_nickname(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_offlinetime(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_headpic(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_viplevel(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_power(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_friendrate(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_createtime(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
};

relation_item::relation_item()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:relation.relation_item)
}
relation_item::relation_item(const relation_item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  relationname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_relationname()) {
    relationname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.relationname_);
  }
  page_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_page()) {
    page_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.page_);
  }
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_nickname()) {
    nickname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  ::memcpy(&relationid_, &from.relationid_,
    static_cast<size_t>(reinterpret_cast<char*>(&createtime_) -
    reinterpret_cast<char*>(&relationid_)) + sizeof(createtime_));
  // @@protoc_insertion_point(copy_constructor:relation.relation_item)
}

void relation_item::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_relation_item_relation_2eproto.base);
  relationname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  page_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&relationid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&createtime_) -
      reinterpret_cast<char*>(&relationid_)) + sizeof(createtime_));
}

relation_item::~relation_item() {
  // @@protoc_insertion_point(destructor:relation.relation_item)
  SharedDtor();
}

void relation_item::SharedDtor() {
  relationname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  page_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void relation_item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const relation_item& relation_item::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_relation_item_relation_2eproto.base);
  return *internal_default_instance();
}


void relation_item::Clear() {
// @@protoc_insertion_point(message_clear_start:relation.relation_item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      relationname_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      page_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      nickname_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&relationid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&relationid_)) + sizeof(status_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&love_degree_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&createtime_) -
        reinterpret_cast<char*>(&love_degree_)) + sizeof(createtime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* relation_item::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 relationid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_relationid(&has_bits);
          relationid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string relationname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_relationname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "relation.relation_item.relationname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 career = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_career(&has_bits);
          career_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 love_degree = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_love_degree(&has_bits);
          love_degree_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 lastchattime = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_lastchattime(&has_bits);
          lastchattime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string page = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_page();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "relation.relation_item.page");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string nickName = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_nickname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "relation.relation_item.nickName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 offlineTime = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_offlinetime(&has_bits);
          offlinetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 headPic = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_headpic(&has_bits);
          headpic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 viplevel = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_viplevel(&has_bits);
          viplevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 power = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_power(&has_bits);
          power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 friendrate = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_friendrate(&has_bits);
          friendrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 createTime = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_createtime(&has_bits);
          createtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* relation_item::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:relation.relation_item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 relationid = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_relationid(), target);
  }

  // optional string relationname = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_relationname().data(), static_cast<int>(this->_internal_relationname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "relation.relation_item.relationname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_relationname(), target);
  }

  // optional uint32 level = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_level(), target);
  }

  // optional uint32 career = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_career(), target);
  }

  // optional uint32 type = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_type(), target);
  }

  // optional uint32 status = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_status(), target);
  }

  // optional uint32 love_degree = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_love_degree(), target);
  }

  // optional uint32 lastchattime = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_lastchattime(), target);
  }

  // optional string page = 9;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_page().data(), static_cast<int>(this->_internal_page().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "relation.relation_item.page");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_page(), target);
  }

  // optional string nickName = 10;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "relation.relation_item.nickName");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_nickname(), target);
  }

  // optional uint32 offlineTime = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_offlinetime(), target);
  }

  // optional uint32 headPic = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_headpic(), target);
  }

  // optional uint32 viplevel = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_viplevel(), target);
  }

  // optional uint32 power = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_power(), target);
  }

  // optional uint32 friendrate = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_friendrate(), target);
  }

  // optional uint32 createTime = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_createtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:relation.relation_item)
  return target;
}

size_t relation_item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:relation.relation_item)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string relationname = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_relationname());
    }

    // optional string page = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_page());
    }

    // optional string nickName = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_nickname());
    }

    // optional uint64 relationid = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_relationid());
    }

    // optional uint32 level = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_level());
    }

    // optional uint32 career = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_career());
    }

    // optional uint32 type = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_type());
    }

    // optional uint32 status = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_status());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 love_degree = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_love_degree());
    }

    // optional uint32 lastchattime = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lastchattime());
    }

    // optional uint32 offlineTime = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_offlinetime());
    }

    // optional uint32 headPic = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_headpic());
    }

    // optional uint32 viplevel = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_viplevel());
    }

    // optional uint32 power = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_power());
    }

    // optional uint32 friendrate = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_friendrate());
    }

    // optional uint32 createTime = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_createtime());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void relation_item::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:relation.relation_item)
  GOOGLE_DCHECK_NE(&from, this);
  const relation_item* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<relation_item>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:relation.relation_item)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:relation.relation_item)
    MergeFrom(*source);
  }
}

void relation_item::MergeFrom(const relation_item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:relation.relation_item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      relationname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.relationname_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      page_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.page_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      nickname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nickname_);
    }
    if (cached_has_bits & 0x00000008u) {
      relationid_ = from.relationid_;
    }
    if (cached_has_bits & 0x00000010u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000020u) {
      career_ = from.career_;
    }
    if (cached_has_bits & 0x00000040u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000080u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      love_degree_ = from.love_degree_;
    }
    if (cached_has_bits & 0x00000200u) {
      lastchattime_ = from.lastchattime_;
    }
    if (cached_has_bits & 0x00000400u) {
      offlinetime_ = from.offlinetime_;
    }
    if (cached_has_bits & 0x00000800u) {
      headpic_ = from.headpic_;
    }
    if (cached_has_bits & 0x00001000u) {
      viplevel_ = from.viplevel_;
    }
    if (cached_has_bits & 0x00002000u) {
      power_ = from.power_;
    }
    if (cached_has_bits & 0x00004000u) {
      friendrate_ = from.friendrate_;
    }
    if (cached_has_bits & 0x00008000u) {
      createtime_ = from.createtime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void relation_item::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:relation.relation_item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void relation_item::CopyFrom(const relation_item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:relation.relation_item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool relation_item::IsInitialized() const {
  return true;
}

void relation_item::InternalSwap(relation_item* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  relationname_.Swap(&other->relationname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  page_.Swap(&other->page_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  nickname_.Swap(&other->nickname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(relationid_, other->relationid_);
  swap(level_, other->level_);
  swap(career_, other->career_);
  swap(type_, other->type_);
  swap(status_, other->status_);
  swap(love_degree_, other->love_degree_);
  swap(lastchattime_, other->lastchattime_);
  swap(offlinetime_, other->offlinetime_);
  swap(headpic_, other->headpic_);
  swap(viplevel_, other->viplevel_);
  swap(power_, other->power_);
  swap(friendrate_, other->friendrate_);
  swap(createtime_, other->createtime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata relation_item::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_RelationList_SC::InitAsDefaultInstance() {
}
class MSG_Ret_RelationList_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_RelationList_SC>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Ret_RelationList_SC::MSG_Ret_RelationList_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:relation.MSG_Ret_RelationList_SC)
}
MSG_Ret_RelationList_SC::MSG_Ret_RelationList_SC(const MSG_Ret_RelationList_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      relations_(from.relations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:relation.MSG_Ret_RelationList_SC)
}

void MSG_Ret_RelationList_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_RelationList_SC_relation_2eproto.base);
  type_ = 0u;
}

MSG_Ret_RelationList_SC::~MSG_Ret_RelationList_SC() {
  // @@protoc_insertion_point(destructor:relation.MSG_Ret_RelationList_SC)
  SharedDtor();
}

void MSG_Ret_RelationList_SC::SharedDtor() {
}

void MSG_Ret_RelationList_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_RelationList_SC& MSG_Ret_RelationList_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_RelationList_SC_relation_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_RelationList_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:relation.MSG_Ret_RelationList_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  relations_.Clear();
  type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_RelationList_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .relation.relation_item relations = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_relations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_RelationList_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:relation.MSG_Ret_RelationList_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .relation.relation_item relations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_relations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_relations(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 type = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:relation.MSG_Ret_RelationList_SC)
  return target;
}

size_t MSG_Ret_RelationList_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:relation.MSG_Ret_RelationList_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .relation.relation_item relations = 1;
  total_size += 1UL * this->_internal_relations_size();
  for (const auto& msg : this->relations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 type = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_RelationList_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:relation.MSG_Ret_RelationList_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_RelationList_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_RelationList_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:relation.MSG_Ret_RelationList_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:relation.MSG_Ret_RelationList_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_RelationList_SC::MergeFrom(const MSG_Ret_RelationList_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:relation.MSG_Ret_RelationList_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  relations_.MergeFrom(from.relations_);
  if (from._internal_has_type()) {
    _internal_set_type(from._internal_type());
  }
}

void MSG_Ret_RelationList_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:relation.MSG_Ret_RelationList_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_RelationList_SC::CopyFrom(const MSG_Ret_RelationList_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:relation.MSG_Ret_RelationList_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_RelationList_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_RelationList_SC::InternalSwap(MSG_Ret_RelationList_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  relations_.InternalSwap(&other->relations_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_RelationList_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_RefreshRelation_SC::InitAsDefaultInstance() {
  ::relation::_MSG_Ret_RefreshRelation_SC_default_instance_._instance.get_mutable()->data_ = const_cast< ::relation::relation_item*>(
      ::relation::relation_item::internal_default_instance());
}
class MSG_Ret_RefreshRelation_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_RefreshRelation_SC>()._has_bits_);
  static const ::relation::relation_item& data(const MSG_Ret_RefreshRelation_SC* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::relation::relation_item&
MSG_Ret_RefreshRelation_SC::_Internal::data(const MSG_Ret_RefreshRelation_SC* msg) {
  return *msg->data_;
}
MSG_Ret_RefreshRelation_SC::MSG_Ret_RefreshRelation_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:relation.MSG_Ret_RefreshRelation_SC)
}
MSG_Ret_RefreshRelation_SC::MSG_Ret_RefreshRelation_SC(const MSG_Ret_RefreshRelation_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::relation::relation_item(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:relation.MSG_Ret_RefreshRelation_SC)
}

void MSG_Ret_RefreshRelation_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_RefreshRelation_SC_relation_2eproto.base);
  data_ = nullptr;
}

MSG_Ret_RefreshRelation_SC::~MSG_Ret_RefreshRelation_SC() {
  // @@protoc_insertion_point(destructor:relation.MSG_Ret_RefreshRelation_SC)
  SharedDtor();
}

void MSG_Ret_RefreshRelation_SC::SharedDtor() {
  if (this != internal_default_instance()) delete data_;
}

void MSG_Ret_RefreshRelation_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_RefreshRelation_SC& MSG_Ret_RefreshRelation_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_RefreshRelation_SC_relation_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_RefreshRelation_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:relation.MSG_Ret_RefreshRelation_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(data_ != nullptr);
    data_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_RefreshRelation_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .relation.relation_item data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_RefreshRelation_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:relation.MSG_Ret_RefreshRelation_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .relation.relation_item data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:relation.MSG_Ret_RefreshRelation_SC)
  return target;
}

size_t MSG_Ret_RefreshRelation_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:relation.MSG_Ret_RefreshRelation_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .relation.relation_item data = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_RefreshRelation_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:relation.MSG_Ret_RefreshRelation_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_RefreshRelation_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_RefreshRelation_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:relation.MSG_Ret_RefreshRelation_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:relation.MSG_Ret_RefreshRelation_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_RefreshRelation_SC::MergeFrom(const MSG_Ret_RefreshRelation_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:relation.MSG_Ret_RefreshRelation_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _internal_mutable_data()->::relation::relation_item::MergeFrom(from._internal_data());
  }
}

void MSG_Ret_RefreshRelation_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:relation.MSG_Ret_RefreshRelation_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_RefreshRelation_SC::CopyFrom(const MSG_Ret_RefreshRelation_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:relation.MSG_Ret_RefreshRelation_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_RefreshRelation_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_RefreshRelation_SC::InternalSwap(MSG_Ret_RefreshRelation_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_RefreshRelation_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_ApplyRelation_CS::InitAsDefaultInstance() {
}
class MSG_Req_ApplyRelation_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_ApplyRelation_CS>()._has_bits_);
  static void set_has_relationid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Req_ApplyRelation_CS::MSG_Req_ApplyRelation_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:relation.MSG_Req_ApplyRelation_CS)
}
MSG_Req_ApplyRelation_CS::MSG_Req_ApplyRelation_CS(const MSG_Req_ApplyRelation_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  relationid_ = from.relationid_;
  // @@protoc_insertion_point(copy_constructor:relation.MSG_Req_ApplyRelation_CS)
}

void MSG_Req_ApplyRelation_CS::SharedCtor() {
  relationid_ = PROTOBUF_ULONGLONG(0);
}

MSG_Req_ApplyRelation_CS::~MSG_Req_ApplyRelation_CS() {
  // @@protoc_insertion_point(destructor:relation.MSG_Req_ApplyRelation_CS)
  SharedDtor();
}

void MSG_Req_ApplyRelation_CS::SharedDtor() {
}

void MSG_Req_ApplyRelation_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_ApplyRelation_CS& MSG_Req_ApplyRelation_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_ApplyRelation_CS_relation_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_ApplyRelation_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:relation.MSG_Req_ApplyRelation_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  relationid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_ApplyRelation_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 relationid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_relationid(&has_bits);
          relationid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_ApplyRelation_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:relation.MSG_Req_ApplyRelation_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 relationid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_relationid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:relation.MSG_Req_ApplyRelation_CS)
  return target;
}

size_t MSG_Req_ApplyRelation_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:relation.MSG_Req_ApplyRelation_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 relationid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_relationid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_ApplyRelation_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:relation.MSG_Req_ApplyRelation_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_ApplyRelation_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_ApplyRelation_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:relation.MSG_Req_ApplyRelation_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:relation.MSG_Req_ApplyRelation_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_ApplyRelation_CS::MergeFrom(const MSG_Req_ApplyRelation_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:relation.MSG_Req_ApplyRelation_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_relationid()) {
    _internal_set_relationid(from._internal_relationid());
  }
}

void MSG_Req_ApplyRelation_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:relation.MSG_Req_ApplyRelation_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_ApplyRelation_CS::CopyFrom(const MSG_Req_ApplyRelation_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:relation.MSG_Req_ApplyRelation_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_ApplyRelation_CS::IsInitialized() const {
  return true;
}

void MSG_Req_ApplyRelation_CS::InternalSwap(MSG_Req_ApplyRelation_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(relationid_, other->relationid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_ApplyRelation_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_AnswerApplyRelation_CS::InitAsDefaultInstance() {
}
class MSG_Req_AnswerApplyRelation_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_AnswerApplyRelation_CS>()._has_bits_);
  static void set_has_relationid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_Req_AnswerApplyRelation_CS::MSG_Req_AnswerApplyRelation_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:relation.MSG_Req_AnswerApplyRelation_CS)
}
MSG_Req_AnswerApplyRelation_CS::MSG_Req_AnswerApplyRelation_CS(const MSG_Req_AnswerApplyRelation_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&relationid_, &from.relationid_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&relationid_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:relation.MSG_Req_AnswerApplyRelation_CS)
}

void MSG_Req_AnswerApplyRelation_CS::SharedCtor() {
  ::memset(&relationid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&relationid_)) + sizeof(type_));
}

MSG_Req_AnswerApplyRelation_CS::~MSG_Req_AnswerApplyRelation_CS() {
  // @@protoc_insertion_point(destructor:relation.MSG_Req_AnswerApplyRelation_CS)
  SharedDtor();
}

void MSG_Req_AnswerApplyRelation_CS::SharedDtor() {
}

void MSG_Req_AnswerApplyRelation_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_AnswerApplyRelation_CS& MSG_Req_AnswerApplyRelation_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_AnswerApplyRelation_CS_relation_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_AnswerApplyRelation_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:relation.MSG_Req_AnswerApplyRelation_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&relationid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&relationid_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_AnswerApplyRelation_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 relationid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_relationid(&has_bits);
          relationid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_AnswerApplyRelation_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:relation.MSG_Req_AnswerApplyRelation_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 relationid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_relationid(), target);
  }

  // optional uint32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:relation.MSG_Req_AnswerApplyRelation_CS)
  return target;
}

size_t MSG_Req_AnswerApplyRelation_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:relation.MSG_Req_AnswerApplyRelation_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 relationid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_relationid());
    }

    // optional uint32 type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_AnswerApplyRelation_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:relation.MSG_Req_AnswerApplyRelation_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_AnswerApplyRelation_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_AnswerApplyRelation_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:relation.MSG_Req_AnswerApplyRelation_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:relation.MSG_Req_AnswerApplyRelation_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_AnswerApplyRelation_CS::MergeFrom(const MSG_Req_AnswerApplyRelation_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:relation.MSG_Req_AnswerApplyRelation_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      relationid_ = from.relationid_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Req_AnswerApplyRelation_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:relation.MSG_Req_AnswerApplyRelation_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_AnswerApplyRelation_CS::CopyFrom(const MSG_Req_AnswerApplyRelation_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:relation.MSG_Req_AnswerApplyRelation_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_AnswerApplyRelation_CS::IsInitialized() const {
  return true;
}

void MSG_Req_AnswerApplyRelation_CS::InternalSwap(MSG_Req_AnswerApplyRelation_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(relationid_, other->relationid_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_AnswerApplyRelation_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_AnswerApplyRelation_SC::InitAsDefaultInstance() {
}
class MSG_Ret_AnswerApplyRelation_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_AnswerApplyRelation_SC>()._has_bits_);
  static void set_has_relationid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_issucc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_Ret_AnswerApplyRelation_SC::MSG_Ret_AnswerApplyRelation_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:relation.MSG_Ret_AnswerApplyRelation_SC)
}
MSG_Ret_AnswerApplyRelation_SC::MSG_Ret_AnswerApplyRelation_SC(const MSG_Ret_AnswerApplyRelation_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&relationid_, &from.relationid_,
    static_cast<size_t>(reinterpret_cast<char*>(&issucc_) -
    reinterpret_cast<char*>(&relationid_)) + sizeof(issucc_));
  // @@protoc_insertion_point(copy_constructor:relation.MSG_Ret_AnswerApplyRelation_SC)
}

void MSG_Ret_AnswerApplyRelation_SC::SharedCtor() {
  ::memset(&relationid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&issucc_) -
      reinterpret_cast<char*>(&relationid_)) + sizeof(issucc_));
}

MSG_Ret_AnswerApplyRelation_SC::~MSG_Ret_AnswerApplyRelation_SC() {
  // @@protoc_insertion_point(destructor:relation.MSG_Ret_AnswerApplyRelation_SC)
  SharedDtor();
}

void MSG_Ret_AnswerApplyRelation_SC::SharedDtor() {
}

void MSG_Ret_AnswerApplyRelation_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_AnswerApplyRelation_SC& MSG_Ret_AnswerApplyRelation_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_AnswerApplyRelation_SC_relation_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_AnswerApplyRelation_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:relation.MSG_Ret_AnswerApplyRelation_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&relationid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&issucc_) -
        reinterpret_cast<char*>(&relationid_)) + sizeof(issucc_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_AnswerApplyRelation_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 relationid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_relationid(&has_bits);
          relationid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool issucc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_issucc(&has_bits);
          issucc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_AnswerApplyRelation_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:relation.MSG_Ret_AnswerApplyRelation_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 relationid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_relationid(), target);
  }

  // optional bool issucc = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_issucc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:relation.MSG_Ret_AnswerApplyRelation_SC)
  return target;
}

size_t MSG_Ret_AnswerApplyRelation_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:relation.MSG_Ret_AnswerApplyRelation_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 relationid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_relationid());
    }

    // optional bool issucc = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_AnswerApplyRelation_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:relation.MSG_Ret_AnswerApplyRelation_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_AnswerApplyRelation_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_AnswerApplyRelation_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:relation.MSG_Ret_AnswerApplyRelation_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:relation.MSG_Ret_AnswerApplyRelation_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_AnswerApplyRelation_SC::MergeFrom(const MSG_Ret_AnswerApplyRelation_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:relation.MSG_Ret_AnswerApplyRelation_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      relationid_ = from.relationid_;
    }
    if (cached_has_bits & 0x00000002u) {
      issucc_ = from.issucc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_AnswerApplyRelation_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:relation.MSG_Ret_AnswerApplyRelation_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_AnswerApplyRelation_SC::CopyFrom(const MSG_Ret_AnswerApplyRelation_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:relation.MSG_Ret_AnswerApplyRelation_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_AnswerApplyRelation_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_AnswerApplyRelation_SC::InternalSwap(MSG_Ret_AnswerApplyRelation_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(relationid_, other->relationid_);
  swap(issucc_, other->issucc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_AnswerApplyRelation_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_DeleteRelation_CS::InitAsDefaultInstance() {
}
class MSG_Req_DeleteRelation_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_DeleteRelation_CS>()._has_bits_);
  static void set_has_relationid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Req_DeleteRelation_CS::MSG_Req_DeleteRelation_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:relation.MSG_Req_DeleteRelation_CS)
}
MSG_Req_DeleteRelation_CS::MSG_Req_DeleteRelation_CS(const MSG_Req_DeleteRelation_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  relationid_ = from.relationid_;
  // @@protoc_insertion_point(copy_constructor:relation.MSG_Req_DeleteRelation_CS)
}

void MSG_Req_DeleteRelation_CS::SharedCtor() {
  relationid_ = PROTOBUF_ULONGLONG(0);
}

MSG_Req_DeleteRelation_CS::~MSG_Req_DeleteRelation_CS() {
  // @@protoc_insertion_point(destructor:relation.MSG_Req_DeleteRelation_CS)
  SharedDtor();
}

void MSG_Req_DeleteRelation_CS::SharedDtor() {
}

void MSG_Req_DeleteRelation_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_DeleteRelation_CS& MSG_Req_DeleteRelation_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_DeleteRelation_CS_relation_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_DeleteRelation_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:relation.MSG_Req_DeleteRelation_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  relationid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_DeleteRelation_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 relationid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_relationid(&has_bits);
          relationid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_DeleteRelation_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:relation.MSG_Req_DeleteRelation_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 relationid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_relationid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:relation.MSG_Req_DeleteRelation_CS)
  return target;
}

size_t MSG_Req_DeleteRelation_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:relation.MSG_Req_DeleteRelation_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 relationid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_relationid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_DeleteRelation_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:relation.MSG_Req_DeleteRelation_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_DeleteRelation_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_DeleteRelation_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:relation.MSG_Req_DeleteRelation_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:relation.MSG_Req_DeleteRelation_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_DeleteRelation_CS::MergeFrom(const MSG_Req_DeleteRelation_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:relation.MSG_Req_DeleteRelation_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_relationid()) {
    _internal_set_relationid(from._internal_relationid());
  }
}

void MSG_Req_DeleteRelation_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:relation.MSG_Req_DeleteRelation_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_DeleteRelation_CS::CopyFrom(const MSG_Req_DeleteRelation_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:relation.MSG_Req_DeleteRelation_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_DeleteRelation_CS::IsInitialized() const {
  return true;
}

void MSG_Req_DeleteRelation_CS::InternalSwap(MSG_Req_DeleteRelation_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(relationid_, other->relationid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_DeleteRelation_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_DeleteRelation_SC::InitAsDefaultInstance() {
}
class MSG_Ret_DeleteRelation_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_DeleteRelation_SC>()._has_bits_);
  static void set_has_relationid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_issucc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_Ret_DeleteRelation_SC::MSG_Ret_DeleteRelation_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:relation.MSG_Ret_DeleteRelation_SC)
}
MSG_Ret_DeleteRelation_SC::MSG_Ret_DeleteRelation_SC(const MSG_Ret_DeleteRelation_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&relationid_, &from.relationid_,
    static_cast<size_t>(reinterpret_cast<char*>(&issucc_) -
    reinterpret_cast<char*>(&relationid_)) + sizeof(issucc_));
  // @@protoc_insertion_point(copy_constructor:relation.MSG_Ret_DeleteRelation_SC)
}

void MSG_Ret_DeleteRelation_SC::SharedCtor() {
  ::memset(&relationid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&issucc_) -
      reinterpret_cast<char*>(&relationid_)) + sizeof(issucc_));
}

MSG_Ret_DeleteRelation_SC::~MSG_Ret_DeleteRelation_SC() {
  // @@protoc_insertion_point(destructor:relation.MSG_Ret_DeleteRelation_SC)
  SharedDtor();
}

void MSG_Ret_DeleteRelation_SC::SharedDtor() {
}

void MSG_Ret_DeleteRelation_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_DeleteRelation_SC& MSG_Ret_DeleteRelation_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_DeleteRelation_SC_relation_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_DeleteRelation_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:relation.MSG_Ret_DeleteRelation_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&relationid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&issucc_) -
        reinterpret_cast<char*>(&relationid_)) + sizeof(issucc_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_DeleteRelation_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 relationid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_relationid(&has_bits);
          relationid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool issucc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_issucc(&has_bits);
          issucc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_DeleteRelation_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:relation.MSG_Ret_DeleteRelation_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 relationid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_relationid(), target);
  }

  // optional bool issucc = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_issucc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:relation.MSG_Ret_DeleteRelation_SC)
  return target;
}

size_t MSG_Ret_DeleteRelation_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:relation.MSG_Ret_DeleteRelation_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 relationid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_relationid());
    }

    // optional bool issucc = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_DeleteRelation_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:relation.MSG_Ret_DeleteRelation_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_DeleteRelation_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_DeleteRelation_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:relation.MSG_Ret_DeleteRelation_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:relation.MSG_Ret_DeleteRelation_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_DeleteRelation_SC::MergeFrom(const MSG_Ret_DeleteRelation_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:relation.MSG_Ret_DeleteRelation_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      relationid_ = from.relationid_;
    }
    if (cached_has_bits & 0x00000002u) {
      issucc_ = from.issucc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_DeleteRelation_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:relation.MSG_Ret_DeleteRelation_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_DeleteRelation_SC::CopyFrom(const MSG_Ret_DeleteRelation_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:relation.MSG_Ret_DeleteRelation_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_DeleteRelation_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_DeleteRelation_SC::InternalSwap(MSG_Ret_DeleteRelation_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(relationid_, other->relationid_);
  swap(issucc_, other->issucc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_DeleteRelation_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_OfflineInteractive_CS::InitAsDefaultInstance() {
}
class MSG_Req_OfflineInteractive_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_OfflineInteractive_CS>()._has_bits_);
};

MSG_Req_OfflineInteractive_CS::MSG_Req_OfflineInteractive_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:relation.MSG_Req_OfflineInteractive_CS)
}
MSG_Req_OfflineInteractive_CS::MSG_Req_OfflineInteractive_CS(const MSG_Req_OfflineInteractive_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:relation.MSG_Req_OfflineInteractive_CS)
}

void MSG_Req_OfflineInteractive_CS::SharedCtor() {
}

MSG_Req_OfflineInteractive_CS::~MSG_Req_OfflineInteractive_CS() {
  // @@protoc_insertion_point(destructor:relation.MSG_Req_OfflineInteractive_CS)
  SharedDtor();
}

void MSG_Req_OfflineInteractive_CS::SharedDtor() {
}

void MSG_Req_OfflineInteractive_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_OfflineInteractive_CS& MSG_Req_OfflineInteractive_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_OfflineInteractive_CS_relation_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_OfflineInteractive_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:relation.MSG_Req_OfflineInteractive_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_OfflineInteractive_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_OfflineInteractive_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:relation.MSG_Req_OfflineInteractive_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:relation.MSG_Req_OfflineInteractive_CS)
  return target;
}

size_t MSG_Req_OfflineInteractive_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:relation.MSG_Req_OfflineInteractive_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_OfflineInteractive_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:relation.MSG_Req_OfflineInteractive_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_OfflineInteractive_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_OfflineInteractive_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:relation.MSG_Req_OfflineInteractive_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:relation.MSG_Req_OfflineInteractive_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_OfflineInteractive_CS::MergeFrom(const MSG_Req_OfflineInteractive_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:relation.MSG_Req_OfflineInteractive_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_Req_OfflineInteractive_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:relation.MSG_Req_OfflineInteractive_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_OfflineInteractive_CS::CopyFrom(const MSG_Req_OfflineInteractive_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:relation.MSG_Req_OfflineInteractive_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_OfflineInteractive_CS::IsInitialized() const {
  return true;
}

void MSG_Req_OfflineInteractive_CS::InternalSwap(MSG_Req_OfflineInteractive_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_OfflineInteractive_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_AddInteractive_SC::InitAsDefaultInstance() {
}
class MSG_Ret_AddInteractive_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_AddInteractive_SC>()._has_bits_);
};

MSG_Ret_AddInteractive_SC::MSG_Ret_AddInteractive_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:relation.MSG_Ret_AddInteractive_SC)
}
MSG_Ret_AddInteractive_SC::MSG_Ret_AddInteractive_SC(const MSG_Ret_AddInteractive_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:relation.MSG_Ret_AddInteractive_SC)
}

void MSG_Ret_AddInteractive_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_AddInteractive_SC_relation_2eproto.base);
}

MSG_Ret_AddInteractive_SC::~MSG_Ret_AddInteractive_SC() {
  // @@protoc_insertion_point(destructor:relation.MSG_Ret_AddInteractive_SC)
  SharedDtor();
}

void MSG_Ret_AddInteractive_SC::SharedDtor() {
}

void MSG_Ret_AddInteractive_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_AddInteractive_SC& MSG_Ret_AddInteractive_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_AddInteractive_SC_relation_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_AddInteractive_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:relation.MSG_Ret_AddInteractive_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_AddInteractive_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .relation.relation_item data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_AddInteractive_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:relation.MSG_Ret_AddInteractive_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .relation.relation_item data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:relation.MSG_Ret_AddInteractive_SC)
  return target;
}

size_t MSG_Ret_AddInteractive_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:relation.MSG_Ret_AddInteractive_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .relation.relation_item data = 1;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_AddInteractive_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:relation.MSG_Ret_AddInteractive_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_AddInteractive_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_AddInteractive_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:relation.MSG_Ret_AddInteractive_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:relation.MSG_Ret_AddInteractive_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_AddInteractive_SC::MergeFrom(const MSG_Ret_AddInteractive_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:relation.MSG_Ret_AddInteractive_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void MSG_Ret_AddInteractive_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:relation.MSG_Ret_AddInteractive_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_AddInteractive_SC::CopyFrom(const MSG_Ret_AddInteractive_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:relation.MSG_Ret_AddInteractive_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_AddInteractive_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_AddInteractive_SC::InternalSwap(MSG_Ret_AddInteractive_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_AddInteractive_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_SearchRelation_CS::InitAsDefaultInstance() {
}
class MSG_Req_SearchRelation_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_SearchRelation_CS>()._has_bits_);
  static void set_has_condition(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Req_SearchRelation_CS::MSG_Req_SearchRelation_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:relation.MSG_Req_SearchRelation_CS)
}
MSG_Req_SearchRelation_CS::MSG_Req_SearchRelation_CS(const MSG_Req_SearchRelation_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  condition_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_condition()) {
    condition_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.condition_);
  }
  // @@protoc_insertion_point(copy_constructor:relation.MSG_Req_SearchRelation_CS)
}

void MSG_Req_SearchRelation_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Req_SearchRelation_CS_relation_2eproto.base);
  condition_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MSG_Req_SearchRelation_CS::~MSG_Req_SearchRelation_CS() {
  // @@protoc_insertion_point(destructor:relation.MSG_Req_SearchRelation_CS)
  SharedDtor();
}

void MSG_Req_SearchRelation_CS::SharedDtor() {
  condition_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_Req_SearchRelation_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_SearchRelation_CS& MSG_Req_SearchRelation_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_SearchRelation_CS_relation_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_SearchRelation_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:relation.MSG_Req_SearchRelation_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    condition_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_SearchRelation_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string condition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_condition();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "relation.MSG_Req_SearchRelation_CS.condition");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_SearchRelation_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:relation.MSG_Req_SearchRelation_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string condition = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_condition().data(), static_cast<int>(this->_internal_condition().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "relation.MSG_Req_SearchRelation_CS.condition");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_condition(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:relation.MSG_Req_SearchRelation_CS)
  return target;
}

size_t MSG_Req_SearchRelation_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:relation.MSG_Req_SearchRelation_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string condition = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_condition());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_SearchRelation_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:relation.MSG_Req_SearchRelation_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_SearchRelation_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_SearchRelation_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:relation.MSG_Req_SearchRelation_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:relation.MSG_Req_SearchRelation_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_SearchRelation_CS::MergeFrom(const MSG_Req_SearchRelation_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:relation.MSG_Req_SearchRelation_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_condition()) {
    _has_bits_[0] |= 0x00000001u;
    condition_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.condition_);
  }
}

void MSG_Req_SearchRelation_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:relation.MSG_Req_SearchRelation_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_SearchRelation_CS::CopyFrom(const MSG_Req_SearchRelation_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:relation.MSG_Req_SearchRelation_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_SearchRelation_CS::IsInitialized() const {
  return true;
}

void MSG_Req_SearchRelation_CS::InternalSwap(MSG_Req_SearchRelation_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  condition_.Swap(&other->condition_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_SearchRelation_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_SearchRelation_SC::InitAsDefaultInstance() {
  ::relation::_MSG_Ret_SearchRelation_SC_default_instance_._instance.get_mutable()->relation_ = const_cast< ::relation::relation_item*>(
      ::relation::relation_item::internal_default_instance());
}
class MSG_Ret_SearchRelation_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_SearchRelation_SC>()._has_bits_);
  static const ::relation::relation_item& relation(const MSG_Ret_SearchRelation_SC* msg);
  static void set_has_relation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::relation::relation_item&
MSG_Ret_SearchRelation_SC::_Internal::relation(const MSG_Ret_SearchRelation_SC* msg) {
  return *msg->relation_;
}
MSG_Ret_SearchRelation_SC::MSG_Ret_SearchRelation_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:relation.MSG_Ret_SearchRelation_SC)
}
MSG_Ret_SearchRelation_SC::MSG_Ret_SearchRelation_SC(const MSG_Ret_SearchRelation_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_relation()) {
    relation_ = new ::relation::relation_item(*from.relation_);
  } else {
    relation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:relation.MSG_Ret_SearchRelation_SC)
}

void MSG_Ret_SearchRelation_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_SearchRelation_SC_relation_2eproto.base);
  relation_ = nullptr;
}

MSG_Ret_SearchRelation_SC::~MSG_Ret_SearchRelation_SC() {
  // @@protoc_insertion_point(destructor:relation.MSG_Ret_SearchRelation_SC)
  SharedDtor();
}

void MSG_Ret_SearchRelation_SC::SharedDtor() {
  if (this != internal_default_instance()) delete relation_;
}

void MSG_Ret_SearchRelation_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_SearchRelation_SC& MSG_Ret_SearchRelation_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_SearchRelation_SC_relation_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_SearchRelation_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:relation.MSG_Ret_SearchRelation_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(relation_ != nullptr);
    relation_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_SearchRelation_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .relation.relation_item relation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_relation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_SearchRelation_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:relation.MSG_Ret_SearchRelation_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .relation.relation_item relation = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::relation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:relation.MSG_Ret_SearchRelation_SC)
  return target;
}

size_t MSG_Ret_SearchRelation_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:relation.MSG_Ret_SearchRelation_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .relation.relation_item relation = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *relation_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_SearchRelation_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:relation.MSG_Ret_SearchRelation_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_SearchRelation_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_SearchRelation_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:relation.MSG_Ret_SearchRelation_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:relation.MSG_Ret_SearchRelation_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_SearchRelation_SC::MergeFrom(const MSG_Ret_SearchRelation_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:relation.MSG_Ret_SearchRelation_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_relation()) {
    _internal_mutable_relation()->::relation::relation_item::MergeFrom(from._internal_relation());
  }
}

void MSG_Ret_SearchRelation_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:relation.MSG_Ret_SearchRelation_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_SearchRelation_SC::CopyFrom(const MSG_Ret_SearchRelation_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:relation.MSG_Ret_SearchRelation_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_SearchRelation_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_SearchRelation_SC::InternalSwap(MSG_Ret_SearchRelation_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(relation_, other->relation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_SearchRelation_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ModifyPageName_CSC::InitAsDefaultInstance() {
}
class MSG_ModifyPageName_CSC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ModifyPageName_CSC>()._has_bits_);
  static void set_has_page(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_new_page(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_opcode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

MSG_ModifyPageName_CSC::MSG_ModifyPageName_CSC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:relation.MSG_ModifyPageName_CSC)
}
MSG_ModifyPageName_CSC::MSG_ModifyPageName_CSC(const MSG_ModifyPageName_CSC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  page_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_page()) {
    page_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.page_);
  }
  new_page_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_new_page()) {
    new_page_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.new_page_);
  }
  ::memcpy(&opcode_, &from.opcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&opcode_)) + sizeof(success_));
  // @@protoc_insertion_point(copy_constructor:relation.MSG_ModifyPageName_CSC)
}

void MSG_ModifyPageName_CSC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_ModifyPageName_CSC_relation_2eproto.base);
  page_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_page_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&opcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&opcode_)) + sizeof(success_));
}

MSG_ModifyPageName_CSC::~MSG_ModifyPageName_CSC() {
  // @@protoc_insertion_point(destructor:relation.MSG_ModifyPageName_CSC)
  SharedDtor();
}

void MSG_ModifyPageName_CSC::SharedDtor() {
  page_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_page_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_ModifyPageName_CSC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ModifyPageName_CSC& MSG_ModifyPageName_CSC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ModifyPageName_CSC_relation_2eproto.base);
  return *internal_default_instance();
}


void MSG_ModifyPageName_CSC::Clear() {
// @@protoc_insertion_point(message_clear_start:relation.MSG_ModifyPageName_CSC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      page_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      new_page_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&opcode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&success_) -
        reinterpret_cast<char*>(&opcode_)) + sizeof(success_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ModifyPageName_CSC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string page = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_page();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "relation.MSG_ModifyPageName_CSC.page");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string new_page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_new_page();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "relation.MSG_ModifyPageName_CSC.new_page");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 opcode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_opcode(&has_bits);
          opcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool success = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_success(&has_bits);
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ModifyPageName_CSC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:relation.MSG_ModifyPageName_CSC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string page = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_page().data(), static_cast<int>(this->_internal_page().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "relation.MSG_ModifyPageName_CSC.page");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_page(), target);
  }

  // optional string new_page = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_new_page().data(), static_cast<int>(this->_internal_new_page().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "relation.MSG_ModifyPageName_CSC.new_page");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_new_page(), target);
  }

  // optional uint32 opcode = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_opcode(), target);
  }

  // optional bool success = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:relation.MSG_ModifyPageName_CSC)
  return target;
}

size_t MSG_ModifyPageName_CSC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:relation.MSG_ModifyPageName_CSC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string page = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_page());
    }

    // optional string new_page = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_new_page());
    }

    // optional uint32 opcode = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_opcode());
    }

    // optional bool success = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ModifyPageName_CSC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:relation.MSG_ModifyPageName_CSC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ModifyPageName_CSC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ModifyPageName_CSC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:relation.MSG_ModifyPageName_CSC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:relation.MSG_ModifyPageName_CSC)
    MergeFrom(*source);
  }
}

void MSG_ModifyPageName_CSC::MergeFrom(const MSG_ModifyPageName_CSC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:relation.MSG_ModifyPageName_CSC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      page_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.page_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      new_page_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.new_page_);
    }
    if (cached_has_bits & 0x00000004u) {
      opcode_ = from.opcode_;
    }
    if (cached_has_bits & 0x00000008u) {
      success_ = from.success_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_ModifyPageName_CSC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:relation.MSG_ModifyPageName_CSC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ModifyPageName_CSC::CopyFrom(const MSG_ModifyPageName_CSC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:relation.MSG_ModifyPageName_CSC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ModifyPageName_CSC::IsInitialized() const {
  return true;
}

void MSG_ModifyPageName_CSC::InternalSwap(MSG_ModifyPageName_CSC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  page_.Swap(&other->page_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  new_page_.Swap(&other->new_page_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(opcode_, other->opcode_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ModifyPageName_CSC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_MoveFriendToPage_CSC::InitAsDefaultInstance() {
}
class MSG_MoveFriendToPage_CSC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_MoveFriendToPage_CSC>()._has_bits_);
  static void set_has_charid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_page(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MSG_MoveFriendToPage_CSC::MSG_MoveFriendToPage_CSC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:relation.MSG_MoveFriendToPage_CSC)
}
MSG_MoveFriendToPage_CSC::MSG_MoveFriendToPage_CSC(const MSG_MoveFriendToPage_CSC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  page_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_page()) {
    page_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.page_);
  }
  ::memcpy(&charid_, &from.charid_,
    static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&charid_)) + sizeof(success_));
  // @@protoc_insertion_point(copy_constructor:relation.MSG_MoveFriendToPage_CSC)
}

void MSG_MoveFriendToPage_CSC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_MoveFriendToPage_CSC_relation_2eproto.base);
  page_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&charid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&charid_)) + sizeof(success_));
}

MSG_MoveFriendToPage_CSC::~MSG_MoveFriendToPage_CSC() {
  // @@protoc_insertion_point(destructor:relation.MSG_MoveFriendToPage_CSC)
  SharedDtor();
}

void MSG_MoveFriendToPage_CSC::SharedDtor() {
  page_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_MoveFriendToPage_CSC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_MoveFriendToPage_CSC& MSG_MoveFriendToPage_CSC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_MoveFriendToPage_CSC_relation_2eproto.base);
  return *internal_default_instance();
}


void MSG_MoveFriendToPage_CSC::Clear() {
// @@protoc_insertion_point(message_clear_start:relation.MSG_MoveFriendToPage_CSC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    page_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&charid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&success_) -
        reinterpret_cast<char*>(&charid_)) + sizeof(success_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_MoveFriendToPage_CSC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 charid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_charid(&has_bits);
          charid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_page();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "relation.MSG_MoveFriendToPage_CSC.page");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool success = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_success(&has_bits);
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_MoveFriendToPage_CSC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:relation.MSG_MoveFriendToPage_CSC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 charid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_charid(), target);
  }

  // optional string page = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_page().data(), static_cast<int>(this->_internal_page().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "relation.MSG_MoveFriendToPage_CSC.page");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_page(), target);
  }

  // optional bool success = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:relation.MSG_MoveFriendToPage_CSC)
  return target;
}

size_t MSG_MoveFriendToPage_CSC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:relation.MSG_MoveFriendToPage_CSC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string page = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_page());
    }

    // optional uint64 charid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_charid());
    }

    // optional bool success = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_MoveFriendToPage_CSC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:relation.MSG_MoveFriendToPage_CSC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_MoveFriendToPage_CSC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_MoveFriendToPage_CSC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:relation.MSG_MoveFriendToPage_CSC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:relation.MSG_MoveFriendToPage_CSC)
    MergeFrom(*source);
  }
}

void MSG_MoveFriendToPage_CSC::MergeFrom(const MSG_MoveFriendToPage_CSC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:relation.MSG_MoveFriendToPage_CSC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      page_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.page_);
    }
    if (cached_has_bits & 0x00000002u) {
      charid_ = from.charid_;
    }
    if (cached_has_bits & 0x00000004u) {
      success_ = from.success_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_MoveFriendToPage_CSC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:relation.MSG_MoveFriendToPage_CSC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_MoveFriendToPage_CSC::CopyFrom(const MSG_MoveFriendToPage_CSC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:relation.MSG_MoveFriendToPage_CSC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_MoveFriendToPage_CSC::IsInitialized() const {
  return true;
}

void MSG_MoveFriendToPage_CSC::InternalSwap(MSG_MoveFriendToPage_CSC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  page_.Swap(&other->page_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(charid_, other->charid_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_MoveFriendToPage_CSC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PageItem::InitAsDefaultInstance() {
}
class PageItem::_Internal {
 public:
  using HasBits = decltype(std::declval<PageItem>()._has_bits_);
  static void set_has_page_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_createtime(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PageItem::PageItem()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:relation.PageItem)
}
PageItem::PageItem(const PageItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  page_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_page_name()) {
    page_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.page_name_);
  }
  createtime_ = from.createtime_;
  // @@protoc_insertion_point(copy_constructor:relation.PageItem)
}

void PageItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PageItem_relation_2eproto.base);
  page_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  createtime_ = 0u;
}

PageItem::~PageItem() {
  // @@protoc_insertion_point(destructor:relation.PageItem)
  SharedDtor();
}

void PageItem::SharedDtor() {
  page_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PageItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PageItem& PageItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PageItem_relation_2eproto.base);
  return *internal_default_instance();
}


void PageItem::Clear() {
// @@protoc_insertion_point(message_clear_start:relation.PageItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    page_name_.ClearNonDefaultToEmptyNoArena();
  }
  createtime_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PageItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string page_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_page_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "relation.PageItem.page_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 createtime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_createtime(&has_bits);
          createtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PageItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:relation.PageItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string page_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_page_name().data(), static_cast<int>(this->_internal_page_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "relation.PageItem.page_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_page_name(), target);
  }

  // optional uint32 createtime = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_createtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:relation.PageItem)
  return target;
}

size_t PageItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:relation.PageItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string page_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_page_name());
    }

    // optional uint32 createtime = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_createtime());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PageItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:relation.PageItem)
  GOOGLE_DCHECK_NE(&from, this);
  const PageItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PageItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:relation.PageItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:relation.PageItem)
    MergeFrom(*source);
  }
}

void PageItem::MergeFrom(const PageItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:relation.PageItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      page_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.page_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      createtime_ = from.createtime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PageItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:relation.PageItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PageItem::CopyFrom(const PageItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:relation.PageItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PageItem::IsInitialized() const {
  return true;
}

void PageItem::InternalSwap(PageItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  page_name_.Swap(&other->page_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(createtime_, other->createtime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PageItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_AllFriendPage_CSC::InitAsDefaultInstance() {
}
class MSG_AllFriendPage_CSC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_AllFriendPage_CSC>()._has_bits_);
};

MSG_AllFriendPage_CSC::MSG_AllFriendPage_CSC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:relation.MSG_AllFriendPage_CSC)
}
MSG_AllFriendPage_CSC::MSG_AllFriendPage_CSC(const MSG_AllFriendPage_CSC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      pages_(from.pages_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:relation.MSG_AllFriendPage_CSC)
}

void MSG_AllFriendPage_CSC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_AllFriendPage_CSC_relation_2eproto.base);
}

MSG_AllFriendPage_CSC::~MSG_AllFriendPage_CSC() {
  // @@protoc_insertion_point(destructor:relation.MSG_AllFriendPage_CSC)
  SharedDtor();
}

void MSG_AllFriendPage_CSC::SharedDtor() {
}

void MSG_AllFriendPage_CSC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_AllFriendPage_CSC& MSG_AllFriendPage_CSC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_AllFriendPage_CSC_relation_2eproto.base);
  return *internal_default_instance();
}


void MSG_AllFriendPage_CSC::Clear() {
// @@protoc_insertion_point(message_clear_start:relation.MSG_AllFriendPage_CSC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pages_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_AllFriendPage_CSC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .relation.PageItem pages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_AllFriendPage_CSC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:relation.MSG_AllFriendPage_CSC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .relation.PageItem pages = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_pages(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:relation.MSG_AllFriendPage_CSC)
  return target;
}

size_t MSG_AllFriendPage_CSC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:relation.MSG_AllFriendPage_CSC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .relation.PageItem pages = 1;
  total_size += 1UL * this->_internal_pages_size();
  for (const auto& msg : this->pages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_AllFriendPage_CSC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:relation.MSG_AllFriendPage_CSC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_AllFriendPage_CSC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_AllFriendPage_CSC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:relation.MSG_AllFriendPage_CSC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:relation.MSG_AllFriendPage_CSC)
    MergeFrom(*source);
  }
}

void MSG_AllFriendPage_CSC::MergeFrom(const MSG_AllFriendPage_CSC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:relation.MSG_AllFriendPage_CSC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pages_.MergeFrom(from.pages_);
}

void MSG_AllFriendPage_CSC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:relation.MSG_AllFriendPage_CSC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_AllFriendPage_CSC::CopyFrom(const MSG_AllFriendPage_CSC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:relation.MSG_AllFriendPage_CSC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_AllFriendPage_CSC::IsInitialized() const {
  return true;
}

void MSG_AllFriendPage_CSC::InternalSwap(MSG_AllFriendPage_CSC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pages_.InternalSwap(&other->pages_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_AllFriendPage_CSC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BlackItem::InitAsDefaultInstance() {
}
class BlackItem::_Internal {
 public:
  using HasBits = decltype(std::declval<BlackItem>()._has_bits_);
  static void set_has_charid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_viplevel(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

BlackItem::BlackItem()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:relation.BlackItem)
}
BlackItem::BlackItem(const BlackItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&charid_, &from.charid_,
    static_cast<size_t>(reinterpret_cast<char*>(&viplevel_) -
    reinterpret_cast<char*>(&charid_)) + sizeof(viplevel_));
  // @@protoc_insertion_point(copy_constructor:relation.BlackItem)
}

void BlackItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BlackItem_relation_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&charid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&viplevel_) -
      reinterpret_cast<char*>(&charid_)) + sizeof(viplevel_));
}

BlackItem::~BlackItem() {
  // @@protoc_insertion_point(destructor:relation.BlackItem)
  SharedDtor();
}

void BlackItem::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BlackItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlackItem& BlackItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlackItem_relation_2eproto.base);
  return *internal_default_instance();
}


void BlackItem::Clear() {
// @@protoc_insertion_point(message_clear_start:relation.BlackItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&charid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&viplevel_) -
        reinterpret_cast<char*>(&charid_)) + sizeof(viplevel_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* BlackItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 charid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_charid(&has_bits);
          charid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "relation.BlackItem.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 viplevel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_viplevel(&has_bits);
          viplevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlackItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:relation.BlackItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 charid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_charid(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "relation.BlackItem.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional uint32 level = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_level(), target);
  }

  // optional uint32 viplevel = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_viplevel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:relation.BlackItem)
  return target;
}

size_t BlackItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:relation.BlackItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint64 charid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_charid());
    }

    // optional uint32 level = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_level());
    }

    // optional uint32 viplevel = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_viplevel());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlackItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:relation.BlackItem)
  GOOGLE_DCHECK_NE(&from, this);
  const BlackItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlackItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:relation.BlackItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:relation.BlackItem)
    MergeFrom(*source);
  }
}

void BlackItem::MergeFrom(const BlackItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:relation.BlackItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      charid_ = from.charid_;
    }
    if (cached_has_bits & 0x00000004u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000008u) {
      viplevel_ = from.viplevel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BlackItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:relation.BlackItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlackItem::CopyFrom(const BlackItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:relation.BlackItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlackItem::IsInitialized() const {
  return true;
}

void BlackItem::InternalSwap(BlackItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(charid_, other->charid_);
  swap(level_, other->level_);
  swap(viplevel_, other->viplevel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlackItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_BlackList_CSC::InitAsDefaultInstance() {
}
class MSG_BlackList_CSC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_BlackList_CSC>()._has_bits_);
};

MSG_BlackList_CSC::MSG_BlackList_CSC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:relation.MSG_BlackList_CSC)
}
MSG_BlackList_CSC::MSG_BlackList_CSC(const MSG_BlackList_CSC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      blacklist_(from.blacklist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:relation.MSG_BlackList_CSC)
}

void MSG_BlackList_CSC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_BlackList_CSC_relation_2eproto.base);
}

MSG_BlackList_CSC::~MSG_BlackList_CSC() {
  // @@protoc_insertion_point(destructor:relation.MSG_BlackList_CSC)
  SharedDtor();
}

void MSG_BlackList_CSC::SharedDtor() {
}

void MSG_BlackList_CSC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_BlackList_CSC& MSG_BlackList_CSC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_BlackList_CSC_relation_2eproto.base);
  return *internal_default_instance();
}


void MSG_BlackList_CSC::Clear() {
// @@protoc_insertion_point(message_clear_start:relation.MSG_BlackList_CSC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blacklist_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_BlackList_CSC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .relation.BlackItem blackList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_blacklist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_BlackList_CSC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:relation.MSG_BlackList_CSC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .relation.BlackItem blackList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_blacklist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_blacklist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:relation.MSG_BlackList_CSC)
  return target;
}

size_t MSG_BlackList_CSC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:relation.MSG_BlackList_CSC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .relation.BlackItem blackList = 1;
  total_size += 1UL * this->_internal_blacklist_size();
  for (const auto& msg : this->blacklist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_BlackList_CSC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:relation.MSG_BlackList_CSC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_BlackList_CSC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_BlackList_CSC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:relation.MSG_BlackList_CSC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:relation.MSG_BlackList_CSC)
    MergeFrom(*source);
  }
}

void MSG_BlackList_CSC::MergeFrom(const MSG_BlackList_CSC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:relation.MSG_BlackList_CSC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  blacklist_.MergeFrom(from.blacklist_);
}

void MSG_BlackList_CSC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:relation.MSG_BlackList_CSC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_BlackList_CSC::CopyFrom(const MSG_BlackList_CSC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:relation.MSG_BlackList_CSC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_BlackList_CSC::IsInitialized() const {
  return true;
}

void MSG_BlackList_CSC::InternalSwap(MSG_BlackList_CSC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  blacklist_.InternalSwap(&other->blacklist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_BlackList_CSC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_OperateBlackList_CSC::InitAsDefaultInstance() {
  ::relation::_MSG_OperateBlackList_CSC_default_instance_._instance.get_mutable()->data_ = const_cast< ::relation::BlackItem*>(
      ::relation::BlackItem::internal_default_instance());
}
class MSG_OperateBlackList_CSC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_OperateBlackList_CSC>()._has_bits_);
  static void set_has_charid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_opcode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::relation::BlackItem& data(const MSG_OperateBlackList_CSC* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::relation::BlackItem&
MSG_OperateBlackList_CSC::_Internal::data(const MSG_OperateBlackList_CSC* msg) {
  return *msg->data_;
}
MSG_OperateBlackList_CSC::MSG_OperateBlackList_CSC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:relation.MSG_OperateBlackList_CSC)
}
MSG_OperateBlackList_CSC::MSG_OperateBlackList_CSC(const MSG_OperateBlackList_CSC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::relation::BlackItem(*from.data_);
  } else {
    data_ = nullptr;
  }
  ::memcpy(&charid_, &from.charid_,
    static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&charid_)) + sizeof(success_));
  // @@protoc_insertion_point(copy_constructor:relation.MSG_OperateBlackList_CSC)
}

void MSG_OperateBlackList_CSC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_OperateBlackList_CSC_relation_2eproto.base);
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&data_)) + sizeof(success_));
}

MSG_OperateBlackList_CSC::~MSG_OperateBlackList_CSC() {
  // @@protoc_insertion_point(destructor:relation.MSG_OperateBlackList_CSC)
  SharedDtor();
}

void MSG_OperateBlackList_CSC::SharedDtor() {
  if (this != internal_default_instance()) delete data_;
}

void MSG_OperateBlackList_CSC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_OperateBlackList_CSC& MSG_OperateBlackList_CSC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_OperateBlackList_CSC_relation_2eproto.base);
  return *internal_default_instance();
}


void MSG_OperateBlackList_CSC::Clear() {
// @@protoc_insertion_point(message_clear_start:relation.MSG_OperateBlackList_CSC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(data_ != nullptr);
    data_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&charid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&success_) -
        reinterpret_cast<char*>(&charid_)) + sizeof(success_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_OperateBlackList_CSC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 charid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_charid(&has_bits);
          charid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 opcode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_opcode(&has_bits);
          opcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .relation.BlackItem data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool success = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_success(&has_bits);
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_OperateBlackList_CSC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:relation.MSG_OperateBlackList_CSC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 charid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_charid(), target);
  }

  // optional uint32 opcode = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_opcode(), target);
  }

  // optional .relation.BlackItem data = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::data(this), target, stream);
  }

  // optional bool success = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:relation.MSG_OperateBlackList_CSC)
  return target;
}

size_t MSG_OperateBlackList_CSC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:relation.MSG_OperateBlackList_CSC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .relation.BlackItem data = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_);
    }

    // optional uint64 charid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_charid());
    }

    // optional uint32 opcode = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_opcode());
    }

    // optional bool success = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_OperateBlackList_CSC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:relation.MSG_OperateBlackList_CSC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_OperateBlackList_CSC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_OperateBlackList_CSC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:relation.MSG_OperateBlackList_CSC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:relation.MSG_OperateBlackList_CSC)
    MergeFrom(*source);
  }
}

void MSG_OperateBlackList_CSC::MergeFrom(const MSG_OperateBlackList_CSC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:relation.MSG_OperateBlackList_CSC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_data()->::relation::BlackItem::MergeFrom(from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      charid_ = from.charid_;
    }
    if (cached_has_bits & 0x00000004u) {
      opcode_ = from.opcode_;
    }
    if (cached_has_bits & 0x00000008u) {
      success_ = from.success_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_OperateBlackList_CSC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:relation.MSG_OperateBlackList_CSC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_OperateBlackList_CSC::CopyFrom(const MSG_OperateBlackList_CSC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:relation.MSG_OperateBlackList_CSC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_OperateBlackList_CSC::IsInitialized() const {
  return true;
}

void MSG_OperateBlackList_CSC::InternalSwap(MSG_OperateBlackList_CSC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(data_, other->data_);
  swap(charid_, other->charid_);
  swap(opcode_, other->opcode_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_OperateBlackList_CSC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ChangeNickName_CSC::InitAsDefaultInstance() {
}
class MSG_ChangeNickName_CSC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ChangeNickName_CSC>()._has_bits_);
  static void set_has_charid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_nickname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MSG_ChangeNickName_CSC::MSG_ChangeNickName_CSC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:relation.MSG_ChangeNickName_CSC)
}
MSG_ChangeNickName_CSC::MSG_ChangeNickName_CSC(const MSG_ChangeNickName_CSC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_nickname()) {
    nickname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  ::memcpy(&charid_, &from.charid_,
    static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&charid_)) + sizeof(success_));
  // @@protoc_insertion_point(copy_constructor:relation.MSG_ChangeNickName_CSC)
}

void MSG_ChangeNickName_CSC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_ChangeNickName_CSC_relation_2eproto.base);
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&charid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&charid_)) + sizeof(success_));
}

MSG_ChangeNickName_CSC::~MSG_ChangeNickName_CSC() {
  // @@protoc_insertion_point(destructor:relation.MSG_ChangeNickName_CSC)
  SharedDtor();
}

void MSG_ChangeNickName_CSC::SharedDtor() {
  nickname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_ChangeNickName_CSC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ChangeNickName_CSC& MSG_ChangeNickName_CSC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ChangeNickName_CSC_relation_2eproto.base);
  return *internal_default_instance();
}


void MSG_ChangeNickName_CSC::Clear() {
// @@protoc_insertion_point(message_clear_start:relation.MSG_ChangeNickName_CSC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    nickname_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&charid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&success_) -
        reinterpret_cast<char*>(&charid_)) + sizeof(success_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ChangeNickName_CSC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 charid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_charid(&has_bits);
          charid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string nickname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_nickname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "relation.MSG_ChangeNickName_CSC.nickname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool success = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_success(&has_bits);
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ChangeNickName_CSC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:relation.MSG_ChangeNickName_CSC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 charid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_charid(), target);
  }

  // optional string nickname = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "relation.MSG_ChangeNickName_CSC.nickname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nickname(), target);
  }

  // optional bool success = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:relation.MSG_ChangeNickName_CSC)
  return target;
}

size_t MSG_ChangeNickName_CSC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:relation.MSG_ChangeNickName_CSC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string nickname = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_nickname());
    }

    // optional uint64 charid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_charid());
    }

    // optional bool success = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ChangeNickName_CSC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:relation.MSG_ChangeNickName_CSC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ChangeNickName_CSC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ChangeNickName_CSC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:relation.MSG_ChangeNickName_CSC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:relation.MSG_ChangeNickName_CSC)
    MergeFrom(*source);
  }
}

void MSG_ChangeNickName_CSC::MergeFrom(const MSG_ChangeNickName_CSC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:relation.MSG_ChangeNickName_CSC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      nickname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nickname_);
    }
    if (cached_has_bits & 0x00000002u) {
      charid_ = from.charid_;
    }
    if (cached_has_bits & 0x00000004u) {
      success_ = from.success_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_ChangeNickName_CSC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:relation.MSG_ChangeNickName_CSC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ChangeNickName_CSC::CopyFrom(const MSG_ChangeNickName_CSC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:relation.MSG_ChangeNickName_CSC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ChangeNickName_CSC::IsInitialized() const {
  return true;
}

void MSG_ChangeNickName_CSC::InternalSwap(MSG_ChangeNickName_CSC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  nickname_.Swap(&other->nickname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(charid_, other->charid_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ChangeNickName_CSC::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace relation
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::relation::relation_item* Arena::CreateMaybeMessage< ::relation::relation_item >(Arena* arena) {
  return Arena::CreateInternal< ::relation::relation_item >(arena);
}
template<> PROTOBUF_NOINLINE ::relation::MSG_Ret_RelationList_SC* Arena::CreateMaybeMessage< ::relation::MSG_Ret_RelationList_SC >(Arena* arena) {
  return Arena::CreateInternal< ::relation::MSG_Ret_RelationList_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::relation::MSG_Ret_RefreshRelation_SC* Arena::CreateMaybeMessage< ::relation::MSG_Ret_RefreshRelation_SC >(Arena* arena) {
  return Arena::CreateInternal< ::relation::MSG_Ret_RefreshRelation_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::relation::MSG_Req_ApplyRelation_CS* Arena::CreateMaybeMessage< ::relation::MSG_Req_ApplyRelation_CS >(Arena* arena) {
  return Arena::CreateInternal< ::relation::MSG_Req_ApplyRelation_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::relation::MSG_Req_AnswerApplyRelation_CS* Arena::CreateMaybeMessage< ::relation::MSG_Req_AnswerApplyRelation_CS >(Arena* arena) {
  return Arena::CreateInternal< ::relation::MSG_Req_AnswerApplyRelation_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::relation::MSG_Ret_AnswerApplyRelation_SC* Arena::CreateMaybeMessage< ::relation::MSG_Ret_AnswerApplyRelation_SC >(Arena* arena) {
  return Arena::CreateInternal< ::relation::MSG_Ret_AnswerApplyRelation_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::relation::MSG_Req_DeleteRelation_CS* Arena::CreateMaybeMessage< ::relation::MSG_Req_DeleteRelation_CS >(Arena* arena) {
  return Arena::CreateInternal< ::relation::MSG_Req_DeleteRelation_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::relation::MSG_Ret_DeleteRelation_SC* Arena::CreateMaybeMessage< ::relation::MSG_Ret_DeleteRelation_SC >(Arena* arena) {
  return Arena::CreateInternal< ::relation::MSG_Ret_DeleteRelation_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::relation::MSG_Req_OfflineInteractive_CS* Arena::CreateMaybeMessage< ::relation::MSG_Req_OfflineInteractive_CS >(Arena* arena) {
  return Arena::CreateInternal< ::relation::MSG_Req_OfflineInteractive_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::relation::MSG_Ret_AddInteractive_SC* Arena::CreateMaybeMessage< ::relation::MSG_Ret_AddInteractive_SC >(Arena* arena) {
  return Arena::CreateInternal< ::relation::MSG_Ret_AddInteractive_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::relation::MSG_Req_SearchRelation_CS* Arena::CreateMaybeMessage< ::relation::MSG_Req_SearchRelation_CS >(Arena* arena) {
  return Arena::CreateInternal< ::relation::MSG_Req_SearchRelation_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::relation::MSG_Ret_SearchRelation_SC* Arena::CreateMaybeMessage< ::relation::MSG_Ret_SearchRelation_SC >(Arena* arena) {
  return Arena::CreateInternal< ::relation::MSG_Ret_SearchRelation_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::relation::MSG_ModifyPageName_CSC* Arena::CreateMaybeMessage< ::relation::MSG_ModifyPageName_CSC >(Arena* arena) {
  return Arena::CreateInternal< ::relation::MSG_ModifyPageName_CSC >(arena);
}
template<> PROTOBUF_NOINLINE ::relation::MSG_MoveFriendToPage_CSC* Arena::CreateMaybeMessage< ::relation::MSG_MoveFriendToPage_CSC >(Arena* arena) {
  return Arena::CreateInternal< ::relation::MSG_MoveFriendToPage_CSC >(arena);
}
template<> PROTOBUF_NOINLINE ::relation::PageItem* Arena::CreateMaybeMessage< ::relation::PageItem >(Arena* arena) {
  return Arena::CreateInternal< ::relation::PageItem >(arena);
}
template<> PROTOBUF_NOINLINE ::relation::MSG_AllFriendPage_CSC* Arena::CreateMaybeMessage< ::relation::MSG_AllFriendPage_CSC >(Arena* arena) {
  return Arena::CreateInternal< ::relation::MSG_AllFriendPage_CSC >(arena);
}
template<> PROTOBUF_NOINLINE ::relation::BlackItem* Arena::CreateMaybeMessage< ::relation::BlackItem >(Arena* arena) {
  return Arena::CreateInternal< ::relation::BlackItem >(arena);
}
template<> PROTOBUF_NOINLINE ::relation::MSG_BlackList_CSC* Arena::CreateMaybeMessage< ::relation::MSG_BlackList_CSC >(Arena* arena) {
  return Arena::CreateInternal< ::relation::MSG_BlackList_CSC >(arena);
}
template<> PROTOBUF_NOINLINE ::relation::MSG_OperateBlackList_CSC* Arena::CreateMaybeMessage< ::relation::MSG_OperateBlackList_CSC >(Arena* arena) {
  return Arena::CreateInternal< ::relation::MSG_OperateBlackList_CSC >(arena);
}
template<> PROTOBUF_NOINLINE ::relation::MSG_ChangeNickName_CSC* Arena::CreateMaybeMessage< ::relation::MSG_ChangeNickName_CSC >(Arena* arena) {
  return Arena::CreateInternal< ::relation::MSG_ChangeNickName_CSC >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
