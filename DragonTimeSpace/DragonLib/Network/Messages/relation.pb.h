// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: relation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_relation_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_relation_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_relation_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_relation_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[20]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_relation_2eproto;
namespace relation {
class BlackItem;
class BlackItemDefaultTypeInternal;
extern BlackItemDefaultTypeInternal _BlackItem_default_instance_;
class MSG_AllFriendPage_CSC;
class MSG_AllFriendPage_CSCDefaultTypeInternal;
extern MSG_AllFriendPage_CSCDefaultTypeInternal _MSG_AllFriendPage_CSC_default_instance_;
class MSG_BlackList_CSC;
class MSG_BlackList_CSCDefaultTypeInternal;
extern MSG_BlackList_CSCDefaultTypeInternal _MSG_BlackList_CSC_default_instance_;
class MSG_ChangeNickName_CSC;
class MSG_ChangeNickName_CSCDefaultTypeInternal;
extern MSG_ChangeNickName_CSCDefaultTypeInternal _MSG_ChangeNickName_CSC_default_instance_;
class MSG_ModifyPageName_CSC;
class MSG_ModifyPageName_CSCDefaultTypeInternal;
extern MSG_ModifyPageName_CSCDefaultTypeInternal _MSG_ModifyPageName_CSC_default_instance_;
class MSG_MoveFriendToPage_CSC;
class MSG_MoveFriendToPage_CSCDefaultTypeInternal;
extern MSG_MoveFriendToPage_CSCDefaultTypeInternal _MSG_MoveFriendToPage_CSC_default_instance_;
class MSG_OperateBlackList_CSC;
class MSG_OperateBlackList_CSCDefaultTypeInternal;
extern MSG_OperateBlackList_CSCDefaultTypeInternal _MSG_OperateBlackList_CSC_default_instance_;
class MSG_Req_AnswerApplyRelation_CS;
class MSG_Req_AnswerApplyRelation_CSDefaultTypeInternal;
extern MSG_Req_AnswerApplyRelation_CSDefaultTypeInternal _MSG_Req_AnswerApplyRelation_CS_default_instance_;
class MSG_Req_ApplyRelation_CS;
class MSG_Req_ApplyRelation_CSDefaultTypeInternal;
extern MSG_Req_ApplyRelation_CSDefaultTypeInternal _MSG_Req_ApplyRelation_CS_default_instance_;
class MSG_Req_DeleteRelation_CS;
class MSG_Req_DeleteRelation_CSDefaultTypeInternal;
extern MSG_Req_DeleteRelation_CSDefaultTypeInternal _MSG_Req_DeleteRelation_CS_default_instance_;
class MSG_Req_OfflineInteractive_CS;
class MSG_Req_OfflineInteractive_CSDefaultTypeInternal;
extern MSG_Req_OfflineInteractive_CSDefaultTypeInternal _MSG_Req_OfflineInteractive_CS_default_instance_;
class MSG_Req_SearchRelation_CS;
class MSG_Req_SearchRelation_CSDefaultTypeInternal;
extern MSG_Req_SearchRelation_CSDefaultTypeInternal _MSG_Req_SearchRelation_CS_default_instance_;
class MSG_Ret_AddInteractive_SC;
class MSG_Ret_AddInteractive_SCDefaultTypeInternal;
extern MSG_Ret_AddInteractive_SCDefaultTypeInternal _MSG_Ret_AddInteractive_SC_default_instance_;
class MSG_Ret_AnswerApplyRelation_SC;
class MSG_Ret_AnswerApplyRelation_SCDefaultTypeInternal;
extern MSG_Ret_AnswerApplyRelation_SCDefaultTypeInternal _MSG_Ret_AnswerApplyRelation_SC_default_instance_;
class MSG_Ret_DeleteRelation_SC;
class MSG_Ret_DeleteRelation_SCDefaultTypeInternal;
extern MSG_Ret_DeleteRelation_SCDefaultTypeInternal _MSG_Ret_DeleteRelation_SC_default_instance_;
class MSG_Ret_RefreshRelation_SC;
class MSG_Ret_RefreshRelation_SCDefaultTypeInternal;
extern MSG_Ret_RefreshRelation_SCDefaultTypeInternal _MSG_Ret_RefreshRelation_SC_default_instance_;
class MSG_Ret_RelationList_SC;
class MSG_Ret_RelationList_SCDefaultTypeInternal;
extern MSG_Ret_RelationList_SCDefaultTypeInternal _MSG_Ret_RelationList_SC_default_instance_;
class MSG_Ret_SearchRelation_SC;
class MSG_Ret_SearchRelation_SCDefaultTypeInternal;
extern MSG_Ret_SearchRelation_SCDefaultTypeInternal _MSG_Ret_SearchRelation_SC_default_instance_;
class PageItem;
class PageItemDefaultTypeInternal;
extern PageItemDefaultTypeInternal _PageItem_default_instance_;
class relation_item;
class relation_itemDefaultTypeInternal;
extern relation_itemDefaultTypeInternal _relation_item_default_instance_;
}  // namespace relation
PROTOBUF_NAMESPACE_OPEN
template<> ::relation::BlackItem* Arena::CreateMaybeMessage<::relation::BlackItem>(Arena*);
template<> ::relation::MSG_AllFriendPage_CSC* Arena::CreateMaybeMessage<::relation::MSG_AllFriendPage_CSC>(Arena*);
template<> ::relation::MSG_BlackList_CSC* Arena::CreateMaybeMessage<::relation::MSG_BlackList_CSC>(Arena*);
template<> ::relation::MSG_ChangeNickName_CSC* Arena::CreateMaybeMessage<::relation::MSG_ChangeNickName_CSC>(Arena*);
template<> ::relation::MSG_ModifyPageName_CSC* Arena::CreateMaybeMessage<::relation::MSG_ModifyPageName_CSC>(Arena*);
template<> ::relation::MSG_MoveFriendToPage_CSC* Arena::CreateMaybeMessage<::relation::MSG_MoveFriendToPage_CSC>(Arena*);
template<> ::relation::MSG_OperateBlackList_CSC* Arena::CreateMaybeMessage<::relation::MSG_OperateBlackList_CSC>(Arena*);
template<> ::relation::MSG_Req_AnswerApplyRelation_CS* Arena::CreateMaybeMessage<::relation::MSG_Req_AnswerApplyRelation_CS>(Arena*);
template<> ::relation::MSG_Req_ApplyRelation_CS* Arena::CreateMaybeMessage<::relation::MSG_Req_ApplyRelation_CS>(Arena*);
template<> ::relation::MSG_Req_DeleteRelation_CS* Arena::CreateMaybeMessage<::relation::MSG_Req_DeleteRelation_CS>(Arena*);
template<> ::relation::MSG_Req_OfflineInteractive_CS* Arena::CreateMaybeMessage<::relation::MSG_Req_OfflineInteractive_CS>(Arena*);
template<> ::relation::MSG_Req_SearchRelation_CS* Arena::CreateMaybeMessage<::relation::MSG_Req_SearchRelation_CS>(Arena*);
template<> ::relation::MSG_Ret_AddInteractive_SC* Arena::CreateMaybeMessage<::relation::MSG_Ret_AddInteractive_SC>(Arena*);
template<> ::relation::MSG_Ret_AnswerApplyRelation_SC* Arena::CreateMaybeMessage<::relation::MSG_Ret_AnswerApplyRelation_SC>(Arena*);
template<> ::relation::MSG_Ret_DeleteRelation_SC* Arena::CreateMaybeMessage<::relation::MSG_Ret_DeleteRelation_SC>(Arena*);
template<> ::relation::MSG_Ret_RefreshRelation_SC* Arena::CreateMaybeMessage<::relation::MSG_Ret_RefreshRelation_SC>(Arena*);
template<> ::relation::MSG_Ret_RelationList_SC* Arena::CreateMaybeMessage<::relation::MSG_Ret_RelationList_SC>(Arena*);
template<> ::relation::MSG_Ret_SearchRelation_SC* Arena::CreateMaybeMessage<::relation::MSG_Ret_SearchRelation_SC>(Arena*);
template<> ::relation::PageItem* Arena::CreateMaybeMessage<::relation::PageItem>(Arena*);
template<> ::relation::relation_item* Arena::CreateMaybeMessage<::relation::relation_item>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace relation {

enum RelationType : int {
  RELATION_STRANGER = 0,
  RELATION_FRIEND = 1,
  RELATION_APPLY = 2,
  RELATION_BE_APPLY = 3,
  RELATION_BOTH_APPLY = 4
};
bool RelationType_IsValid(int value);
constexpr RelationType RelationType_MIN = RELATION_STRANGER;
constexpr RelationType RelationType_MAX = RELATION_BOTH_APPLY;
constexpr int RelationType_ARRAYSIZE = RelationType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RelationType_descriptor();
template<typename T>
inline const std::string& RelationType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RelationType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RelationType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RelationType_descriptor(), enum_t_value);
}
inline bool RelationType_Parse(
    const std::string& name, RelationType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RelationType>(
    RelationType_descriptor(), name, value);
}
// ===================================================================

class relation_item :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:relation.relation_item) */ {
 public:
  relation_item();
  virtual ~relation_item();

  relation_item(const relation_item& from);
  relation_item(relation_item&& from) noexcept
    : relation_item() {
    *this = ::std::move(from);
  }

  inline relation_item& operator=(const relation_item& from) {
    CopyFrom(from);
    return *this;
  }
  inline relation_item& operator=(relation_item&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const relation_item& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const relation_item* internal_default_instance() {
    return reinterpret_cast<const relation_item*>(
               &_relation_item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(relation_item& a, relation_item& b) {
    a.Swap(&b);
  }
  inline void Swap(relation_item* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline relation_item* New() const final {
    return CreateMaybeMessage<relation_item>(nullptr);
  }

  relation_item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<relation_item>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const relation_item& from);
  void MergeFrom(const relation_item& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(relation_item* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "relation.relation_item";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_relation_2eproto);
    return ::descriptor_table_relation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRelationnameFieldNumber = 2,
    kPageFieldNumber = 9,
    kNickNameFieldNumber = 10,
    kRelationidFieldNumber = 1,
    kLevelFieldNumber = 3,
    kCareerFieldNumber = 4,
    kTypeFieldNumber = 5,
    kStatusFieldNumber = 6,
    kLoveDegreeFieldNumber = 7,
    kLastchattimeFieldNumber = 8,
    kOfflineTimeFieldNumber = 11,
    kHeadPicFieldNumber = 12,
    kViplevelFieldNumber = 13,
    kPowerFieldNumber = 14,
    kFriendrateFieldNumber = 15,
    kCreateTimeFieldNumber = 16,
  };
  // optional string relationname = 2;
  bool has_relationname() const;
  private:
  bool _internal_has_relationname() const;
  public:
  void clear_relationname();
  const std::string& relationname() const;
  void set_relationname(const std::string& value);
  void set_relationname(std::string&& value);
  void set_relationname(const char* value);
  void set_relationname(const char* value, size_t size);
  std::string* mutable_relationname();
  std::string* release_relationname();
  void set_allocated_relationname(std::string* relationname);
  private:
  const std::string& _internal_relationname() const;
  void _internal_set_relationname(const std::string& value);
  std::string* _internal_mutable_relationname();
  public:

  // optional string page = 9;
  bool has_page() const;
  private:
  bool _internal_has_page() const;
  public:
  void clear_page();
  const std::string& page() const;
  void set_page(const std::string& value);
  void set_page(std::string&& value);
  void set_page(const char* value);
  void set_page(const char* value, size_t size);
  std::string* mutable_page();
  std::string* release_page();
  void set_allocated_page(std::string* page);
  private:
  const std::string& _internal_page() const;
  void _internal_set_page(const std::string& value);
  std::string* _internal_mutable_page();
  public:

  // optional string nickName = 10;
  bool has_nickname() const;
  private:
  bool _internal_has_nickname() const;
  public:
  void clear_nickname();
  const std::string& nickname() const;
  void set_nickname(const std::string& value);
  void set_nickname(std::string&& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  std::string* mutable_nickname();
  std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // optional uint64 relationid = 1;
  bool has_relationid() const;
  private:
  bool _internal_has_relationid() const;
  public:
  void clear_relationid();
  ::PROTOBUF_NAMESPACE_ID::uint64 relationid() const;
  void set_relationid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_relationid() const;
  void _internal_set_relationid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 level = 3;
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 career = 4;
  bool has_career() const;
  private:
  bool _internal_has_career() const;
  public:
  void clear_career();
  ::PROTOBUF_NAMESPACE_ID::uint32 career() const;
  void set_career(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_career() const;
  void _internal_set_career(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 type = 5;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 status = 6;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 love_degree = 7;
  bool has_love_degree() const;
  private:
  bool _internal_has_love_degree() const;
  public:
  void clear_love_degree();
  ::PROTOBUF_NAMESPACE_ID::uint32 love_degree() const;
  void set_love_degree(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_love_degree() const;
  void _internal_set_love_degree(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 lastchattime = 8;
  bool has_lastchattime() const;
  private:
  bool _internal_has_lastchattime() const;
  public:
  void clear_lastchattime();
  ::PROTOBUF_NAMESPACE_ID::uint32 lastchattime() const;
  void set_lastchattime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lastchattime() const;
  void _internal_set_lastchattime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 offlineTime = 11;
  bool has_offlinetime() const;
  private:
  bool _internal_has_offlinetime() const;
  public:
  void clear_offlinetime();
  ::PROTOBUF_NAMESPACE_ID::uint32 offlinetime() const;
  void set_offlinetime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_offlinetime() const;
  void _internal_set_offlinetime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 headPic = 12;
  bool has_headpic() const;
  private:
  bool _internal_has_headpic() const;
  public:
  void clear_headpic();
  ::PROTOBUF_NAMESPACE_ID::uint32 headpic() const;
  void set_headpic(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_headpic() const;
  void _internal_set_headpic(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 viplevel = 13;
  bool has_viplevel() const;
  private:
  bool _internal_has_viplevel() const;
  public:
  void clear_viplevel();
  ::PROTOBUF_NAMESPACE_ID::uint32 viplevel() const;
  void set_viplevel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_viplevel() const;
  void _internal_set_viplevel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 power = 14;
  bool has_power() const;
  private:
  bool _internal_has_power() const;
  public:
  void clear_power();
  ::PROTOBUF_NAMESPACE_ID::uint32 power() const;
  void set_power(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_power() const;
  void _internal_set_power(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 friendrate = 15;
  bool has_friendrate() const;
  private:
  bool _internal_has_friendrate() const;
  public:
  void clear_friendrate();
  ::PROTOBUF_NAMESPACE_ID::uint32 friendrate() const;
  void set_friendrate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_friendrate() const;
  void _internal_set_friendrate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 createTime = 16;
  bool has_createtime() const;
  private:
  bool _internal_has_createtime() const;
  public:
  void clear_createtime();
  ::PROTOBUF_NAMESPACE_ID::uint32 createtime() const;
  void set_createtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_createtime() const;
  void _internal_set_createtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:relation.relation_item)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr relationname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::uint64 relationid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 level_;
  ::PROTOBUF_NAMESPACE_ID::uint32 career_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 love_degree_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lastchattime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 offlinetime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 headpic_;
  ::PROTOBUF_NAMESPACE_ID::uint32 viplevel_;
  ::PROTOBUF_NAMESPACE_ID::uint32 power_;
  ::PROTOBUF_NAMESPACE_ID::uint32 friendrate_;
  ::PROTOBUF_NAMESPACE_ID::uint32 createtime_;
  friend struct ::TableStruct_relation_2eproto;
};
// -------------------------------------------------------------------

class MSG_Ret_RelationList_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:relation.MSG_Ret_RelationList_SC) */ {
 public:
  MSG_Ret_RelationList_SC();
  virtual ~MSG_Ret_RelationList_SC();

  MSG_Ret_RelationList_SC(const MSG_Ret_RelationList_SC& from);
  MSG_Ret_RelationList_SC(MSG_Ret_RelationList_SC&& from) noexcept
    : MSG_Ret_RelationList_SC() {
    *this = ::std::move(from);
  }

  inline MSG_Ret_RelationList_SC& operator=(const MSG_Ret_RelationList_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Ret_RelationList_SC& operator=(MSG_Ret_RelationList_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Ret_RelationList_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Ret_RelationList_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_Ret_RelationList_SC*>(
               &_MSG_Ret_RelationList_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MSG_Ret_RelationList_SC& a, MSG_Ret_RelationList_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Ret_RelationList_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Ret_RelationList_SC* New() const final {
    return CreateMaybeMessage<MSG_Ret_RelationList_SC>(nullptr);
  }

  MSG_Ret_RelationList_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Ret_RelationList_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Ret_RelationList_SC& from);
  void MergeFrom(const MSG_Ret_RelationList_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Ret_RelationList_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "relation.MSG_Ret_RelationList_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_relation_2eproto);
    return ::descriptor_table_relation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRelationsFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // repeated .relation.relation_item relations = 1;
  int relations_size() const;
  private:
  int _internal_relations_size() const;
  public:
  void clear_relations();
  ::relation::relation_item* mutable_relations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::relation::relation_item >*
      mutable_relations();
  private:
  const ::relation::relation_item& _internal_relations(int index) const;
  ::relation::relation_item* _internal_add_relations();
  public:
  const ::relation::relation_item& relations(int index) const;
  ::relation::relation_item* add_relations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::relation::relation_item >&
      relations() const;

  // optional uint32 type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:relation.MSG_Ret_RelationList_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::relation::relation_item > relations_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  friend struct ::TableStruct_relation_2eproto;
};
// -------------------------------------------------------------------

class MSG_Ret_RefreshRelation_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:relation.MSG_Ret_RefreshRelation_SC) */ {
 public:
  MSG_Ret_RefreshRelation_SC();
  virtual ~MSG_Ret_RefreshRelation_SC();

  MSG_Ret_RefreshRelation_SC(const MSG_Ret_RefreshRelation_SC& from);
  MSG_Ret_RefreshRelation_SC(MSG_Ret_RefreshRelation_SC&& from) noexcept
    : MSG_Ret_RefreshRelation_SC() {
    *this = ::std::move(from);
  }

  inline MSG_Ret_RefreshRelation_SC& operator=(const MSG_Ret_RefreshRelation_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Ret_RefreshRelation_SC& operator=(MSG_Ret_RefreshRelation_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Ret_RefreshRelation_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Ret_RefreshRelation_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_Ret_RefreshRelation_SC*>(
               &_MSG_Ret_RefreshRelation_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MSG_Ret_RefreshRelation_SC& a, MSG_Ret_RefreshRelation_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Ret_RefreshRelation_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Ret_RefreshRelation_SC* New() const final {
    return CreateMaybeMessage<MSG_Ret_RefreshRelation_SC>(nullptr);
  }

  MSG_Ret_RefreshRelation_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Ret_RefreshRelation_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Ret_RefreshRelation_SC& from);
  void MergeFrom(const MSG_Ret_RefreshRelation_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Ret_RefreshRelation_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "relation.MSG_Ret_RefreshRelation_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_relation_2eproto);
    return ::descriptor_table_relation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // optional .relation.relation_item data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::relation::relation_item& data() const;
  ::relation::relation_item* release_data();
  ::relation::relation_item* mutable_data();
  void set_allocated_data(::relation::relation_item* data);
  private:
  const ::relation::relation_item& _internal_data() const;
  ::relation::relation_item* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:relation.MSG_Ret_RefreshRelation_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::relation::relation_item* data_;
  friend struct ::TableStruct_relation_2eproto;
};
// -------------------------------------------------------------------

class MSG_Req_ApplyRelation_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:relation.MSG_Req_ApplyRelation_CS) */ {
 public:
  MSG_Req_ApplyRelation_CS();
  virtual ~MSG_Req_ApplyRelation_CS();

  MSG_Req_ApplyRelation_CS(const MSG_Req_ApplyRelation_CS& from);
  MSG_Req_ApplyRelation_CS(MSG_Req_ApplyRelation_CS&& from) noexcept
    : MSG_Req_ApplyRelation_CS() {
    *this = ::std::move(from);
  }

  inline MSG_Req_ApplyRelation_CS& operator=(const MSG_Req_ApplyRelation_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Req_ApplyRelation_CS& operator=(MSG_Req_ApplyRelation_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Req_ApplyRelation_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Req_ApplyRelation_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_Req_ApplyRelation_CS*>(
               &_MSG_Req_ApplyRelation_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MSG_Req_ApplyRelation_CS& a, MSG_Req_ApplyRelation_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Req_ApplyRelation_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Req_ApplyRelation_CS* New() const final {
    return CreateMaybeMessage<MSG_Req_ApplyRelation_CS>(nullptr);
  }

  MSG_Req_ApplyRelation_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Req_ApplyRelation_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Req_ApplyRelation_CS& from);
  void MergeFrom(const MSG_Req_ApplyRelation_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Req_ApplyRelation_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "relation.MSG_Req_ApplyRelation_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_relation_2eproto);
    return ::descriptor_table_relation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRelationidFieldNumber = 1,
  };
  // optional uint64 relationid = 1;
  bool has_relationid() const;
  private:
  bool _internal_has_relationid() const;
  public:
  void clear_relationid();
  ::PROTOBUF_NAMESPACE_ID::uint64 relationid() const;
  void set_relationid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_relationid() const;
  void _internal_set_relationid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:relation.MSG_Req_ApplyRelation_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 relationid_;
  friend struct ::TableStruct_relation_2eproto;
};
// -------------------------------------------------------------------

class MSG_Req_AnswerApplyRelation_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:relation.MSG_Req_AnswerApplyRelation_CS) */ {
 public:
  MSG_Req_AnswerApplyRelation_CS();
  virtual ~MSG_Req_AnswerApplyRelation_CS();

  MSG_Req_AnswerApplyRelation_CS(const MSG_Req_AnswerApplyRelation_CS& from);
  MSG_Req_AnswerApplyRelation_CS(MSG_Req_AnswerApplyRelation_CS&& from) noexcept
    : MSG_Req_AnswerApplyRelation_CS() {
    *this = ::std::move(from);
  }

  inline MSG_Req_AnswerApplyRelation_CS& operator=(const MSG_Req_AnswerApplyRelation_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Req_AnswerApplyRelation_CS& operator=(MSG_Req_AnswerApplyRelation_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Req_AnswerApplyRelation_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Req_AnswerApplyRelation_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_Req_AnswerApplyRelation_CS*>(
               &_MSG_Req_AnswerApplyRelation_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MSG_Req_AnswerApplyRelation_CS& a, MSG_Req_AnswerApplyRelation_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Req_AnswerApplyRelation_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Req_AnswerApplyRelation_CS* New() const final {
    return CreateMaybeMessage<MSG_Req_AnswerApplyRelation_CS>(nullptr);
  }

  MSG_Req_AnswerApplyRelation_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Req_AnswerApplyRelation_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Req_AnswerApplyRelation_CS& from);
  void MergeFrom(const MSG_Req_AnswerApplyRelation_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Req_AnswerApplyRelation_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "relation.MSG_Req_AnswerApplyRelation_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_relation_2eproto);
    return ::descriptor_table_relation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRelationidFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // optional uint64 relationid = 1;
  bool has_relationid() const;
  private:
  bool _internal_has_relationid() const;
  public:
  void clear_relationid();
  ::PROTOBUF_NAMESPACE_ID::uint64 relationid() const;
  void set_relationid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_relationid() const;
  void _internal_set_relationid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:relation.MSG_Req_AnswerApplyRelation_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 relationid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  friend struct ::TableStruct_relation_2eproto;
};
// -------------------------------------------------------------------

class MSG_Ret_AnswerApplyRelation_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:relation.MSG_Ret_AnswerApplyRelation_SC) */ {
 public:
  MSG_Ret_AnswerApplyRelation_SC();
  virtual ~MSG_Ret_AnswerApplyRelation_SC();

  MSG_Ret_AnswerApplyRelation_SC(const MSG_Ret_AnswerApplyRelation_SC& from);
  MSG_Ret_AnswerApplyRelation_SC(MSG_Ret_AnswerApplyRelation_SC&& from) noexcept
    : MSG_Ret_AnswerApplyRelation_SC() {
    *this = ::std::move(from);
  }

  inline MSG_Ret_AnswerApplyRelation_SC& operator=(const MSG_Ret_AnswerApplyRelation_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Ret_AnswerApplyRelation_SC& operator=(MSG_Ret_AnswerApplyRelation_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Ret_AnswerApplyRelation_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Ret_AnswerApplyRelation_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_Ret_AnswerApplyRelation_SC*>(
               &_MSG_Ret_AnswerApplyRelation_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MSG_Ret_AnswerApplyRelation_SC& a, MSG_Ret_AnswerApplyRelation_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Ret_AnswerApplyRelation_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Ret_AnswerApplyRelation_SC* New() const final {
    return CreateMaybeMessage<MSG_Ret_AnswerApplyRelation_SC>(nullptr);
  }

  MSG_Ret_AnswerApplyRelation_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Ret_AnswerApplyRelation_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Ret_AnswerApplyRelation_SC& from);
  void MergeFrom(const MSG_Ret_AnswerApplyRelation_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Ret_AnswerApplyRelation_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "relation.MSG_Ret_AnswerApplyRelation_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_relation_2eproto);
    return ::descriptor_table_relation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRelationidFieldNumber = 1,
    kIssuccFieldNumber = 2,
  };
  // optional uint64 relationid = 1;
  bool has_relationid() const;
  private:
  bool _internal_has_relationid() const;
  public:
  void clear_relationid();
  ::PROTOBUF_NAMESPACE_ID::uint64 relationid() const;
  void set_relationid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_relationid() const;
  void _internal_set_relationid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool issucc = 2;
  bool has_issucc() const;
  private:
  bool _internal_has_issucc() const;
  public:
  void clear_issucc();
  bool issucc() const;
  void set_issucc(bool value);
  private:
  bool _internal_issucc() const;
  void _internal_set_issucc(bool value);
  public:

  // @@protoc_insertion_point(class_scope:relation.MSG_Ret_AnswerApplyRelation_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 relationid_;
  bool issucc_;
  friend struct ::TableStruct_relation_2eproto;
};
// -------------------------------------------------------------------

class MSG_Req_DeleteRelation_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:relation.MSG_Req_DeleteRelation_CS) */ {
 public:
  MSG_Req_DeleteRelation_CS();
  virtual ~MSG_Req_DeleteRelation_CS();

  MSG_Req_DeleteRelation_CS(const MSG_Req_DeleteRelation_CS& from);
  MSG_Req_DeleteRelation_CS(MSG_Req_DeleteRelation_CS&& from) noexcept
    : MSG_Req_DeleteRelation_CS() {
    *this = ::std::move(from);
  }

  inline MSG_Req_DeleteRelation_CS& operator=(const MSG_Req_DeleteRelation_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Req_DeleteRelation_CS& operator=(MSG_Req_DeleteRelation_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Req_DeleteRelation_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Req_DeleteRelation_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_Req_DeleteRelation_CS*>(
               &_MSG_Req_DeleteRelation_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MSG_Req_DeleteRelation_CS& a, MSG_Req_DeleteRelation_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Req_DeleteRelation_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Req_DeleteRelation_CS* New() const final {
    return CreateMaybeMessage<MSG_Req_DeleteRelation_CS>(nullptr);
  }

  MSG_Req_DeleteRelation_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Req_DeleteRelation_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Req_DeleteRelation_CS& from);
  void MergeFrom(const MSG_Req_DeleteRelation_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Req_DeleteRelation_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "relation.MSG_Req_DeleteRelation_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_relation_2eproto);
    return ::descriptor_table_relation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRelationidFieldNumber = 1,
  };
  // optional uint64 relationid = 1;
  bool has_relationid() const;
  private:
  bool _internal_has_relationid() const;
  public:
  void clear_relationid();
  ::PROTOBUF_NAMESPACE_ID::uint64 relationid() const;
  void set_relationid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_relationid() const;
  void _internal_set_relationid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:relation.MSG_Req_DeleteRelation_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 relationid_;
  friend struct ::TableStruct_relation_2eproto;
};
// -------------------------------------------------------------------

class MSG_Ret_DeleteRelation_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:relation.MSG_Ret_DeleteRelation_SC) */ {
 public:
  MSG_Ret_DeleteRelation_SC();
  virtual ~MSG_Ret_DeleteRelation_SC();

  MSG_Ret_DeleteRelation_SC(const MSG_Ret_DeleteRelation_SC& from);
  MSG_Ret_DeleteRelation_SC(MSG_Ret_DeleteRelation_SC&& from) noexcept
    : MSG_Ret_DeleteRelation_SC() {
    *this = ::std::move(from);
  }

  inline MSG_Ret_DeleteRelation_SC& operator=(const MSG_Ret_DeleteRelation_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Ret_DeleteRelation_SC& operator=(MSG_Ret_DeleteRelation_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Ret_DeleteRelation_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Ret_DeleteRelation_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_Ret_DeleteRelation_SC*>(
               &_MSG_Ret_DeleteRelation_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MSG_Ret_DeleteRelation_SC& a, MSG_Ret_DeleteRelation_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Ret_DeleteRelation_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Ret_DeleteRelation_SC* New() const final {
    return CreateMaybeMessage<MSG_Ret_DeleteRelation_SC>(nullptr);
  }

  MSG_Ret_DeleteRelation_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Ret_DeleteRelation_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Ret_DeleteRelation_SC& from);
  void MergeFrom(const MSG_Ret_DeleteRelation_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Ret_DeleteRelation_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "relation.MSG_Ret_DeleteRelation_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_relation_2eproto);
    return ::descriptor_table_relation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRelationidFieldNumber = 1,
    kIssuccFieldNumber = 2,
  };
  // optional uint64 relationid = 1;
  bool has_relationid() const;
  private:
  bool _internal_has_relationid() const;
  public:
  void clear_relationid();
  ::PROTOBUF_NAMESPACE_ID::uint64 relationid() const;
  void set_relationid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_relationid() const;
  void _internal_set_relationid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool issucc = 2;
  bool has_issucc() const;
  private:
  bool _internal_has_issucc() const;
  public:
  void clear_issucc();
  bool issucc() const;
  void set_issucc(bool value);
  private:
  bool _internal_issucc() const;
  void _internal_set_issucc(bool value);
  public:

  // @@protoc_insertion_point(class_scope:relation.MSG_Ret_DeleteRelation_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 relationid_;
  bool issucc_;
  friend struct ::TableStruct_relation_2eproto;
};
// -------------------------------------------------------------------

class MSG_Req_OfflineInteractive_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:relation.MSG_Req_OfflineInteractive_CS) */ {
 public:
  MSG_Req_OfflineInteractive_CS();
  virtual ~MSG_Req_OfflineInteractive_CS();

  MSG_Req_OfflineInteractive_CS(const MSG_Req_OfflineInteractive_CS& from);
  MSG_Req_OfflineInteractive_CS(MSG_Req_OfflineInteractive_CS&& from) noexcept
    : MSG_Req_OfflineInteractive_CS() {
    *this = ::std::move(from);
  }

  inline MSG_Req_OfflineInteractive_CS& operator=(const MSG_Req_OfflineInteractive_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Req_OfflineInteractive_CS& operator=(MSG_Req_OfflineInteractive_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Req_OfflineInteractive_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Req_OfflineInteractive_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_Req_OfflineInteractive_CS*>(
               &_MSG_Req_OfflineInteractive_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(MSG_Req_OfflineInteractive_CS& a, MSG_Req_OfflineInteractive_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Req_OfflineInteractive_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Req_OfflineInteractive_CS* New() const final {
    return CreateMaybeMessage<MSG_Req_OfflineInteractive_CS>(nullptr);
  }

  MSG_Req_OfflineInteractive_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Req_OfflineInteractive_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Req_OfflineInteractive_CS& from);
  void MergeFrom(const MSG_Req_OfflineInteractive_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Req_OfflineInteractive_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "relation.MSG_Req_OfflineInteractive_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_relation_2eproto);
    return ::descriptor_table_relation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:relation.MSG_Req_OfflineInteractive_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_relation_2eproto;
};
// -------------------------------------------------------------------

class MSG_Ret_AddInteractive_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:relation.MSG_Ret_AddInteractive_SC) */ {
 public:
  MSG_Ret_AddInteractive_SC();
  virtual ~MSG_Ret_AddInteractive_SC();

  MSG_Ret_AddInteractive_SC(const MSG_Ret_AddInteractive_SC& from);
  MSG_Ret_AddInteractive_SC(MSG_Ret_AddInteractive_SC&& from) noexcept
    : MSG_Ret_AddInteractive_SC() {
    *this = ::std::move(from);
  }

  inline MSG_Ret_AddInteractive_SC& operator=(const MSG_Ret_AddInteractive_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Ret_AddInteractive_SC& operator=(MSG_Ret_AddInteractive_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Ret_AddInteractive_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Ret_AddInteractive_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_Ret_AddInteractive_SC*>(
               &_MSG_Ret_AddInteractive_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(MSG_Ret_AddInteractive_SC& a, MSG_Ret_AddInteractive_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Ret_AddInteractive_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Ret_AddInteractive_SC* New() const final {
    return CreateMaybeMessage<MSG_Ret_AddInteractive_SC>(nullptr);
  }

  MSG_Ret_AddInteractive_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Ret_AddInteractive_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Ret_AddInteractive_SC& from);
  void MergeFrom(const MSG_Ret_AddInteractive_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Ret_AddInteractive_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "relation.MSG_Ret_AddInteractive_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_relation_2eproto);
    return ::descriptor_table_relation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated .relation.relation_item data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::relation::relation_item* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::relation::relation_item >*
      mutable_data();
  private:
  const ::relation::relation_item& _internal_data(int index) const;
  ::relation::relation_item* _internal_add_data();
  public:
  const ::relation::relation_item& data(int index) const;
  ::relation::relation_item* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::relation::relation_item >&
      data() const;

  // @@protoc_insertion_point(class_scope:relation.MSG_Ret_AddInteractive_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::relation::relation_item > data_;
  friend struct ::TableStruct_relation_2eproto;
};
// -------------------------------------------------------------------

class MSG_Req_SearchRelation_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:relation.MSG_Req_SearchRelation_CS) */ {
 public:
  MSG_Req_SearchRelation_CS();
  virtual ~MSG_Req_SearchRelation_CS();

  MSG_Req_SearchRelation_CS(const MSG_Req_SearchRelation_CS& from);
  MSG_Req_SearchRelation_CS(MSG_Req_SearchRelation_CS&& from) noexcept
    : MSG_Req_SearchRelation_CS() {
    *this = ::std::move(from);
  }

  inline MSG_Req_SearchRelation_CS& operator=(const MSG_Req_SearchRelation_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Req_SearchRelation_CS& operator=(MSG_Req_SearchRelation_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Req_SearchRelation_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Req_SearchRelation_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_Req_SearchRelation_CS*>(
               &_MSG_Req_SearchRelation_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(MSG_Req_SearchRelation_CS& a, MSG_Req_SearchRelation_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Req_SearchRelation_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Req_SearchRelation_CS* New() const final {
    return CreateMaybeMessage<MSG_Req_SearchRelation_CS>(nullptr);
  }

  MSG_Req_SearchRelation_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Req_SearchRelation_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Req_SearchRelation_CS& from);
  void MergeFrom(const MSG_Req_SearchRelation_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Req_SearchRelation_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "relation.MSG_Req_SearchRelation_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_relation_2eproto);
    return ::descriptor_table_relation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConditionFieldNumber = 1,
  };
  // optional string condition = 1;
  bool has_condition() const;
  private:
  bool _internal_has_condition() const;
  public:
  void clear_condition();
  const std::string& condition() const;
  void set_condition(const std::string& value);
  void set_condition(std::string&& value);
  void set_condition(const char* value);
  void set_condition(const char* value, size_t size);
  std::string* mutable_condition();
  std::string* release_condition();
  void set_allocated_condition(std::string* condition);
  private:
  const std::string& _internal_condition() const;
  void _internal_set_condition(const std::string& value);
  std::string* _internal_mutable_condition();
  public:

  // @@protoc_insertion_point(class_scope:relation.MSG_Req_SearchRelation_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr condition_;
  friend struct ::TableStruct_relation_2eproto;
};
// -------------------------------------------------------------------

class MSG_Ret_SearchRelation_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:relation.MSG_Ret_SearchRelation_SC) */ {
 public:
  MSG_Ret_SearchRelation_SC();
  virtual ~MSG_Ret_SearchRelation_SC();

  MSG_Ret_SearchRelation_SC(const MSG_Ret_SearchRelation_SC& from);
  MSG_Ret_SearchRelation_SC(MSG_Ret_SearchRelation_SC&& from) noexcept
    : MSG_Ret_SearchRelation_SC() {
    *this = ::std::move(from);
  }

  inline MSG_Ret_SearchRelation_SC& operator=(const MSG_Ret_SearchRelation_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Ret_SearchRelation_SC& operator=(MSG_Ret_SearchRelation_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Ret_SearchRelation_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Ret_SearchRelation_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_Ret_SearchRelation_SC*>(
               &_MSG_Ret_SearchRelation_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(MSG_Ret_SearchRelation_SC& a, MSG_Ret_SearchRelation_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Ret_SearchRelation_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Ret_SearchRelation_SC* New() const final {
    return CreateMaybeMessage<MSG_Ret_SearchRelation_SC>(nullptr);
  }

  MSG_Ret_SearchRelation_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Ret_SearchRelation_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Ret_SearchRelation_SC& from);
  void MergeFrom(const MSG_Ret_SearchRelation_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Ret_SearchRelation_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "relation.MSG_Ret_SearchRelation_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_relation_2eproto);
    return ::descriptor_table_relation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRelationFieldNumber = 1,
  };
  // optional .relation.relation_item relation = 1;
  bool has_relation() const;
  private:
  bool _internal_has_relation() const;
  public:
  void clear_relation();
  const ::relation::relation_item& relation() const;
  ::relation::relation_item* release_relation();
  ::relation::relation_item* mutable_relation();
  void set_allocated_relation(::relation::relation_item* relation);
  private:
  const ::relation::relation_item& _internal_relation() const;
  ::relation::relation_item* _internal_mutable_relation();
  public:

  // @@protoc_insertion_point(class_scope:relation.MSG_Ret_SearchRelation_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::relation::relation_item* relation_;
  friend struct ::TableStruct_relation_2eproto;
};
// -------------------------------------------------------------------

class MSG_ModifyPageName_CSC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:relation.MSG_ModifyPageName_CSC) */ {
 public:
  MSG_ModifyPageName_CSC();
  virtual ~MSG_ModifyPageName_CSC();

  MSG_ModifyPageName_CSC(const MSG_ModifyPageName_CSC& from);
  MSG_ModifyPageName_CSC(MSG_ModifyPageName_CSC&& from) noexcept
    : MSG_ModifyPageName_CSC() {
    *this = ::std::move(from);
  }

  inline MSG_ModifyPageName_CSC& operator=(const MSG_ModifyPageName_CSC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_ModifyPageName_CSC& operator=(MSG_ModifyPageName_CSC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_ModifyPageName_CSC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_ModifyPageName_CSC* internal_default_instance() {
    return reinterpret_cast<const MSG_ModifyPageName_CSC*>(
               &_MSG_ModifyPageName_CSC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(MSG_ModifyPageName_CSC& a, MSG_ModifyPageName_CSC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_ModifyPageName_CSC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_ModifyPageName_CSC* New() const final {
    return CreateMaybeMessage<MSG_ModifyPageName_CSC>(nullptr);
  }

  MSG_ModifyPageName_CSC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_ModifyPageName_CSC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_ModifyPageName_CSC& from);
  void MergeFrom(const MSG_ModifyPageName_CSC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_ModifyPageName_CSC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "relation.MSG_ModifyPageName_CSC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_relation_2eproto);
    return ::descriptor_table_relation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPageFieldNumber = 1,
    kNewPageFieldNumber = 2,
    kOpcodeFieldNumber = 3,
    kSuccessFieldNumber = 4,
  };
  // optional string page = 1;
  bool has_page() const;
  private:
  bool _internal_has_page() const;
  public:
  void clear_page();
  const std::string& page() const;
  void set_page(const std::string& value);
  void set_page(std::string&& value);
  void set_page(const char* value);
  void set_page(const char* value, size_t size);
  std::string* mutable_page();
  std::string* release_page();
  void set_allocated_page(std::string* page);
  private:
  const std::string& _internal_page() const;
  void _internal_set_page(const std::string& value);
  std::string* _internal_mutable_page();
  public:

  // optional string new_page = 2;
  bool has_new_page() const;
  private:
  bool _internal_has_new_page() const;
  public:
  void clear_new_page();
  const std::string& new_page() const;
  void set_new_page(const std::string& value);
  void set_new_page(std::string&& value);
  void set_new_page(const char* value);
  void set_new_page(const char* value, size_t size);
  std::string* mutable_new_page();
  std::string* release_new_page();
  void set_allocated_new_page(std::string* new_page);
  private:
  const std::string& _internal_new_page() const;
  void _internal_set_new_page(const std::string& value);
  std::string* _internal_mutable_new_page();
  public:

  // optional uint32 opcode = 3;
  bool has_opcode() const;
  private:
  bool _internal_has_opcode() const;
  public:
  void clear_opcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 opcode() const;
  void set_opcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_opcode() const;
  void _internal_set_opcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool success = 4;
  bool has_success() const;
  private:
  bool _internal_has_success() const;
  public:
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:relation.MSG_ModifyPageName_CSC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr new_page_;
  ::PROTOBUF_NAMESPACE_ID::uint32 opcode_;
  bool success_;
  friend struct ::TableStruct_relation_2eproto;
};
// -------------------------------------------------------------------

class MSG_MoveFriendToPage_CSC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:relation.MSG_MoveFriendToPage_CSC) */ {
 public:
  MSG_MoveFriendToPage_CSC();
  virtual ~MSG_MoveFriendToPage_CSC();

  MSG_MoveFriendToPage_CSC(const MSG_MoveFriendToPage_CSC& from);
  MSG_MoveFriendToPage_CSC(MSG_MoveFriendToPage_CSC&& from) noexcept
    : MSG_MoveFriendToPage_CSC() {
    *this = ::std::move(from);
  }

  inline MSG_MoveFriendToPage_CSC& operator=(const MSG_MoveFriendToPage_CSC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_MoveFriendToPage_CSC& operator=(MSG_MoveFriendToPage_CSC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_MoveFriendToPage_CSC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_MoveFriendToPage_CSC* internal_default_instance() {
    return reinterpret_cast<const MSG_MoveFriendToPage_CSC*>(
               &_MSG_MoveFriendToPage_CSC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(MSG_MoveFriendToPage_CSC& a, MSG_MoveFriendToPage_CSC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_MoveFriendToPage_CSC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_MoveFriendToPage_CSC* New() const final {
    return CreateMaybeMessage<MSG_MoveFriendToPage_CSC>(nullptr);
  }

  MSG_MoveFriendToPage_CSC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_MoveFriendToPage_CSC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_MoveFriendToPage_CSC& from);
  void MergeFrom(const MSG_MoveFriendToPage_CSC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_MoveFriendToPage_CSC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "relation.MSG_MoveFriendToPage_CSC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_relation_2eproto);
    return ::descriptor_table_relation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPageFieldNumber = 2,
    kCharidFieldNumber = 1,
    kSuccessFieldNumber = 3,
  };
  // optional string page = 2;
  bool has_page() const;
  private:
  bool _internal_has_page() const;
  public:
  void clear_page();
  const std::string& page() const;
  void set_page(const std::string& value);
  void set_page(std::string&& value);
  void set_page(const char* value);
  void set_page(const char* value, size_t size);
  std::string* mutable_page();
  std::string* release_page();
  void set_allocated_page(std::string* page);
  private:
  const std::string& _internal_page() const;
  void _internal_set_page(const std::string& value);
  std::string* _internal_mutable_page();
  public:

  // optional uint64 charid = 1;
  bool has_charid() const;
  private:
  bool _internal_has_charid() const;
  public:
  void clear_charid();
  ::PROTOBUF_NAMESPACE_ID::uint64 charid() const;
  void set_charid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_charid() const;
  void _internal_set_charid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool success = 3;
  bool has_success() const;
  private:
  bool _internal_has_success() const;
  public:
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:relation.MSG_MoveFriendToPage_CSC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_;
  ::PROTOBUF_NAMESPACE_ID::uint64 charid_;
  bool success_;
  friend struct ::TableStruct_relation_2eproto;
};
// -------------------------------------------------------------------

class PageItem :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:relation.PageItem) */ {
 public:
  PageItem();
  virtual ~PageItem();

  PageItem(const PageItem& from);
  PageItem(PageItem&& from) noexcept
    : PageItem() {
    *this = ::std::move(from);
  }

  inline PageItem& operator=(const PageItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline PageItem& operator=(PageItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PageItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PageItem* internal_default_instance() {
    return reinterpret_cast<const PageItem*>(
               &_PageItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(PageItem& a, PageItem& b) {
    a.Swap(&b);
  }
  inline void Swap(PageItem* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PageItem* New() const final {
    return CreateMaybeMessage<PageItem>(nullptr);
  }

  PageItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PageItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PageItem& from);
  void MergeFrom(const PageItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PageItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "relation.PageItem";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_relation_2eproto);
    return ::descriptor_table_relation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPageNameFieldNumber = 1,
    kCreatetimeFieldNumber = 2,
  };
  // optional string page_name = 1;
  bool has_page_name() const;
  private:
  bool _internal_has_page_name() const;
  public:
  void clear_page_name();
  const std::string& page_name() const;
  void set_page_name(const std::string& value);
  void set_page_name(std::string&& value);
  void set_page_name(const char* value);
  void set_page_name(const char* value, size_t size);
  std::string* mutable_page_name();
  std::string* release_page_name();
  void set_allocated_page_name(std::string* page_name);
  private:
  const std::string& _internal_page_name() const;
  void _internal_set_page_name(const std::string& value);
  std::string* _internal_mutable_page_name();
  public:

  // optional uint32 createtime = 2;
  bool has_createtime() const;
  private:
  bool _internal_has_createtime() const;
  public:
  void clear_createtime();
  ::PROTOBUF_NAMESPACE_ID::uint32 createtime() const;
  void set_createtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_createtime() const;
  void _internal_set_createtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:relation.PageItem)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 createtime_;
  friend struct ::TableStruct_relation_2eproto;
};
// -------------------------------------------------------------------

class MSG_AllFriendPage_CSC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:relation.MSG_AllFriendPage_CSC) */ {
 public:
  MSG_AllFriendPage_CSC();
  virtual ~MSG_AllFriendPage_CSC();

  MSG_AllFriendPage_CSC(const MSG_AllFriendPage_CSC& from);
  MSG_AllFriendPage_CSC(MSG_AllFriendPage_CSC&& from) noexcept
    : MSG_AllFriendPage_CSC() {
    *this = ::std::move(from);
  }

  inline MSG_AllFriendPage_CSC& operator=(const MSG_AllFriendPage_CSC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_AllFriendPage_CSC& operator=(MSG_AllFriendPage_CSC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_AllFriendPage_CSC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_AllFriendPage_CSC* internal_default_instance() {
    return reinterpret_cast<const MSG_AllFriendPage_CSC*>(
               &_MSG_AllFriendPage_CSC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(MSG_AllFriendPage_CSC& a, MSG_AllFriendPage_CSC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_AllFriendPage_CSC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_AllFriendPage_CSC* New() const final {
    return CreateMaybeMessage<MSG_AllFriendPage_CSC>(nullptr);
  }

  MSG_AllFriendPage_CSC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_AllFriendPage_CSC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_AllFriendPage_CSC& from);
  void MergeFrom(const MSG_AllFriendPage_CSC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_AllFriendPage_CSC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "relation.MSG_AllFriendPage_CSC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_relation_2eproto);
    return ::descriptor_table_relation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPagesFieldNumber = 1,
  };
  // repeated .relation.PageItem pages = 1;
  int pages_size() const;
  private:
  int _internal_pages_size() const;
  public:
  void clear_pages();
  ::relation::PageItem* mutable_pages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::relation::PageItem >*
      mutable_pages();
  private:
  const ::relation::PageItem& _internal_pages(int index) const;
  ::relation::PageItem* _internal_add_pages();
  public:
  const ::relation::PageItem& pages(int index) const;
  ::relation::PageItem* add_pages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::relation::PageItem >&
      pages() const;

  // @@protoc_insertion_point(class_scope:relation.MSG_AllFriendPage_CSC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::relation::PageItem > pages_;
  friend struct ::TableStruct_relation_2eproto;
};
// -------------------------------------------------------------------

class BlackItem :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:relation.BlackItem) */ {
 public:
  BlackItem();
  virtual ~BlackItem();

  BlackItem(const BlackItem& from);
  BlackItem(BlackItem&& from) noexcept
    : BlackItem() {
    *this = ::std::move(from);
  }

  inline BlackItem& operator=(const BlackItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlackItem& operator=(BlackItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlackItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlackItem* internal_default_instance() {
    return reinterpret_cast<const BlackItem*>(
               &_BlackItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(BlackItem& a, BlackItem& b) {
    a.Swap(&b);
  }
  inline void Swap(BlackItem* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlackItem* New() const final {
    return CreateMaybeMessage<BlackItem>(nullptr);
  }

  BlackItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlackItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlackItem& from);
  void MergeFrom(const BlackItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlackItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "relation.BlackItem";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_relation_2eproto);
    return ::descriptor_table_relation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kCharidFieldNumber = 1,
    kLevelFieldNumber = 3,
    kViplevelFieldNumber = 4,
  };
  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional uint64 charid = 1;
  bool has_charid() const;
  private:
  bool _internal_has_charid() const;
  public:
  void clear_charid();
  ::PROTOBUF_NAMESPACE_ID::uint64 charid() const;
  void set_charid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_charid() const;
  void _internal_set_charid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 level = 3;
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 viplevel = 4;
  bool has_viplevel() const;
  private:
  bool _internal_has_viplevel() const;
  public:
  void clear_viplevel();
  ::PROTOBUF_NAMESPACE_ID::uint32 viplevel() const;
  void set_viplevel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_viplevel() const;
  void _internal_set_viplevel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:relation.BlackItem)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 charid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 level_;
  ::PROTOBUF_NAMESPACE_ID::uint32 viplevel_;
  friend struct ::TableStruct_relation_2eproto;
};
// -------------------------------------------------------------------

class MSG_BlackList_CSC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:relation.MSG_BlackList_CSC) */ {
 public:
  MSG_BlackList_CSC();
  virtual ~MSG_BlackList_CSC();

  MSG_BlackList_CSC(const MSG_BlackList_CSC& from);
  MSG_BlackList_CSC(MSG_BlackList_CSC&& from) noexcept
    : MSG_BlackList_CSC() {
    *this = ::std::move(from);
  }

  inline MSG_BlackList_CSC& operator=(const MSG_BlackList_CSC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_BlackList_CSC& operator=(MSG_BlackList_CSC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_BlackList_CSC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_BlackList_CSC* internal_default_instance() {
    return reinterpret_cast<const MSG_BlackList_CSC*>(
               &_MSG_BlackList_CSC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(MSG_BlackList_CSC& a, MSG_BlackList_CSC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_BlackList_CSC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_BlackList_CSC* New() const final {
    return CreateMaybeMessage<MSG_BlackList_CSC>(nullptr);
  }

  MSG_BlackList_CSC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_BlackList_CSC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_BlackList_CSC& from);
  void MergeFrom(const MSG_BlackList_CSC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_BlackList_CSC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "relation.MSG_BlackList_CSC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_relation_2eproto);
    return ::descriptor_table_relation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlackListFieldNumber = 1,
  };
  // repeated .relation.BlackItem blackList = 1;
  int blacklist_size() const;
  private:
  int _internal_blacklist_size() const;
  public:
  void clear_blacklist();
  ::relation::BlackItem* mutable_blacklist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::relation::BlackItem >*
      mutable_blacklist();
  private:
  const ::relation::BlackItem& _internal_blacklist(int index) const;
  ::relation::BlackItem* _internal_add_blacklist();
  public:
  const ::relation::BlackItem& blacklist(int index) const;
  ::relation::BlackItem* add_blacklist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::relation::BlackItem >&
      blacklist() const;

  // @@protoc_insertion_point(class_scope:relation.MSG_BlackList_CSC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::relation::BlackItem > blacklist_;
  friend struct ::TableStruct_relation_2eproto;
};
// -------------------------------------------------------------------

class MSG_OperateBlackList_CSC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:relation.MSG_OperateBlackList_CSC) */ {
 public:
  MSG_OperateBlackList_CSC();
  virtual ~MSG_OperateBlackList_CSC();

  MSG_OperateBlackList_CSC(const MSG_OperateBlackList_CSC& from);
  MSG_OperateBlackList_CSC(MSG_OperateBlackList_CSC&& from) noexcept
    : MSG_OperateBlackList_CSC() {
    *this = ::std::move(from);
  }

  inline MSG_OperateBlackList_CSC& operator=(const MSG_OperateBlackList_CSC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_OperateBlackList_CSC& operator=(MSG_OperateBlackList_CSC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_OperateBlackList_CSC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_OperateBlackList_CSC* internal_default_instance() {
    return reinterpret_cast<const MSG_OperateBlackList_CSC*>(
               &_MSG_OperateBlackList_CSC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(MSG_OperateBlackList_CSC& a, MSG_OperateBlackList_CSC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_OperateBlackList_CSC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_OperateBlackList_CSC* New() const final {
    return CreateMaybeMessage<MSG_OperateBlackList_CSC>(nullptr);
  }

  MSG_OperateBlackList_CSC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_OperateBlackList_CSC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_OperateBlackList_CSC& from);
  void MergeFrom(const MSG_OperateBlackList_CSC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_OperateBlackList_CSC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "relation.MSG_OperateBlackList_CSC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_relation_2eproto);
    return ::descriptor_table_relation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kCharidFieldNumber = 1,
    kOpcodeFieldNumber = 2,
    kSuccessFieldNumber = 4,
  };
  // optional .relation.BlackItem data = 3;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::relation::BlackItem& data() const;
  ::relation::BlackItem* release_data();
  ::relation::BlackItem* mutable_data();
  void set_allocated_data(::relation::BlackItem* data);
  private:
  const ::relation::BlackItem& _internal_data() const;
  ::relation::BlackItem* _internal_mutable_data();
  public:

  // optional uint64 charid = 1;
  bool has_charid() const;
  private:
  bool _internal_has_charid() const;
  public:
  void clear_charid();
  ::PROTOBUF_NAMESPACE_ID::uint64 charid() const;
  void set_charid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_charid() const;
  void _internal_set_charid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 opcode = 2;
  bool has_opcode() const;
  private:
  bool _internal_has_opcode() const;
  public:
  void clear_opcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 opcode() const;
  void set_opcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_opcode() const;
  void _internal_set_opcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool success = 4;
  bool has_success() const;
  private:
  bool _internal_has_success() const;
  public:
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:relation.MSG_OperateBlackList_CSC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::relation::BlackItem* data_;
  ::PROTOBUF_NAMESPACE_ID::uint64 charid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 opcode_;
  bool success_;
  friend struct ::TableStruct_relation_2eproto;
};
// -------------------------------------------------------------------

class MSG_ChangeNickName_CSC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:relation.MSG_ChangeNickName_CSC) */ {
 public:
  MSG_ChangeNickName_CSC();
  virtual ~MSG_ChangeNickName_CSC();

  MSG_ChangeNickName_CSC(const MSG_ChangeNickName_CSC& from);
  MSG_ChangeNickName_CSC(MSG_ChangeNickName_CSC&& from) noexcept
    : MSG_ChangeNickName_CSC() {
    *this = ::std::move(from);
  }

  inline MSG_ChangeNickName_CSC& operator=(const MSG_ChangeNickName_CSC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_ChangeNickName_CSC& operator=(MSG_ChangeNickName_CSC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_ChangeNickName_CSC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_ChangeNickName_CSC* internal_default_instance() {
    return reinterpret_cast<const MSG_ChangeNickName_CSC*>(
               &_MSG_ChangeNickName_CSC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(MSG_ChangeNickName_CSC& a, MSG_ChangeNickName_CSC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_ChangeNickName_CSC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_ChangeNickName_CSC* New() const final {
    return CreateMaybeMessage<MSG_ChangeNickName_CSC>(nullptr);
  }

  MSG_ChangeNickName_CSC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_ChangeNickName_CSC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_ChangeNickName_CSC& from);
  void MergeFrom(const MSG_ChangeNickName_CSC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_ChangeNickName_CSC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "relation.MSG_ChangeNickName_CSC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_relation_2eproto);
    return ::descriptor_table_relation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 2,
    kCharidFieldNumber = 1,
    kSuccessFieldNumber = 3,
  };
  // optional string nickname = 2;
  bool has_nickname() const;
  private:
  bool _internal_has_nickname() const;
  public:
  void clear_nickname();
  const std::string& nickname() const;
  void set_nickname(const std::string& value);
  void set_nickname(std::string&& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  std::string* mutable_nickname();
  std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // optional uint64 charid = 1;
  bool has_charid() const;
  private:
  bool _internal_has_charid() const;
  public:
  void clear_charid();
  ::PROTOBUF_NAMESPACE_ID::uint64 charid() const;
  void set_charid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_charid() const;
  void _internal_set_charid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool success = 3;
  bool has_success() const;
  private:
  bool _internal_has_success() const;
  public:
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:relation.MSG_ChangeNickName_CSC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::uint64 charid_;
  bool success_;
  friend struct ::TableStruct_relation_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// relation_item

// optional uint64 relationid = 1;
inline bool relation_item::_internal_has_relationid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool relation_item::has_relationid() const {
  return _internal_has_relationid();
}
inline void relation_item::clear_relationid() {
  relationid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 relation_item::_internal_relationid() const {
  return relationid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 relation_item::relationid() const {
  // @@protoc_insertion_point(field_get:relation.relation_item.relationid)
  return _internal_relationid();
}
inline void relation_item::_internal_set_relationid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  relationid_ = value;
}
inline void relation_item::set_relationid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_relationid(value);
  // @@protoc_insertion_point(field_set:relation.relation_item.relationid)
}

// optional string relationname = 2;
inline bool relation_item::_internal_has_relationname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool relation_item::has_relationname() const {
  return _internal_has_relationname();
}
inline void relation_item::clear_relationname() {
  relationname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& relation_item::relationname() const {
  // @@protoc_insertion_point(field_get:relation.relation_item.relationname)
  return _internal_relationname();
}
inline void relation_item::set_relationname(const std::string& value) {
  _internal_set_relationname(value);
  // @@protoc_insertion_point(field_set:relation.relation_item.relationname)
}
inline std::string* relation_item::mutable_relationname() {
  // @@protoc_insertion_point(field_mutable:relation.relation_item.relationname)
  return _internal_mutable_relationname();
}
inline const std::string& relation_item::_internal_relationname() const {
  return relationname_.GetNoArena();
}
inline void relation_item::_internal_set_relationname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  relationname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void relation_item::set_relationname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  relationname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:relation.relation_item.relationname)
}
inline void relation_item::set_relationname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  relationname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:relation.relation_item.relationname)
}
inline void relation_item::set_relationname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  relationname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:relation.relation_item.relationname)
}
inline std::string* relation_item::_internal_mutable_relationname() {
  _has_bits_[0] |= 0x00000001u;
  return relationname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* relation_item::release_relationname() {
  // @@protoc_insertion_point(field_release:relation.relation_item.relationname)
  if (!_internal_has_relationname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return relationname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void relation_item::set_allocated_relationname(std::string* relationname) {
  if (relationname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  relationname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), relationname);
  // @@protoc_insertion_point(field_set_allocated:relation.relation_item.relationname)
}

// optional uint32 level = 3;
inline bool relation_item::_internal_has_level() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool relation_item::has_level() const {
  return _internal_has_level();
}
inline void relation_item::clear_level() {
  level_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 relation_item::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 relation_item::level() const {
  // @@protoc_insertion_point(field_get:relation.relation_item.level)
  return _internal_level();
}
inline void relation_item::_internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  level_ = value;
}
inline void relation_item::set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:relation.relation_item.level)
}

// optional uint32 career = 4;
inline bool relation_item::_internal_has_career() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool relation_item::has_career() const {
  return _internal_has_career();
}
inline void relation_item::clear_career() {
  career_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 relation_item::_internal_career() const {
  return career_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 relation_item::career() const {
  // @@protoc_insertion_point(field_get:relation.relation_item.career)
  return _internal_career();
}
inline void relation_item::_internal_set_career(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  career_ = value;
}
inline void relation_item::set_career(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_career(value);
  // @@protoc_insertion_point(field_set:relation.relation_item.career)
}

// optional uint32 type = 5;
inline bool relation_item::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool relation_item::has_type() const {
  return _internal_has_type();
}
inline void relation_item::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 relation_item::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 relation_item::type() const {
  // @@protoc_insertion_point(field_get:relation.relation_item.type)
  return _internal_type();
}
inline void relation_item::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  type_ = value;
}
inline void relation_item::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:relation.relation_item.type)
}

// optional uint32 status = 6;
inline bool relation_item::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool relation_item::has_status() const {
  return _internal_has_status();
}
inline void relation_item::clear_status() {
  status_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 relation_item::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 relation_item::status() const {
  // @@protoc_insertion_point(field_get:relation.relation_item.status)
  return _internal_status();
}
inline void relation_item::_internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  status_ = value;
}
inline void relation_item::set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:relation.relation_item.status)
}

// optional uint32 love_degree = 7;
inline bool relation_item::_internal_has_love_degree() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool relation_item::has_love_degree() const {
  return _internal_has_love_degree();
}
inline void relation_item::clear_love_degree() {
  love_degree_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 relation_item::_internal_love_degree() const {
  return love_degree_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 relation_item::love_degree() const {
  // @@protoc_insertion_point(field_get:relation.relation_item.love_degree)
  return _internal_love_degree();
}
inline void relation_item::_internal_set_love_degree(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  love_degree_ = value;
}
inline void relation_item::set_love_degree(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_love_degree(value);
  // @@protoc_insertion_point(field_set:relation.relation_item.love_degree)
}

// optional uint32 lastchattime = 8;
inline bool relation_item::_internal_has_lastchattime() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool relation_item::has_lastchattime() const {
  return _internal_has_lastchattime();
}
inline void relation_item::clear_lastchattime() {
  lastchattime_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 relation_item::_internal_lastchattime() const {
  return lastchattime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 relation_item::lastchattime() const {
  // @@protoc_insertion_point(field_get:relation.relation_item.lastchattime)
  return _internal_lastchattime();
}
inline void relation_item::_internal_set_lastchattime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  lastchattime_ = value;
}
inline void relation_item::set_lastchattime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lastchattime(value);
  // @@protoc_insertion_point(field_set:relation.relation_item.lastchattime)
}

// optional string page = 9;
inline bool relation_item::_internal_has_page() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool relation_item::has_page() const {
  return _internal_has_page();
}
inline void relation_item::clear_page() {
  page_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& relation_item::page() const {
  // @@protoc_insertion_point(field_get:relation.relation_item.page)
  return _internal_page();
}
inline void relation_item::set_page(const std::string& value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:relation.relation_item.page)
}
inline std::string* relation_item::mutable_page() {
  // @@protoc_insertion_point(field_mutable:relation.relation_item.page)
  return _internal_mutable_page();
}
inline const std::string& relation_item::_internal_page() const {
  return page_.GetNoArena();
}
inline void relation_item::_internal_set_page(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  page_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void relation_item::set_page(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  page_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:relation.relation_item.page)
}
inline void relation_item::set_page(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  page_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:relation.relation_item.page)
}
inline void relation_item::set_page(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  page_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:relation.relation_item.page)
}
inline std::string* relation_item::_internal_mutable_page() {
  _has_bits_[0] |= 0x00000002u;
  return page_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* relation_item::release_page() {
  // @@protoc_insertion_point(field_release:relation.relation_item.page)
  if (!_internal_has_page()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return page_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void relation_item::set_allocated_page(std::string* page) {
  if (page != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  page_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page);
  // @@protoc_insertion_point(field_set_allocated:relation.relation_item.page)
}

// optional string nickName = 10;
inline bool relation_item::_internal_has_nickname() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool relation_item::has_nickname() const {
  return _internal_has_nickname();
}
inline void relation_item::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& relation_item::nickname() const {
  // @@protoc_insertion_point(field_get:relation.relation_item.nickName)
  return _internal_nickname();
}
inline void relation_item::set_nickname(const std::string& value) {
  _internal_set_nickname(value);
  // @@protoc_insertion_point(field_set:relation.relation_item.nickName)
}
inline std::string* relation_item::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:relation.relation_item.nickName)
  return _internal_mutable_nickname();
}
inline const std::string& relation_item::_internal_nickname() const {
  return nickname_.GetNoArena();
}
inline void relation_item::_internal_set_nickname(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  nickname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void relation_item::set_nickname(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  nickname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:relation.relation_item.nickName)
}
inline void relation_item::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  nickname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:relation.relation_item.nickName)
}
inline void relation_item::set_nickname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  nickname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:relation.relation_item.nickName)
}
inline std::string* relation_item::_internal_mutable_nickname() {
  _has_bits_[0] |= 0x00000004u;
  return nickname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* relation_item::release_nickname() {
  // @@protoc_insertion_point(field_release:relation.relation_item.nickName)
  if (!_internal_has_nickname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return nickname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void relation_item::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  nickname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:relation.relation_item.nickName)
}

// optional uint32 offlineTime = 11;
inline bool relation_item::_internal_has_offlinetime() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool relation_item::has_offlinetime() const {
  return _internal_has_offlinetime();
}
inline void relation_item::clear_offlinetime() {
  offlinetime_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 relation_item::_internal_offlinetime() const {
  return offlinetime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 relation_item::offlinetime() const {
  // @@protoc_insertion_point(field_get:relation.relation_item.offlineTime)
  return _internal_offlinetime();
}
inline void relation_item::_internal_set_offlinetime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  offlinetime_ = value;
}
inline void relation_item::set_offlinetime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_offlinetime(value);
  // @@protoc_insertion_point(field_set:relation.relation_item.offlineTime)
}

// optional uint32 headPic = 12;
inline bool relation_item::_internal_has_headpic() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool relation_item::has_headpic() const {
  return _internal_has_headpic();
}
inline void relation_item::clear_headpic() {
  headpic_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 relation_item::_internal_headpic() const {
  return headpic_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 relation_item::headpic() const {
  // @@protoc_insertion_point(field_get:relation.relation_item.headPic)
  return _internal_headpic();
}
inline void relation_item::_internal_set_headpic(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  headpic_ = value;
}
inline void relation_item::set_headpic(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_headpic(value);
  // @@protoc_insertion_point(field_set:relation.relation_item.headPic)
}

// optional uint32 viplevel = 13;
inline bool relation_item::_internal_has_viplevel() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool relation_item::has_viplevel() const {
  return _internal_has_viplevel();
}
inline void relation_item::clear_viplevel() {
  viplevel_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 relation_item::_internal_viplevel() const {
  return viplevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 relation_item::viplevel() const {
  // @@protoc_insertion_point(field_get:relation.relation_item.viplevel)
  return _internal_viplevel();
}
inline void relation_item::_internal_set_viplevel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  viplevel_ = value;
}
inline void relation_item::set_viplevel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_viplevel(value);
  // @@protoc_insertion_point(field_set:relation.relation_item.viplevel)
}

// optional uint32 power = 14;
inline bool relation_item::_internal_has_power() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool relation_item::has_power() const {
  return _internal_has_power();
}
inline void relation_item::clear_power() {
  power_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 relation_item::_internal_power() const {
  return power_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 relation_item::power() const {
  // @@protoc_insertion_point(field_get:relation.relation_item.power)
  return _internal_power();
}
inline void relation_item::_internal_set_power(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  power_ = value;
}
inline void relation_item::set_power(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_power(value);
  // @@protoc_insertion_point(field_set:relation.relation_item.power)
}

// optional uint32 friendrate = 15;
inline bool relation_item::_internal_has_friendrate() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool relation_item::has_friendrate() const {
  return _internal_has_friendrate();
}
inline void relation_item::clear_friendrate() {
  friendrate_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 relation_item::_internal_friendrate() const {
  return friendrate_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 relation_item::friendrate() const {
  // @@protoc_insertion_point(field_get:relation.relation_item.friendrate)
  return _internal_friendrate();
}
inline void relation_item::_internal_set_friendrate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  friendrate_ = value;
}
inline void relation_item::set_friendrate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_friendrate(value);
  // @@protoc_insertion_point(field_set:relation.relation_item.friendrate)
}

// optional uint32 createTime = 16;
inline bool relation_item::_internal_has_createtime() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool relation_item::has_createtime() const {
  return _internal_has_createtime();
}
inline void relation_item::clear_createtime() {
  createtime_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 relation_item::_internal_createtime() const {
  return createtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 relation_item::createtime() const {
  // @@protoc_insertion_point(field_get:relation.relation_item.createTime)
  return _internal_createtime();
}
inline void relation_item::_internal_set_createtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00008000u;
  createtime_ = value;
}
inline void relation_item::set_createtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_createtime(value);
  // @@protoc_insertion_point(field_set:relation.relation_item.createTime)
}

// -------------------------------------------------------------------

// MSG_Ret_RelationList_SC

// repeated .relation.relation_item relations = 1;
inline int MSG_Ret_RelationList_SC::_internal_relations_size() const {
  return relations_.size();
}
inline int MSG_Ret_RelationList_SC::relations_size() const {
  return _internal_relations_size();
}
inline void MSG_Ret_RelationList_SC::clear_relations() {
  relations_.Clear();
}
inline ::relation::relation_item* MSG_Ret_RelationList_SC::mutable_relations(int index) {
  // @@protoc_insertion_point(field_mutable:relation.MSG_Ret_RelationList_SC.relations)
  return relations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::relation::relation_item >*
MSG_Ret_RelationList_SC::mutable_relations() {
  // @@protoc_insertion_point(field_mutable_list:relation.MSG_Ret_RelationList_SC.relations)
  return &relations_;
}
inline const ::relation::relation_item& MSG_Ret_RelationList_SC::_internal_relations(int index) const {
  return relations_.Get(index);
}
inline const ::relation::relation_item& MSG_Ret_RelationList_SC::relations(int index) const {
  // @@protoc_insertion_point(field_get:relation.MSG_Ret_RelationList_SC.relations)
  return _internal_relations(index);
}
inline ::relation::relation_item* MSG_Ret_RelationList_SC::_internal_add_relations() {
  return relations_.Add();
}
inline ::relation::relation_item* MSG_Ret_RelationList_SC::add_relations() {
  // @@protoc_insertion_point(field_add:relation.MSG_Ret_RelationList_SC.relations)
  return _internal_add_relations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::relation::relation_item >&
MSG_Ret_RelationList_SC::relations() const {
  // @@protoc_insertion_point(field_list:relation.MSG_Ret_RelationList_SC.relations)
  return relations_;
}

// optional uint32 type = 2;
inline bool MSG_Ret_RelationList_SC::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_Ret_RelationList_SC::has_type() const {
  return _internal_has_type();
}
inline void MSG_Ret_RelationList_SC::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Ret_RelationList_SC::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Ret_RelationList_SC::type() const {
  // @@protoc_insertion_point(field_get:relation.MSG_Ret_RelationList_SC.type)
  return _internal_type();
}
inline void MSG_Ret_RelationList_SC::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
}
inline void MSG_Ret_RelationList_SC::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:relation.MSG_Ret_RelationList_SC.type)
}

// -------------------------------------------------------------------

// MSG_Ret_RefreshRelation_SC

// optional .relation.relation_item data = 1;
inline bool MSG_Ret_RefreshRelation_SC::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || data_ != nullptr);
  return value;
}
inline bool MSG_Ret_RefreshRelation_SC::has_data() const {
  return _internal_has_data();
}
inline void MSG_Ret_RefreshRelation_SC::clear_data() {
  if (data_ != nullptr) data_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::relation::relation_item& MSG_Ret_RefreshRelation_SC::_internal_data() const {
  const ::relation::relation_item* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::relation::relation_item*>(
      &::relation::_relation_item_default_instance_);
}
inline const ::relation::relation_item& MSG_Ret_RefreshRelation_SC::data() const {
  // @@protoc_insertion_point(field_get:relation.MSG_Ret_RefreshRelation_SC.data)
  return _internal_data();
}
inline ::relation::relation_item* MSG_Ret_RefreshRelation_SC::release_data() {
  // @@protoc_insertion_point(field_release:relation.MSG_Ret_RefreshRelation_SC.data)
  _has_bits_[0] &= ~0x00000001u;
  ::relation::relation_item* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::relation::relation_item* MSG_Ret_RefreshRelation_SC::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::relation::relation_item>(GetArenaNoVirtual());
    data_ = p;
  }
  return data_;
}
inline ::relation::relation_item* MSG_Ret_RefreshRelation_SC::mutable_data() {
  // @@protoc_insertion_point(field_mutable:relation.MSG_Ret_RefreshRelation_SC.data)
  return _internal_mutable_data();
}
inline void MSG_Ret_RefreshRelation_SC::set_allocated_data(::relation::relation_item* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:relation.MSG_Ret_RefreshRelation_SC.data)
}

// -------------------------------------------------------------------

// MSG_Req_ApplyRelation_CS

// optional uint64 relationid = 1;
inline bool MSG_Req_ApplyRelation_CS::_internal_has_relationid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_Req_ApplyRelation_CS::has_relationid() const {
  return _internal_has_relationid();
}
inline void MSG_Req_ApplyRelation_CS::clear_relationid() {
  relationid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_Req_ApplyRelation_CS::_internal_relationid() const {
  return relationid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_Req_ApplyRelation_CS::relationid() const {
  // @@protoc_insertion_point(field_get:relation.MSG_Req_ApplyRelation_CS.relationid)
  return _internal_relationid();
}
inline void MSG_Req_ApplyRelation_CS::_internal_set_relationid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  relationid_ = value;
}
inline void MSG_Req_ApplyRelation_CS::set_relationid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_relationid(value);
  // @@protoc_insertion_point(field_set:relation.MSG_Req_ApplyRelation_CS.relationid)
}

// -------------------------------------------------------------------

// MSG_Req_AnswerApplyRelation_CS

// optional uint64 relationid = 1;
inline bool MSG_Req_AnswerApplyRelation_CS::_internal_has_relationid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_Req_AnswerApplyRelation_CS::has_relationid() const {
  return _internal_has_relationid();
}
inline void MSG_Req_AnswerApplyRelation_CS::clear_relationid() {
  relationid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_Req_AnswerApplyRelation_CS::_internal_relationid() const {
  return relationid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_Req_AnswerApplyRelation_CS::relationid() const {
  // @@protoc_insertion_point(field_get:relation.MSG_Req_AnswerApplyRelation_CS.relationid)
  return _internal_relationid();
}
inline void MSG_Req_AnswerApplyRelation_CS::_internal_set_relationid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  relationid_ = value;
}
inline void MSG_Req_AnswerApplyRelation_CS::set_relationid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_relationid(value);
  // @@protoc_insertion_point(field_set:relation.MSG_Req_AnswerApplyRelation_CS.relationid)
}

// optional uint32 type = 2;
inline bool MSG_Req_AnswerApplyRelation_CS::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_Req_AnswerApplyRelation_CS::has_type() const {
  return _internal_has_type();
}
inline void MSG_Req_AnswerApplyRelation_CS::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Req_AnswerApplyRelation_CS::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Req_AnswerApplyRelation_CS::type() const {
  // @@protoc_insertion_point(field_get:relation.MSG_Req_AnswerApplyRelation_CS.type)
  return _internal_type();
}
inline void MSG_Req_AnswerApplyRelation_CS::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
}
inline void MSG_Req_AnswerApplyRelation_CS::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:relation.MSG_Req_AnswerApplyRelation_CS.type)
}

// -------------------------------------------------------------------

// MSG_Ret_AnswerApplyRelation_SC

// optional uint64 relationid = 1;
inline bool MSG_Ret_AnswerApplyRelation_SC::_internal_has_relationid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_Ret_AnswerApplyRelation_SC::has_relationid() const {
  return _internal_has_relationid();
}
inline void MSG_Ret_AnswerApplyRelation_SC::clear_relationid() {
  relationid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_Ret_AnswerApplyRelation_SC::_internal_relationid() const {
  return relationid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_Ret_AnswerApplyRelation_SC::relationid() const {
  // @@protoc_insertion_point(field_get:relation.MSG_Ret_AnswerApplyRelation_SC.relationid)
  return _internal_relationid();
}
inline void MSG_Ret_AnswerApplyRelation_SC::_internal_set_relationid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  relationid_ = value;
}
inline void MSG_Ret_AnswerApplyRelation_SC::set_relationid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_relationid(value);
  // @@protoc_insertion_point(field_set:relation.MSG_Ret_AnswerApplyRelation_SC.relationid)
}

// optional bool issucc = 2;
inline bool MSG_Ret_AnswerApplyRelation_SC::_internal_has_issucc() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_Ret_AnswerApplyRelation_SC::has_issucc() const {
  return _internal_has_issucc();
}
inline void MSG_Ret_AnswerApplyRelation_SC::clear_issucc() {
  issucc_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool MSG_Ret_AnswerApplyRelation_SC::_internal_issucc() const {
  return issucc_;
}
inline bool MSG_Ret_AnswerApplyRelation_SC::issucc() const {
  // @@protoc_insertion_point(field_get:relation.MSG_Ret_AnswerApplyRelation_SC.issucc)
  return _internal_issucc();
}
inline void MSG_Ret_AnswerApplyRelation_SC::_internal_set_issucc(bool value) {
  _has_bits_[0] |= 0x00000002u;
  issucc_ = value;
}
inline void MSG_Ret_AnswerApplyRelation_SC::set_issucc(bool value) {
  _internal_set_issucc(value);
  // @@protoc_insertion_point(field_set:relation.MSG_Ret_AnswerApplyRelation_SC.issucc)
}

// -------------------------------------------------------------------

// MSG_Req_DeleteRelation_CS

// optional uint64 relationid = 1;
inline bool MSG_Req_DeleteRelation_CS::_internal_has_relationid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_Req_DeleteRelation_CS::has_relationid() const {
  return _internal_has_relationid();
}
inline void MSG_Req_DeleteRelation_CS::clear_relationid() {
  relationid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_Req_DeleteRelation_CS::_internal_relationid() const {
  return relationid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_Req_DeleteRelation_CS::relationid() const {
  // @@protoc_insertion_point(field_get:relation.MSG_Req_DeleteRelation_CS.relationid)
  return _internal_relationid();
}
inline void MSG_Req_DeleteRelation_CS::_internal_set_relationid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  relationid_ = value;
}
inline void MSG_Req_DeleteRelation_CS::set_relationid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_relationid(value);
  // @@protoc_insertion_point(field_set:relation.MSG_Req_DeleteRelation_CS.relationid)
}

// -------------------------------------------------------------------

// MSG_Ret_DeleteRelation_SC

// optional uint64 relationid = 1;
inline bool MSG_Ret_DeleteRelation_SC::_internal_has_relationid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_Ret_DeleteRelation_SC::has_relationid() const {
  return _internal_has_relationid();
}
inline void MSG_Ret_DeleteRelation_SC::clear_relationid() {
  relationid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_Ret_DeleteRelation_SC::_internal_relationid() const {
  return relationid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_Ret_DeleteRelation_SC::relationid() const {
  // @@protoc_insertion_point(field_get:relation.MSG_Ret_DeleteRelation_SC.relationid)
  return _internal_relationid();
}
inline void MSG_Ret_DeleteRelation_SC::_internal_set_relationid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  relationid_ = value;
}
inline void MSG_Ret_DeleteRelation_SC::set_relationid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_relationid(value);
  // @@protoc_insertion_point(field_set:relation.MSG_Ret_DeleteRelation_SC.relationid)
}

// optional bool issucc = 2;
inline bool MSG_Ret_DeleteRelation_SC::_internal_has_issucc() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_Ret_DeleteRelation_SC::has_issucc() const {
  return _internal_has_issucc();
}
inline void MSG_Ret_DeleteRelation_SC::clear_issucc() {
  issucc_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool MSG_Ret_DeleteRelation_SC::_internal_issucc() const {
  return issucc_;
}
inline bool MSG_Ret_DeleteRelation_SC::issucc() const {
  // @@protoc_insertion_point(field_get:relation.MSG_Ret_DeleteRelation_SC.issucc)
  return _internal_issucc();
}
inline void MSG_Ret_DeleteRelation_SC::_internal_set_issucc(bool value) {
  _has_bits_[0] |= 0x00000002u;
  issucc_ = value;
}
inline void MSG_Ret_DeleteRelation_SC::set_issucc(bool value) {
  _internal_set_issucc(value);
  // @@protoc_insertion_point(field_set:relation.MSG_Ret_DeleteRelation_SC.issucc)
}

// -------------------------------------------------------------------

// MSG_Req_OfflineInteractive_CS

// -------------------------------------------------------------------

// MSG_Ret_AddInteractive_SC

// repeated .relation.relation_item data = 1;
inline int MSG_Ret_AddInteractive_SC::_internal_data_size() const {
  return data_.size();
}
inline int MSG_Ret_AddInteractive_SC::data_size() const {
  return _internal_data_size();
}
inline void MSG_Ret_AddInteractive_SC::clear_data() {
  data_.Clear();
}
inline ::relation::relation_item* MSG_Ret_AddInteractive_SC::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:relation.MSG_Ret_AddInteractive_SC.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::relation::relation_item >*
MSG_Ret_AddInteractive_SC::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:relation.MSG_Ret_AddInteractive_SC.data)
  return &data_;
}
inline const ::relation::relation_item& MSG_Ret_AddInteractive_SC::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::relation::relation_item& MSG_Ret_AddInteractive_SC::data(int index) const {
  // @@protoc_insertion_point(field_get:relation.MSG_Ret_AddInteractive_SC.data)
  return _internal_data(index);
}
inline ::relation::relation_item* MSG_Ret_AddInteractive_SC::_internal_add_data() {
  return data_.Add();
}
inline ::relation::relation_item* MSG_Ret_AddInteractive_SC::add_data() {
  // @@protoc_insertion_point(field_add:relation.MSG_Ret_AddInteractive_SC.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::relation::relation_item >&
MSG_Ret_AddInteractive_SC::data() const {
  // @@protoc_insertion_point(field_list:relation.MSG_Ret_AddInteractive_SC.data)
  return data_;
}

// -------------------------------------------------------------------

// MSG_Req_SearchRelation_CS

// optional string condition = 1;
inline bool MSG_Req_SearchRelation_CS::_internal_has_condition() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_Req_SearchRelation_CS::has_condition() const {
  return _internal_has_condition();
}
inline void MSG_Req_SearchRelation_CS::clear_condition() {
  condition_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MSG_Req_SearchRelation_CS::condition() const {
  // @@protoc_insertion_point(field_get:relation.MSG_Req_SearchRelation_CS.condition)
  return _internal_condition();
}
inline void MSG_Req_SearchRelation_CS::set_condition(const std::string& value) {
  _internal_set_condition(value);
  // @@protoc_insertion_point(field_set:relation.MSG_Req_SearchRelation_CS.condition)
}
inline std::string* MSG_Req_SearchRelation_CS::mutable_condition() {
  // @@protoc_insertion_point(field_mutable:relation.MSG_Req_SearchRelation_CS.condition)
  return _internal_mutable_condition();
}
inline const std::string& MSG_Req_SearchRelation_CS::_internal_condition() const {
  return condition_.GetNoArena();
}
inline void MSG_Req_SearchRelation_CS::_internal_set_condition(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  condition_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_Req_SearchRelation_CS::set_condition(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  condition_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:relation.MSG_Req_SearchRelation_CS.condition)
}
inline void MSG_Req_SearchRelation_CS::set_condition(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  condition_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:relation.MSG_Req_SearchRelation_CS.condition)
}
inline void MSG_Req_SearchRelation_CS::set_condition(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  condition_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:relation.MSG_Req_SearchRelation_CS.condition)
}
inline std::string* MSG_Req_SearchRelation_CS::_internal_mutable_condition() {
  _has_bits_[0] |= 0x00000001u;
  return condition_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_Req_SearchRelation_CS::release_condition() {
  // @@protoc_insertion_point(field_release:relation.MSG_Req_SearchRelation_CS.condition)
  if (!_internal_has_condition()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return condition_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_Req_SearchRelation_CS::set_allocated_condition(std::string* condition) {
  if (condition != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  condition_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), condition);
  // @@protoc_insertion_point(field_set_allocated:relation.MSG_Req_SearchRelation_CS.condition)
}

// -------------------------------------------------------------------

// MSG_Ret_SearchRelation_SC

// optional .relation.relation_item relation = 1;
inline bool MSG_Ret_SearchRelation_SC::_internal_has_relation() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || relation_ != nullptr);
  return value;
}
inline bool MSG_Ret_SearchRelation_SC::has_relation() const {
  return _internal_has_relation();
}
inline void MSG_Ret_SearchRelation_SC::clear_relation() {
  if (relation_ != nullptr) relation_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::relation::relation_item& MSG_Ret_SearchRelation_SC::_internal_relation() const {
  const ::relation::relation_item* p = relation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::relation::relation_item*>(
      &::relation::_relation_item_default_instance_);
}
inline const ::relation::relation_item& MSG_Ret_SearchRelation_SC::relation() const {
  // @@protoc_insertion_point(field_get:relation.MSG_Ret_SearchRelation_SC.relation)
  return _internal_relation();
}
inline ::relation::relation_item* MSG_Ret_SearchRelation_SC::release_relation() {
  // @@protoc_insertion_point(field_release:relation.MSG_Ret_SearchRelation_SC.relation)
  _has_bits_[0] &= ~0x00000001u;
  ::relation::relation_item* temp = relation_;
  relation_ = nullptr;
  return temp;
}
inline ::relation::relation_item* MSG_Ret_SearchRelation_SC::_internal_mutable_relation() {
  _has_bits_[0] |= 0x00000001u;
  if (relation_ == nullptr) {
    auto* p = CreateMaybeMessage<::relation::relation_item>(GetArenaNoVirtual());
    relation_ = p;
  }
  return relation_;
}
inline ::relation::relation_item* MSG_Ret_SearchRelation_SC::mutable_relation() {
  // @@protoc_insertion_point(field_mutable:relation.MSG_Ret_SearchRelation_SC.relation)
  return _internal_mutable_relation();
}
inline void MSG_Ret_SearchRelation_SC::set_allocated_relation(::relation::relation_item* relation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete relation_;
  }
  if (relation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      relation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relation, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  relation_ = relation;
  // @@protoc_insertion_point(field_set_allocated:relation.MSG_Ret_SearchRelation_SC.relation)
}

// -------------------------------------------------------------------

// MSG_ModifyPageName_CSC

// optional string page = 1;
inline bool MSG_ModifyPageName_CSC::_internal_has_page() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_ModifyPageName_CSC::has_page() const {
  return _internal_has_page();
}
inline void MSG_ModifyPageName_CSC::clear_page() {
  page_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MSG_ModifyPageName_CSC::page() const {
  // @@protoc_insertion_point(field_get:relation.MSG_ModifyPageName_CSC.page)
  return _internal_page();
}
inline void MSG_ModifyPageName_CSC::set_page(const std::string& value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:relation.MSG_ModifyPageName_CSC.page)
}
inline std::string* MSG_ModifyPageName_CSC::mutable_page() {
  // @@protoc_insertion_point(field_mutable:relation.MSG_ModifyPageName_CSC.page)
  return _internal_mutable_page();
}
inline const std::string& MSG_ModifyPageName_CSC::_internal_page() const {
  return page_.GetNoArena();
}
inline void MSG_ModifyPageName_CSC::_internal_set_page(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  page_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_ModifyPageName_CSC::set_page(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  page_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:relation.MSG_ModifyPageName_CSC.page)
}
inline void MSG_ModifyPageName_CSC::set_page(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  page_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:relation.MSG_ModifyPageName_CSC.page)
}
inline void MSG_ModifyPageName_CSC::set_page(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  page_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:relation.MSG_ModifyPageName_CSC.page)
}
inline std::string* MSG_ModifyPageName_CSC::_internal_mutable_page() {
  _has_bits_[0] |= 0x00000001u;
  return page_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_ModifyPageName_CSC::release_page() {
  // @@protoc_insertion_point(field_release:relation.MSG_ModifyPageName_CSC.page)
  if (!_internal_has_page()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return page_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_ModifyPageName_CSC::set_allocated_page(std::string* page) {
  if (page != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  page_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page);
  // @@protoc_insertion_point(field_set_allocated:relation.MSG_ModifyPageName_CSC.page)
}

// optional string new_page = 2;
inline bool MSG_ModifyPageName_CSC::_internal_has_new_page() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_ModifyPageName_CSC::has_new_page() const {
  return _internal_has_new_page();
}
inline void MSG_ModifyPageName_CSC::clear_new_page() {
  new_page_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MSG_ModifyPageName_CSC::new_page() const {
  // @@protoc_insertion_point(field_get:relation.MSG_ModifyPageName_CSC.new_page)
  return _internal_new_page();
}
inline void MSG_ModifyPageName_CSC::set_new_page(const std::string& value) {
  _internal_set_new_page(value);
  // @@protoc_insertion_point(field_set:relation.MSG_ModifyPageName_CSC.new_page)
}
inline std::string* MSG_ModifyPageName_CSC::mutable_new_page() {
  // @@protoc_insertion_point(field_mutable:relation.MSG_ModifyPageName_CSC.new_page)
  return _internal_mutable_new_page();
}
inline const std::string& MSG_ModifyPageName_CSC::_internal_new_page() const {
  return new_page_.GetNoArena();
}
inline void MSG_ModifyPageName_CSC::_internal_set_new_page(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  new_page_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_ModifyPageName_CSC::set_new_page(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  new_page_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:relation.MSG_ModifyPageName_CSC.new_page)
}
inline void MSG_ModifyPageName_CSC::set_new_page(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  new_page_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:relation.MSG_ModifyPageName_CSC.new_page)
}
inline void MSG_ModifyPageName_CSC::set_new_page(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  new_page_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:relation.MSG_ModifyPageName_CSC.new_page)
}
inline std::string* MSG_ModifyPageName_CSC::_internal_mutable_new_page() {
  _has_bits_[0] |= 0x00000002u;
  return new_page_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_ModifyPageName_CSC::release_new_page() {
  // @@protoc_insertion_point(field_release:relation.MSG_ModifyPageName_CSC.new_page)
  if (!_internal_has_new_page()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return new_page_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_ModifyPageName_CSC::set_allocated_new_page(std::string* new_page) {
  if (new_page != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  new_page_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), new_page);
  // @@protoc_insertion_point(field_set_allocated:relation.MSG_ModifyPageName_CSC.new_page)
}

// optional uint32 opcode = 3;
inline bool MSG_ModifyPageName_CSC::_internal_has_opcode() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MSG_ModifyPageName_CSC::has_opcode() const {
  return _internal_has_opcode();
}
inline void MSG_ModifyPageName_CSC::clear_opcode() {
  opcode_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_ModifyPageName_CSC::_internal_opcode() const {
  return opcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_ModifyPageName_CSC::opcode() const {
  // @@protoc_insertion_point(field_get:relation.MSG_ModifyPageName_CSC.opcode)
  return _internal_opcode();
}
inline void MSG_ModifyPageName_CSC::_internal_set_opcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  opcode_ = value;
}
inline void MSG_ModifyPageName_CSC::set_opcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_opcode(value);
  // @@protoc_insertion_point(field_set:relation.MSG_ModifyPageName_CSC.opcode)
}

// optional bool success = 4;
inline bool MSG_ModifyPageName_CSC::_internal_has_success() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MSG_ModifyPageName_CSC::has_success() const {
  return _internal_has_success();
}
inline void MSG_ModifyPageName_CSC::clear_success() {
  success_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool MSG_ModifyPageName_CSC::_internal_success() const {
  return success_;
}
inline bool MSG_ModifyPageName_CSC::success() const {
  // @@protoc_insertion_point(field_get:relation.MSG_ModifyPageName_CSC.success)
  return _internal_success();
}
inline void MSG_ModifyPageName_CSC::_internal_set_success(bool value) {
  _has_bits_[0] |= 0x00000008u;
  success_ = value;
}
inline void MSG_ModifyPageName_CSC::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:relation.MSG_ModifyPageName_CSC.success)
}

// -------------------------------------------------------------------

// MSG_MoveFriendToPage_CSC

// optional uint64 charid = 1;
inline bool MSG_MoveFriendToPage_CSC::_internal_has_charid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_MoveFriendToPage_CSC::has_charid() const {
  return _internal_has_charid();
}
inline void MSG_MoveFriendToPage_CSC::clear_charid() {
  charid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_MoveFriendToPage_CSC::_internal_charid() const {
  return charid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_MoveFriendToPage_CSC::charid() const {
  // @@protoc_insertion_point(field_get:relation.MSG_MoveFriendToPage_CSC.charid)
  return _internal_charid();
}
inline void MSG_MoveFriendToPage_CSC::_internal_set_charid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  charid_ = value;
}
inline void MSG_MoveFriendToPage_CSC::set_charid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_charid(value);
  // @@protoc_insertion_point(field_set:relation.MSG_MoveFriendToPage_CSC.charid)
}

// optional string page = 2;
inline bool MSG_MoveFriendToPage_CSC::_internal_has_page() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_MoveFriendToPage_CSC::has_page() const {
  return _internal_has_page();
}
inline void MSG_MoveFriendToPage_CSC::clear_page() {
  page_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MSG_MoveFriendToPage_CSC::page() const {
  // @@protoc_insertion_point(field_get:relation.MSG_MoveFriendToPage_CSC.page)
  return _internal_page();
}
inline void MSG_MoveFriendToPage_CSC::set_page(const std::string& value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:relation.MSG_MoveFriendToPage_CSC.page)
}
inline std::string* MSG_MoveFriendToPage_CSC::mutable_page() {
  // @@protoc_insertion_point(field_mutable:relation.MSG_MoveFriendToPage_CSC.page)
  return _internal_mutable_page();
}
inline const std::string& MSG_MoveFriendToPage_CSC::_internal_page() const {
  return page_.GetNoArena();
}
inline void MSG_MoveFriendToPage_CSC::_internal_set_page(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  page_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_MoveFriendToPage_CSC::set_page(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  page_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:relation.MSG_MoveFriendToPage_CSC.page)
}
inline void MSG_MoveFriendToPage_CSC::set_page(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  page_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:relation.MSG_MoveFriendToPage_CSC.page)
}
inline void MSG_MoveFriendToPage_CSC::set_page(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  page_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:relation.MSG_MoveFriendToPage_CSC.page)
}
inline std::string* MSG_MoveFriendToPage_CSC::_internal_mutable_page() {
  _has_bits_[0] |= 0x00000001u;
  return page_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_MoveFriendToPage_CSC::release_page() {
  // @@protoc_insertion_point(field_release:relation.MSG_MoveFriendToPage_CSC.page)
  if (!_internal_has_page()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return page_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_MoveFriendToPage_CSC::set_allocated_page(std::string* page) {
  if (page != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  page_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page);
  // @@protoc_insertion_point(field_set_allocated:relation.MSG_MoveFriendToPage_CSC.page)
}

// optional bool success = 3;
inline bool MSG_MoveFriendToPage_CSC::_internal_has_success() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MSG_MoveFriendToPage_CSC::has_success() const {
  return _internal_has_success();
}
inline void MSG_MoveFriendToPage_CSC::clear_success() {
  success_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool MSG_MoveFriendToPage_CSC::_internal_success() const {
  return success_;
}
inline bool MSG_MoveFriendToPage_CSC::success() const {
  // @@protoc_insertion_point(field_get:relation.MSG_MoveFriendToPage_CSC.success)
  return _internal_success();
}
inline void MSG_MoveFriendToPage_CSC::_internal_set_success(bool value) {
  _has_bits_[0] |= 0x00000004u;
  success_ = value;
}
inline void MSG_MoveFriendToPage_CSC::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:relation.MSG_MoveFriendToPage_CSC.success)
}

// -------------------------------------------------------------------

// PageItem

// optional string page_name = 1;
inline bool PageItem::_internal_has_page_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PageItem::has_page_name() const {
  return _internal_has_page_name();
}
inline void PageItem::clear_page_name() {
  page_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PageItem::page_name() const {
  // @@protoc_insertion_point(field_get:relation.PageItem.page_name)
  return _internal_page_name();
}
inline void PageItem::set_page_name(const std::string& value) {
  _internal_set_page_name(value);
  // @@protoc_insertion_point(field_set:relation.PageItem.page_name)
}
inline std::string* PageItem::mutable_page_name() {
  // @@protoc_insertion_point(field_mutable:relation.PageItem.page_name)
  return _internal_mutable_page_name();
}
inline const std::string& PageItem::_internal_page_name() const {
  return page_name_.GetNoArena();
}
inline void PageItem::_internal_set_page_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  page_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PageItem::set_page_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  page_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:relation.PageItem.page_name)
}
inline void PageItem::set_page_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  page_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:relation.PageItem.page_name)
}
inline void PageItem::set_page_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  page_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:relation.PageItem.page_name)
}
inline std::string* PageItem::_internal_mutable_page_name() {
  _has_bits_[0] |= 0x00000001u;
  return page_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PageItem::release_page_name() {
  // @@protoc_insertion_point(field_release:relation.PageItem.page_name)
  if (!_internal_has_page_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return page_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PageItem::set_allocated_page_name(std::string* page_name) {
  if (page_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  page_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_name);
  // @@protoc_insertion_point(field_set_allocated:relation.PageItem.page_name)
}

// optional uint32 createtime = 2;
inline bool PageItem::_internal_has_createtime() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PageItem::has_createtime() const {
  return _internal_has_createtime();
}
inline void PageItem::clear_createtime() {
  createtime_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PageItem::_internal_createtime() const {
  return createtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PageItem::createtime() const {
  // @@protoc_insertion_point(field_get:relation.PageItem.createtime)
  return _internal_createtime();
}
inline void PageItem::_internal_set_createtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  createtime_ = value;
}
inline void PageItem::set_createtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_createtime(value);
  // @@protoc_insertion_point(field_set:relation.PageItem.createtime)
}

// -------------------------------------------------------------------

// MSG_AllFriendPage_CSC

// repeated .relation.PageItem pages = 1;
inline int MSG_AllFriendPage_CSC::_internal_pages_size() const {
  return pages_.size();
}
inline int MSG_AllFriendPage_CSC::pages_size() const {
  return _internal_pages_size();
}
inline void MSG_AllFriendPage_CSC::clear_pages() {
  pages_.Clear();
}
inline ::relation::PageItem* MSG_AllFriendPage_CSC::mutable_pages(int index) {
  // @@protoc_insertion_point(field_mutable:relation.MSG_AllFriendPage_CSC.pages)
  return pages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::relation::PageItem >*
MSG_AllFriendPage_CSC::mutable_pages() {
  // @@protoc_insertion_point(field_mutable_list:relation.MSG_AllFriendPage_CSC.pages)
  return &pages_;
}
inline const ::relation::PageItem& MSG_AllFriendPage_CSC::_internal_pages(int index) const {
  return pages_.Get(index);
}
inline const ::relation::PageItem& MSG_AllFriendPage_CSC::pages(int index) const {
  // @@protoc_insertion_point(field_get:relation.MSG_AllFriendPage_CSC.pages)
  return _internal_pages(index);
}
inline ::relation::PageItem* MSG_AllFriendPage_CSC::_internal_add_pages() {
  return pages_.Add();
}
inline ::relation::PageItem* MSG_AllFriendPage_CSC::add_pages() {
  // @@protoc_insertion_point(field_add:relation.MSG_AllFriendPage_CSC.pages)
  return _internal_add_pages();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::relation::PageItem >&
MSG_AllFriendPage_CSC::pages() const {
  // @@protoc_insertion_point(field_list:relation.MSG_AllFriendPage_CSC.pages)
  return pages_;
}

// -------------------------------------------------------------------

// BlackItem

// optional uint64 charid = 1;
inline bool BlackItem::_internal_has_charid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BlackItem::has_charid() const {
  return _internal_has_charid();
}
inline void BlackItem::clear_charid() {
  charid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlackItem::_internal_charid() const {
  return charid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlackItem::charid() const {
  // @@protoc_insertion_point(field_get:relation.BlackItem.charid)
  return _internal_charid();
}
inline void BlackItem::_internal_set_charid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  charid_ = value;
}
inline void BlackItem::set_charid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_charid(value);
  // @@protoc_insertion_point(field_set:relation.BlackItem.charid)
}

// optional string name = 2;
inline bool BlackItem::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BlackItem::has_name() const {
  return _internal_has_name();
}
inline void BlackItem::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BlackItem::name() const {
  // @@protoc_insertion_point(field_get:relation.BlackItem.name)
  return _internal_name();
}
inline void BlackItem::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:relation.BlackItem.name)
}
inline std::string* BlackItem::mutable_name() {
  // @@protoc_insertion_point(field_mutable:relation.BlackItem.name)
  return _internal_mutable_name();
}
inline const std::string& BlackItem::_internal_name() const {
  return name_.GetNoArena();
}
inline void BlackItem::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BlackItem::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:relation.BlackItem.name)
}
inline void BlackItem::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:relation.BlackItem.name)
}
inline void BlackItem::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:relation.BlackItem.name)
}
inline std::string* BlackItem::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlackItem::release_name() {
  // @@protoc_insertion_point(field_release:relation.BlackItem.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlackItem::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:relation.BlackItem.name)
}

// optional uint32 level = 3;
inline bool BlackItem::_internal_has_level() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BlackItem::has_level() const {
  return _internal_has_level();
}
inline void BlackItem::clear_level() {
  level_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlackItem::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlackItem::level() const {
  // @@protoc_insertion_point(field_get:relation.BlackItem.level)
  return _internal_level();
}
inline void BlackItem::_internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  level_ = value;
}
inline void BlackItem::set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:relation.BlackItem.level)
}

// optional uint32 viplevel = 4;
inline bool BlackItem::_internal_has_viplevel() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BlackItem::has_viplevel() const {
  return _internal_has_viplevel();
}
inline void BlackItem::clear_viplevel() {
  viplevel_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlackItem::_internal_viplevel() const {
  return viplevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlackItem::viplevel() const {
  // @@protoc_insertion_point(field_get:relation.BlackItem.viplevel)
  return _internal_viplevel();
}
inline void BlackItem::_internal_set_viplevel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  viplevel_ = value;
}
inline void BlackItem::set_viplevel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_viplevel(value);
  // @@protoc_insertion_point(field_set:relation.BlackItem.viplevel)
}

// -------------------------------------------------------------------

// MSG_BlackList_CSC

// repeated .relation.BlackItem blackList = 1;
inline int MSG_BlackList_CSC::_internal_blacklist_size() const {
  return blacklist_.size();
}
inline int MSG_BlackList_CSC::blacklist_size() const {
  return _internal_blacklist_size();
}
inline void MSG_BlackList_CSC::clear_blacklist() {
  blacklist_.Clear();
}
inline ::relation::BlackItem* MSG_BlackList_CSC::mutable_blacklist(int index) {
  // @@protoc_insertion_point(field_mutable:relation.MSG_BlackList_CSC.blackList)
  return blacklist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::relation::BlackItem >*
MSG_BlackList_CSC::mutable_blacklist() {
  // @@protoc_insertion_point(field_mutable_list:relation.MSG_BlackList_CSC.blackList)
  return &blacklist_;
}
inline const ::relation::BlackItem& MSG_BlackList_CSC::_internal_blacklist(int index) const {
  return blacklist_.Get(index);
}
inline const ::relation::BlackItem& MSG_BlackList_CSC::blacklist(int index) const {
  // @@protoc_insertion_point(field_get:relation.MSG_BlackList_CSC.blackList)
  return _internal_blacklist(index);
}
inline ::relation::BlackItem* MSG_BlackList_CSC::_internal_add_blacklist() {
  return blacklist_.Add();
}
inline ::relation::BlackItem* MSG_BlackList_CSC::add_blacklist() {
  // @@protoc_insertion_point(field_add:relation.MSG_BlackList_CSC.blackList)
  return _internal_add_blacklist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::relation::BlackItem >&
MSG_BlackList_CSC::blacklist() const {
  // @@protoc_insertion_point(field_list:relation.MSG_BlackList_CSC.blackList)
  return blacklist_;
}

// -------------------------------------------------------------------

// MSG_OperateBlackList_CSC

// optional uint64 charid = 1;
inline bool MSG_OperateBlackList_CSC::_internal_has_charid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_OperateBlackList_CSC::has_charid() const {
  return _internal_has_charid();
}
inline void MSG_OperateBlackList_CSC::clear_charid() {
  charid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_OperateBlackList_CSC::_internal_charid() const {
  return charid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_OperateBlackList_CSC::charid() const {
  // @@protoc_insertion_point(field_get:relation.MSG_OperateBlackList_CSC.charid)
  return _internal_charid();
}
inline void MSG_OperateBlackList_CSC::_internal_set_charid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  charid_ = value;
}
inline void MSG_OperateBlackList_CSC::set_charid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_charid(value);
  // @@protoc_insertion_point(field_set:relation.MSG_OperateBlackList_CSC.charid)
}

// optional uint32 opcode = 2;
inline bool MSG_OperateBlackList_CSC::_internal_has_opcode() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MSG_OperateBlackList_CSC::has_opcode() const {
  return _internal_has_opcode();
}
inline void MSG_OperateBlackList_CSC::clear_opcode() {
  opcode_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_OperateBlackList_CSC::_internal_opcode() const {
  return opcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_OperateBlackList_CSC::opcode() const {
  // @@protoc_insertion_point(field_get:relation.MSG_OperateBlackList_CSC.opcode)
  return _internal_opcode();
}
inline void MSG_OperateBlackList_CSC::_internal_set_opcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  opcode_ = value;
}
inline void MSG_OperateBlackList_CSC::set_opcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_opcode(value);
  // @@protoc_insertion_point(field_set:relation.MSG_OperateBlackList_CSC.opcode)
}

// optional .relation.BlackItem data = 3;
inline bool MSG_OperateBlackList_CSC::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || data_ != nullptr);
  return value;
}
inline bool MSG_OperateBlackList_CSC::has_data() const {
  return _internal_has_data();
}
inline void MSG_OperateBlackList_CSC::clear_data() {
  if (data_ != nullptr) data_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::relation::BlackItem& MSG_OperateBlackList_CSC::_internal_data() const {
  const ::relation::BlackItem* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::relation::BlackItem*>(
      &::relation::_BlackItem_default_instance_);
}
inline const ::relation::BlackItem& MSG_OperateBlackList_CSC::data() const {
  // @@protoc_insertion_point(field_get:relation.MSG_OperateBlackList_CSC.data)
  return _internal_data();
}
inline ::relation::BlackItem* MSG_OperateBlackList_CSC::release_data() {
  // @@protoc_insertion_point(field_release:relation.MSG_OperateBlackList_CSC.data)
  _has_bits_[0] &= ~0x00000001u;
  ::relation::BlackItem* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::relation::BlackItem* MSG_OperateBlackList_CSC::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::relation::BlackItem>(GetArenaNoVirtual());
    data_ = p;
  }
  return data_;
}
inline ::relation::BlackItem* MSG_OperateBlackList_CSC::mutable_data() {
  // @@protoc_insertion_point(field_mutable:relation.MSG_OperateBlackList_CSC.data)
  return _internal_mutable_data();
}
inline void MSG_OperateBlackList_CSC::set_allocated_data(::relation::BlackItem* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:relation.MSG_OperateBlackList_CSC.data)
}

// optional bool success = 4;
inline bool MSG_OperateBlackList_CSC::_internal_has_success() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MSG_OperateBlackList_CSC::has_success() const {
  return _internal_has_success();
}
inline void MSG_OperateBlackList_CSC::clear_success() {
  success_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool MSG_OperateBlackList_CSC::_internal_success() const {
  return success_;
}
inline bool MSG_OperateBlackList_CSC::success() const {
  // @@protoc_insertion_point(field_get:relation.MSG_OperateBlackList_CSC.success)
  return _internal_success();
}
inline void MSG_OperateBlackList_CSC::_internal_set_success(bool value) {
  _has_bits_[0] |= 0x00000008u;
  success_ = value;
}
inline void MSG_OperateBlackList_CSC::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:relation.MSG_OperateBlackList_CSC.success)
}

// -------------------------------------------------------------------

// MSG_ChangeNickName_CSC

// optional uint64 charid = 1;
inline bool MSG_ChangeNickName_CSC::_internal_has_charid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_ChangeNickName_CSC::has_charid() const {
  return _internal_has_charid();
}
inline void MSG_ChangeNickName_CSC::clear_charid() {
  charid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_ChangeNickName_CSC::_internal_charid() const {
  return charid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_ChangeNickName_CSC::charid() const {
  // @@protoc_insertion_point(field_get:relation.MSG_ChangeNickName_CSC.charid)
  return _internal_charid();
}
inline void MSG_ChangeNickName_CSC::_internal_set_charid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  charid_ = value;
}
inline void MSG_ChangeNickName_CSC::set_charid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_charid(value);
  // @@protoc_insertion_point(field_set:relation.MSG_ChangeNickName_CSC.charid)
}

// optional string nickname = 2;
inline bool MSG_ChangeNickName_CSC::_internal_has_nickname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_ChangeNickName_CSC::has_nickname() const {
  return _internal_has_nickname();
}
inline void MSG_ChangeNickName_CSC::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MSG_ChangeNickName_CSC::nickname() const {
  // @@protoc_insertion_point(field_get:relation.MSG_ChangeNickName_CSC.nickname)
  return _internal_nickname();
}
inline void MSG_ChangeNickName_CSC::set_nickname(const std::string& value) {
  _internal_set_nickname(value);
  // @@protoc_insertion_point(field_set:relation.MSG_ChangeNickName_CSC.nickname)
}
inline std::string* MSG_ChangeNickName_CSC::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:relation.MSG_ChangeNickName_CSC.nickname)
  return _internal_mutable_nickname();
}
inline const std::string& MSG_ChangeNickName_CSC::_internal_nickname() const {
  return nickname_.GetNoArena();
}
inline void MSG_ChangeNickName_CSC::_internal_set_nickname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  nickname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_ChangeNickName_CSC::set_nickname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  nickname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:relation.MSG_ChangeNickName_CSC.nickname)
}
inline void MSG_ChangeNickName_CSC::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  nickname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:relation.MSG_ChangeNickName_CSC.nickname)
}
inline void MSG_ChangeNickName_CSC::set_nickname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  nickname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:relation.MSG_ChangeNickName_CSC.nickname)
}
inline std::string* MSG_ChangeNickName_CSC::_internal_mutable_nickname() {
  _has_bits_[0] |= 0x00000001u;
  return nickname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_ChangeNickName_CSC::release_nickname() {
  // @@protoc_insertion_point(field_release:relation.MSG_ChangeNickName_CSC.nickname)
  if (!_internal_has_nickname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return nickname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_ChangeNickName_CSC::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  nickname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:relation.MSG_ChangeNickName_CSC.nickname)
}

// optional bool success = 3;
inline bool MSG_ChangeNickName_CSC::_internal_has_success() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MSG_ChangeNickName_CSC::has_success() const {
  return _internal_has_success();
}
inline void MSG_ChangeNickName_CSC::clear_success() {
  success_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool MSG_ChangeNickName_CSC::_internal_success() const {
  return success_;
}
inline bool MSG_ChangeNickName_CSC::success() const {
  // @@protoc_insertion_point(field_get:relation.MSG_ChangeNickName_CSC.success)
  return _internal_success();
}
inline void MSG_ChangeNickName_CSC::_internal_set_success(bool value) {
  _has_bits_[0] |= 0x00000004u;
  success_ = value;
}
inline void MSG_ChangeNickName_CSC::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:relation.MSG_ChangeNickName_CSC.success)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace relation

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::relation::RelationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::relation::RelationType>() {
  return ::relation::RelationType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_relation_2eproto
