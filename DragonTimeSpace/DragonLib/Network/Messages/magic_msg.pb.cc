// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: magic_msg.proto

#include "magic_msg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_magic_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AttWarning_magic_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_magic_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PKResult_magic_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_magic_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SkillData_magic_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_msg_5fenum_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EntryIDType_msg_5fenum_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_msg_5fenum_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Position_msg_5fenum_2eproto;
namespace magic {
class SkillDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SkillData> _instance;
} _SkillData_default_instance_;
class ExtSkillDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExtSkillData> _instance;
} _ExtSkillData_default_instance_;
class MSG_Req_MagicAttack_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_MagicAttack_CS> _instance;
} _MSG_Req_MagicAttack_CS_default_instance_;
class MSG_Ret_StartMagicAttack_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_StartMagicAttack_SC> _instance;
} _MSG_Ret_StartMagicAttack_SC_default_instance_;
class PKResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PKResult> _instance;
} _PKResult_default_instance_;
class MSG_Ret_MagicAttack_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_MagicAttack_SC> _instance;
} _MSG_Ret_MagicAttack_SC_default_instance_;
class MSG_Ret_HpMpPop_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_HpMpPop_SC> _instance;
} _MSG_Ret_HpMpPop_SC_default_instance_;
class MSG_Req_SyncSkillStage_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_SyncSkillStage_CS> _instance;
} _MSG_Req_SyncSkillStage_CS_default_instance_;
class MSG_Ret_SyncSkillStage_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_SyncSkillStage_SC> _instance;
} _MSG_Ret_SyncSkillStage_SC_default_instance_;
class MSG_Ret_InterruptSkill_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_InterruptSkill_SC> _instance;
} _MSG_Ret_InterruptSkill_SC_default_instance_;
class MSG_Ret_MainUserDeath_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_MainUserDeath_SC> _instance;
} _MSG_Ret_MainUserDeath_SC_default_instance_;
class MSG_Ret_UserDeath_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_UserDeath_SC> _instance;
} _MSG_Ret_UserDeath_SC_default_instance_;
class MSG_Req_MainUserRelive_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_MainUserRelive_CS> _instance;
} _MSG_Req_MainUserRelive_CS_default_instance_;
class MSG_Ret_MainUserRelive_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_MainUserRelive_SC> _instance;
} _MSG_Ret_MainUserRelive_SC_default_instance_;
class MSG_Ret_SwitchPKMode_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_SwitchPKMode_SC> _instance;
} _MSG_Ret_SwitchPKMode_SC_default_instance_;
class MSG_RetRefreshSkill_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetRefreshSkill_SC> _instance;
} _MSG_RetRefreshSkill_SC_default_instance_;
class MSG_Req_OffSkill_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_OffSkill_CS> _instance;
} _MSG_Req_OffSkill_CS_default_instance_;
class AttWarningDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AttWarning> _instance;
} _AttWarning_default_instance_;
class MSG_Ret_AttWarning_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_AttWarning_SC> _instance;
} _MSG_Ret_AttWarning_SC_default_instance_;
class MSG_ReqTriggerQTESkill_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqTriggerQTESkill_CS> _instance;
} _MSG_ReqTriggerQTESkill_CS_default_instance_;
class MSG_RetTriggerQTESkill_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetTriggerQTESkill_SC> _instance;
} _MSG_RetTriggerQTESkill_SC_default_instance_;
class MSG_ReqDrinkBloodSkill_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqDrinkBloodSkill_CS> _instance;
} _MSG_ReqDrinkBloodSkill_CS_default_instance_;
class MSG_RetDrinkBloodSkill_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetDrinkBloodSkill_SC> _instance;
} _MSG_RetDrinkBloodSkill_SC_default_instance_;
class MSG_Ret_UserSkillRelive_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_UserSkillRelive_SC> _instance;
} _MSG_Ret_UserSkillRelive_SC_default_instance_;
}  // namespace magic
static void InitDefaultsscc_info_AttWarning_magic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::magic::_AttWarning_default_instance_;
    new (ptr) ::magic::AttWarning();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::magic::AttWarning::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AttWarning_magic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AttWarning_magic_5fmsg_2eproto}, {
      &scc_info_Position_msg_5fenum_2eproto.base,}};

static void InitDefaultsscc_info_ExtSkillData_magic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::magic::_ExtSkillData_default_instance_;
    new (ptr) ::magic::ExtSkillData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::magic::ExtSkillData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExtSkillData_magic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ExtSkillData_magic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqDrinkBloodSkill_CS_magic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::magic::_MSG_ReqDrinkBloodSkill_CS_default_instance_;
    new (ptr) ::magic::MSG_ReqDrinkBloodSkill_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::magic::MSG_ReqDrinkBloodSkill_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqDrinkBloodSkill_CS_magic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqDrinkBloodSkill_CS_magic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqTriggerQTESkill_CS_magic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::magic::_MSG_ReqTriggerQTESkill_CS_default_instance_;
    new (ptr) ::magic::MSG_ReqTriggerQTESkill_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::magic::MSG_ReqTriggerQTESkill_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_ReqTriggerQTESkill_CS_magic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_ReqTriggerQTESkill_CS_magic_5fmsg_2eproto}, {
      &scc_info_Position_msg_5fenum_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Req_MagicAttack_CS_magic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::magic::_MSG_Req_MagicAttack_CS_default_instance_;
    new (ptr) ::magic::MSG_Req_MagicAttack_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::magic::MSG_Req_MagicAttack_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Req_MagicAttack_CS_magic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Req_MagicAttack_CS_magic_5fmsg_2eproto}, {
      &scc_info_EntryIDType_msg_5fenum_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Req_MainUserRelive_CS_magic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::magic::_MSG_Req_MainUserRelive_CS_default_instance_;
    new (ptr) ::magic::MSG_Req_MainUserRelive_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::magic::MSG_Req_MainUserRelive_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_MainUserRelive_CS_magic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_MainUserRelive_CS_magic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_OffSkill_CS_magic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::magic::_MSG_Req_OffSkill_CS_default_instance_;
    new (ptr) ::magic::MSG_Req_OffSkill_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::magic::MSG_Req_OffSkill_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_OffSkill_CS_magic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_OffSkill_CS_magic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_SyncSkillStage_CS_magic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::magic::_MSG_Req_SyncSkillStage_CS_default_instance_;
    new (ptr) ::magic::MSG_Req_SyncSkillStage_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::magic::MSG_Req_SyncSkillStage_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Req_SyncSkillStage_CS_magic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Req_SyncSkillStage_CS_magic_5fmsg_2eproto}, {
      &scc_info_EntryIDType_msg_5fenum_2eproto.base,}};

static void InitDefaultsscc_info_MSG_RetDrinkBloodSkill_SC_magic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::magic::_MSG_RetDrinkBloodSkill_SC_default_instance_;
    new (ptr) ::magic::MSG_RetDrinkBloodSkill_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::magic::MSG_RetDrinkBloodSkill_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RetDrinkBloodSkill_SC_magic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_RetDrinkBloodSkill_SC_magic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RetRefreshSkill_SC_magic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::magic::_MSG_RetRefreshSkill_SC_default_instance_;
    new (ptr) ::magic::MSG_RetRefreshSkill_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::magic::MSG_RetRefreshSkill_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_RetRefreshSkill_SC_magic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_RetRefreshSkill_SC_magic_5fmsg_2eproto}, {
      &scc_info_SkillData_magic_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_MSG_RetTriggerQTESkill_SC_magic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::magic::_MSG_RetTriggerQTESkill_SC_default_instance_;
    new (ptr) ::magic::MSG_RetTriggerQTESkill_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::magic::MSG_RetTriggerQTESkill_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RetTriggerQTESkill_SC_magic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_RetTriggerQTESkill_SC_magic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_AttWarning_SC_magic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::magic::_MSG_Ret_AttWarning_SC_default_instance_;
    new (ptr) ::magic::MSG_Ret_AttWarning_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::magic::MSG_Ret_AttWarning_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MSG_Ret_AttWarning_SC_magic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MSG_Ret_AttWarning_SC_magic_5fmsg_2eproto}, {
      &scc_info_EntryIDType_msg_5fenum_2eproto.base,
      &scc_info_AttWarning_magic_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Ret_HpMpPop_SC_magic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::magic::_MSG_Ret_HpMpPop_SC_default_instance_;
    new (ptr) ::magic::MSG_Ret_HpMpPop_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::magic::MSG_Ret_HpMpPop_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Ret_HpMpPop_SC_magic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Ret_HpMpPop_SC_magic_5fmsg_2eproto}, {
      &scc_info_EntryIDType_msg_5fenum_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Ret_InterruptSkill_SC_magic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::magic::_MSG_Ret_InterruptSkill_SC_default_instance_;
    new (ptr) ::magic::MSG_Ret_InterruptSkill_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::magic::MSG_Ret_InterruptSkill_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Ret_InterruptSkill_SC_magic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Ret_InterruptSkill_SC_magic_5fmsg_2eproto}, {
      &scc_info_EntryIDType_msg_5fenum_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Ret_MagicAttack_SC_magic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::magic::_MSG_Ret_MagicAttack_SC_default_instance_;
    new (ptr) ::magic::MSG_Ret_MagicAttack_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::magic::MSG_Ret_MagicAttack_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MSG_Ret_MagicAttack_SC_magic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MSG_Ret_MagicAttack_SC_magic_5fmsg_2eproto}, {
      &scc_info_EntryIDType_msg_5fenum_2eproto.base,
      &scc_info_PKResult_magic_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Ret_MainUserDeath_SC_magic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::magic::_MSG_Ret_MainUserDeath_SC_default_instance_;
    new (ptr) ::magic::MSG_Ret_MainUserDeath_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::magic::MSG_Ret_MainUserDeath_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_MainUserDeath_SC_magic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_MainUserDeath_SC_magic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_MainUserRelive_SC_magic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::magic::_MSG_Ret_MainUserRelive_SC_default_instance_;
    new (ptr) ::magic::MSG_Ret_MainUserRelive_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::magic::MSG_Ret_MainUserRelive_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_MainUserRelive_SC_magic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_MainUserRelive_SC_magic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_StartMagicAttack_SC_magic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::magic::_MSG_Ret_StartMagicAttack_SC_default_instance_;
    new (ptr) ::magic::MSG_Ret_StartMagicAttack_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::magic::MSG_Ret_StartMagicAttack_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Ret_StartMagicAttack_SC_magic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Ret_StartMagicAttack_SC_magic_5fmsg_2eproto}, {
      &scc_info_EntryIDType_msg_5fenum_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Ret_SwitchPKMode_SC_magic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::magic::_MSG_Ret_SwitchPKMode_SC_default_instance_;
    new (ptr) ::magic::MSG_Ret_SwitchPKMode_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::magic::MSG_Ret_SwitchPKMode_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_SwitchPKMode_SC_magic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_SwitchPKMode_SC_magic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_SyncSkillStage_SC_magic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::magic::_MSG_Ret_SyncSkillStage_SC_default_instance_;
    new (ptr) ::magic::MSG_Ret_SyncSkillStage_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::magic::MSG_Ret_SyncSkillStage_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Ret_SyncSkillStage_SC_magic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Ret_SyncSkillStage_SC_magic_5fmsg_2eproto}, {
      &scc_info_EntryIDType_msg_5fenum_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Ret_UserDeath_SC_magic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::magic::_MSG_Ret_UserDeath_SC_default_instance_;
    new (ptr) ::magic::MSG_Ret_UserDeath_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::magic::MSG_Ret_UserDeath_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_UserDeath_SC_magic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_UserDeath_SC_magic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_UserSkillRelive_SC_magic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::magic::_MSG_Ret_UserSkillRelive_SC_default_instance_;
    new (ptr) ::magic::MSG_Ret_UserSkillRelive_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::magic::MSG_Ret_UserSkillRelive_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_UserSkillRelive_SC_magic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_UserSkillRelive_SC_magic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_PKResult_magic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::magic::_PKResult_default_instance_;
    new (ptr) ::magic::PKResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::magic::PKResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PKResult_magic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PKResult_magic_5fmsg_2eproto}, {
      &scc_info_EntryIDType_msg_5fenum_2eproto.base,}};

static void InitDefaultsscc_info_SkillData_magic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::magic::_SkillData_default_instance_;
    new (ptr) ::magic::SkillData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::magic::SkillData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SkillData_magic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SkillData_magic_5fmsg_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_magic_5fmsg_2eproto[24];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_magic_5fmsg_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_magic_5fmsg_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_magic_5fmsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::magic::SkillData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::magic::SkillData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::magic::SkillData, skillid_),
  PROTOBUF_FIELD_OFFSET(::magic::SkillData, level_),
  PROTOBUF_FIELD_OFFSET(::magic::SkillData, lastusetime_),
  PROTOBUF_FIELD_OFFSET(::magic::SkillData, onoff_),
  PROTOBUF_FIELD_OFFSET(::magic::SkillData, lastupdatetime_),
  PROTOBUF_FIELD_OFFSET(::magic::SkillData, overlaytimes_),
  PROTOBUF_FIELD_OFFSET(::magic::SkillData, active_stages_),
  PROTOBUF_FIELD_OFFSET(::magic::SkillData, maxmultitimes_),
  PROTOBUF_FIELD_OFFSET(::magic::SkillData, skillcd_),
  0,
  1,
  2,
  4,
  3,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::magic::ExtSkillData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::magic::ExtSkillData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::magic::ExtSkillData, id_),
  PROTOBUF_FIELD_OFFSET(::magic::ExtSkillData, level_),
  PROTOBUF_FIELD_OFFSET(::magic::ExtSkillData, masterskill_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Req_MagicAttack_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Req_MagicAttack_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Req_MagicAttack_CS, target_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Req_MagicAttack_CS, magictype_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Req_MagicAttack_CS, desx_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Req_MagicAttack_CS, desy_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Req_MagicAttack_CS, attdir_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Req_MagicAttack_CS, userdir_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_StartMagicAttack_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_StartMagicAttack_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_StartMagicAttack_SC, att_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_StartMagicAttack_SC, desx_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_StartMagicAttack_SC, desy_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_StartMagicAttack_SC, attdir_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_StartMagicAttack_SC, userdir_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_StartMagicAttack_SC, skillid_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::magic::PKResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::magic::PKResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::magic::PKResult, def_),
  PROTOBUF_FIELD_OFFSET(::magic::PKResult, hp_),
  PROTOBUF_FIELD_OFFSET(::magic::PKResult, changehp_),
  PROTOBUF_FIELD_OFFSET(::magic::PKResult, attcode_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_MagicAttack_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_MagicAttack_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_MagicAttack_SC, att_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_MagicAttack_SC, def_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_MagicAttack_SC, desx_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_MagicAttack_SC, desy_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_MagicAttack_SC, attdir_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_MagicAttack_SC, userdir_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_MagicAttack_SC, skillstage_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_MagicAttack_SC, pklist_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_HpMpPop_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_HpMpPop_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_HpMpPop_SC, target_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_HpMpPop_SC, hp_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_HpMpPop_SC, hp_change_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_HpMpPop_SC, mp_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_HpMpPop_SC, mp_change_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_HpMpPop_SC, force_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_HpMpPop_SC, skillstage_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_HpMpPop_SC, state_id_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_HpMpPop_SC, att_),
  0,
  2,
  3,
  4,
  5,
  8,
  6,
  7,
  1,
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Req_SyncSkillStage_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Req_SyncSkillStage_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Req_SyncSkillStage_CS, target_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Req_SyncSkillStage_CS, skillstage_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Req_SyncSkillStage_CS, desx_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Req_SyncSkillStage_CS, desy_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Req_SyncSkillStage_CS, attdir_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Req_SyncSkillStage_CS, userdir_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Req_SyncSkillStage_CS, stagetype_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_SyncSkillStage_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_SyncSkillStage_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_SyncSkillStage_SC, att_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_SyncSkillStage_SC, def_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_SyncSkillStage_SC, skillstage_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_SyncSkillStage_SC, desx_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_SyncSkillStage_SC, desy_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_SyncSkillStage_SC, attdir_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_SyncSkillStage_SC, userdir_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_SyncSkillStage_SC, stagetype_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_InterruptSkill_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_InterruptSkill_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_InterruptSkill_SC, att_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_InterruptSkill_SC, skillstage_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_MainUserDeath_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_MainUserDeath_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_MainUserDeath_SC, charid_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_MainUserDeath_SC, relivecostid_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_MainUserDeath_SC, relivecostnum_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_MainUserDeath_SC, canreliveorigin_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_MainUserDeath_SC, canrelive_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_MainUserDeath_SC, relivetime_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_MainUserDeath_SC, autorelive_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_MainUserDeath_SC, relive_type_),
  0,
  1,
  2,
  3,
  7,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_UserDeath_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_UserDeath_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_UserDeath_SC, tempid_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_UserDeath_SC, attid_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_UserDeath_SC, lasthitskill_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_UserDeath_SC, atttype_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Req_MainUserRelive_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Req_MainUserRelive_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Req_MainUserRelive_CS, relivetype_),
  0,
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_MainUserRelive_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_MainUserRelive_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_MainUserRelive_SC, userid_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_MainUserRelive_SC, x_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_MainUserRelive_SC, y_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_MainUserRelive_SC, relivetype_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_SwitchPKMode_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_SwitchPKMode_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_SwitchPKMode_SC, newmode_),
  0,
  PROTOBUF_FIELD_OFFSET(::magic::MSG_RetRefreshSkill_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_RetRefreshSkill_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::magic::MSG_RetRefreshSkill_SC, skills_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Req_OffSkill_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Req_OffSkill_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Req_OffSkill_CS, skillid_),
  0,
  PROTOBUF_FIELD_OFFSET(::magic::AttWarning, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::magic::AttWarning, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::magic::AttWarning, lasttime_),
  PROTOBUF_FIELD_OFFSET(::magic::AttWarning, pos_),
  PROTOBUF_FIELD_OFFSET(::magic::AttWarning, dir_),
  PROTOBUF_FIELD_OFFSET(::magic::AttWarning, rangetype_),
  PROTOBUF_FIELD_OFFSET(::magic::AttWarning, rangep1_),
  PROTOBUF_FIELD_OFFSET(::magic::AttWarning, rangep2_),
  1,
  0,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_AttWarning_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_AttWarning_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_AttWarning_SC, attacker_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_AttWarning_SC, warning_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::magic::MSG_ReqTriggerQTESkill_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_ReqTriggerQTESkill_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::magic::MSG_ReqTriggerQTESkill_CS, bosstempid_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_ReqTriggerQTESkill_CS, warppos_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_ReqTriggerQTESkill_CS, dir_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::magic::MSG_RetTriggerQTESkill_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_RetTriggerQTESkill_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::magic::MSG_RetTriggerQTESkill_SC, errcode_),
  0,
  PROTOBUF_FIELD_OFFSET(::magic::MSG_ReqDrinkBloodSkill_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_ReqDrinkBloodSkill_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::magic::MSG_ReqDrinkBloodSkill_CS, npctempid_),
  0,
  PROTOBUF_FIELD_OFFSET(::magic::MSG_RetDrinkBloodSkill_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_RetDrinkBloodSkill_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::magic::MSG_RetDrinkBloodSkill_SC, errcode_),
  0,
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_UserSkillRelive_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_UserSkillRelive_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_UserSkillRelive_SC, from_name_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_UserSkillRelive_SC, relive_type_),
  PROTOBUF_FIELD_OFFSET(::magic::MSG_Ret_UserSkillRelive_SC, relivetime_),
  0,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, sizeof(::magic::SkillData)},
  { 23, 31, sizeof(::magic::ExtSkillData)},
  { 34, 45, sizeof(::magic::MSG_Req_MagicAttack_CS)},
  { 51, 62, sizeof(::magic::MSG_Ret_StartMagicAttack_SC)},
  { 68, 77, sizeof(::magic::PKResult)},
  { 81, 94, sizeof(::magic::MSG_Ret_MagicAttack_SC)},
  { 102, 116, sizeof(::magic::MSG_Ret_HpMpPop_SC)},
  { 125, 137, sizeof(::magic::MSG_Req_SyncSkillStage_CS)},
  { 144, 157, sizeof(::magic::MSG_Ret_SyncSkillStage_SC)},
  { 165, 172, sizeof(::magic::MSG_Ret_InterruptSkill_SC)},
  { 174, 187, sizeof(::magic::MSG_Ret_MainUserDeath_SC)},
  { 195, 204, sizeof(::magic::MSG_Ret_UserDeath_SC)},
  { 208, 214, sizeof(::magic::MSG_Req_MainUserRelive_CS)},
  { 215, 224, sizeof(::magic::MSG_Ret_MainUserRelive_SC)},
  { 228, 234, sizeof(::magic::MSG_Ret_SwitchPKMode_SC)},
  { 235, 241, sizeof(::magic::MSG_RetRefreshSkill_SC)},
  { 242, 248, sizeof(::magic::MSG_Req_OffSkill_CS)},
  { 249, 260, sizeof(::magic::AttWarning)},
  { 266, 273, sizeof(::magic::MSG_Ret_AttWarning_SC)},
  { 275, 283, sizeof(::magic::MSG_ReqTriggerQTESkill_CS)},
  { 286, 292, sizeof(::magic::MSG_RetTriggerQTESkill_SC)},
  { 293, 299, sizeof(::magic::MSG_ReqDrinkBloodSkill_CS)},
  { 300, 306, sizeof(::magic::MSG_RetDrinkBloodSkill_SC)},
  { 307, 315, sizeof(::magic::MSG_Ret_UserSkillRelive_SC)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::magic::_SkillData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::magic::_ExtSkillData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::magic::_MSG_Req_MagicAttack_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::magic::_MSG_Ret_StartMagicAttack_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::magic::_PKResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::magic::_MSG_Ret_MagicAttack_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::magic::_MSG_Ret_HpMpPop_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::magic::_MSG_Req_SyncSkillStage_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::magic::_MSG_Ret_SyncSkillStage_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::magic::_MSG_Ret_InterruptSkill_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::magic::_MSG_Ret_MainUserDeath_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::magic::_MSG_Ret_UserDeath_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::magic::_MSG_Req_MainUserRelive_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::magic::_MSG_Ret_MainUserRelive_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::magic::_MSG_Ret_SwitchPKMode_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::magic::_MSG_RetRefreshSkill_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::magic::_MSG_Req_OffSkill_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::magic::_AttWarning_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::magic::_MSG_Ret_AttWarning_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::magic::_MSG_ReqTriggerQTESkill_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::magic::_MSG_RetTriggerQTESkill_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::magic::_MSG_ReqDrinkBloodSkill_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::magic::_MSG_RetDrinkBloodSkill_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::magic::_MSG_Ret_UserSkillRelive_SC_default_instance_),
};

const char descriptor_table_protodef_magic_5fmsg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017magic_msg.proto\022\005magic\032\016msg_enum.proto"
  "\"\274\001\n\tSkillData\022\017\n\007skillid\030\001 \001(\r\022\r\n\005level"
  "\030\002 \001(\r\022\023\n\013lastusetime\030\003 \001(\004\022\r\n\005onoff\030\004 \001"
  "(\r\022\026\n\016lastupdatetime\030\005 \001(\004\022\024\n\014overlaytim"
  "es\030\006 \001(\r\022\025\n\ractive_stages\030\007 \001(\r\022\025\n\rmaxmu"
  "ltitimes\030\010 \001(\r\022\017\n\007skillcd\030\t \001(\r\">\n\014ExtSk"
  "illData\022\n\n\002id\030\001 \001(\r\022\r\n\005level\030\002 \001(\r\022\023\n\013ma"
  "sterskill\030\003 \001(\r\"\212\001\n\026MSG_Req_MagicAttack_"
  "CS\022 \n\006target\030\001 \001(\0132\020.msg.EntryIDType\022\021\n\t"
  "magictype\030\002 \001(\r\022\014\n\004desx\030\003 \001(\002\022\014\n\004desy\030\004 "
  "\001(\002\022\016\n\006attdir\030\005 \001(\r\022\017\n\007userdir\030\006 \001(\r\"\212\001\n"
  "\033MSG_Ret_StartMagicAttack_SC\022\035\n\003att\030\001 \001("
  "\0132\020.msg.EntryIDType\022\014\n\004desx\030\002 \001(\002\022\014\n\004des"
  "y\030\003 \001(\002\022\016\n\006attdir\030\004 \001(\r\022\017\n\007userdir\030\005 \001(\r"
  "\022\017\n\007skillid\030\006 \001(\r\"m\n\010PKResult\022\035\n\003def\030\001 \001"
  "(\0132\020.msg.EntryIDType\022\n\n\002hp\030\002 \001(\r\022\020\n\010chan"
  "gehp\030\003 \001(\005\022$\n\007attcode\030\004 \003(\0162\023.magic.ATTA"
  "CKRESULT\"\310\001\n\026MSG_Ret_MagicAttack_SC\022\035\n\003a"
  "tt\030\001 \001(\0132\020.msg.EntryIDType\022\035\n\003def\030\002 \001(\0132"
  "\020.msg.EntryIDType\022\014\n\004desx\030\003 \001(\002\022\014\n\004desy\030"
  "\004 \001(\002\022\016\n\006attdir\030\005 \001(\r\022\017\n\007userdir\030\006 \001(\r\022\022"
  "\n\nskillstage\030\007 \001(\004\022\037\n\006pklist\030\010 \003(\0132\017.mag"
  "ic.PKResult\"\310\001\n\022MSG_Ret_HpMpPop_SC\022 \n\006ta"
  "rget\030\001 \001(\0132\020.msg.EntryIDType\022\n\n\002hp\030\002 \001(\r"
  "\022\021\n\thp_change\030\003 \001(\005\022\n\n\002mp\030\004 \001(\r\022\021\n\tmp_ch"
  "ange\030\005 \001(\r\022\r\n\005force\030\006 \001(\010\022\022\n\nskillstage\030"
  "\007 \001(\004\022\020\n\010state_id\030\010 \001(\004\022\035\n\003att\030\t \001(\0132\020.m"
  "sg.EntryIDType\"\241\001\n\031MSG_Req_SyncSkillStag"
  "e_CS\022 \n\006target\030\001 \001(\0132\020.msg.EntryIDType\022\022"
  "\n\nskillstage\030\002 \001(\004\022\014\n\004desx\030\003 \001(\002\022\014\n\004desy"
  "\030\004 \001(\002\022\016\n\006attdir\030\005 \001(\r\022\017\n\007userdir\030\006 \001(\r\022"
  "\021\n\tstagetype\030\007 \001(\r\"\275\001\n\031MSG_Ret_SyncSkill"
  "Stage_SC\022\035\n\003att\030\001 \001(\0132\020.msg.EntryIDType\022"
  "\035\n\003def\030\002 \001(\0132\020.msg.EntryIDType\022\022\n\nskills"
  "tage\030\003 \001(\004\022\014\n\004desx\030\004 \001(\002\022\014\n\004desy\030\005 \001(\002\022\016"
  "\n\006attdir\030\006 \001(\r\022\017\n\007userdir\030\007 \001(\r\022\021\n\tstage"
  "type\030\010 \001(\r\"N\n\031MSG_Ret_InterruptSkill_SC\022"
  "\035\n\003att\030\001 \001(\0132\020.msg.EntryIDType\022\022\n\nskills"
  "tage\030\002 \001(\004\"\306\001\n\030MSG_Ret_MainUserDeath_SC\022"
  "\016\n\006charid\030\001 \001(\t\022\024\n\014relivecostid\030\002 \001(\r\022\025\n"
  "\rrelivecostnum\030\003 \001(\r\022\027\n\017canreliveorigin\030"
  "\004 \001(\r\022\027\n\tcanrelive\030\005 \001(\010:\004true\022\022\n\nrelive"
  "time\030\006 \001(\r\022\022\n\nautorelive\030\007 \001(\010\022\023\n\013relive"
  "_type\030\010 \001(\r\"\\\n\024MSG_Ret_UserDeath_SC\022\016\n\006t"
  "empid\030\001 \001(\004\022\r\n\005attid\030\002 \001(\004\022\024\n\014lasthitski"
  "ll\030\003 \001(\r\022\017\n\007atttype\030\004 \001(\r\"/\n\031MSG_Req_Mai"
  "nUserRelive_CS\022\022\n\nrelivetype\030\001 \001(\r\"f\n\031MS"
  "G_Ret_MainUserRelive_SC\022\016\n\006userid\030\001 \001(\004\022"
  "\t\n\001x\030\002 \001(\r\022\t\n\001y\030\003 \001(\r\022#\n\nrelivetype\030\004 \002("
  "\0162\017.msg.ReliveType\"7\n\027MSG_Ret_SwitchPKMo"
  "de_SC\022\034\n\007newmode\030\001 \002(\0162\013.msg.PKMode\":\n\026M"
  "SG_RetRefreshSkill_SC\022 \n\006skills\030\001 \003(\0132\020."
  "magic.SkillData\"&\n\023MSG_Req_OffSkill_CS\022\017"
  "\n\007skillid\030\001 \001(\r\"|\n\nAttWarning\022\020\n\010lasttim"
  "e\030\001 \001(\r\022\032\n\003pos\030\002 \001(\0132\r.msg.Position\022\013\n\003d"
  "ir\030\003 \001(\r\022\021\n\trangetype\030\004 \001(\r\022\017\n\007rangep1\030\005"
  " \001(\r\022\017\n\007rangep2\030\006 \001(\r\"_\n\025MSG_Ret_AttWarn"
  "ing_SC\022\"\n\010attacker\030\001 \001(\0132\020.msg.EntryIDTy"
  "pe\022\"\n\007warning\030\002 \003(\0132\021.magic.AttWarning\"\\"
  "\n\031MSG_ReqTriggerQTESkill_CS\022\022\n\nbosstempi"
  "d\030\001 \001(\004\022\036\n\007warppos\030\002 \001(\0132\r.msg.Position\022"
  "\013\n\003dir\030\003 \001(\r\",\n\031MSG_RetTriggerQTESkill_S"
  "C\022\017\n\007errcode\030\001 \001(\r\".\n\031MSG_ReqDrinkBloodS"
  "kill_CS\022\021\n\tnpctempid\030\001 \001(\004\"/\n\031MSG_RetDri"
  "nkBloodSkill_SC\022\022\n\007errcode\030\001 \001(\r:\0011\"X\n\032M"
  "SG_Ret_UserSkillRelive_SC\022\021\n\tfrom_name\030\001"
  " \001(\t\022\023\n\013relive_type\030\002 \001(\r\022\022\n\nrelivetime\030"
  "\003 \001(\r*\313\001\n\014ATTACKRESULT\022\025\n\021ATTACKRESULT_N"
  "ONE\020\000\022\025\n\021ATTACKRESULT_MISS\020\001\022\027\n\023ATTACKRE"
  "SULT_NORMAL\020\002\022\025\n\021ATTACKRESULT_BANG\020\003\022\025\n\021"
  "ATTACKRESULT_HOLD\020\004\022\026\n\022ATTACKRESULT_BLOC"
  "K\020\005\022\030\n\024ATTACKRESULT_DEFLECT\020\006\022\024\n\020ATTACKR"
  "ESULT_HIT\020\010"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_magic_5fmsg_2eproto_deps[1] = {
  &::descriptor_table_msg_5fenum_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_magic_5fmsg_2eproto_sccs[24] = {
  &scc_info_AttWarning_magic_5fmsg_2eproto.base,
  &scc_info_ExtSkillData_magic_5fmsg_2eproto.base,
  &scc_info_MSG_ReqDrinkBloodSkill_CS_magic_5fmsg_2eproto.base,
  &scc_info_MSG_ReqTriggerQTESkill_CS_magic_5fmsg_2eproto.base,
  &scc_info_MSG_Req_MagicAttack_CS_magic_5fmsg_2eproto.base,
  &scc_info_MSG_Req_MainUserRelive_CS_magic_5fmsg_2eproto.base,
  &scc_info_MSG_Req_OffSkill_CS_magic_5fmsg_2eproto.base,
  &scc_info_MSG_Req_SyncSkillStage_CS_magic_5fmsg_2eproto.base,
  &scc_info_MSG_RetDrinkBloodSkill_SC_magic_5fmsg_2eproto.base,
  &scc_info_MSG_RetRefreshSkill_SC_magic_5fmsg_2eproto.base,
  &scc_info_MSG_RetTriggerQTESkill_SC_magic_5fmsg_2eproto.base,
  &scc_info_MSG_Ret_AttWarning_SC_magic_5fmsg_2eproto.base,
  &scc_info_MSG_Ret_HpMpPop_SC_magic_5fmsg_2eproto.base,
  &scc_info_MSG_Ret_InterruptSkill_SC_magic_5fmsg_2eproto.base,
  &scc_info_MSG_Ret_MagicAttack_SC_magic_5fmsg_2eproto.base,
  &scc_info_MSG_Ret_MainUserDeath_SC_magic_5fmsg_2eproto.base,
  &scc_info_MSG_Ret_MainUserRelive_SC_magic_5fmsg_2eproto.base,
  &scc_info_MSG_Ret_StartMagicAttack_SC_magic_5fmsg_2eproto.base,
  &scc_info_MSG_Ret_SwitchPKMode_SC_magic_5fmsg_2eproto.base,
  &scc_info_MSG_Ret_SyncSkillStage_SC_magic_5fmsg_2eproto.base,
  &scc_info_MSG_Ret_UserDeath_SC_magic_5fmsg_2eproto.base,
  &scc_info_MSG_Ret_UserSkillRelive_SC_magic_5fmsg_2eproto.base,
  &scc_info_PKResult_magic_5fmsg_2eproto.base,
  &scc_info_SkillData_magic_5fmsg_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_magic_5fmsg_2eproto_once;
static bool descriptor_table_magic_5fmsg_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_magic_5fmsg_2eproto = {
  &descriptor_table_magic_5fmsg_2eproto_initialized, descriptor_table_protodef_magic_5fmsg_2eproto, "magic_msg.proto", 2891,
  &descriptor_table_magic_5fmsg_2eproto_once, descriptor_table_magic_5fmsg_2eproto_sccs, descriptor_table_magic_5fmsg_2eproto_deps, 24, 1,
  schemas, file_default_instances, TableStruct_magic_5fmsg_2eproto::offsets,
  file_level_metadata_magic_5fmsg_2eproto, 24, file_level_enum_descriptors_magic_5fmsg_2eproto, file_level_service_descriptors_magic_5fmsg_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_magic_5fmsg_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_magic_5fmsg_2eproto)), true);
namespace magic {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ATTACKRESULT_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_magic_5fmsg_2eproto);
  return file_level_enum_descriptors_magic_5fmsg_2eproto[0];
}
bool ATTACKRESULT_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void SkillData::InitAsDefaultInstance() {
}
class SkillData::_Internal {
 public:
  using HasBits = decltype(std::declval<SkillData>()._has_bits_);
  static void set_has_skillid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lastusetime(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_onoff(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_lastupdatetime(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_overlaytimes(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_active_stages(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_maxmultitimes(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_skillcd(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

SkillData::SkillData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:magic.SkillData)
}
SkillData::SkillData(const SkillData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&skillid_, &from.skillid_,
    static_cast<size_t>(reinterpret_cast<char*>(&skillcd_) -
    reinterpret_cast<char*>(&skillid_)) + sizeof(skillcd_));
  // @@protoc_insertion_point(copy_constructor:magic.SkillData)
}

void SkillData::SharedCtor() {
  ::memset(&skillid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skillcd_) -
      reinterpret_cast<char*>(&skillid_)) + sizeof(skillcd_));
}

SkillData::~SkillData() {
  // @@protoc_insertion_point(destructor:magic.SkillData)
  SharedDtor();
}

void SkillData::SharedDtor() {
}

void SkillData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SkillData& SkillData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SkillData_magic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void SkillData::Clear() {
// @@protoc_insertion_point(message_clear_start:magic.SkillData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&skillid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&maxmultitimes_) -
        reinterpret_cast<char*>(&skillid_)) + sizeof(maxmultitimes_));
  }
  skillcd_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SkillData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 skillid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_skillid(&has_bits);
          skillid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 lastusetime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_lastusetime(&has_bits);
          lastusetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 onoff = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_onoff(&has_bits);
          onoff_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 lastupdatetime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_lastupdatetime(&has_bits);
          lastupdatetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 overlaytimes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_overlaytimes(&has_bits);
          overlaytimes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 active_stages = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_active_stages(&has_bits);
          active_stages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 maxmultitimes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_maxmultitimes(&has_bits);
          maxmultitimes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 skillcd = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_skillcd(&has_bits);
          skillcd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SkillData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:magic.SkillData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 skillid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_skillid(), target);
  }

  // optional uint32 level = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_level(), target);
  }

  // optional uint64 lastusetime = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_lastusetime(), target);
  }

  // optional uint32 onoff = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_onoff(), target);
  }

  // optional uint64 lastupdatetime = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_lastupdatetime(), target);
  }

  // optional uint32 overlaytimes = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_overlaytimes(), target);
  }

  // optional uint32 active_stages = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_active_stages(), target);
  }

  // optional uint32 maxmultitimes = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_maxmultitimes(), target);
  }

  // optional uint32 skillcd = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_skillcd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:magic.SkillData)
  return target;
}

size_t SkillData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:magic.SkillData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 skillid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_skillid());
    }

    // optional uint32 level = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_level());
    }

    // optional uint64 lastusetime = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_lastusetime());
    }

    // optional uint64 lastupdatetime = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_lastupdatetime());
    }

    // optional uint32 onoff = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_onoff());
    }

    // optional uint32 overlaytimes = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_overlaytimes());
    }

    // optional uint32 active_stages = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_active_stages());
    }

    // optional uint32 maxmultitimes = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_maxmultitimes());
    }

  }
  // optional uint32 skillcd = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_skillcd());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SkillData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:magic.SkillData)
  GOOGLE_DCHECK_NE(&from, this);
  const SkillData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SkillData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:magic.SkillData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:magic.SkillData)
    MergeFrom(*source);
  }
}

void SkillData::MergeFrom(const SkillData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:magic.SkillData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      skillid_ = from.skillid_;
    }
    if (cached_has_bits & 0x00000002u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000004u) {
      lastusetime_ = from.lastusetime_;
    }
    if (cached_has_bits & 0x00000008u) {
      lastupdatetime_ = from.lastupdatetime_;
    }
    if (cached_has_bits & 0x00000010u) {
      onoff_ = from.onoff_;
    }
    if (cached_has_bits & 0x00000020u) {
      overlaytimes_ = from.overlaytimes_;
    }
    if (cached_has_bits & 0x00000040u) {
      active_stages_ = from.active_stages_;
    }
    if (cached_has_bits & 0x00000080u) {
      maxmultitimes_ = from.maxmultitimes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_skillcd(from._internal_skillcd());
  }
}

void SkillData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:magic.SkillData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillData::CopyFrom(const SkillData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:magic.SkillData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillData::IsInitialized() const {
  return true;
}

void SkillData::InternalSwap(SkillData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(skillid_, other->skillid_);
  swap(level_, other->level_);
  swap(lastusetime_, other->lastusetime_);
  swap(lastupdatetime_, other->lastupdatetime_);
  swap(onoff_, other->onoff_);
  swap(overlaytimes_, other->overlaytimes_);
  swap(active_stages_, other->active_stages_);
  swap(maxmultitimes_, other->maxmultitimes_);
  swap(skillcd_, other->skillcd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SkillData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ExtSkillData::InitAsDefaultInstance() {
}
class ExtSkillData::_Internal {
 public:
  using HasBits = decltype(std::declval<ExtSkillData>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_masterskill(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ExtSkillData::ExtSkillData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:magic.ExtSkillData)
}
ExtSkillData::ExtSkillData(const ExtSkillData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&masterskill_) -
    reinterpret_cast<char*>(&id_)) + sizeof(masterskill_));
  // @@protoc_insertion_point(copy_constructor:magic.ExtSkillData)
}

void ExtSkillData::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&masterskill_) -
      reinterpret_cast<char*>(&id_)) + sizeof(masterskill_));
}

ExtSkillData::~ExtSkillData() {
  // @@protoc_insertion_point(destructor:magic.ExtSkillData)
  SharedDtor();
}

void ExtSkillData::SharedDtor() {
}

void ExtSkillData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExtSkillData& ExtSkillData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExtSkillData_magic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void ExtSkillData::Clear() {
// @@protoc_insertion_point(message_clear_start:magic.ExtSkillData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&masterskill_) -
        reinterpret_cast<char*>(&id_)) + sizeof(masterskill_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ExtSkillData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 masterskill = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_masterskill(&has_bits);
          masterskill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExtSkillData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:magic.ExtSkillData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional uint32 level = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_level(), target);
  }

  // optional uint32 masterskill = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_masterskill(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:magic.ExtSkillData)
  return target;
}

size_t ExtSkillData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:magic.ExtSkillData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_id());
    }

    // optional uint32 level = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_level());
    }

    // optional uint32 masterskill = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_masterskill());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExtSkillData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:magic.ExtSkillData)
  GOOGLE_DCHECK_NE(&from, this);
  const ExtSkillData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExtSkillData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:magic.ExtSkillData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:magic.ExtSkillData)
    MergeFrom(*source);
  }
}

void ExtSkillData::MergeFrom(const ExtSkillData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:magic.ExtSkillData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000004u) {
      masterskill_ = from.masterskill_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ExtSkillData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:magic.ExtSkillData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExtSkillData::CopyFrom(const ExtSkillData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:magic.ExtSkillData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtSkillData::IsInitialized() const {
  return true;
}

void ExtSkillData::InternalSwap(ExtSkillData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
  swap(level_, other->level_);
  swap(masterskill_, other->masterskill_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExtSkillData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_MagicAttack_CS::InitAsDefaultInstance() {
  ::magic::_MSG_Req_MagicAttack_CS_default_instance_._instance.get_mutable()->target_ = const_cast< ::msg::EntryIDType*>(
      ::msg::EntryIDType::internal_default_instance());
}
class MSG_Req_MagicAttack_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_MagicAttack_CS>()._has_bits_);
  static const ::msg::EntryIDType& target(const MSG_Req_MagicAttack_CS* msg);
  static void set_has_target(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_magictype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_desx(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_desy(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_attdir(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_userdir(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::msg::EntryIDType&
MSG_Req_MagicAttack_CS::_Internal::target(const MSG_Req_MagicAttack_CS* msg) {
  return *msg->target_;
}
void MSG_Req_MagicAttack_CS::clear_target() {
  if (target_ != nullptr) target_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
MSG_Req_MagicAttack_CS::MSG_Req_MagicAttack_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:magic.MSG_Req_MagicAttack_CS)
}
MSG_Req_MagicAttack_CS::MSG_Req_MagicAttack_CS(const MSG_Req_MagicAttack_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_target()) {
    target_ = new ::msg::EntryIDType(*from.target_);
  } else {
    target_ = nullptr;
  }
  ::memcpy(&magictype_, &from.magictype_,
    static_cast<size_t>(reinterpret_cast<char*>(&userdir_) -
    reinterpret_cast<char*>(&magictype_)) + sizeof(userdir_));
  // @@protoc_insertion_point(copy_constructor:magic.MSG_Req_MagicAttack_CS)
}

void MSG_Req_MagicAttack_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Req_MagicAttack_CS_magic_5fmsg_2eproto.base);
  ::memset(&target_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&userdir_) -
      reinterpret_cast<char*>(&target_)) + sizeof(userdir_));
}

MSG_Req_MagicAttack_CS::~MSG_Req_MagicAttack_CS() {
  // @@protoc_insertion_point(destructor:magic.MSG_Req_MagicAttack_CS)
  SharedDtor();
}

void MSG_Req_MagicAttack_CS::SharedDtor() {
  if (this != internal_default_instance()) delete target_;
}

void MSG_Req_MagicAttack_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_MagicAttack_CS& MSG_Req_MagicAttack_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_MagicAttack_CS_magic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_MagicAttack_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:magic.MSG_Req_MagicAttack_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(target_ != nullptr);
    target_->Clear();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&magictype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&userdir_) -
        reinterpret_cast<char*>(&magictype_)) + sizeof(userdir_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_MagicAttack_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .msg.EntryIDType target = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_target(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 magictype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_magictype(&has_bits);
          magictype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float desx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_desx(&has_bits);
          desx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float desy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_desy(&has_bits);
          desy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 attdir = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_attdir(&has_bits);
          attdir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 userdir = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_userdir(&has_bits);
          userdir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_MagicAttack_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:magic.MSG_Req_MagicAttack_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .msg.EntryIDType target = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::target(this), target, stream);
  }

  // optional uint32 magictype = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_magictype(), target);
  }

  // optional float desx = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_desx(), target);
  }

  // optional float desy = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_desy(), target);
  }

  // optional uint32 attdir = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_attdir(), target);
  }

  // optional uint32 userdir = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_userdir(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:magic.MSG_Req_MagicAttack_CS)
  return target;
}

size_t MSG_Req_MagicAttack_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:magic.MSG_Req_MagicAttack_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .msg.EntryIDType target = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *target_);
    }

    // optional uint32 magictype = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_magictype());
    }

    // optional float desx = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float desy = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional uint32 attdir = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_attdir());
    }

    // optional uint32 userdir = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_userdir());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_MagicAttack_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:magic.MSG_Req_MagicAttack_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_MagicAttack_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_MagicAttack_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:magic.MSG_Req_MagicAttack_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:magic.MSG_Req_MagicAttack_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_MagicAttack_CS::MergeFrom(const MSG_Req_MagicAttack_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:magic.MSG_Req_MagicAttack_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_target()->::msg::EntryIDType::MergeFrom(from._internal_target());
    }
    if (cached_has_bits & 0x00000002u) {
      magictype_ = from.magictype_;
    }
    if (cached_has_bits & 0x00000004u) {
      desx_ = from.desx_;
    }
    if (cached_has_bits & 0x00000008u) {
      desy_ = from.desy_;
    }
    if (cached_has_bits & 0x00000010u) {
      attdir_ = from.attdir_;
    }
    if (cached_has_bits & 0x00000020u) {
      userdir_ = from.userdir_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Req_MagicAttack_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:magic.MSG_Req_MagicAttack_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_MagicAttack_CS::CopyFrom(const MSG_Req_MagicAttack_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:magic.MSG_Req_MagicAttack_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_MagicAttack_CS::IsInitialized() const {
  return true;
}

void MSG_Req_MagicAttack_CS::InternalSwap(MSG_Req_MagicAttack_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(target_, other->target_);
  swap(magictype_, other->magictype_);
  swap(desx_, other->desx_);
  swap(desy_, other->desy_);
  swap(attdir_, other->attdir_);
  swap(userdir_, other->userdir_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_MagicAttack_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_StartMagicAttack_SC::InitAsDefaultInstance() {
  ::magic::_MSG_Ret_StartMagicAttack_SC_default_instance_._instance.get_mutable()->att_ = const_cast< ::msg::EntryIDType*>(
      ::msg::EntryIDType::internal_default_instance());
}
class MSG_Ret_StartMagicAttack_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_StartMagicAttack_SC>()._has_bits_);
  static const ::msg::EntryIDType& att(const MSG_Ret_StartMagicAttack_SC* msg);
  static void set_has_att(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_desx(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_desy(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_attdir(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_userdir(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_skillid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::msg::EntryIDType&
MSG_Ret_StartMagicAttack_SC::_Internal::att(const MSG_Ret_StartMagicAttack_SC* msg) {
  return *msg->att_;
}
void MSG_Ret_StartMagicAttack_SC::clear_att() {
  if (att_ != nullptr) att_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
MSG_Ret_StartMagicAttack_SC::MSG_Ret_StartMagicAttack_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:magic.MSG_Ret_StartMagicAttack_SC)
}
MSG_Ret_StartMagicAttack_SC::MSG_Ret_StartMagicAttack_SC(const MSG_Ret_StartMagicAttack_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_att()) {
    att_ = new ::msg::EntryIDType(*from.att_);
  } else {
    att_ = nullptr;
  }
  ::memcpy(&desx_, &from.desx_,
    static_cast<size_t>(reinterpret_cast<char*>(&skillid_) -
    reinterpret_cast<char*>(&desx_)) + sizeof(skillid_));
  // @@protoc_insertion_point(copy_constructor:magic.MSG_Ret_StartMagicAttack_SC)
}

void MSG_Ret_StartMagicAttack_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_StartMagicAttack_SC_magic_5fmsg_2eproto.base);
  ::memset(&att_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skillid_) -
      reinterpret_cast<char*>(&att_)) + sizeof(skillid_));
}

MSG_Ret_StartMagicAttack_SC::~MSG_Ret_StartMagicAttack_SC() {
  // @@protoc_insertion_point(destructor:magic.MSG_Ret_StartMagicAttack_SC)
  SharedDtor();
}

void MSG_Ret_StartMagicAttack_SC::SharedDtor() {
  if (this != internal_default_instance()) delete att_;
}

void MSG_Ret_StartMagicAttack_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_StartMagicAttack_SC& MSG_Ret_StartMagicAttack_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_StartMagicAttack_SC_magic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_StartMagicAttack_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:magic.MSG_Ret_StartMagicAttack_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(att_ != nullptr);
    att_->Clear();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&desx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&skillid_) -
        reinterpret_cast<char*>(&desx_)) + sizeof(skillid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_StartMagicAttack_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .msg.EntryIDType att = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_att(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float desx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_desx(&has_bits);
          desx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float desy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_desy(&has_bits);
          desy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 attdir = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_attdir(&has_bits);
          attdir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 userdir = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_userdir(&has_bits);
          userdir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 skillid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_skillid(&has_bits);
          skillid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_StartMagicAttack_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:magic.MSG_Ret_StartMagicAttack_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .msg.EntryIDType att = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::att(this), target, stream);
  }

  // optional float desx = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_desx(), target);
  }

  // optional float desy = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_desy(), target);
  }

  // optional uint32 attdir = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_attdir(), target);
  }

  // optional uint32 userdir = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_userdir(), target);
  }

  // optional uint32 skillid = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_skillid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:magic.MSG_Ret_StartMagicAttack_SC)
  return target;
}

size_t MSG_Ret_StartMagicAttack_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:magic.MSG_Ret_StartMagicAttack_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .msg.EntryIDType att = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *att_);
    }

    // optional float desx = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float desy = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional uint32 attdir = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_attdir());
    }

    // optional uint32 userdir = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_userdir());
    }

    // optional uint32 skillid = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_skillid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_StartMagicAttack_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:magic.MSG_Ret_StartMagicAttack_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_StartMagicAttack_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_StartMagicAttack_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:magic.MSG_Ret_StartMagicAttack_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:magic.MSG_Ret_StartMagicAttack_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_StartMagicAttack_SC::MergeFrom(const MSG_Ret_StartMagicAttack_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:magic.MSG_Ret_StartMagicAttack_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_att()->::msg::EntryIDType::MergeFrom(from._internal_att());
    }
    if (cached_has_bits & 0x00000002u) {
      desx_ = from.desx_;
    }
    if (cached_has_bits & 0x00000004u) {
      desy_ = from.desy_;
    }
    if (cached_has_bits & 0x00000008u) {
      attdir_ = from.attdir_;
    }
    if (cached_has_bits & 0x00000010u) {
      userdir_ = from.userdir_;
    }
    if (cached_has_bits & 0x00000020u) {
      skillid_ = from.skillid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_StartMagicAttack_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:magic.MSG_Ret_StartMagicAttack_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_StartMagicAttack_SC::CopyFrom(const MSG_Ret_StartMagicAttack_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:magic.MSG_Ret_StartMagicAttack_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_StartMagicAttack_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_StartMagicAttack_SC::InternalSwap(MSG_Ret_StartMagicAttack_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(att_, other->att_);
  swap(desx_, other->desx_);
  swap(desy_, other->desy_);
  swap(attdir_, other->attdir_);
  swap(userdir_, other->userdir_);
  swap(skillid_, other->skillid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_StartMagicAttack_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PKResult::InitAsDefaultInstance() {
  ::magic::_PKResult_default_instance_._instance.get_mutable()->def_ = const_cast< ::msg::EntryIDType*>(
      ::msg::EntryIDType::internal_default_instance());
}
class PKResult::_Internal {
 public:
  using HasBits = decltype(std::declval<PKResult>()._has_bits_);
  static const ::msg::EntryIDType& def(const PKResult* msg);
  static void set_has_def(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_changehp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::msg::EntryIDType&
PKResult::_Internal::def(const PKResult* msg) {
  return *msg->def_;
}
void PKResult::clear_def() {
  if (def_ != nullptr) def_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
PKResult::PKResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:magic.PKResult)
}
PKResult::PKResult(const PKResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      attcode_(from.attcode_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_def()) {
    def_ = new ::msg::EntryIDType(*from.def_);
  } else {
    def_ = nullptr;
  }
  ::memcpy(&hp_, &from.hp_,
    static_cast<size_t>(reinterpret_cast<char*>(&changehp_) -
    reinterpret_cast<char*>(&hp_)) + sizeof(changehp_));
  // @@protoc_insertion_point(copy_constructor:magic.PKResult)
}

void PKResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PKResult_magic_5fmsg_2eproto.base);
  ::memset(&def_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&changehp_) -
      reinterpret_cast<char*>(&def_)) + sizeof(changehp_));
}

PKResult::~PKResult() {
  // @@protoc_insertion_point(destructor:magic.PKResult)
  SharedDtor();
}

void PKResult::SharedDtor() {
  if (this != internal_default_instance()) delete def_;
}

void PKResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PKResult& PKResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PKResult_magic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void PKResult::Clear() {
// @@protoc_insertion_point(message_clear_start:magic.PKResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attcode_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(def_ != nullptr);
    def_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&hp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&changehp_) -
        reinterpret_cast<char*>(&hp_)) + sizeof(changehp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PKResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .msg.EntryIDType def = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_def(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_hp(&has_bits);
          hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 changehp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_changehp(&has_bits);
          changehp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .magic.ATTACKRESULT attcode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::magic::ATTACKRESULT_IsValid(val))) {
              _internal_add_attcode(static_cast<::magic::ATTACKRESULT>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_attcode(), ptr, ctx, ::magic::ATTACKRESULT_IsValid, &_internal_metadata_, 4);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PKResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:magic.PKResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .msg.EntryIDType def = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::def(this), target, stream);
  }

  // optional uint32 hp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hp(), target);
  }

  // optional int32 changehp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_changehp(), target);
  }

  // repeated .magic.ATTACKRESULT attcode = 4;
  for (int i = 0, n = this->_internal_attcode_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        4, this->_internal_attcode(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:magic.PKResult)
  return target;
}

size_t PKResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:magic.PKResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .magic.ATTACKRESULT attcode = 4;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_attcode_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_attcode(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .msg.EntryIDType def = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *def_);
    }

    // optional uint32 hp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hp());
    }

    // optional int32 changehp = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_changehp());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PKResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:magic.PKResult)
  GOOGLE_DCHECK_NE(&from, this);
  const PKResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PKResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:magic.PKResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:magic.PKResult)
    MergeFrom(*source);
  }
}

void PKResult::MergeFrom(const PKResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:magic.PKResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attcode_.MergeFrom(from.attcode_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_def()->::msg::EntryIDType::MergeFrom(from._internal_def());
    }
    if (cached_has_bits & 0x00000002u) {
      hp_ = from.hp_;
    }
    if (cached_has_bits & 0x00000004u) {
      changehp_ = from.changehp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PKResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:magic.PKResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PKResult::CopyFrom(const PKResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:magic.PKResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKResult::IsInitialized() const {
  return true;
}

void PKResult::InternalSwap(PKResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  attcode_.InternalSwap(&other->attcode_);
  swap(def_, other->def_);
  swap(hp_, other->hp_);
  swap(changehp_, other->changehp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PKResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_MagicAttack_SC::InitAsDefaultInstance() {
  ::magic::_MSG_Ret_MagicAttack_SC_default_instance_._instance.get_mutable()->att_ = const_cast< ::msg::EntryIDType*>(
      ::msg::EntryIDType::internal_default_instance());
  ::magic::_MSG_Ret_MagicAttack_SC_default_instance_._instance.get_mutable()->def_ = const_cast< ::msg::EntryIDType*>(
      ::msg::EntryIDType::internal_default_instance());
}
class MSG_Ret_MagicAttack_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_MagicAttack_SC>()._has_bits_);
  static const ::msg::EntryIDType& att(const MSG_Ret_MagicAttack_SC* msg);
  static void set_has_att(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::msg::EntryIDType& def(const MSG_Ret_MagicAttack_SC* msg);
  static void set_has_def(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_desx(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_desy(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_attdir(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_userdir(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_skillstage(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::msg::EntryIDType&
MSG_Ret_MagicAttack_SC::_Internal::att(const MSG_Ret_MagicAttack_SC* msg) {
  return *msg->att_;
}
const ::msg::EntryIDType&
MSG_Ret_MagicAttack_SC::_Internal::def(const MSG_Ret_MagicAttack_SC* msg) {
  return *msg->def_;
}
void MSG_Ret_MagicAttack_SC::clear_att() {
  if (att_ != nullptr) att_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void MSG_Ret_MagicAttack_SC::clear_def() {
  if (def_ != nullptr) def_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
MSG_Ret_MagicAttack_SC::MSG_Ret_MagicAttack_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:magic.MSG_Ret_MagicAttack_SC)
}
MSG_Ret_MagicAttack_SC::MSG_Ret_MagicAttack_SC(const MSG_Ret_MagicAttack_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      pklist_(from.pklist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_att()) {
    att_ = new ::msg::EntryIDType(*from.att_);
  } else {
    att_ = nullptr;
  }
  if (from._internal_has_def()) {
    def_ = new ::msg::EntryIDType(*from.def_);
  } else {
    def_ = nullptr;
  }
  ::memcpy(&desx_, &from.desx_,
    static_cast<size_t>(reinterpret_cast<char*>(&skillstage_) -
    reinterpret_cast<char*>(&desx_)) + sizeof(skillstage_));
  // @@protoc_insertion_point(copy_constructor:magic.MSG_Ret_MagicAttack_SC)
}

void MSG_Ret_MagicAttack_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_MagicAttack_SC_magic_5fmsg_2eproto.base);
  ::memset(&att_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skillstage_) -
      reinterpret_cast<char*>(&att_)) + sizeof(skillstage_));
}

MSG_Ret_MagicAttack_SC::~MSG_Ret_MagicAttack_SC() {
  // @@protoc_insertion_point(destructor:magic.MSG_Ret_MagicAttack_SC)
  SharedDtor();
}

void MSG_Ret_MagicAttack_SC::SharedDtor() {
  if (this != internal_default_instance()) delete att_;
  if (this != internal_default_instance()) delete def_;
}

void MSG_Ret_MagicAttack_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_MagicAttack_SC& MSG_Ret_MagicAttack_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_MagicAttack_SC_magic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_MagicAttack_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:magic.MSG_Ret_MagicAttack_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pklist_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(att_ != nullptr);
      att_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(def_ != nullptr);
      def_->Clear();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&desx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&skillstage_) -
        reinterpret_cast<char*>(&desx_)) + sizeof(skillstage_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_MagicAttack_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .msg.EntryIDType att = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_att(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .msg.EntryIDType def = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_def(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float desx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_desx(&has_bits);
          desx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float desy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_desy(&has_bits);
          desy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 attdir = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_attdir(&has_bits);
          attdir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 userdir = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_userdir(&has_bits);
          userdir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 skillstage = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_skillstage(&has_bits);
          skillstage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .magic.PKResult pklist = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pklist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_MagicAttack_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:magic.MSG_Ret_MagicAttack_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .msg.EntryIDType att = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::att(this), target, stream);
  }

  // optional .msg.EntryIDType def = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::def(this), target, stream);
  }

  // optional float desx = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_desx(), target);
  }

  // optional float desy = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_desy(), target);
  }

  // optional uint32 attdir = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_attdir(), target);
  }

  // optional uint32 userdir = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_userdir(), target);
  }

  // optional uint64 skillstage = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_skillstage(), target);
  }

  // repeated .magic.PKResult pklist = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pklist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_pklist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:magic.MSG_Ret_MagicAttack_SC)
  return target;
}

size_t MSG_Ret_MagicAttack_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:magic.MSG_Ret_MagicAttack_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .magic.PKResult pklist = 8;
  total_size += 1UL * this->_internal_pklist_size();
  for (const auto& msg : this->pklist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .msg.EntryIDType att = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *att_);
    }

    // optional .msg.EntryIDType def = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *def_);
    }

    // optional float desx = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float desy = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional uint32 attdir = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_attdir());
    }

    // optional uint32 userdir = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_userdir());
    }

    // optional uint64 skillstage = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_skillstage());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_MagicAttack_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:magic.MSG_Ret_MagicAttack_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_MagicAttack_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_MagicAttack_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:magic.MSG_Ret_MagicAttack_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:magic.MSG_Ret_MagicAttack_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_MagicAttack_SC::MergeFrom(const MSG_Ret_MagicAttack_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:magic.MSG_Ret_MagicAttack_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pklist_.MergeFrom(from.pklist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_att()->::msg::EntryIDType::MergeFrom(from._internal_att());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_def()->::msg::EntryIDType::MergeFrom(from._internal_def());
    }
    if (cached_has_bits & 0x00000004u) {
      desx_ = from.desx_;
    }
    if (cached_has_bits & 0x00000008u) {
      desy_ = from.desy_;
    }
    if (cached_has_bits & 0x00000010u) {
      attdir_ = from.attdir_;
    }
    if (cached_has_bits & 0x00000020u) {
      userdir_ = from.userdir_;
    }
    if (cached_has_bits & 0x00000040u) {
      skillstage_ = from.skillstage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_MagicAttack_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:magic.MSG_Ret_MagicAttack_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_MagicAttack_SC::CopyFrom(const MSG_Ret_MagicAttack_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:magic.MSG_Ret_MagicAttack_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_MagicAttack_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_MagicAttack_SC::InternalSwap(MSG_Ret_MagicAttack_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pklist_.InternalSwap(&other->pklist_);
  swap(att_, other->att_);
  swap(def_, other->def_);
  swap(desx_, other->desx_);
  swap(desy_, other->desy_);
  swap(attdir_, other->attdir_);
  swap(userdir_, other->userdir_);
  swap(skillstage_, other->skillstage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_MagicAttack_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_HpMpPop_SC::InitAsDefaultInstance() {
  ::magic::_MSG_Ret_HpMpPop_SC_default_instance_._instance.get_mutable()->target_ = const_cast< ::msg::EntryIDType*>(
      ::msg::EntryIDType::internal_default_instance());
  ::magic::_MSG_Ret_HpMpPop_SC_default_instance_._instance.get_mutable()->att_ = const_cast< ::msg::EntryIDType*>(
      ::msg::EntryIDType::internal_default_instance());
}
class MSG_Ret_HpMpPop_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_HpMpPop_SC>()._has_bits_);
  static const ::msg::EntryIDType& target(const MSG_Ret_HpMpPop_SC* msg);
  static void set_has_target(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hp_change(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_mp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_mp_change(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_force(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_skillstage(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_state_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::msg::EntryIDType& att(const MSG_Ret_HpMpPop_SC* msg);
  static void set_has_att(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::msg::EntryIDType&
MSG_Ret_HpMpPop_SC::_Internal::target(const MSG_Ret_HpMpPop_SC* msg) {
  return *msg->target_;
}
const ::msg::EntryIDType&
MSG_Ret_HpMpPop_SC::_Internal::att(const MSG_Ret_HpMpPop_SC* msg) {
  return *msg->att_;
}
void MSG_Ret_HpMpPop_SC::clear_target() {
  if (target_ != nullptr) target_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void MSG_Ret_HpMpPop_SC::clear_att() {
  if (att_ != nullptr) att_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
MSG_Ret_HpMpPop_SC::MSG_Ret_HpMpPop_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:magic.MSG_Ret_HpMpPop_SC)
}
MSG_Ret_HpMpPop_SC::MSG_Ret_HpMpPop_SC(const MSG_Ret_HpMpPop_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_target()) {
    target_ = new ::msg::EntryIDType(*from.target_);
  } else {
    target_ = nullptr;
  }
  if (from._internal_has_att()) {
    att_ = new ::msg::EntryIDType(*from.att_);
  } else {
    att_ = nullptr;
  }
  ::memcpy(&hp_, &from.hp_,
    static_cast<size_t>(reinterpret_cast<char*>(&force_) -
    reinterpret_cast<char*>(&hp_)) + sizeof(force_));
  // @@protoc_insertion_point(copy_constructor:magic.MSG_Ret_HpMpPop_SC)
}

void MSG_Ret_HpMpPop_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_HpMpPop_SC_magic_5fmsg_2eproto.base);
  ::memset(&target_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&force_) -
      reinterpret_cast<char*>(&target_)) + sizeof(force_));
}

MSG_Ret_HpMpPop_SC::~MSG_Ret_HpMpPop_SC() {
  // @@protoc_insertion_point(destructor:magic.MSG_Ret_HpMpPop_SC)
  SharedDtor();
}

void MSG_Ret_HpMpPop_SC::SharedDtor() {
  if (this != internal_default_instance()) delete target_;
  if (this != internal_default_instance()) delete att_;
}

void MSG_Ret_HpMpPop_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_HpMpPop_SC& MSG_Ret_HpMpPop_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_HpMpPop_SC_magic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_HpMpPop_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:magic.MSG_Ret_HpMpPop_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(target_ != nullptr);
      target_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(att_ != nullptr);
      att_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&hp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&state_id_) -
        reinterpret_cast<char*>(&hp_)) + sizeof(state_id_));
  }
  force_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_HpMpPop_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .msg.EntryIDType target = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_target(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_hp(&has_bits);
          hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 hp_change = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_hp_change(&has_bits);
          hp_change_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 mp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_mp(&has_bits);
          mp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 mp_change = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_mp_change(&has_bits);
          mp_change_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool force = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_force(&has_bits);
          force_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 skillstage = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_skillstage(&has_bits);
          skillstage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 state_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_state_id(&has_bits);
          state_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .msg.EntryIDType att = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_att(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_HpMpPop_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:magic.MSG_Ret_HpMpPop_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .msg.EntryIDType target = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::target(this), target, stream);
  }

  // optional uint32 hp = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hp(), target);
  }

  // optional int32 hp_change = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_hp_change(), target);
  }

  // optional uint32 mp = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_mp(), target);
  }

  // optional uint32 mp_change = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_mp_change(), target);
  }

  // optional bool force = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_force(), target);
  }

  // optional uint64 skillstage = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_skillstage(), target);
  }

  // optional uint64 state_id = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_state_id(), target);
  }

  // optional .msg.EntryIDType att = 9;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::att(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:magic.MSG_Ret_HpMpPop_SC)
  return target;
}

size_t MSG_Ret_HpMpPop_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:magic.MSG_Ret_HpMpPop_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .msg.EntryIDType target = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *target_);
    }

    // optional .msg.EntryIDType att = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *att_);
    }

    // optional uint32 hp = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hp());
    }

    // optional int32 hp_change = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_hp_change());
    }

    // optional uint32 mp = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_mp());
    }

    // optional uint32 mp_change = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_mp_change());
    }

    // optional uint64 skillstage = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_skillstage());
    }

    // optional uint64 state_id = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_state_id());
    }

  }
  // optional bool force = 6;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_HpMpPop_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:magic.MSG_Ret_HpMpPop_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_HpMpPop_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_HpMpPop_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:magic.MSG_Ret_HpMpPop_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:magic.MSG_Ret_HpMpPop_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_HpMpPop_SC::MergeFrom(const MSG_Ret_HpMpPop_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:magic.MSG_Ret_HpMpPop_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_target()->::msg::EntryIDType::MergeFrom(from._internal_target());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_att()->::msg::EntryIDType::MergeFrom(from._internal_att());
    }
    if (cached_has_bits & 0x00000004u) {
      hp_ = from.hp_;
    }
    if (cached_has_bits & 0x00000008u) {
      hp_change_ = from.hp_change_;
    }
    if (cached_has_bits & 0x00000010u) {
      mp_ = from.mp_;
    }
    if (cached_has_bits & 0x00000020u) {
      mp_change_ = from.mp_change_;
    }
    if (cached_has_bits & 0x00000040u) {
      skillstage_ = from.skillstage_;
    }
    if (cached_has_bits & 0x00000080u) {
      state_id_ = from.state_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_force(from._internal_force());
  }
}

void MSG_Ret_HpMpPop_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:magic.MSG_Ret_HpMpPop_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_HpMpPop_SC::CopyFrom(const MSG_Ret_HpMpPop_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:magic.MSG_Ret_HpMpPop_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_HpMpPop_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_HpMpPop_SC::InternalSwap(MSG_Ret_HpMpPop_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(target_, other->target_);
  swap(att_, other->att_);
  swap(hp_, other->hp_);
  swap(hp_change_, other->hp_change_);
  swap(mp_, other->mp_);
  swap(mp_change_, other->mp_change_);
  swap(skillstage_, other->skillstage_);
  swap(state_id_, other->state_id_);
  swap(force_, other->force_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_HpMpPop_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_SyncSkillStage_CS::InitAsDefaultInstance() {
  ::magic::_MSG_Req_SyncSkillStage_CS_default_instance_._instance.get_mutable()->target_ = const_cast< ::msg::EntryIDType*>(
      ::msg::EntryIDType::internal_default_instance());
}
class MSG_Req_SyncSkillStage_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_SyncSkillStage_CS>()._has_bits_);
  static const ::msg::EntryIDType& target(const MSG_Req_SyncSkillStage_CS* msg);
  static void set_has_target(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_skillstage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_desx(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_desy(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_attdir(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_userdir(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_stagetype(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::msg::EntryIDType&
MSG_Req_SyncSkillStage_CS::_Internal::target(const MSG_Req_SyncSkillStage_CS* msg) {
  return *msg->target_;
}
void MSG_Req_SyncSkillStage_CS::clear_target() {
  if (target_ != nullptr) target_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
MSG_Req_SyncSkillStage_CS::MSG_Req_SyncSkillStage_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:magic.MSG_Req_SyncSkillStage_CS)
}
MSG_Req_SyncSkillStage_CS::MSG_Req_SyncSkillStage_CS(const MSG_Req_SyncSkillStage_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_target()) {
    target_ = new ::msg::EntryIDType(*from.target_);
  } else {
    target_ = nullptr;
  }
  ::memcpy(&skillstage_, &from.skillstage_,
    static_cast<size_t>(reinterpret_cast<char*>(&stagetype_) -
    reinterpret_cast<char*>(&skillstage_)) + sizeof(stagetype_));
  // @@protoc_insertion_point(copy_constructor:magic.MSG_Req_SyncSkillStage_CS)
}

void MSG_Req_SyncSkillStage_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Req_SyncSkillStage_CS_magic_5fmsg_2eproto.base);
  ::memset(&target_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stagetype_) -
      reinterpret_cast<char*>(&target_)) + sizeof(stagetype_));
}

MSG_Req_SyncSkillStage_CS::~MSG_Req_SyncSkillStage_CS() {
  // @@protoc_insertion_point(destructor:magic.MSG_Req_SyncSkillStage_CS)
  SharedDtor();
}

void MSG_Req_SyncSkillStage_CS::SharedDtor() {
  if (this != internal_default_instance()) delete target_;
}

void MSG_Req_SyncSkillStage_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_SyncSkillStage_CS& MSG_Req_SyncSkillStage_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_SyncSkillStage_CS_magic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_SyncSkillStage_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:magic.MSG_Req_SyncSkillStage_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(target_ != nullptr);
    target_->Clear();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&skillstage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stagetype_) -
        reinterpret_cast<char*>(&skillstage_)) + sizeof(stagetype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_SyncSkillStage_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .msg.EntryIDType target = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_target(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 skillstage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_skillstage(&has_bits);
          skillstage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float desx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_desx(&has_bits);
          desx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float desy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_desy(&has_bits);
          desy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 attdir = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_attdir(&has_bits);
          attdir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 userdir = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_userdir(&has_bits);
          userdir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 stagetype = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_stagetype(&has_bits);
          stagetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_SyncSkillStage_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:magic.MSG_Req_SyncSkillStage_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .msg.EntryIDType target = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::target(this), target, stream);
  }

  // optional uint64 skillstage = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_skillstage(), target);
  }

  // optional float desx = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_desx(), target);
  }

  // optional float desy = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_desy(), target);
  }

  // optional uint32 attdir = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_attdir(), target);
  }

  // optional uint32 userdir = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_userdir(), target);
  }

  // optional uint32 stagetype = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_stagetype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:magic.MSG_Req_SyncSkillStage_CS)
  return target;
}

size_t MSG_Req_SyncSkillStage_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:magic.MSG_Req_SyncSkillStage_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .msg.EntryIDType target = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *target_);
    }

    // optional uint64 skillstage = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_skillstage());
    }

    // optional float desx = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float desy = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional uint32 attdir = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_attdir());
    }

    // optional uint32 userdir = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_userdir());
    }

    // optional uint32 stagetype = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_stagetype());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_SyncSkillStage_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:magic.MSG_Req_SyncSkillStage_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_SyncSkillStage_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_SyncSkillStage_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:magic.MSG_Req_SyncSkillStage_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:magic.MSG_Req_SyncSkillStage_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_SyncSkillStage_CS::MergeFrom(const MSG_Req_SyncSkillStage_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:magic.MSG_Req_SyncSkillStage_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_target()->::msg::EntryIDType::MergeFrom(from._internal_target());
    }
    if (cached_has_bits & 0x00000002u) {
      skillstage_ = from.skillstage_;
    }
    if (cached_has_bits & 0x00000004u) {
      desx_ = from.desx_;
    }
    if (cached_has_bits & 0x00000008u) {
      desy_ = from.desy_;
    }
    if (cached_has_bits & 0x00000010u) {
      attdir_ = from.attdir_;
    }
    if (cached_has_bits & 0x00000020u) {
      userdir_ = from.userdir_;
    }
    if (cached_has_bits & 0x00000040u) {
      stagetype_ = from.stagetype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Req_SyncSkillStage_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:magic.MSG_Req_SyncSkillStage_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_SyncSkillStage_CS::CopyFrom(const MSG_Req_SyncSkillStage_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:magic.MSG_Req_SyncSkillStage_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_SyncSkillStage_CS::IsInitialized() const {
  return true;
}

void MSG_Req_SyncSkillStage_CS::InternalSwap(MSG_Req_SyncSkillStage_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(target_, other->target_);
  swap(skillstage_, other->skillstage_);
  swap(desx_, other->desx_);
  swap(desy_, other->desy_);
  swap(attdir_, other->attdir_);
  swap(userdir_, other->userdir_);
  swap(stagetype_, other->stagetype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_SyncSkillStage_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_SyncSkillStage_SC::InitAsDefaultInstance() {
  ::magic::_MSG_Ret_SyncSkillStage_SC_default_instance_._instance.get_mutable()->att_ = const_cast< ::msg::EntryIDType*>(
      ::msg::EntryIDType::internal_default_instance());
  ::magic::_MSG_Ret_SyncSkillStage_SC_default_instance_._instance.get_mutable()->def_ = const_cast< ::msg::EntryIDType*>(
      ::msg::EntryIDType::internal_default_instance());
}
class MSG_Ret_SyncSkillStage_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_SyncSkillStage_SC>()._has_bits_);
  static const ::msg::EntryIDType& att(const MSG_Ret_SyncSkillStage_SC* msg);
  static void set_has_att(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::msg::EntryIDType& def(const MSG_Ret_SyncSkillStage_SC* msg);
  static void set_has_def(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_skillstage(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_desx(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_desy(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_attdir(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_userdir(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_stagetype(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::msg::EntryIDType&
MSG_Ret_SyncSkillStage_SC::_Internal::att(const MSG_Ret_SyncSkillStage_SC* msg) {
  return *msg->att_;
}
const ::msg::EntryIDType&
MSG_Ret_SyncSkillStage_SC::_Internal::def(const MSG_Ret_SyncSkillStage_SC* msg) {
  return *msg->def_;
}
void MSG_Ret_SyncSkillStage_SC::clear_att() {
  if (att_ != nullptr) att_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void MSG_Ret_SyncSkillStage_SC::clear_def() {
  if (def_ != nullptr) def_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
MSG_Ret_SyncSkillStage_SC::MSG_Ret_SyncSkillStage_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:magic.MSG_Ret_SyncSkillStage_SC)
}
MSG_Ret_SyncSkillStage_SC::MSG_Ret_SyncSkillStage_SC(const MSG_Ret_SyncSkillStage_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_att()) {
    att_ = new ::msg::EntryIDType(*from.att_);
  } else {
    att_ = nullptr;
  }
  if (from._internal_has_def()) {
    def_ = new ::msg::EntryIDType(*from.def_);
  } else {
    def_ = nullptr;
  }
  ::memcpy(&skillstage_, &from.skillstage_,
    static_cast<size_t>(reinterpret_cast<char*>(&stagetype_) -
    reinterpret_cast<char*>(&skillstage_)) + sizeof(stagetype_));
  // @@protoc_insertion_point(copy_constructor:magic.MSG_Ret_SyncSkillStage_SC)
}

void MSG_Ret_SyncSkillStage_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_SyncSkillStage_SC_magic_5fmsg_2eproto.base);
  ::memset(&att_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stagetype_) -
      reinterpret_cast<char*>(&att_)) + sizeof(stagetype_));
}

MSG_Ret_SyncSkillStage_SC::~MSG_Ret_SyncSkillStage_SC() {
  // @@protoc_insertion_point(destructor:magic.MSG_Ret_SyncSkillStage_SC)
  SharedDtor();
}

void MSG_Ret_SyncSkillStage_SC::SharedDtor() {
  if (this != internal_default_instance()) delete att_;
  if (this != internal_default_instance()) delete def_;
}

void MSG_Ret_SyncSkillStage_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_SyncSkillStage_SC& MSG_Ret_SyncSkillStage_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_SyncSkillStage_SC_magic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_SyncSkillStage_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:magic.MSG_Ret_SyncSkillStage_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(att_ != nullptr);
      att_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(def_ != nullptr);
      def_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&skillstage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stagetype_) -
        reinterpret_cast<char*>(&skillstage_)) + sizeof(stagetype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_SyncSkillStage_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .msg.EntryIDType att = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_att(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .msg.EntryIDType def = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_def(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 skillstage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_skillstage(&has_bits);
          skillstage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float desx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_desx(&has_bits);
          desx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float desy = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_desy(&has_bits);
          desy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 attdir = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_attdir(&has_bits);
          attdir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 userdir = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_userdir(&has_bits);
          userdir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 stagetype = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_stagetype(&has_bits);
          stagetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_SyncSkillStage_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:magic.MSG_Ret_SyncSkillStage_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .msg.EntryIDType att = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::att(this), target, stream);
  }

  // optional .msg.EntryIDType def = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::def(this), target, stream);
  }

  // optional uint64 skillstage = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_skillstage(), target);
  }

  // optional float desx = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_desx(), target);
  }

  // optional float desy = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_desy(), target);
  }

  // optional uint32 attdir = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_attdir(), target);
  }

  // optional uint32 userdir = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_userdir(), target);
  }

  // optional uint32 stagetype = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_stagetype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:magic.MSG_Ret_SyncSkillStage_SC)
  return target;
}

size_t MSG_Ret_SyncSkillStage_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:magic.MSG_Ret_SyncSkillStage_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .msg.EntryIDType att = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *att_);
    }

    // optional .msg.EntryIDType def = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *def_);
    }

    // optional uint64 skillstage = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_skillstage());
    }

    // optional float desx = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float desy = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional uint32 attdir = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_attdir());
    }

    // optional uint32 userdir = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_userdir());
    }

    // optional uint32 stagetype = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_stagetype());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_SyncSkillStage_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:magic.MSG_Ret_SyncSkillStage_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_SyncSkillStage_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_SyncSkillStage_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:magic.MSG_Ret_SyncSkillStage_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:magic.MSG_Ret_SyncSkillStage_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_SyncSkillStage_SC::MergeFrom(const MSG_Ret_SyncSkillStage_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:magic.MSG_Ret_SyncSkillStage_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_att()->::msg::EntryIDType::MergeFrom(from._internal_att());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_def()->::msg::EntryIDType::MergeFrom(from._internal_def());
    }
    if (cached_has_bits & 0x00000004u) {
      skillstage_ = from.skillstage_;
    }
    if (cached_has_bits & 0x00000008u) {
      desx_ = from.desx_;
    }
    if (cached_has_bits & 0x00000010u) {
      desy_ = from.desy_;
    }
    if (cached_has_bits & 0x00000020u) {
      attdir_ = from.attdir_;
    }
    if (cached_has_bits & 0x00000040u) {
      userdir_ = from.userdir_;
    }
    if (cached_has_bits & 0x00000080u) {
      stagetype_ = from.stagetype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_SyncSkillStage_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:magic.MSG_Ret_SyncSkillStage_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_SyncSkillStage_SC::CopyFrom(const MSG_Ret_SyncSkillStage_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:magic.MSG_Ret_SyncSkillStage_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_SyncSkillStage_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_SyncSkillStage_SC::InternalSwap(MSG_Ret_SyncSkillStage_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(att_, other->att_);
  swap(def_, other->def_);
  swap(skillstage_, other->skillstage_);
  swap(desx_, other->desx_);
  swap(desy_, other->desy_);
  swap(attdir_, other->attdir_);
  swap(userdir_, other->userdir_);
  swap(stagetype_, other->stagetype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_SyncSkillStage_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_InterruptSkill_SC::InitAsDefaultInstance() {
  ::magic::_MSG_Ret_InterruptSkill_SC_default_instance_._instance.get_mutable()->att_ = const_cast< ::msg::EntryIDType*>(
      ::msg::EntryIDType::internal_default_instance());
}
class MSG_Ret_InterruptSkill_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_InterruptSkill_SC>()._has_bits_);
  static const ::msg::EntryIDType& att(const MSG_Ret_InterruptSkill_SC* msg);
  static void set_has_att(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_skillstage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::msg::EntryIDType&
MSG_Ret_InterruptSkill_SC::_Internal::att(const MSG_Ret_InterruptSkill_SC* msg) {
  return *msg->att_;
}
void MSG_Ret_InterruptSkill_SC::clear_att() {
  if (att_ != nullptr) att_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
MSG_Ret_InterruptSkill_SC::MSG_Ret_InterruptSkill_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:magic.MSG_Ret_InterruptSkill_SC)
}
MSG_Ret_InterruptSkill_SC::MSG_Ret_InterruptSkill_SC(const MSG_Ret_InterruptSkill_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_att()) {
    att_ = new ::msg::EntryIDType(*from.att_);
  } else {
    att_ = nullptr;
  }
  skillstage_ = from.skillstage_;
  // @@protoc_insertion_point(copy_constructor:magic.MSG_Ret_InterruptSkill_SC)
}

void MSG_Ret_InterruptSkill_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_InterruptSkill_SC_magic_5fmsg_2eproto.base);
  ::memset(&att_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skillstage_) -
      reinterpret_cast<char*>(&att_)) + sizeof(skillstage_));
}

MSG_Ret_InterruptSkill_SC::~MSG_Ret_InterruptSkill_SC() {
  // @@protoc_insertion_point(destructor:magic.MSG_Ret_InterruptSkill_SC)
  SharedDtor();
}

void MSG_Ret_InterruptSkill_SC::SharedDtor() {
  if (this != internal_default_instance()) delete att_;
}

void MSG_Ret_InterruptSkill_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_InterruptSkill_SC& MSG_Ret_InterruptSkill_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_InterruptSkill_SC_magic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_InterruptSkill_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:magic.MSG_Ret_InterruptSkill_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(att_ != nullptr);
    att_->Clear();
  }
  skillstage_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_InterruptSkill_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .msg.EntryIDType att = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_att(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 skillstage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_skillstage(&has_bits);
          skillstage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_InterruptSkill_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:magic.MSG_Ret_InterruptSkill_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .msg.EntryIDType att = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::att(this), target, stream);
  }

  // optional uint64 skillstage = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_skillstage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:magic.MSG_Ret_InterruptSkill_SC)
  return target;
}

size_t MSG_Ret_InterruptSkill_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:magic.MSG_Ret_InterruptSkill_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .msg.EntryIDType att = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *att_);
    }

    // optional uint64 skillstage = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_skillstage());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_InterruptSkill_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:magic.MSG_Ret_InterruptSkill_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_InterruptSkill_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_InterruptSkill_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:magic.MSG_Ret_InterruptSkill_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:magic.MSG_Ret_InterruptSkill_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_InterruptSkill_SC::MergeFrom(const MSG_Ret_InterruptSkill_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:magic.MSG_Ret_InterruptSkill_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_att()->::msg::EntryIDType::MergeFrom(from._internal_att());
    }
    if (cached_has_bits & 0x00000002u) {
      skillstage_ = from.skillstage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_InterruptSkill_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:magic.MSG_Ret_InterruptSkill_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_InterruptSkill_SC::CopyFrom(const MSG_Ret_InterruptSkill_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:magic.MSG_Ret_InterruptSkill_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_InterruptSkill_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_InterruptSkill_SC::InternalSwap(MSG_Ret_InterruptSkill_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(att_, other->att_);
  swap(skillstage_, other->skillstage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_InterruptSkill_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_MainUserDeath_SC::InitAsDefaultInstance() {
}
class MSG_Ret_MainUserDeath_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_MainUserDeath_SC>()._has_bits_);
  static void set_has_charid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_relivecostid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_relivecostnum(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_canreliveorigin(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_canrelive(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_relivetime(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_autorelive(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_relive_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

MSG_Ret_MainUserDeath_SC::MSG_Ret_MainUserDeath_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:magic.MSG_Ret_MainUserDeath_SC)
}
MSG_Ret_MainUserDeath_SC::MSG_Ret_MainUserDeath_SC(const MSG_Ret_MainUserDeath_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  charid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_charid()) {
    charid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.charid_);
  }
  ::memcpy(&relivecostid_, &from.relivecostid_,
    static_cast<size_t>(reinterpret_cast<char*>(&canrelive_) -
    reinterpret_cast<char*>(&relivecostid_)) + sizeof(canrelive_));
  // @@protoc_insertion_point(copy_constructor:magic.MSG_Ret_MainUserDeath_SC)
}

void MSG_Ret_MainUserDeath_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_MainUserDeath_SC_magic_5fmsg_2eproto.base);
  charid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&relivecostid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&relive_type_) -
      reinterpret_cast<char*>(&relivecostid_)) + sizeof(relive_type_));
  canrelive_ = true;
}

MSG_Ret_MainUserDeath_SC::~MSG_Ret_MainUserDeath_SC() {
  // @@protoc_insertion_point(destructor:magic.MSG_Ret_MainUserDeath_SC)
  SharedDtor();
}

void MSG_Ret_MainUserDeath_SC::SharedDtor() {
  charid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_Ret_MainUserDeath_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_MainUserDeath_SC& MSG_Ret_MainUserDeath_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_MainUserDeath_SC_magic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_MainUserDeath_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:magic.MSG_Ret_MainUserDeath_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    charid_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&relivecostid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&relive_type_) -
        reinterpret_cast<char*>(&relivecostid_)) + sizeof(relive_type_));
    canrelive_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_MainUserDeath_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string charid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_charid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "magic.MSG_Ret_MainUserDeath_SC.charid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 relivecostid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_relivecostid(&has_bits);
          relivecostid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 relivecostnum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_relivecostnum(&has_bits);
          relivecostnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 canreliveorigin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_canreliveorigin(&has_bits);
          canreliveorigin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool canrelive = 5 [default = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_canrelive(&has_bits);
          canrelive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 relivetime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_relivetime(&has_bits);
          relivetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool autorelive = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_autorelive(&has_bits);
          autorelive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 relive_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_relive_type(&has_bits);
          relive_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_MainUserDeath_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:magic.MSG_Ret_MainUserDeath_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string charid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_charid().data(), static_cast<int>(this->_internal_charid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "magic.MSG_Ret_MainUserDeath_SC.charid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_charid(), target);
  }

  // optional uint32 relivecostid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_relivecostid(), target);
  }

  // optional uint32 relivecostnum = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_relivecostnum(), target);
  }

  // optional uint32 canreliveorigin = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_canreliveorigin(), target);
  }

  // optional bool canrelive = 5 [default = true];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_canrelive(), target);
  }

  // optional uint32 relivetime = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_relivetime(), target);
  }

  // optional bool autorelive = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_autorelive(), target);
  }

  // optional uint32 relive_type = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_relive_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:magic.MSG_Ret_MainUserDeath_SC)
  return target;
}

size_t MSG_Ret_MainUserDeath_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:magic.MSG_Ret_MainUserDeath_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string charid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_charid());
    }

    // optional uint32 relivecostid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_relivecostid());
    }

    // optional uint32 relivecostnum = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_relivecostnum());
    }

    // optional uint32 canreliveorigin = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_canreliveorigin());
    }

    // optional uint32 relivetime = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_relivetime());
    }

    // optional bool autorelive = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional uint32 relive_type = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_relive_type());
    }

    // optional bool canrelive = 5 [default = true];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_MainUserDeath_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:magic.MSG_Ret_MainUserDeath_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_MainUserDeath_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_MainUserDeath_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:magic.MSG_Ret_MainUserDeath_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:magic.MSG_Ret_MainUserDeath_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_MainUserDeath_SC::MergeFrom(const MSG_Ret_MainUserDeath_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:magic.MSG_Ret_MainUserDeath_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      charid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.charid_);
    }
    if (cached_has_bits & 0x00000002u) {
      relivecostid_ = from.relivecostid_;
    }
    if (cached_has_bits & 0x00000004u) {
      relivecostnum_ = from.relivecostnum_;
    }
    if (cached_has_bits & 0x00000008u) {
      canreliveorigin_ = from.canreliveorigin_;
    }
    if (cached_has_bits & 0x00000010u) {
      relivetime_ = from.relivetime_;
    }
    if (cached_has_bits & 0x00000020u) {
      autorelive_ = from.autorelive_;
    }
    if (cached_has_bits & 0x00000040u) {
      relive_type_ = from.relive_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      canrelive_ = from.canrelive_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_MainUserDeath_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:magic.MSG_Ret_MainUserDeath_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_MainUserDeath_SC::CopyFrom(const MSG_Ret_MainUserDeath_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:magic.MSG_Ret_MainUserDeath_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_MainUserDeath_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_MainUserDeath_SC::InternalSwap(MSG_Ret_MainUserDeath_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  charid_.Swap(&other->charid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(relivecostid_, other->relivecostid_);
  swap(relivecostnum_, other->relivecostnum_);
  swap(canreliveorigin_, other->canreliveorigin_);
  swap(relivetime_, other->relivetime_);
  swap(autorelive_, other->autorelive_);
  swap(relive_type_, other->relive_type_);
  swap(canrelive_, other->canrelive_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_MainUserDeath_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_UserDeath_SC::InitAsDefaultInstance() {
}
class MSG_Ret_UserDeath_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_UserDeath_SC>()._has_bits_);
  static void set_has_tempid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_attid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lasthitskill(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_atttype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

MSG_Ret_UserDeath_SC::MSG_Ret_UserDeath_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:magic.MSG_Ret_UserDeath_SC)
}
MSG_Ret_UserDeath_SC::MSG_Ret_UserDeath_SC(const MSG_Ret_UserDeath_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tempid_, &from.tempid_,
    static_cast<size_t>(reinterpret_cast<char*>(&atttype_) -
    reinterpret_cast<char*>(&tempid_)) + sizeof(atttype_));
  // @@protoc_insertion_point(copy_constructor:magic.MSG_Ret_UserDeath_SC)
}

void MSG_Ret_UserDeath_SC::SharedCtor() {
  ::memset(&tempid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&atttype_) -
      reinterpret_cast<char*>(&tempid_)) + sizeof(atttype_));
}

MSG_Ret_UserDeath_SC::~MSG_Ret_UserDeath_SC() {
  // @@protoc_insertion_point(destructor:magic.MSG_Ret_UserDeath_SC)
  SharedDtor();
}

void MSG_Ret_UserDeath_SC::SharedDtor() {
}

void MSG_Ret_UserDeath_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_UserDeath_SC& MSG_Ret_UserDeath_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_UserDeath_SC_magic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_UserDeath_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:magic.MSG_Ret_UserDeath_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&tempid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&atttype_) -
        reinterpret_cast<char*>(&tempid_)) + sizeof(atttype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_UserDeath_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 tempid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tempid(&has_bits);
          tempid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 attid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_attid(&has_bits);
          attid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 lasthitskill = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_lasthitskill(&has_bits);
          lasthitskill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 atttype = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_atttype(&has_bits);
          atttype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_UserDeath_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:magic.MSG_Ret_UserDeath_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 tempid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_tempid(), target);
  }

  // optional uint64 attid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_attid(), target);
  }

  // optional uint32 lasthitskill = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_lasthitskill(), target);
  }

  // optional uint32 atttype = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_atttype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:magic.MSG_Ret_UserDeath_SC)
  return target;
}

size_t MSG_Ret_UserDeath_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:magic.MSG_Ret_UserDeath_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 tempid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_tempid());
    }

    // optional uint64 attid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_attid());
    }

    // optional uint32 lasthitskill = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lasthitskill());
    }

    // optional uint32 atttype = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_atttype());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_UserDeath_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:magic.MSG_Ret_UserDeath_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_UserDeath_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_UserDeath_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:magic.MSG_Ret_UserDeath_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:magic.MSG_Ret_UserDeath_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_UserDeath_SC::MergeFrom(const MSG_Ret_UserDeath_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:magic.MSG_Ret_UserDeath_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      tempid_ = from.tempid_;
    }
    if (cached_has_bits & 0x00000002u) {
      attid_ = from.attid_;
    }
    if (cached_has_bits & 0x00000004u) {
      lasthitskill_ = from.lasthitskill_;
    }
    if (cached_has_bits & 0x00000008u) {
      atttype_ = from.atttype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_UserDeath_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:magic.MSG_Ret_UserDeath_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_UserDeath_SC::CopyFrom(const MSG_Ret_UserDeath_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:magic.MSG_Ret_UserDeath_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_UserDeath_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_UserDeath_SC::InternalSwap(MSG_Ret_UserDeath_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(tempid_, other->tempid_);
  swap(attid_, other->attid_);
  swap(lasthitskill_, other->lasthitskill_);
  swap(atttype_, other->atttype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_UserDeath_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_MainUserRelive_CS::InitAsDefaultInstance() {
}
class MSG_Req_MainUserRelive_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_MainUserRelive_CS>()._has_bits_);
  static void set_has_relivetype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Req_MainUserRelive_CS::MSG_Req_MainUserRelive_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:magic.MSG_Req_MainUserRelive_CS)
}
MSG_Req_MainUserRelive_CS::MSG_Req_MainUserRelive_CS(const MSG_Req_MainUserRelive_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  relivetype_ = from.relivetype_;
  // @@protoc_insertion_point(copy_constructor:magic.MSG_Req_MainUserRelive_CS)
}

void MSG_Req_MainUserRelive_CS::SharedCtor() {
  relivetype_ = 0u;
}

MSG_Req_MainUserRelive_CS::~MSG_Req_MainUserRelive_CS() {
  // @@protoc_insertion_point(destructor:magic.MSG_Req_MainUserRelive_CS)
  SharedDtor();
}

void MSG_Req_MainUserRelive_CS::SharedDtor() {
}

void MSG_Req_MainUserRelive_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_MainUserRelive_CS& MSG_Req_MainUserRelive_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_MainUserRelive_CS_magic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_MainUserRelive_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:magic.MSG_Req_MainUserRelive_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  relivetype_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_MainUserRelive_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 relivetype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_relivetype(&has_bits);
          relivetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_MainUserRelive_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:magic.MSG_Req_MainUserRelive_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 relivetype = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_relivetype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:magic.MSG_Req_MainUserRelive_CS)
  return target;
}

size_t MSG_Req_MainUserRelive_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:magic.MSG_Req_MainUserRelive_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 relivetype = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_relivetype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_MainUserRelive_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:magic.MSG_Req_MainUserRelive_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_MainUserRelive_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_MainUserRelive_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:magic.MSG_Req_MainUserRelive_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:magic.MSG_Req_MainUserRelive_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_MainUserRelive_CS::MergeFrom(const MSG_Req_MainUserRelive_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:magic.MSG_Req_MainUserRelive_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_relivetype()) {
    _internal_set_relivetype(from._internal_relivetype());
  }
}

void MSG_Req_MainUserRelive_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:magic.MSG_Req_MainUserRelive_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_MainUserRelive_CS::CopyFrom(const MSG_Req_MainUserRelive_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:magic.MSG_Req_MainUserRelive_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_MainUserRelive_CS::IsInitialized() const {
  return true;
}

void MSG_Req_MainUserRelive_CS::InternalSwap(MSG_Req_MainUserRelive_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(relivetype_, other->relivetype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_MainUserRelive_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_MainUserRelive_SC::InitAsDefaultInstance() {
}
class MSG_Ret_MainUserRelive_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_MainUserRelive_SC>()._has_bits_);
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_relivetype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

MSG_Ret_MainUserRelive_SC::MSG_Ret_MainUserRelive_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:magic.MSG_Ret_MainUserRelive_SC)
}
MSG_Ret_MainUserRelive_SC::MSG_Ret_MainUserRelive_SC(const MSG_Ret_MainUserRelive_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&relivetype_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(relivetype_));
  // @@protoc_insertion_point(copy_constructor:magic.MSG_Ret_MainUserRelive_SC)
}

void MSG_Ret_MainUserRelive_SC::SharedCtor() {
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&relivetype_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(relivetype_));
}

MSG_Ret_MainUserRelive_SC::~MSG_Ret_MainUserRelive_SC() {
  // @@protoc_insertion_point(destructor:magic.MSG_Ret_MainUserRelive_SC)
  SharedDtor();
}

void MSG_Ret_MainUserRelive_SC::SharedDtor() {
}

void MSG_Ret_MainUserRelive_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_MainUserRelive_SC& MSG_Ret_MainUserRelive_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_MainUserRelive_SC_magic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_MainUserRelive_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:magic.MSG_Ret_MainUserRelive_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&userid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&relivetype_) -
        reinterpret_cast<char*>(&userid_)) + sizeof(relivetype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_MainUserRelive_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 userid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_userid(&has_bits);
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .msg.ReliveType relivetype = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::msg::ReliveType_IsValid(val))) {
            _internal_set_relivetype(static_cast<::msg::ReliveType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_MainUserRelive_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:magic.MSG_Ret_MainUserRelive_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 userid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_userid(), target);
  }

  // optional uint32 x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_x(), target);
  }

  // optional uint32 y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_y(), target);
  }

  // required .msg.ReliveType relivetype = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_relivetype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:magic.MSG_Ret_MainUserRelive_SC)
  return target;
}

size_t MSG_Ret_MainUserRelive_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:magic.MSG_Ret_MainUserRelive_SC)
  size_t total_size = 0;

  // required .msg.ReliveType relivetype = 4;
  if (_internal_has_relivetype()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_relivetype());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 userid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_userid());
    }

    // optional uint32 x = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_x());
    }

    // optional uint32 y = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_y());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_MainUserRelive_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:magic.MSG_Ret_MainUserRelive_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_MainUserRelive_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_MainUserRelive_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:magic.MSG_Ret_MainUserRelive_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:magic.MSG_Ret_MainUserRelive_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_MainUserRelive_SC::MergeFrom(const MSG_Ret_MainUserRelive_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:magic.MSG_Ret_MainUserRelive_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000008u) {
      relivetype_ = from.relivetype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_MainUserRelive_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:magic.MSG_Ret_MainUserRelive_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_MainUserRelive_SC::CopyFrom(const MSG_Ret_MainUserRelive_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:magic.MSG_Ret_MainUserRelive_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_MainUserRelive_SC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  return true;
}

void MSG_Ret_MainUserRelive_SC::InternalSwap(MSG_Ret_MainUserRelive_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(userid_, other->userid_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(relivetype_, other->relivetype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_MainUserRelive_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_SwitchPKMode_SC::InitAsDefaultInstance() {
}
class MSG_Ret_SwitchPKMode_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_SwitchPKMode_SC>()._has_bits_);
  static void set_has_newmode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Ret_SwitchPKMode_SC::MSG_Ret_SwitchPKMode_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:magic.MSG_Ret_SwitchPKMode_SC)
}
MSG_Ret_SwitchPKMode_SC::MSG_Ret_SwitchPKMode_SC(const MSG_Ret_SwitchPKMode_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  newmode_ = from.newmode_;
  // @@protoc_insertion_point(copy_constructor:magic.MSG_Ret_SwitchPKMode_SC)
}

void MSG_Ret_SwitchPKMode_SC::SharedCtor() {
  newmode_ = 0;
}

MSG_Ret_SwitchPKMode_SC::~MSG_Ret_SwitchPKMode_SC() {
  // @@protoc_insertion_point(destructor:magic.MSG_Ret_SwitchPKMode_SC)
  SharedDtor();
}

void MSG_Ret_SwitchPKMode_SC::SharedDtor() {
}

void MSG_Ret_SwitchPKMode_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_SwitchPKMode_SC& MSG_Ret_SwitchPKMode_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_SwitchPKMode_SC_magic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_SwitchPKMode_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:magic.MSG_Ret_SwitchPKMode_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  newmode_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_SwitchPKMode_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .msg.PKMode newmode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::msg::PKMode_IsValid(val))) {
            _internal_set_newmode(static_cast<::msg::PKMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_SwitchPKMode_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:magic.MSG_Ret_SwitchPKMode_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .msg.PKMode newmode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_newmode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:magic.MSG_Ret_SwitchPKMode_SC)
  return target;
}

size_t MSG_Ret_SwitchPKMode_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:magic.MSG_Ret_SwitchPKMode_SC)
  size_t total_size = 0;

  // required .msg.PKMode newmode = 1;
  if (_internal_has_newmode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_newmode());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_SwitchPKMode_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:magic.MSG_Ret_SwitchPKMode_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_SwitchPKMode_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_SwitchPKMode_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:magic.MSG_Ret_SwitchPKMode_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:magic.MSG_Ret_SwitchPKMode_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_SwitchPKMode_SC::MergeFrom(const MSG_Ret_SwitchPKMode_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:magic.MSG_Ret_SwitchPKMode_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_newmode()) {
    _internal_set_newmode(from._internal_newmode());
  }
}

void MSG_Ret_SwitchPKMode_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:magic.MSG_Ret_SwitchPKMode_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_SwitchPKMode_SC::CopyFrom(const MSG_Ret_SwitchPKMode_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:magic.MSG_Ret_SwitchPKMode_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_SwitchPKMode_SC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MSG_Ret_SwitchPKMode_SC::InternalSwap(MSG_Ret_SwitchPKMode_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(newmode_, other->newmode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_SwitchPKMode_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetRefreshSkill_SC::InitAsDefaultInstance() {
}
class MSG_RetRefreshSkill_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetRefreshSkill_SC>()._has_bits_);
};

MSG_RetRefreshSkill_SC::MSG_RetRefreshSkill_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:magic.MSG_RetRefreshSkill_SC)
}
MSG_RetRefreshSkill_SC::MSG_RetRefreshSkill_SC(const MSG_RetRefreshSkill_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      skills_(from.skills_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:magic.MSG_RetRefreshSkill_SC)
}

void MSG_RetRefreshSkill_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_RetRefreshSkill_SC_magic_5fmsg_2eproto.base);
}

MSG_RetRefreshSkill_SC::~MSG_RetRefreshSkill_SC() {
  // @@protoc_insertion_point(destructor:magic.MSG_RetRefreshSkill_SC)
  SharedDtor();
}

void MSG_RetRefreshSkill_SC::SharedDtor() {
}

void MSG_RetRefreshSkill_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetRefreshSkill_SC& MSG_RetRefreshSkill_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetRefreshSkill_SC_magic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetRefreshSkill_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:magic.MSG_RetRefreshSkill_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  skills_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetRefreshSkill_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .magic.SkillData skills = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_skills(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetRefreshSkill_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:magic.MSG_RetRefreshSkill_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .magic.SkillData skills = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_skills_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_skills(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:magic.MSG_RetRefreshSkill_SC)
  return target;
}

size_t MSG_RetRefreshSkill_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:magic.MSG_RetRefreshSkill_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .magic.SkillData skills = 1;
  total_size += 1UL * this->_internal_skills_size();
  for (const auto& msg : this->skills_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetRefreshSkill_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:magic.MSG_RetRefreshSkill_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetRefreshSkill_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetRefreshSkill_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:magic.MSG_RetRefreshSkill_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:magic.MSG_RetRefreshSkill_SC)
    MergeFrom(*source);
  }
}

void MSG_RetRefreshSkill_SC::MergeFrom(const MSG_RetRefreshSkill_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:magic.MSG_RetRefreshSkill_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  skills_.MergeFrom(from.skills_);
}

void MSG_RetRefreshSkill_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:magic.MSG_RetRefreshSkill_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetRefreshSkill_SC::CopyFrom(const MSG_RetRefreshSkill_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:magic.MSG_RetRefreshSkill_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetRefreshSkill_SC::IsInitialized() const {
  return true;
}

void MSG_RetRefreshSkill_SC::InternalSwap(MSG_RetRefreshSkill_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  skills_.InternalSwap(&other->skills_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetRefreshSkill_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_OffSkill_CS::InitAsDefaultInstance() {
}
class MSG_Req_OffSkill_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_OffSkill_CS>()._has_bits_);
  static void set_has_skillid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Req_OffSkill_CS::MSG_Req_OffSkill_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:magic.MSG_Req_OffSkill_CS)
}
MSG_Req_OffSkill_CS::MSG_Req_OffSkill_CS(const MSG_Req_OffSkill_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  skillid_ = from.skillid_;
  // @@protoc_insertion_point(copy_constructor:magic.MSG_Req_OffSkill_CS)
}

void MSG_Req_OffSkill_CS::SharedCtor() {
  skillid_ = 0u;
}

MSG_Req_OffSkill_CS::~MSG_Req_OffSkill_CS() {
  // @@protoc_insertion_point(destructor:magic.MSG_Req_OffSkill_CS)
  SharedDtor();
}

void MSG_Req_OffSkill_CS::SharedDtor() {
}

void MSG_Req_OffSkill_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_OffSkill_CS& MSG_Req_OffSkill_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_OffSkill_CS_magic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_OffSkill_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:magic.MSG_Req_OffSkill_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  skillid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_OffSkill_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 skillid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_skillid(&has_bits);
          skillid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_OffSkill_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:magic.MSG_Req_OffSkill_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 skillid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_skillid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:magic.MSG_Req_OffSkill_CS)
  return target;
}

size_t MSG_Req_OffSkill_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:magic.MSG_Req_OffSkill_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 skillid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_skillid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_OffSkill_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:magic.MSG_Req_OffSkill_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_OffSkill_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_OffSkill_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:magic.MSG_Req_OffSkill_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:magic.MSG_Req_OffSkill_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_OffSkill_CS::MergeFrom(const MSG_Req_OffSkill_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:magic.MSG_Req_OffSkill_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_skillid()) {
    _internal_set_skillid(from._internal_skillid());
  }
}

void MSG_Req_OffSkill_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:magic.MSG_Req_OffSkill_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_OffSkill_CS::CopyFrom(const MSG_Req_OffSkill_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:magic.MSG_Req_OffSkill_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_OffSkill_CS::IsInitialized() const {
  return true;
}

void MSG_Req_OffSkill_CS::InternalSwap(MSG_Req_OffSkill_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(skillid_, other->skillid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_OffSkill_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AttWarning::InitAsDefaultInstance() {
  ::magic::_AttWarning_default_instance_._instance.get_mutable()->pos_ = const_cast< ::msg::Position*>(
      ::msg::Position::internal_default_instance());
}
class AttWarning::_Internal {
 public:
  using HasBits = decltype(std::declval<AttWarning>()._has_bits_);
  static void set_has_lasttime(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::msg::Position& pos(const AttWarning* msg);
  static void set_has_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rangetype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rangep1(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rangep2(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::msg::Position&
AttWarning::_Internal::pos(const AttWarning* msg) {
  return *msg->pos_;
}
void AttWarning::clear_pos() {
  if (pos_ != nullptr) pos_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
AttWarning::AttWarning()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:magic.AttWarning)
}
AttWarning::AttWarning(const AttWarning& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_pos()) {
    pos_ = new ::msg::Position(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  ::memcpy(&lasttime_, &from.lasttime_,
    static_cast<size_t>(reinterpret_cast<char*>(&rangep2_) -
    reinterpret_cast<char*>(&lasttime_)) + sizeof(rangep2_));
  // @@protoc_insertion_point(copy_constructor:magic.AttWarning)
}

void AttWarning::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AttWarning_magic_5fmsg_2eproto.base);
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rangep2_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(rangep2_));
}

AttWarning::~AttWarning() {
  // @@protoc_insertion_point(destructor:magic.AttWarning)
  SharedDtor();
}

void AttWarning::SharedDtor() {
  if (this != internal_default_instance()) delete pos_;
}

void AttWarning::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AttWarning& AttWarning::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AttWarning_magic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void AttWarning::Clear() {
// @@protoc_insertion_point(message_clear_start:magic.AttWarning)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(pos_ != nullptr);
    pos_->Clear();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&lasttime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rangep2_) -
        reinterpret_cast<char*>(&lasttime_)) + sizeof(rangep2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AttWarning::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 lasttime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_lasttime(&has_bits);
          lasttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .msg.Position pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 dir = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_dir(&has_bits);
          dir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rangetype = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_rangetype(&has_bits);
          rangetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rangep1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_rangep1(&has_bits);
          rangep1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rangep2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_rangep2(&has_bits);
          rangep2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AttWarning::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:magic.AttWarning)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 lasttime = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_lasttime(), target);
  }

  // optional .msg.Position pos = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pos(this), target, stream);
  }

  // optional uint32 dir = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_dir(), target);
  }

  // optional uint32 rangetype = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_rangetype(), target);
  }

  // optional uint32 rangep1 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_rangep1(), target);
  }

  // optional uint32 rangep2 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_rangep2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:magic.AttWarning)
  return target;
}

size_t AttWarning::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:magic.AttWarning)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .msg.Position pos = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pos_);
    }

    // optional uint32 lasttime = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lasttime());
    }

    // optional uint32 dir = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_dir());
    }

    // optional uint32 rangetype = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rangetype());
    }

    // optional uint32 rangep1 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rangep1());
    }

    // optional uint32 rangep2 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rangep2());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AttWarning::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:magic.AttWarning)
  GOOGLE_DCHECK_NE(&from, this);
  const AttWarning* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AttWarning>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:magic.AttWarning)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:magic.AttWarning)
    MergeFrom(*source);
  }
}

void AttWarning::MergeFrom(const AttWarning& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:magic.AttWarning)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_pos()->::msg::Position::MergeFrom(from._internal_pos());
    }
    if (cached_has_bits & 0x00000002u) {
      lasttime_ = from.lasttime_;
    }
    if (cached_has_bits & 0x00000004u) {
      dir_ = from.dir_;
    }
    if (cached_has_bits & 0x00000008u) {
      rangetype_ = from.rangetype_;
    }
    if (cached_has_bits & 0x00000010u) {
      rangep1_ = from.rangep1_;
    }
    if (cached_has_bits & 0x00000020u) {
      rangep2_ = from.rangep2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AttWarning::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:magic.AttWarning)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttWarning::CopyFrom(const AttWarning& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:magic.AttWarning)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttWarning::IsInitialized() const {
  return true;
}

void AttWarning::InternalSwap(AttWarning* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pos_, other->pos_);
  swap(lasttime_, other->lasttime_);
  swap(dir_, other->dir_);
  swap(rangetype_, other->rangetype_);
  swap(rangep1_, other->rangep1_);
  swap(rangep2_, other->rangep2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AttWarning::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_AttWarning_SC::InitAsDefaultInstance() {
  ::magic::_MSG_Ret_AttWarning_SC_default_instance_._instance.get_mutable()->attacker_ = const_cast< ::msg::EntryIDType*>(
      ::msg::EntryIDType::internal_default_instance());
}
class MSG_Ret_AttWarning_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_AttWarning_SC>()._has_bits_);
  static const ::msg::EntryIDType& attacker(const MSG_Ret_AttWarning_SC* msg);
  static void set_has_attacker(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::msg::EntryIDType&
MSG_Ret_AttWarning_SC::_Internal::attacker(const MSG_Ret_AttWarning_SC* msg) {
  return *msg->attacker_;
}
void MSG_Ret_AttWarning_SC::clear_attacker() {
  if (attacker_ != nullptr) attacker_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
MSG_Ret_AttWarning_SC::MSG_Ret_AttWarning_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:magic.MSG_Ret_AttWarning_SC)
}
MSG_Ret_AttWarning_SC::MSG_Ret_AttWarning_SC(const MSG_Ret_AttWarning_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      warning_(from.warning_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_attacker()) {
    attacker_ = new ::msg::EntryIDType(*from.attacker_);
  } else {
    attacker_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:magic.MSG_Ret_AttWarning_SC)
}

void MSG_Ret_AttWarning_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_AttWarning_SC_magic_5fmsg_2eproto.base);
  attacker_ = nullptr;
}

MSG_Ret_AttWarning_SC::~MSG_Ret_AttWarning_SC() {
  // @@protoc_insertion_point(destructor:magic.MSG_Ret_AttWarning_SC)
  SharedDtor();
}

void MSG_Ret_AttWarning_SC::SharedDtor() {
  if (this != internal_default_instance()) delete attacker_;
}

void MSG_Ret_AttWarning_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_AttWarning_SC& MSG_Ret_AttWarning_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_AttWarning_SC_magic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_AttWarning_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:magic.MSG_Ret_AttWarning_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  warning_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(attacker_ != nullptr);
    attacker_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_AttWarning_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .msg.EntryIDType attacker = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_attacker(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .magic.AttWarning warning = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_warning(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_AttWarning_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:magic.MSG_Ret_AttWarning_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .msg.EntryIDType attacker = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::attacker(this), target, stream);
  }

  // repeated .magic.AttWarning warning = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_warning_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_warning(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:magic.MSG_Ret_AttWarning_SC)
  return target;
}

size_t MSG_Ret_AttWarning_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:magic.MSG_Ret_AttWarning_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .magic.AttWarning warning = 2;
  total_size += 1UL * this->_internal_warning_size();
  for (const auto& msg : this->warning_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .msg.EntryIDType attacker = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attacker_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_AttWarning_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:magic.MSG_Ret_AttWarning_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_AttWarning_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_AttWarning_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:magic.MSG_Ret_AttWarning_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:magic.MSG_Ret_AttWarning_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_AttWarning_SC::MergeFrom(const MSG_Ret_AttWarning_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:magic.MSG_Ret_AttWarning_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  warning_.MergeFrom(from.warning_);
  if (from._internal_has_attacker()) {
    _internal_mutable_attacker()->::msg::EntryIDType::MergeFrom(from._internal_attacker());
  }
}

void MSG_Ret_AttWarning_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:magic.MSG_Ret_AttWarning_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_AttWarning_SC::CopyFrom(const MSG_Ret_AttWarning_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:magic.MSG_Ret_AttWarning_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_AttWarning_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_AttWarning_SC::InternalSwap(MSG_Ret_AttWarning_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  warning_.InternalSwap(&other->warning_);
  swap(attacker_, other->attacker_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_AttWarning_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqTriggerQTESkill_CS::InitAsDefaultInstance() {
  ::magic::_MSG_ReqTriggerQTESkill_CS_default_instance_._instance.get_mutable()->warppos_ = const_cast< ::msg::Position*>(
      ::msg::Position::internal_default_instance());
}
class MSG_ReqTriggerQTESkill_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqTriggerQTESkill_CS>()._has_bits_);
  static void set_has_bosstempid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::msg::Position& warppos(const MSG_ReqTriggerQTESkill_CS* msg);
  static void set_has_warppos(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::msg::Position&
MSG_ReqTriggerQTESkill_CS::_Internal::warppos(const MSG_ReqTriggerQTESkill_CS* msg) {
  return *msg->warppos_;
}
void MSG_ReqTriggerQTESkill_CS::clear_warppos() {
  if (warppos_ != nullptr) warppos_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
MSG_ReqTriggerQTESkill_CS::MSG_ReqTriggerQTESkill_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:magic.MSG_ReqTriggerQTESkill_CS)
}
MSG_ReqTriggerQTESkill_CS::MSG_ReqTriggerQTESkill_CS(const MSG_ReqTriggerQTESkill_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_warppos()) {
    warppos_ = new ::msg::Position(*from.warppos_);
  } else {
    warppos_ = nullptr;
  }
  ::memcpy(&bosstempid_, &from.bosstempid_,
    static_cast<size_t>(reinterpret_cast<char*>(&dir_) -
    reinterpret_cast<char*>(&bosstempid_)) + sizeof(dir_));
  // @@protoc_insertion_point(copy_constructor:magic.MSG_ReqTriggerQTESkill_CS)
}

void MSG_ReqTriggerQTESkill_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_ReqTriggerQTESkill_CS_magic_5fmsg_2eproto.base);
  ::memset(&warppos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dir_) -
      reinterpret_cast<char*>(&warppos_)) + sizeof(dir_));
}

MSG_ReqTriggerQTESkill_CS::~MSG_ReqTriggerQTESkill_CS() {
  // @@protoc_insertion_point(destructor:magic.MSG_ReqTriggerQTESkill_CS)
  SharedDtor();
}

void MSG_ReqTriggerQTESkill_CS::SharedDtor() {
  if (this != internal_default_instance()) delete warppos_;
}

void MSG_ReqTriggerQTESkill_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqTriggerQTESkill_CS& MSG_ReqTriggerQTESkill_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqTriggerQTESkill_CS_magic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqTriggerQTESkill_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:magic.MSG_ReqTriggerQTESkill_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(warppos_ != nullptr);
    warppos_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&bosstempid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dir_) -
        reinterpret_cast<char*>(&bosstempid_)) + sizeof(dir_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqTriggerQTESkill_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 bosstempid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bosstempid(&has_bits);
          bosstempid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .msg.Position warppos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_warppos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 dir = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_dir(&has_bits);
          dir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqTriggerQTESkill_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:magic.MSG_ReqTriggerQTESkill_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 bosstempid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_bosstempid(), target);
  }

  // optional .msg.Position warppos = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::warppos(this), target, stream);
  }

  // optional uint32 dir = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_dir(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:magic.MSG_ReqTriggerQTESkill_CS)
  return target;
}

size_t MSG_ReqTriggerQTESkill_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:magic.MSG_ReqTriggerQTESkill_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .msg.Position warppos = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *warppos_);
    }

    // optional uint64 bosstempid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_bosstempid());
    }

    // optional uint32 dir = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_dir());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqTriggerQTESkill_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:magic.MSG_ReqTriggerQTESkill_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqTriggerQTESkill_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqTriggerQTESkill_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:magic.MSG_ReqTriggerQTESkill_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:magic.MSG_ReqTriggerQTESkill_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqTriggerQTESkill_CS::MergeFrom(const MSG_ReqTriggerQTESkill_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:magic.MSG_ReqTriggerQTESkill_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_warppos()->::msg::Position::MergeFrom(from._internal_warppos());
    }
    if (cached_has_bits & 0x00000002u) {
      bosstempid_ = from.bosstempid_;
    }
    if (cached_has_bits & 0x00000004u) {
      dir_ = from.dir_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_ReqTriggerQTESkill_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:magic.MSG_ReqTriggerQTESkill_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqTriggerQTESkill_CS::CopyFrom(const MSG_ReqTriggerQTESkill_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:magic.MSG_ReqTriggerQTESkill_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqTriggerQTESkill_CS::IsInitialized() const {
  return true;
}

void MSG_ReqTriggerQTESkill_CS::InternalSwap(MSG_ReqTriggerQTESkill_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(warppos_, other->warppos_);
  swap(bosstempid_, other->bosstempid_);
  swap(dir_, other->dir_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqTriggerQTESkill_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetTriggerQTESkill_SC::InitAsDefaultInstance() {
}
class MSG_RetTriggerQTESkill_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetTriggerQTESkill_SC>()._has_bits_);
  static void set_has_errcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_RetTriggerQTESkill_SC::MSG_RetTriggerQTESkill_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:magic.MSG_RetTriggerQTESkill_SC)
}
MSG_RetTriggerQTESkill_SC::MSG_RetTriggerQTESkill_SC(const MSG_RetTriggerQTESkill_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errcode_ = from.errcode_;
  // @@protoc_insertion_point(copy_constructor:magic.MSG_RetTriggerQTESkill_SC)
}

void MSG_RetTriggerQTESkill_SC::SharedCtor() {
  errcode_ = 0u;
}

MSG_RetTriggerQTESkill_SC::~MSG_RetTriggerQTESkill_SC() {
  // @@protoc_insertion_point(destructor:magic.MSG_RetTriggerQTESkill_SC)
  SharedDtor();
}

void MSG_RetTriggerQTESkill_SC::SharedDtor() {
}

void MSG_RetTriggerQTESkill_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetTriggerQTESkill_SC& MSG_RetTriggerQTESkill_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetTriggerQTESkill_SC_magic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetTriggerQTESkill_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:magic.MSG_RetTriggerQTESkill_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errcode_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetTriggerQTESkill_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 errcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_errcode(&has_bits);
          errcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetTriggerQTESkill_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:magic.MSG_RetTriggerQTESkill_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 errcode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_errcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:magic.MSG_RetTriggerQTESkill_SC)
  return target;
}

size_t MSG_RetTriggerQTESkill_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:magic.MSG_RetTriggerQTESkill_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 errcode = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_errcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetTriggerQTESkill_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:magic.MSG_RetTriggerQTESkill_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetTriggerQTESkill_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetTriggerQTESkill_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:magic.MSG_RetTriggerQTESkill_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:magic.MSG_RetTriggerQTESkill_SC)
    MergeFrom(*source);
  }
}

void MSG_RetTriggerQTESkill_SC::MergeFrom(const MSG_RetTriggerQTESkill_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:magic.MSG_RetTriggerQTESkill_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_errcode()) {
    _internal_set_errcode(from._internal_errcode());
  }
}

void MSG_RetTriggerQTESkill_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:magic.MSG_RetTriggerQTESkill_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetTriggerQTESkill_SC::CopyFrom(const MSG_RetTriggerQTESkill_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:magic.MSG_RetTriggerQTESkill_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetTriggerQTESkill_SC::IsInitialized() const {
  return true;
}

void MSG_RetTriggerQTESkill_SC::InternalSwap(MSG_RetTriggerQTESkill_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(errcode_, other->errcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetTriggerQTESkill_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqDrinkBloodSkill_CS::InitAsDefaultInstance() {
}
class MSG_ReqDrinkBloodSkill_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqDrinkBloodSkill_CS>()._has_bits_);
  static void set_has_npctempid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_ReqDrinkBloodSkill_CS::MSG_ReqDrinkBloodSkill_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:magic.MSG_ReqDrinkBloodSkill_CS)
}
MSG_ReqDrinkBloodSkill_CS::MSG_ReqDrinkBloodSkill_CS(const MSG_ReqDrinkBloodSkill_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  npctempid_ = from.npctempid_;
  // @@protoc_insertion_point(copy_constructor:magic.MSG_ReqDrinkBloodSkill_CS)
}

void MSG_ReqDrinkBloodSkill_CS::SharedCtor() {
  npctempid_ = PROTOBUF_ULONGLONG(0);
}

MSG_ReqDrinkBloodSkill_CS::~MSG_ReqDrinkBloodSkill_CS() {
  // @@protoc_insertion_point(destructor:magic.MSG_ReqDrinkBloodSkill_CS)
  SharedDtor();
}

void MSG_ReqDrinkBloodSkill_CS::SharedDtor() {
}

void MSG_ReqDrinkBloodSkill_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqDrinkBloodSkill_CS& MSG_ReqDrinkBloodSkill_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqDrinkBloodSkill_CS_magic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqDrinkBloodSkill_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:magic.MSG_ReqDrinkBloodSkill_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  npctempid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqDrinkBloodSkill_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 npctempid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_npctempid(&has_bits);
          npctempid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqDrinkBloodSkill_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:magic.MSG_ReqDrinkBloodSkill_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 npctempid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_npctempid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:magic.MSG_ReqDrinkBloodSkill_CS)
  return target;
}

size_t MSG_ReqDrinkBloodSkill_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:magic.MSG_ReqDrinkBloodSkill_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 npctempid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_npctempid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqDrinkBloodSkill_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:magic.MSG_ReqDrinkBloodSkill_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqDrinkBloodSkill_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqDrinkBloodSkill_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:magic.MSG_ReqDrinkBloodSkill_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:magic.MSG_ReqDrinkBloodSkill_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqDrinkBloodSkill_CS::MergeFrom(const MSG_ReqDrinkBloodSkill_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:magic.MSG_ReqDrinkBloodSkill_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_npctempid()) {
    _internal_set_npctempid(from._internal_npctempid());
  }
}

void MSG_ReqDrinkBloodSkill_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:magic.MSG_ReqDrinkBloodSkill_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqDrinkBloodSkill_CS::CopyFrom(const MSG_ReqDrinkBloodSkill_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:magic.MSG_ReqDrinkBloodSkill_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqDrinkBloodSkill_CS::IsInitialized() const {
  return true;
}

void MSG_ReqDrinkBloodSkill_CS::InternalSwap(MSG_ReqDrinkBloodSkill_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(npctempid_, other->npctempid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqDrinkBloodSkill_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetDrinkBloodSkill_SC::InitAsDefaultInstance() {
}
class MSG_RetDrinkBloodSkill_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetDrinkBloodSkill_SC>()._has_bits_);
  static void set_has_errcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_RetDrinkBloodSkill_SC::MSG_RetDrinkBloodSkill_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:magic.MSG_RetDrinkBloodSkill_SC)
}
MSG_RetDrinkBloodSkill_SC::MSG_RetDrinkBloodSkill_SC(const MSG_RetDrinkBloodSkill_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errcode_ = from.errcode_;
  // @@protoc_insertion_point(copy_constructor:magic.MSG_RetDrinkBloodSkill_SC)
}

void MSG_RetDrinkBloodSkill_SC::SharedCtor() {
  errcode_ = 1u;
}

MSG_RetDrinkBloodSkill_SC::~MSG_RetDrinkBloodSkill_SC() {
  // @@protoc_insertion_point(destructor:magic.MSG_RetDrinkBloodSkill_SC)
  SharedDtor();
}

void MSG_RetDrinkBloodSkill_SC::SharedDtor() {
}

void MSG_RetDrinkBloodSkill_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetDrinkBloodSkill_SC& MSG_RetDrinkBloodSkill_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetDrinkBloodSkill_SC_magic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetDrinkBloodSkill_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:magic.MSG_RetDrinkBloodSkill_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errcode_ = 1u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetDrinkBloodSkill_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 errcode = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_errcode(&has_bits);
          errcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetDrinkBloodSkill_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:magic.MSG_RetDrinkBloodSkill_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 errcode = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_errcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:magic.MSG_RetDrinkBloodSkill_SC)
  return target;
}

size_t MSG_RetDrinkBloodSkill_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:magic.MSG_RetDrinkBloodSkill_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 errcode = 1 [default = 1];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_errcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetDrinkBloodSkill_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:magic.MSG_RetDrinkBloodSkill_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetDrinkBloodSkill_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetDrinkBloodSkill_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:magic.MSG_RetDrinkBloodSkill_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:magic.MSG_RetDrinkBloodSkill_SC)
    MergeFrom(*source);
  }
}

void MSG_RetDrinkBloodSkill_SC::MergeFrom(const MSG_RetDrinkBloodSkill_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:magic.MSG_RetDrinkBloodSkill_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_errcode()) {
    _internal_set_errcode(from._internal_errcode());
  }
}

void MSG_RetDrinkBloodSkill_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:magic.MSG_RetDrinkBloodSkill_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetDrinkBloodSkill_SC::CopyFrom(const MSG_RetDrinkBloodSkill_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:magic.MSG_RetDrinkBloodSkill_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetDrinkBloodSkill_SC::IsInitialized() const {
  return true;
}

void MSG_RetDrinkBloodSkill_SC::InternalSwap(MSG_RetDrinkBloodSkill_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(errcode_, other->errcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetDrinkBloodSkill_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_UserSkillRelive_SC::InitAsDefaultInstance() {
}
class MSG_Ret_UserSkillRelive_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_UserSkillRelive_SC>()._has_bits_);
  static void set_has_from_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_relive_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_relivetime(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MSG_Ret_UserSkillRelive_SC::MSG_Ret_UserSkillRelive_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:magic.MSG_Ret_UserSkillRelive_SC)
}
MSG_Ret_UserSkillRelive_SC::MSG_Ret_UserSkillRelive_SC(const MSG_Ret_UserSkillRelive_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  from_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_from_name()) {
    from_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.from_name_);
  }
  ::memcpy(&relive_type_, &from.relive_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&relivetime_) -
    reinterpret_cast<char*>(&relive_type_)) + sizeof(relivetime_));
  // @@protoc_insertion_point(copy_constructor:magic.MSG_Ret_UserSkillRelive_SC)
}

void MSG_Ret_UserSkillRelive_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_UserSkillRelive_SC_magic_5fmsg_2eproto.base);
  from_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&relive_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&relivetime_) -
      reinterpret_cast<char*>(&relive_type_)) + sizeof(relivetime_));
}

MSG_Ret_UserSkillRelive_SC::~MSG_Ret_UserSkillRelive_SC() {
  // @@protoc_insertion_point(destructor:magic.MSG_Ret_UserSkillRelive_SC)
  SharedDtor();
}

void MSG_Ret_UserSkillRelive_SC::SharedDtor() {
  from_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_Ret_UserSkillRelive_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_UserSkillRelive_SC& MSG_Ret_UserSkillRelive_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_UserSkillRelive_SC_magic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_UserSkillRelive_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:magic.MSG_Ret_UserSkillRelive_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    from_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&relive_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&relivetime_) -
        reinterpret_cast<char*>(&relive_type_)) + sizeof(relivetime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_UserSkillRelive_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string from_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_from_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "magic.MSG_Ret_UserSkillRelive_SC.from_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 relive_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_relive_type(&has_bits);
          relive_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 relivetime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_relivetime(&has_bits);
          relivetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_UserSkillRelive_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:magic.MSG_Ret_UserSkillRelive_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string from_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_from_name().data(), static_cast<int>(this->_internal_from_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "magic.MSG_Ret_UserSkillRelive_SC.from_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_from_name(), target);
  }

  // optional uint32 relive_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_relive_type(), target);
  }

  // optional uint32 relivetime = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_relivetime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:magic.MSG_Ret_UserSkillRelive_SC)
  return target;
}

size_t MSG_Ret_UserSkillRelive_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:magic.MSG_Ret_UserSkillRelive_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string from_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_from_name());
    }

    // optional uint32 relive_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_relive_type());
    }

    // optional uint32 relivetime = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_relivetime());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_UserSkillRelive_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:magic.MSG_Ret_UserSkillRelive_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_UserSkillRelive_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_UserSkillRelive_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:magic.MSG_Ret_UserSkillRelive_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:magic.MSG_Ret_UserSkillRelive_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_UserSkillRelive_SC::MergeFrom(const MSG_Ret_UserSkillRelive_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:magic.MSG_Ret_UserSkillRelive_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      from_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.from_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      relive_type_ = from.relive_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      relivetime_ = from.relivetime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_UserSkillRelive_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:magic.MSG_Ret_UserSkillRelive_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_UserSkillRelive_SC::CopyFrom(const MSG_Ret_UserSkillRelive_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:magic.MSG_Ret_UserSkillRelive_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_UserSkillRelive_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_UserSkillRelive_SC::InternalSwap(MSG_Ret_UserSkillRelive_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  from_name_.Swap(&other->from_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(relive_type_, other->relive_type_);
  swap(relivetime_, other->relivetime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_UserSkillRelive_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace magic
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::magic::SkillData* Arena::CreateMaybeMessage< ::magic::SkillData >(Arena* arena) {
  return Arena::CreateInternal< ::magic::SkillData >(arena);
}
template<> PROTOBUF_NOINLINE ::magic::ExtSkillData* Arena::CreateMaybeMessage< ::magic::ExtSkillData >(Arena* arena) {
  return Arena::CreateInternal< ::magic::ExtSkillData >(arena);
}
template<> PROTOBUF_NOINLINE ::magic::MSG_Req_MagicAttack_CS* Arena::CreateMaybeMessage< ::magic::MSG_Req_MagicAttack_CS >(Arena* arena) {
  return Arena::CreateInternal< ::magic::MSG_Req_MagicAttack_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::magic::MSG_Ret_StartMagicAttack_SC* Arena::CreateMaybeMessage< ::magic::MSG_Ret_StartMagicAttack_SC >(Arena* arena) {
  return Arena::CreateInternal< ::magic::MSG_Ret_StartMagicAttack_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::magic::PKResult* Arena::CreateMaybeMessage< ::magic::PKResult >(Arena* arena) {
  return Arena::CreateInternal< ::magic::PKResult >(arena);
}
template<> PROTOBUF_NOINLINE ::magic::MSG_Ret_MagicAttack_SC* Arena::CreateMaybeMessage< ::magic::MSG_Ret_MagicAttack_SC >(Arena* arena) {
  return Arena::CreateInternal< ::magic::MSG_Ret_MagicAttack_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::magic::MSG_Ret_HpMpPop_SC* Arena::CreateMaybeMessage< ::magic::MSG_Ret_HpMpPop_SC >(Arena* arena) {
  return Arena::CreateInternal< ::magic::MSG_Ret_HpMpPop_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::magic::MSG_Req_SyncSkillStage_CS* Arena::CreateMaybeMessage< ::magic::MSG_Req_SyncSkillStage_CS >(Arena* arena) {
  return Arena::CreateInternal< ::magic::MSG_Req_SyncSkillStage_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::magic::MSG_Ret_SyncSkillStage_SC* Arena::CreateMaybeMessage< ::magic::MSG_Ret_SyncSkillStage_SC >(Arena* arena) {
  return Arena::CreateInternal< ::magic::MSG_Ret_SyncSkillStage_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::magic::MSG_Ret_InterruptSkill_SC* Arena::CreateMaybeMessage< ::magic::MSG_Ret_InterruptSkill_SC >(Arena* arena) {
  return Arena::CreateInternal< ::magic::MSG_Ret_InterruptSkill_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::magic::MSG_Ret_MainUserDeath_SC* Arena::CreateMaybeMessage< ::magic::MSG_Ret_MainUserDeath_SC >(Arena* arena) {
  return Arena::CreateInternal< ::magic::MSG_Ret_MainUserDeath_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::magic::MSG_Ret_UserDeath_SC* Arena::CreateMaybeMessage< ::magic::MSG_Ret_UserDeath_SC >(Arena* arena) {
  return Arena::CreateInternal< ::magic::MSG_Ret_UserDeath_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::magic::MSG_Req_MainUserRelive_CS* Arena::CreateMaybeMessage< ::magic::MSG_Req_MainUserRelive_CS >(Arena* arena) {
  return Arena::CreateInternal< ::magic::MSG_Req_MainUserRelive_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::magic::MSG_Ret_MainUserRelive_SC* Arena::CreateMaybeMessage< ::magic::MSG_Ret_MainUserRelive_SC >(Arena* arena) {
  return Arena::CreateInternal< ::magic::MSG_Ret_MainUserRelive_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::magic::MSG_Ret_SwitchPKMode_SC* Arena::CreateMaybeMessage< ::magic::MSG_Ret_SwitchPKMode_SC >(Arena* arena) {
  return Arena::CreateInternal< ::magic::MSG_Ret_SwitchPKMode_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::magic::MSG_RetRefreshSkill_SC* Arena::CreateMaybeMessage< ::magic::MSG_RetRefreshSkill_SC >(Arena* arena) {
  return Arena::CreateInternal< ::magic::MSG_RetRefreshSkill_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::magic::MSG_Req_OffSkill_CS* Arena::CreateMaybeMessage< ::magic::MSG_Req_OffSkill_CS >(Arena* arena) {
  return Arena::CreateInternal< ::magic::MSG_Req_OffSkill_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::magic::AttWarning* Arena::CreateMaybeMessage< ::magic::AttWarning >(Arena* arena) {
  return Arena::CreateInternal< ::magic::AttWarning >(arena);
}
template<> PROTOBUF_NOINLINE ::magic::MSG_Ret_AttWarning_SC* Arena::CreateMaybeMessage< ::magic::MSG_Ret_AttWarning_SC >(Arena* arena) {
  return Arena::CreateInternal< ::magic::MSG_Ret_AttWarning_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::magic::MSG_ReqTriggerQTESkill_CS* Arena::CreateMaybeMessage< ::magic::MSG_ReqTriggerQTESkill_CS >(Arena* arena) {
  return Arena::CreateInternal< ::magic::MSG_ReqTriggerQTESkill_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::magic::MSG_RetTriggerQTESkill_SC* Arena::CreateMaybeMessage< ::magic::MSG_RetTriggerQTESkill_SC >(Arena* arena) {
  return Arena::CreateInternal< ::magic::MSG_RetTriggerQTESkill_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::magic::MSG_ReqDrinkBloodSkill_CS* Arena::CreateMaybeMessage< ::magic::MSG_ReqDrinkBloodSkill_CS >(Arena* arena) {
  return Arena::CreateInternal< ::magic::MSG_ReqDrinkBloodSkill_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::magic::MSG_RetDrinkBloodSkill_SC* Arena::CreateMaybeMessage< ::magic::MSG_RetDrinkBloodSkill_SC >(Arena* arena) {
  return Arena::CreateInternal< ::magic::MSG_RetDrinkBloodSkill_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::magic::MSG_Ret_UserSkillRelive_SC* Arena::CreateMaybeMessage< ::magic::MSG_Ret_UserSkillRelive_SC >(Arena* arena) {
  return Arena::CreateInternal< ::magic::MSG_Ret_UserSkillRelive_SC >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
