// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: country.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_country_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_country_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_country_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_country_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_country_2eproto;
namespace country {
class MSG_Req_JoinCountry_CS;
class MSG_Req_JoinCountry_CSDefaultTypeInternal;
extern MSG_Req_JoinCountry_CSDefaultTypeInternal _MSG_Req_JoinCountry_CS_default_instance_;
class MSG_Ret_JoinCountry_SC;
class MSG_Ret_JoinCountry_SCDefaultTypeInternal;
extern MSG_Ret_JoinCountry_SCDefaultTypeInternal _MSG_Ret_JoinCountry_SC_default_instance_;
}  // namespace country
PROTOBUF_NAMESPACE_OPEN
template<> ::country::MSG_Req_JoinCountry_CS* Arena::CreateMaybeMessage<::country::MSG_Req_JoinCountry_CS>(Arena*);
template<> ::country::MSG_Ret_JoinCountry_SC* Arena::CreateMaybeMessage<::country::MSG_Ret_JoinCountry_SC>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace country {

// ===================================================================

class MSG_Req_JoinCountry_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:country.MSG_Req_JoinCountry_CS) */ {
 public:
  MSG_Req_JoinCountry_CS();
  virtual ~MSG_Req_JoinCountry_CS();

  MSG_Req_JoinCountry_CS(const MSG_Req_JoinCountry_CS& from);
  MSG_Req_JoinCountry_CS(MSG_Req_JoinCountry_CS&& from) noexcept
    : MSG_Req_JoinCountry_CS() {
    *this = ::std::move(from);
  }

  inline MSG_Req_JoinCountry_CS& operator=(const MSG_Req_JoinCountry_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Req_JoinCountry_CS& operator=(MSG_Req_JoinCountry_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Req_JoinCountry_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Req_JoinCountry_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_Req_JoinCountry_CS*>(
               &_MSG_Req_JoinCountry_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MSG_Req_JoinCountry_CS& a, MSG_Req_JoinCountry_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Req_JoinCountry_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Req_JoinCountry_CS* New() const final {
    return CreateMaybeMessage<MSG_Req_JoinCountry_CS>(nullptr);
  }

  MSG_Req_JoinCountry_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Req_JoinCountry_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Req_JoinCountry_CS& from);
  void MergeFrom(const MSG_Req_JoinCountry_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Req_JoinCountry_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "country.MSG_Req_JoinCountry_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_country_2eproto);
    return ::descriptor_table_country_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountryidFieldNumber = 1,
  };
  // optional uint32 countryid = 1;
  bool has_countryid() const;
  private:
  bool _internal_has_countryid() const;
  public:
  void clear_countryid();
  ::PROTOBUF_NAMESPACE_ID::uint32 countryid() const;
  void set_countryid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_countryid() const;
  void _internal_set_countryid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:country.MSG_Req_JoinCountry_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 countryid_;
  friend struct ::TableStruct_country_2eproto;
};
// -------------------------------------------------------------------

class MSG_Ret_JoinCountry_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:country.MSG_Ret_JoinCountry_SC) */ {
 public:
  MSG_Ret_JoinCountry_SC();
  virtual ~MSG_Ret_JoinCountry_SC();

  MSG_Ret_JoinCountry_SC(const MSG_Ret_JoinCountry_SC& from);
  MSG_Ret_JoinCountry_SC(MSG_Ret_JoinCountry_SC&& from) noexcept
    : MSG_Ret_JoinCountry_SC() {
    *this = ::std::move(from);
  }

  inline MSG_Ret_JoinCountry_SC& operator=(const MSG_Ret_JoinCountry_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Ret_JoinCountry_SC& operator=(MSG_Ret_JoinCountry_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Ret_JoinCountry_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Ret_JoinCountry_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_Ret_JoinCountry_SC*>(
               &_MSG_Ret_JoinCountry_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MSG_Ret_JoinCountry_SC& a, MSG_Ret_JoinCountry_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Ret_JoinCountry_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Ret_JoinCountry_SC* New() const final {
    return CreateMaybeMessage<MSG_Ret_JoinCountry_SC>(nullptr);
  }

  MSG_Ret_JoinCountry_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Ret_JoinCountry_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Ret_JoinCountry_SC& from);
  void MergeFrom(const MSG_Ret_JoinCountry_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Ret_JoinCountry_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "country.MSG_Ret_JoinCountry_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_country_2eproto);
    return ::descriptor_table_country_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRetcodeFieldNumber = 1,
  };
  // optional uint32 retcode = 1;
  bool has_retcode() const;
  private:
  bool _internal_has_retcode() const;
  public:
  void clear_retcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 retcode() const;
  void set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_retcode() const;
  void _internal_set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:country.MSG_Ret_JoinCountry_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 retcode_;
  friend struct ::TableStruct_country_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MSG_Req_JoinCountry_CS

// optional uint32 countryid = 1;
inline bool MSG_Req_JoinCountry_CS::_internal_has_countryid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_Req_JoinCountry_CS::has_countryid() const {
  return _internal_has_countryid();
}
inline void MSG_Req_JoinCountry_CS::clear_countryid() {
  countryid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Req_JoinCountry_CS::_internal_countryid() const {
  return countryid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Req_JoinCountry_CS::countryid() const {
  // @@protoc_insertion_point(field_get:country.MSG_Req_JoinCountry_CS.countryid)
  return _internal_countryid();
}
inline void MSG_Req_JoinCountry_CS::_internal_set_countryid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  countryid_ = value;
}
inline void MSG_Req_JoinCountry_CS::set_countryid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_countryid(value);
  // @@protoc_insertion_point(field_set:country.MSG_Req_JoinCountry_CS.countryid)
}

// -------------------------------------------------------------------

// MSG_Ret_JoinCountry_SC

// optional uint32 retcode = 1;
inline bool MSG_Ret_JoinCountry_SC::_internal_has_retcode() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_Ret_JoinCountry_SC::has_retcode() const {
  return _internal_has_retcode();
}
inline void MSG_Ret_JoinCountry_SC::clear_retcode() {
  retcode_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Ret_JoinCountry_SC::_internal_retcode() const {
  return retcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Ret_JoinCountry_SC::retcode() const {
  // @@protoc_insertion_point(field_get:country.MSG_Ret_JoinCountry_SC.retcode)
  return _internal_retcode();
}
inline void MSG_Ret_JoinCountry_SC::_internal_set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  retcode_ = value;
}
inline void MSG_Ret_JoinCountry_SC::set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_retcode(value);
  // @@protoc_insertion_point(field_set:country.MSG_Ret_JoinCountry_SC.retcode)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace country

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_country_2eproto
