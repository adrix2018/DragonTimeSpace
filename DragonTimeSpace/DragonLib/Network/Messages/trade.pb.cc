// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trade.proto

#include "trade.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_object_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_t_Object_object_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hero_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_Hero_hero_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_trade_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TradeHistoryItem_trade_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_trade_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TradeItem_trade_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_trade_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TradeItemData_trade_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_trade_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserTradeItem_trade_2eproto;
namespace trade {
class MSG_ReqSellStaff_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqSellStaff_CS> _instance;
} _MSG_ReqSellStaff_CS_default_instance_;
class MSG_RetSellStaff_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetSellStaff_SC> _instance;
} _MSG_RetSellStaff_SC_default_instance_;
class TradeItemDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TradeItemData> _instance;
} _TradeItemData_default_instance_;
class TradeItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TradeItem> _instance;
} _TradeItem_default_instance_;
class MSG_ReqSellingStaff_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqSellingStaff_CS> _instance;
} _MSG_ReqSellingStaff_CS_default_instance_;
class MSG_RetSellingStaff_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetSellingStaff_SC> _instance;
} _MSG_RetSellingStaff_SC_default_instance_;
class MSG_ReqRecommandPrice_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqRecommandPrice_CS> _instance;
} _MSG_ReqRecommandPrice_CS_default_instance_;
class MSG_RetRecommandPrice_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetRecommandPrice_SC> _instance;
} _MSG_RetRecommandPrice_SC_default_instance_;
class MSG_ReqStopSellStaff_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqStopSellStaff_CS> _instance;
} _MSG_ReqStopSellStaff_CS_default_instance_;
class MSG_RetStopSellStaff_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetStopSellStaff_SC> _instance;
} _MSG_RetStopSellStaff_SC_default_instance_;
class MSG_ReqSubSellingList_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqSubSellingList_CS> _instance;
} _MSG_ReqSubSellingList_CS_default_instance_;
class MSG_RetSubSellingList_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetSubSellingList_SC> _instance;
} _MSG_RetSubSellingList_SC_default_instance_;
class MSG_ReqBuyItem_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqBuyItem_CS> _instance;
} _MSG_ReqBuyItem_CS_default_instance_;
class MSG_RetBuyItem_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetBuyItem_SC> _instance;
} _MSG_RetBuyItem_SC_default_instance_;
class MSG_ReqTradeItemHistory_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqTradeItemHistory_CS> _instance;
} _MSG_ReqTradeItemHistory_CS_default_instance_;
class TradeHistoryItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TradeHistoryItem> _instance;
} _TradeHistoryItem_default_instance_;
class MSG_RetTradeItemHistory_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetTradeItemHistory_SC> _instance;
} _MSG_RetTradeItemHistory_SC_default_instance_;
class MSG_ReqSublistPage_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqSublistPage_CS> _instance;
} _MSG_ReqSublistPage_CS_default_instance_;
class MSG_RetSublistPage_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetSublistPage_SC> _instance;
} _MSG_RetSublistPage_SC_default_instance_;
class MSG_ReqWatchTradeItem_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqWatchTradeItem_CS> _instance;
} _MSG_ReqWatchTradeItem_CS_default_instance_;
class MSG_RetWatchTradeItem_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetWatchTradeItem_SC> _instance;
} _MSG_RetWatchTradeItem_SC_default_instance_;
class MSG_ReqWatchList_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqWatchList_CS> _instance;
} _MSG_ReqWatchList_CS_default_instance_;
class MSG_RetWatchList_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetWatchList_SC> _instance;
} _MSG_RetWatchList_SC_default_instance_;
class MSG_ReqUserTradeHistory_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqUserTradeHistory_CS> _instance;
} _MSG_ReqUserTradeHistory_CS_default_instance_;
class UserTradeItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserTradeItem> _instance;
} _UserTradeItem_default_instance_;
class MSG_RetUserTradeHistory_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetUserTradeHistory_SC> _instance;
} _MSG_RetUserTradeHistory_SC_default_instance_;
class MSG_ReqGetNewestStaff_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqGetNewestStaff_CS> _instance;
} _MSG_ReqGetNewestStaff_CS_default_instance_;
class MSG_RetGetNewestStaff_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetGetNewestStaff_SC> _instance;
} _MSG_RetGetNewestStaff_SC_default_instance_;
}  // namespace trade
static void InitDefaultsscc_info_MSG_ReqBuyItem_CS_trade_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trade::_MSG_ReqBuyItem_CS_default_instance_;
    new (ptr) ::trade::MSG_ReqBuyItem_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trade::MSG_ReqBuyItem_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqBuyItem_CS_trade_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqBuyItem_CS_trade_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqGetNewestStaff_CS_trade_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trade::_MSG_ReqGetNewestStaff_CS_default_instance_;
    new (ptr) ::trade::MSG_ReqGetNewestStaff_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trade::MSG_ReqGetNewestStaff_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqGetNewestStaff_CS_trade_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqGetNewestStaff_CS_trade_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqRecommandPrice_CS_trade_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trade::_MSG_ReqRecommandPrice_CS_default_instance_;
    new (ptr) ::trade::MSG_ReqRecommandPrice_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trade::MSG_ReqRecommandPrice_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqRecommandPrice_CS_trade_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqRecommandPrice_CS_trade_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqSellStaff_CS_trade_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trade::_MSG_ReqSellStaff_CS_default_instance_;
    new (ptr) ::trade::MSG_ReqSellStaff_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trade::MSG_ReqSellStaff_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqSellStaff_CS_trade_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqSellStaff_CS_trade_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqSellingStaff_CS_trade_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trade::_MSG_ReqSellingStaff_CS_default_instance_;
    new (ptr) ::trade::MSG_ReqSellingStaff_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trade::MSG_ReqSellingStaff_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqSellingStaff_CS_trade_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqSellingStaff_CS_trade_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqStopSellStaff_CS_trade_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trade::_MSG_ReqStopSellStaff_CS_default_instance_;
    new (ptr) ::trade::MSG_ReqStopSellStaff_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trade::MSG_ReqStopSellStaff_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqStopSellStaff_CS_trade_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqStopSellStaff_CS_trade_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqSubSellingList_CS_trade_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trade::_MSG_ReqSubSellingList_CS_default_instance_;
    new (ptr) ::trade::MSG_ReqSubSellingList_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trade::MSG_ReqSubSellingList_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqSubSellingList_CS_trade_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqSubSellingList_CS_trade_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqSublistPage_CS_trade_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trade::_MSG_ReqSublistPage_CS_default_instance_;
    new (ptr) ::trade::MSG_ReqSublistPage_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trade::MSG_ReqSublistPage_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqSublistPage_CS_trade_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqSublistPage_CS_trade_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqTradeItemHistory_CS_trade_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trade::_MSG_ReqTradeItemHistory_CS_default_instance_;
    new (ptr) ::trade::MSG_ReqTradeItemHistory_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trade::MSG_ReqTradeItemHistory_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqTradeItemHistory_CS_trade_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqTradeItemHistory_CS_trade_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqUserTradeHistory_CS_trade_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trade::_MSG_ReqUserTradeHistory_CS_default_instance_;
    new (ptr) ::trade::MSG_ReqUserTradeHistory_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trade::MSG_ReqUserTradeHistory_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqUserTradeHistory_CS_trade_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqUserTradeHistory_CS_trade_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqWatchList_CS_trade_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trade::_MSG_ReqWatchList_CS_default_instance_;
    new (ptr) ::trade::MSG_ReqWatchList_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trade::MSG_ReqWatchList_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqWatchList_CS_trade_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqWatchList_CS_trade_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqWatchTradeItem_CS_trade_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trade::_MSG_ReqWatchTradeItem_CS_default_instance_;
    new (ptr) ::trade::MSG_ReqWatchTradeItem_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trade::MSG_ReqWatchTradeItem_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqWatchTradeItem_CS_trade_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqWatchTradeItem_CS_trade_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RetBuyItem_SC_trade_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trade::_MSG_RetBuyItem_SC_default_instance_;
    new (ptr) ::trade::MSG_RetBuyItem_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trade::MSG_RetBuyItem_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RetBuyItem_SC_trade_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_RetBuyItem_SC_trade_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RetGetNewestStaff_SC_trade_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trade::_MSG_RetGetNewestStaff_SC_default_instance_;
    new (ptr) ::trade::MSG_RetGetNewestStaff_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trade::MSG_RetGetNewestStaff_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_RetGetNewestStaff_SC_trade_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_RetGetNewestStaff_SC_trade_2eproto}, {
      &scc_info_TradeItem_trade_2eproto.base,}};

static void InitDefaultsscc_info_MSG_RetRecommandPrice_SC_trade_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trade::_MSG_RetRecommandPrice_SC_default_instance_;
    new (ptr) ::trade::MSG_RetRecommandPrice_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trade::MSG_RetRecommandPrice_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RetRecommandPrice_SC_trade_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_RetRecommandPrice_SC_trade_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RetSellStaff_SC_trade_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trade::_MSG_RetSellStaff_SC_default_instance_;
    new (ptr) ::trade::MSG_RetSellStaff_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trade::MSG_RetSellStaff_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RetSellStaff_SC_trade_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_RetSellStaff_SC_trade_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RetSellingStaff_SC_trade_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trade::_MSG_RetSellingStaff_SC_default_instance_;
    new (ptr) ::trade::MSG_RetSellingStaff_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trade::MSG_RetSellingStaff_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_RetSellingStaff_SC_trade_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_RetSellingStaff_SC_trade_2eproto}, {
      &scc_info_TradeItem_trade_2eproto.base,}};

static void InitDefaultsscc_info_MSG_RetStopSellStaff_SC_trade_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trade::_MSG_RetStopSellStaff_SC_default_instance_;
    new (ptr) ::trade::MSG_RetStopSellStaff_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trade::MSG_RetStopSellStaff_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RetStopSellStaff_SC_trade_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_RetStopSellStaff_SC_trade_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RetSubSellingList_SC_trade_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trade::_MSG_RetSubSellingList_SC_default_instance_;
    new (ptr) ::trade::MSG_RetSubSellingList_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trade::MSG_RetSubSellingList_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RetSubSellingList_SC_trade_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_RetSubSellingList_SC_trade_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RetSublistPage_SC_trade_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trade::_MSG_RetSublistPage_SC_default_instance_;
    new (ptr) ::trade::MSG_RetSublistPage_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trade::MSG_RetSublistPage_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_RetSublistPage_SC_trade_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_RetSublistPage_SC_trade_2eproto}, {
      &scc_info_TradeItem_trade_2eproto.base,}};

static void InitDefaultsscc_info_MSG_RetTradeItemHistory_SC_trade_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trade::_MSG_RetTradeItemHistory_SC_default_instance_;
    new (ptr) ::trade::MSG_RetTradeItemHistory_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trade::MSG_RetTradeItemHistory_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_RetTradeItemHistory_SC_trade_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_RetTradeItemHistory_SC_trade_2eproto}, {
      &scc_info_TradeHistoryItem_trade_2eproto.base,}};

static void InitDefaultsscc_info_MSG_RetUserTradeHistory_SC_trade_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trade::_MSG_RetUserTradeHistory_SC_default_instance_;
    new (ptr) ::trade::MSG_RetUserTradeHistory_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trade::MSG_RetUserTradeHistory_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_RetUserTradeHistory_SC_trade_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_RetUserTradeHistory_SC_trade_2eproto}, {
      &scc_info_UserTradeItem_trade_2eproto.base,}};

static void InitDefaultsscc_info_MSG_RetWatchList_SC_trade_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trade::_MSG_RetWatchList_SC_default_instance_;
    new (ptr) ::trade::MSG_RetWatchList_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trade::MSG_RetWatchList_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_RetWatchList_SC_trade_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_RetWatchList_SC_trade_2eproto}, {
      &scc_info_TradeItem_trade_2eproto.base,}};

static void InitDefaultsscc_info_MSG_RetWatchTradeItem_SC_trade_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trade::_MSG_RetWatchTradeItem_SC_default_instance_;
    new (ptr) ::trade::MSG_RetWatchTradeItem_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trade::MSG_RetWatchTradeItem_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RetWatchTradeItem_SC_trade_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_RetWatchTradeItem_SC_trade_2eproto}, {}};

static void InitDefaultsscc_info_TradeHistoryItem_trade_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trade::_TradeHistoryItem_default_instance_;
    new (ptr) ::trade::TradeHistoryItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trade::TradeHistoryItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TradeHistoryItem_trade_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TradeHistoryItem_trade_2eproto}, {
      &scc_info_TradeItemData_trade_2eproto.base,}};

static void InitDefaultsscc_info_TradeItem_trade_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trade::_TradeItem_default_instance_;
    new (ptr) ::trade::TradeItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trade::TradeItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TradeItem_trade_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TradeItem_trade_2eproto}, {
      &scc_info_TradeItemData_trade_2eproto.base,}};

static void InitDefaultsscc_info_TradeItemData_trade_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trade::_TradeItemData_default_instance_;
    new (ptr) ::trade::TradeItemData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trade::TradeItemData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TradeItemData_trade_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TradeItemData_trade_2eproto}, {
      &scc_info_t_Object_object_2eproto.base,
      &scc_info_Hero_hero_2eproto.base,}};

static void InitDefaultsscc_info_UserTradeItem_trade_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trade::_UserTradeItem_default_instance_;
    new (ptr) ::trade::UserTradeItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trade::UserTradeItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserTradeItem_trade_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UserTradeItem_trade_2eproto}, {
      &scc_info_TradeHistoryItem_trade_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_trade_2eproto[28];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_trade_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_trade_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_trade_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::trade::MSG_ReqSellStaff_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::trade::MSG_ReqSellStaff_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trade::MSG_ReqSellStaff_CS, itemtype_),
  PROTOBUF_FIELD_OFFSET(::trade::MSG_ReqSellStaff_CS, thisid_),
  PROTOBUF_FIELD_OFFSET(::trade::MSG_ReqSellStaff_CS, baseid_),
  PROTOBUF_FIELD_OFFSET(::trade::MSG_ReqSellStaff_CS, price_),
  PROTOBUF_FIELD_OFFSET(::trade::MSG_ReqSellStaff_CS, num_),
  1,
  0,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::trade::MSG_RetSellStaff_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::trade::MSG_RetSellStaff_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trade::MSG_RetSellStaff_SC, retcode_),
  0,
  PROTOBUF_FIELD_OFFSET(::trade::TradeItemData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::trade::TradeItemData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trade::TradeItemData, itemtype_),
  PROTOBUF_FIELD_OFFSET(::trade::TradeItemData, objdata_),
  PROTOBUF_FIELD_OFFSET(::trade::TradeItemData, herodata_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::trade::TradeItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::trade::TradeItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trade::TradeItem, thisid_),
  PROTOBUF_FIELD_OFFSET(::trade::TradeItem, price_),
  PROTOBUF_FIELD_OFFSET(::trade::TradeItem, selltime_),
  PROTOBUF_FIELD_OFFSET(::trade::TradeItem, data_),
  PROTOBUF_FIELD_OFFSET(::trade::TradeItem, isshow_),
  0,
  2,
  3,
  1,
  4,
  PROTOBUF_FIELD_OFFSET(::trade::MSG_ReqSellingStaff_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::trade::MSG_ReqSellingStaff_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trade::MSG_RetSellingStaff_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::trade::MSG_RetSellingStaff_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trade::MSG_RetSellingStaff_SC, itemlist_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::trade::MSG_ReqRecommandPrice_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::trade::MSG_ReqRecommandPrice_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trade::MSG_ReqRecommandPrice_CS, itemtype_),
  PROTOBUF_FIELD_OFFSET(::trade::MSG_ReqRecommandPrice_CS, baseid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::trade::MSG_RetRecommandPrice_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::trade::MSG_RetRecommandPrice_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trade::MSG_RetRecommandPrice_SC, itemtype_),
  PROTOBUF_FIELD_OFFSET(::trade::MSG_RetRecommandPrice_SC, baseid_),
  PROTOBUF_FIELD_OFFSET(::trade::MSG_RetRecommandPrice_SC, price_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::trade::MSG_ReqStopSellStaff_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::trade::MSG_ReqStopSellStaff_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trade::MSG_ReqStopSellStaff_CS, thisid_),
  0,
  PROTOBUF_FIELD_OFFSET(::trade::MSG_RetStopSellStaff_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::trade::MSG_RetStopSellStaff_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trade::MSG_RetStopSellStaff_SC, retcode_),
  0,
  PROTOBUF_FIELD_OFFSET(::trade::MSG_ReqSubSellingList_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::trade::MSG_ReqSubSellingList_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trade::MSG_ReqSubSellingList_CS, itemtype_),
  PROTOBUF_FIELD_OFFSET(::trade::MSG_ReqSubSellingList_CS, levelstar_),
  PROTOBUF_FIELD_OFFSET(::trade::MSG_ReqSubSellingList_CS, idlist_),
  PROTOBUF_FIELD_OFFSET(::trade::MSG_ReqSubSellingList_CS, checkshow_),
  0,
  1,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::trade::MSG_RetSubSellingList_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::trade::MSG_RetSubSellingList_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trade::MSG_RetSubSellingList_SC, totalpage_),
  0,
  PROTOBUF_FIELD_OFFSET(::trade::MSG_ReqBuyItem_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::trade::MSG_ReqBuyItem_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trade::MSG_ReqBuyItem_CS, itemtype_),
  PROTOBUF_FIELD_OFFSET(::trade::MSG_ReqBuyItem_CS, baseid_),
  PROTOBUF_FIELD_OFFSET(::trade::MSG_ReqBuyItem_CS, levelstar_),
  PROTOBUF_FIELD_OFFSET(::trade::MSG_ReqBuyItem_CS, num_),
  PROTOBUF_FIELD_OFFSET(::trade::MSG_ReqBuyItem_CS, thisid_),
  1,
  2,
  3,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::trade::MSG_RetBuyItem_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::trade::MSG_RetBuyItem_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trade::MSG_RetBuyItem_SC, retcode_),
  0,
  PROTOBUF_FIELD_OFFSET(::trade::MSG_ReqTradeItemHistory_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::trade::MSG_ReqTradeItemHistory_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trade::MSG_ReqTradeItemHistory_CS, itemtype_),
  PROTOBUF_FIELD_OFFSET(::trade::MSG_ReqTradeItemHistory_CS, baseid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::trade::TradeHistoryItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::trade::TradeHistoryItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trade::TradeHistoryItem, data_),
  PROTOBUF_FIELD_OFFSET(::trade::TradeHistoryItem, price_),
  PROTOBUF_FIELD_OFFSET(::trade::TradeHistoryItem, tradetime_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::trade::MSG_RetTradeItemHistory_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::trade::MSG_RetTradeItemHistory_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trade::MSG_RetTradeItemHistory_SC, item_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::trade::MSG_ReqSublistPage_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::trade::MSG_ReqSublistPage_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trade::MSG_ReqSublistPage_CS, page_),
  0,
  PROTOBUF_FIELD_OFFSET(::trade::MSG_RetSublistPage_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::trade::MSG_RetSublistPage_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trade::MSG_RetSublistPage_SC, item_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::trade::MSG_ReqWatchTradeItem_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::trade::MSG_ReqWatchTradeItem_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trade::MSG_ReqWatchTradeItem_CS, thisid_),
  PROTOBUF_FIELD_OFFSET(::trade::MSG_ReqWatchTradeItem_CS, ison_),
  PROTOBUF_FIELD_OFFSET(::trade::MSG_ReqWatchTradeItem_CS, isshow_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::trade::MSG_RetWatchTradeItem_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::trade::MSG_RetWatchTradeItem_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trade::MSG_RetWatchTradeItem_SC, retcode_),
  PROTOBUF_FIELD_OFFSET(::trade::MSG_RetWatchTradeItem_SC, thisid_),
  PROTOBUF_FIELD_OFFSET(::trade::MSG_RetWatchTradeItem_SC, ison_),
  PROTOBUF_FIELD_OFFSET(::trade::MSG_RetWatchTradeItem_SC, isshow_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::trade::MSG_ReqWatchList_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::trade::MSG_ReqWatchList_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trade::MSG_ReqWatchList_CS, isshow_),
  0,
  PROTOBUF_FIELD_OFFSET(::trade::MSG_RetWatchList_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::trade::MSG_RetWatchList_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trade::MSG_RetWatchList_SC, isshow_),
  PROTOBUF_FIELD_OFFSET(::trade::MSG_RetWatchList_SC, item_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::trade::MSG_ReqUserTradeHistory_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::trade::MSG_ReqUserTradeHistory_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trade::UserTradeItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::trade::UserTradeItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trade::UserTradeItem, op_),
  PROTOBUF_FIELD_OFFSET(::trade::UserTradeItem, item_),
  PROTOBUF_FIELD_OFFSET(::trade::UserTradeItem, judgeduetime_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::trade::MSG_RetUserTradeHistory_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::trade::MSG_RetUserTradeHistory_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trade::MSG_RetUserTradeHistory_SC, one_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::trade::MSG_ReqGetNewestStaff_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::trade::MSG_ReqGetNewestStaff_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trade::MSG_RetGetNewestStaff_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::trade::MSG_RetGetNewestStaff_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trade::MSG_RetGetNewestStaff_SC, itemlist_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::trade::MSG_ReqSellStaff_CS)},
  { 15, 21, sizeof(::trade::MSG_RetSellStaff_SC)},
  { 22, 30, sizeof(::trade::TradeItemData)},
  { 33, 43, sizeof(::trade::TradeItem)},
  { 48, 53, sizeof(::trade::MSG_ReqSellingStaff_CS)},
  { 53, 59, sizeof(::trade::MSG_RetSellingStaff_SC)},
  { 60, 67, sizeof(::trade::MSG_ReqRecommandPrice_CS)},
  { 69, 77, sizeof(::trade::MSG_RetRecommandPrice_SC)},
  { 80, 86, sizeof(::trade::MSG_ReqStopSellStaff_CS)},
  { 87, 93, sizeof(::trade::MSG_RetStopSellStaff_SC)},
  { 94, 103, sizeof(::trade::MSG_ReqSubSellingList_CS)},
  { 107, 113, sizeof(::trade::MSG_RetSubSellingList_SC)},
  { 114, 124, sizeof(::trade::MSG_ReqBuyItem_CS)},
  { 129, 135, sizeof(::trade::MSG_RetBuyItem_SC)},
  { 136, 143, sizeof(::trade::MSG_ReqTradeItemHistory_CS)},
  { 145, 153, sizeof(::trade::TradeHistoryItem)},
  { 156, 162, sizeof(::trade::MSG_RetTradeItemHistory_SC)},
  { 163, 169, sizeof(::trade::MSG_ReqSublistPage_CS)},
  { 170, 176, sizeof(::trade::MSG_RetSublistPage_SC)},
  { 177, 185, sizeof(::trade::MSG_ReqWatchTradeItem_CS)},
  { 188, 197, sizeof(::trade::MSG_RetWatchTradeItem_SC)},
  { 201, 207, sizeof(::trade::MSG_ReqWatchList_CS)},
  { 208, 215, sizeof(::trade::MSG_RetWatchList_SC)},
  { 217, 222, sizeof(::trade::MSG_ReqUserTradeHistory_CS)},
  { 222, 230, sizeof(::trade::UserTradeItem)},
  { 233, 239, sizeof(::trade::MSG_RetUserTradeHistory_SC)},
  { 240, 245, sizeof(::trade::MSG_ReqGetNewestStaff_CS)},
  { 245, 251, sizeof(::trade::MSG_RetGetNewestStaff_SC)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::_MSG_ReqSellStaff_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::_MSG_RetSellStaff_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::_TradeItemData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::_TradeItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::_MSG_ReqSellingStaff_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::_MSG_RetSellingStaff_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::_MSG_ReqRecommandPrice_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::_MSG_RetRecommandPrice_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::_MSG_ReqStopSellStaff_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::_MSG_RetStopSellStaff_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::_MSG_ReqSubSellingList_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::_MSG_RetSubSellingList_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::_MSG_ReqBuyItem_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::_MSG_RetBuyItem_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::_MSG_ReqTradeItemHistory_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::_TradeHistoryItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::_MSG_RetTradeItemHistory_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::_MSG_ReqSublistPage_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::_MSG_RetSublistPage_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::_MSG_ReqWatchTradeItem_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::_MSG_RetWatchTradeItem_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::_MSG_ReqWatchList_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::_MSG_RetWatchList_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::_MSG_ReqUserTradeHistory_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::_UserTradeItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::_MSG_RetUserTradeHistory_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::_MSG_ReqGetNewestStaff_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::_MSG_RetGetNewestStaff_SC_default_instance_),
};

const char descriptor_table_protodef_trade_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013trade.proto\022\005trade\032\016msg_enum.proto\032\014ob"
  "ject.proto\032\nhero.proto\"r\n\023MSG_ReqSellSta"
  "ff_CS\022\037\n\010itemtype\030\001 \002(\0162\r.msg.SELLTYPE\022\016"
  "\n\006thisid\030\002 \001(\t\022\016\n\006baseid\030\003 \001(\r\022\r\n\005price\030"
  "\004 \001(\r\022\013\n\003num\030\005 \001(\r\"&\n\023MSG_RetSellStaff_S"
  "C\022\017\n\007retcode\030\001 \001(\r\"n\n\rTradeItemData\022\037\n\010i"
  "temtype\030\001 \002(\0162\r.msg.SELLTYPE\022\036\n\007objdata\030"
  "\002 \001(\0132\r.Obj.t_Object\022\034\n\010herodata\030\003 \001(\0132\n"
  ".hero.Hero\"p\n\tTradeItem\022\016\n\006thisid\030\001 \001(\t\022"
  "\r\n\005price\030\002 \001(\r\022\020\n\010selltime\030\003 \001(\r\022\"\n\004data"
  "\030\004 \001(\0132\024.trade.TradeItemData\022\016\n\006isshow\030\005"
  " \001(\010\"\030\n\026MSG_ReqSellingStaff_CS\"<\n\026MSG_Re"
  "tSellingStaff_SC\022\"\n\010itemlist\030\001 \003(\0132\020.tra"
  "de.TradeItem\"K\n\030MSG_ReqRecommandPrice_CS"
  "\022\037\n\010itemtype\030\001 \002(\0162\r.msg.SELLTYPE\022\016\n\006bas"
  "eid\030\002 \001(\r\"Z\n\030MSG_RetRecommandPrice_SC\022\037\n"
  "\010itemtype\030\001 \002(\0162\r.msg.SELLTYPE\022\016\n\006baseid"
  "\030\002 \001(\r\022\r\n\005price\030\003 \001(\r\")\n\027MSG_ReqStopSell"
  "Staff_CS\022\016\n\006thisid\030\001 \001(\t\"*\n\027MSG_RetStopS"
  "ellStaff_SC\022\017\n\007retcode\030\001 \001(\r\"q\n\030MSG_ReqS"
  "ubSellingList_CS\022\037\n\010itemtype\030\001 \002(\0162\r.msg"
  ".SELLTYPE\022\021\n\tlevelstar\030\002 \001(\r\022\016\n\006idlist\030\003"
  " \003(\r\022\021\n\tcheckshow\030\004 \001(\010\"-\n\030MSG_RetSubSel"
  "lingList_SC\022\021\n\ttotalpage\030\001 \001(\r\"t\n\021MSG_Re"
  "qBuyItem_CS\022\037\n\010itemtype\030\001 \002(\0162\r.msg.SELL"
  "TYPE\022\016\n\006baseid\030\002 \001(\r\022\021\n\tlevelstar\030\003 \001(\r\022"
  "\013\n\003num\030\004 \001(\r\022\016\n\006thisid\030\005 \001(\t\"$\n\021MSG_RetB"
  "uyItem_SC\022\017\n\007retcode\030\001 \001(\r\"M\n\032MSG_ReqTra"
  "deItemHistory_CS\022\037\n\010itemtype\030\001 \002(\0162\r.msg"
  ".SELLTYPE\022\016\n\006baseid\030\002 \001(\r\"X\n\020TradeHistor"
  "yItem\022\"\n\004data\030\001 \001(\0132\024.trade.TradeItemDat"
  "a\022\r\n\005price\030\002 \001(\r\022\021\n\ttradetime\030\003 \001(\r\"C\n\032M"
  "SG_RetTradeItemHistory_SC\022%\n\004item\030\001 \003(\0132"
  "\027.trade.TradeHistoryItem\"%\n\025MSG_ReqSubli"
  "stPage_CS\022\014\n\004page\030\001 \001(\r\"7\n\025MSG_RetSublis"
  "tPage_SC\022\036\n\004item\030\001 \003(\0132\020.trade.TradeItem"
  "\"H\n\030MSG_ReqWatchTradeItem_CS\022\016\n\006thisid\030\001"
  " \001(\t\022\014\n\004ison\030\002 \001(\010\022\016\n\006isshow\030\003 \001(\010\"Y\n\030MS"
  "G_RetWatchTradeItem_SC\022\017\n\007retcode\030\001 \001(\r\022"
  "\016\n\006thisid\030\002 \001(\t\022\014\n\004ison\030\003 \001(\010\022\016\n\006isshow\030"
  "\004 \001(\010\"%\n\023MSG_ReqWatchList_CS\022\016\n\006isshow\030\001"
  " \001(\010\"E\n\023MSG_RetWatchList_SC\022\016\n\006isshow\030\001 "
  "\001(\010\022\036\n\004item\030\002 \003(\0132\020.trade.TradeItem\"\034\n\032M"
  "SG_ReqUserTradeHistory_CS\"h\n\rUserTradeIt"
  "em\022\032\n\002op\030\001 \001(\0162\016.trade.TradeOP\022%\n\004item\030\002"
  " \001(\0132\027.trade.TradeHistoryItem\022\024\n\014judgedu"
  "etime\030\003 \001(\r\"\?\n\032MSG_RetUserTradeHistory_S"
  "C\022!\n\003one\030\001 \003(\0132\024.trade.UserTradeItem\"\032\n\030"
  "MSG_ReqGetNewestStaff_CS\">\n\030MSG_RetGetNe"
  "westStaff_SC\022\"\n\010itemlist\030\001 \003(\0132\020.trade.T"
  "radeItem*\034\n\007TradeOP\022\010\n\004SELL\020\001\022\007\n\003BUY\020\002"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_trade_2eproto_deps[3] = {
  &::descriptor_table_hero_2eproto,
  &::descriptor_table_msg_5fenum_2eproto,
  &::descriptor_table_object_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_trade_2eproto_sccs[28] = {
  &scc_info_MSG_ReqBuyItem_CS_trade_2eproto.base,
  &scc_info_MSG_ReqGetNewestStaff_CS_trade_2eproto.base,
  &scc_info_MSG_ReqRecommandPrice_CS_trade_2eproto.base,
  &scc_info_MSG_ReqSellStaff_CS_trade_2eproto.base,
  &scc_info_MSG_ReqSellingStaff_CS_trade_2eproto.base,
  &scc_info_MSG_ReqStopSellStaff_CS_trade_2eproto.base,
  &scc_info_MSG_ReqSubSellingList_CS_trade_2eproto.base,
  &scc_info_MSG_ReqSublistPage_CS_trade_2eproto.base,
  &scc_info_MSG_ReqTradeItemHistory_CS_trade_2eproto.base,
  &scc_info_MSG_ReqUserTradeHistory_CS_trade_2eproto.base,
  &scc_info_MSG_ReqWatchList_CS_trade_2eproto.base,
  &scc_info_MSG_ReqWatchTradeItem_CS_trade_2eproto.base,
  &scc_info_MSG_RetBuyItem_SC_trade_2eproto.base,
  &scc_info_MSG_RetGetNewestStaff_SC_trade_2eproto.base,
  &scc_info_MSG_RetRecommandPrice_SC_trade_2eproto.base,
  &scc_info_MSG_RetSellStaff_SC_trade_2eproto.base,
  &scc_info_MSG_RetSellingStaff_SC_trade_2eproto.base,
  &scc_info_MSG_RetStopSellStaff_SC_trade_2eproto.base,
  &scc_info_MSG_RetSubSellingList_SC_trade_2eproto.base,
  &scc_info_MSG_RetSublistPage_SC_trade_2eproto.base,
  &scc_info_MSG_RetTradeItemHistory_SC_trade_2eproto.base,
  &scc_info_MSG_RetUserTradeHistory_SC_trade_2eproto.base,
  &scc_info_MSG_RetWatchList_SC_trade_2eproto.base,
  &scc_info_MSG_RetWatchTradeItem_SC_trade_2eproto.base,
  &scc_info_TradeHistoryItem_trade_2eproto.base,
  &scc_info_TradeItem_trade_2eproto.base,
  &scc_info_TradeItemData_trade_2eproto.base,
  &scc_info_UserTradeItem_trade_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_trade_2eproto_once;
static bool descriptor_table_trade_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_trade_2eproto = {
  &descriptor_table_trade_2eproto_initialized, descriptor_table_protodef_trade_2eproto, "trade.proto", 2038,
  &descriptor_table_trade_2eproto_once, descriptor_table_trade_2eproto_sccs, descriptor_table_trade_2eproto_deps, 28, 3,
  schemas, file_default_instances, TableStruct_trade_2eproto::offsets,
  file_level_metadata_trade_2eproto, 28, file_level_enum_descriptors_trade_2eproto, file_level_service_descriptors_trade_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_trade_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_trade_2eproto)), true);
namespace trade {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TradeOP_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_trade_2eproto);
  return file_level_enum_descriptors_trade_2eproto[0];
}
bool TradeOP_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void MSG_ReqSellStaff_CS::InitAsDefaultInstance() {
}
class MSG_ReqSellStaff_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqSellStaff_CS>()._has_bits_);
  static void set_has_itemtype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_thisid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_baseid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_price(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_num(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

MSG_ReqSellStaff_CS::MSG_ReqSellStaff_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:trade.MSG_ReqSellStaff_CS)
}
MSG_ReqSellStaff_CS::MSG_ReqSellStaff_CS(const MSG_ReqSellStaff_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  thisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_thisid()) {
    thisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thisid_);
  }
  ::memcpy(&itemtype_, &from.itemtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&itemtype_)) + sizeof(num_));
  // @@protoc_insertion_point(copy_constructor:trade.MSG_ReqSellStaff_CS)
}

void MSG_ReqSellStaff_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_ReqSellStaff_CS_trade_2eproto.base);
  thisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&itemtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&itemtype_)) + sizeof(num_));
}

MSG_ReqSellStaff_CS::~MSG_ReqSellStaff_CS() {
  // @@protoc_insertion_point(destructor:trade.MSG_ReqSellStaff_CS)
  SharedDtor();
}

void MSG_ReqSellStaff_CS::SharedDtor() {
  thisid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_ReqSellStaff_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqSellStaff_CS& MSG_ReqSellStaff_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqSellStaff_CS_trade_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqSellStaff_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.MSG_ReqSellStaff_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    thisid_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&itemtype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_) -
        reinterpret_cast<char*>(&itemtype_)) + sizeof(num_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqSellStaff_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .msg.SELLTYPE itemtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::msg::SELLTYPE_IsValid(val))) {
            _internal_set_itemtype(static_cast<::msg::SELLTYPE>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string thisid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_thisid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "trade.MSG_ReqSellStaff_CS.thisid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 baseid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_baseid(&has_bits);
          baseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 price = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_price(&has_bits);
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_num(&has_bits);
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqSellStaff_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.MSG_ReqSellStaff_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .msg.SELLTYPE itemtype = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_itemtype(), target);
  }

  // optional string thisid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_thisid().data(), static_cast<int>(this->_internal_thisid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "trade.MSG_ReqSellStaff_CS.thisid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_thisid(), target);
  }

  // optional uint32 baseid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_baseid(), target);
  }

  // optional uint32 price = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_price(), target);
  }

  // optional uint32 num = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.MSG_ReqSellStaff_CS)
  return target;
}

size_t MSG_ReqSellStaff_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.MSG_ReqSellStaff_CS)
  size_t total_size = 0;

  // required .msg.SELLTYPE itemtype = 1;
  if (_internal_has_itemtype()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_itemtype());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string thisid = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_thisid());
  }

  if (cached_has_bits & 0x0000001cu) {
    // optional uint32 baseid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_baseid());
    }

    // optional uint32 price = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_price());
    }

    // optional uint32 num = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqSellStaff_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.MSG_ReqSellStaff_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqSellStaff_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqSellStaff_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.MSG_ReqSellStaff_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.MSG_ReqSellStaff_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqSellStaff_CS::MergeFrom(const MSG_ReqSellStaff_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.MSG_ReqSellStaff_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      thisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thisid_);
    }
    if (cached_has_bits & 0x00000002u) {
      itemtype_ = from.itemtype_;
    }
    if (cached_has_bits & 0x00000004u) {
      baseid_ = from.baseid_;
    }
    if (cached_has_bits & 0x00000008u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000010u) {
      num_ = from.num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_ReqSellStaff_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.MSG_ReqSellStaff_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqSellStaff_CS::CopyFrom(const MSG_ReqSellStaff_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.MSG_ReqSellStaff_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqSellStaff_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void MSG_ReqSellStaff_CS::InternalSwap(MSG_ReqSellStaff_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  thisid_.Swap(&other->thisid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(itemtype_, other->itemtype_);
  swap(baseid_, other->baseid_);
  swap(price_, other->price_);
  swap(num_, other->num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqSellStaff_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetSellStaff_SC::InitAsDefaultInstance() {
}
class MSG_RetSellStaff_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetSellStaff_SC>()._has_bits_);
  static void set_has_retcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_RetSellStaff_SC::MSG_RetSellStaff_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:trade.MSG_RetSellStaff_SC)
}
MSG_RetSellStaff_SC::MSG_RetSellStaff_SC(const MSG_RetSellStaff_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:trade.MSG_RetSellStaff_SC)
}

void MSG_RetSellStaff_SC::SharedCtor() {
  retcode_ = 0u;
}

MSG_RetSellStaff_SC::~MSG_RetSellStaff_SC() {
  // @@protoc_insertion_point(destructor:trade.MSG_RetSellStaff_SC)
  SharedDtor();
}

void MSG_RetSellStaff_SC::SharedDtor() {
}

void MSG_RetSellStaff_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetSellStaff_SC& MSG_RetSellStaff_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetSellStaff_SC_trade_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetSellStaff_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.MSG_RetSellStaff_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetSellStaff_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 retcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_retcode(&has_bits);
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetSellStaff_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.MSG_RetSellStaff_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 retcode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.MSG_RetSellStaff_SC)
  return target;
}

size_t MSG_RetSellStaff_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.MSG_RetSellStaff_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 retcode = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetSellStaff_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.MSG_RetSellStaff_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetSellStaff_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetSellStaff_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.MSG_RetSellStaff_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.MSG_RetSellStaff_SC)
    MergeFrom(*source);
  }
}

void MSG_RetSellStaff_SC::MergeFrom(const MSG_RetSellStaff_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.MSG_RetSellStaff_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_retcode()) {
    _internal_set_retcode(from._internal_retcode());
  }
}

void MSG_RetSellStaff_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.MSG_RetSellStaff_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetSellStaff_SC::CopyFrom(const MSG_RetSellStaff_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.MSG_RetSellStaff_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetSellStaff_SC::IsInitialized() const {
  return true;
}

void MSG_RetSellStaff_SC::InternalSwap(MSG_RetSellStaff_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(retcode_, other->retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetSellStaff_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TradeItemData::InitAsDefaultInstance() {
  ::trade::_TradeItemData_default_instance_._instance.get_mutable()->objdata_ = const_cast< ::Obj::t_Object*>(
      ::Obj::t_Object::internal_default_instance());
  ::trade::_TradeItemData_default_instance_._instance.get_mutable()->herodata_ = const_cast< ::hero::Hero*>(
      ::hero::Hero::internal_default_instance());
}
class TradeItemData::_Internal {
 public:
  using HasBits = decltype(std::declval<TradeItemData>()._has_bits_);
  static void set_has_itemtype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::Obj::t_Object& objdata(const TradeItemData* msg);
  static void set_has_objdata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::hero::Hero& herodata(const TradeItemData* msg);
  static void set_has_herodata(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::Obj::t_Object&
TradeItemData::_Internal::objdata(const TradeItemData* msg) {
  return *msg->objdata_;
}
const ::hero::Hero&
TradeItemData::_Internal::herodata(const TradeItemData* msg) {
  return *msg->herodata_;
}
void TradeItemData::clear_objdata() {
  if (objdata_ != nullptr) objdata_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void TradeItemData::clear_herodata() {
  if (herodata_ != nullptr) herodata_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
TradeItemData::TradeItemData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:trade.TradeItemData)
}
TradeItemData::TradeItemData(const TradeItemData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_objdata()) {
    objdata_ = new ::Obj::t_Object(*from.objdata_);
  } else {
    objdata_ = nullptr;
  }
  if (from._internal_has_herodata()) {
    herodata_ = new ::hero::Hero(*from.herodata_);
  } else {
    herodata_ = nullptr;
  }
  itemtype_ = from.itemtype_;
  // @@protoc_insertion_point(copy_constructor:trade.TradeItemData)
}

void TradeItemData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TradeItemData_trade_2eproto.base);
  ::memset(&objdata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&itemtype_) -
      reinterpret_cast<char*>(&objdata_)) + sizeof(itemtype_));
}

TradeItemData::~TradeItemData() {
  // @@protoc_insertion_point(destructor:trade.TradeItemData)
  SharedDtor();
}

void TradeItemData::SharedDtor() {
  if (this != internal_default_instance()) delete objdata_;
  if (this != internal_default_instance()) delete herodata_;
}

void TradeItemData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TradeItemData& TradeItemData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TradeItemData_trade_2eproto.base);
  return *internal_default_instance();
}


void TradeItemData::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.TradeItemData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(objdata_ != nullptr);
      objdata_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(herodata_ != nullptr);
      herodata_->Clear();
    }
  }
  itemtype_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TradeItemData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .msg.SELLTYPE itemtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::msg::SELLTYPE_IsValid(val))) {
            _internal_set_itemtype(static_cast<::msg::SELLTYPE>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .Obj.t_Object objdata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_objdata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hero.Hero herodata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_herodata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TradeItemData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.TradeItemData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .msg.SELLTYPE itemtype = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_itemtype(), target);
  }

  // optional .Obj.t_Object objdata = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::objdata(this), target, stream);
  }

  // optional .hero.Hero herodata = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::herodata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.TradeItemData)
  return target;
}

size_t TradeItemData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.TradeItemData)
  size_t total_size = 0;

  // required .msg.SELLTYPE itemtype = 1;
  if (_internal_has_itemtype()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_itemtype());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .Obj.t_Object objdata = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *objdata_);
    }

    // optional .hero.Hero herodata = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *herodata_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradeItemData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.TradeItemData)
  GOOGLE_DCHECK_NE(&from, this);
  const TradeItemData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TradeItemData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.TradeItemData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.TradeItemData)
    MergeFrom(*source);
  }
}

void TradeItemData::MergeFrom(const TradeItemData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.TradeItemData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_objdata()->::Obj::t_Object::MergeFrom(from._internal_objdata());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_herodata()->::hero::Hero::MergeFrom(from._internal_herodata());
    }
    if (cached_has_bits & 0x00000004u) {
      itemtype_ = from.itemtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TradeItemData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.TradeItemData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeItemData::CopyFrom(const TradeItemData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.TradeItemData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeItemData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  return true;
}

void TradeItemData::InternalSwap(TradeItemData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(objdata_, other->objdata_);
  swap(herodata_, other->herodata_);
  swap(itemtype_, other->itemtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TradeItemData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TradeItem::InitAsDefaultInstance() {
  ::trade::_TradeItem_default_instance_._instance.get_mutable()->data_ = const_cast< ::trade::TradeItemData*>(
      ::trade::TradeItemData::internal_default_instance());
}
class TradeItem::_Internal {
 public:
  using HasBits = decltype(std::declval<TradeItem>()._has_bits_);
  static void set_has_thisid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_price(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_selltime(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::trade::TradeItemData& data(const TradeItem* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_isshow(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::trade::TradeItemData&
TradeItem::_Internal::data(const TradeItem* msg) {
  return *msg->data_;
}
TradeItem::TradeItem()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:trade.TradeItem)
}
TradeItem::TradeItem(const TradeItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  thisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_thisid()) {
    thisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thisid_);
  }
  if (from._internal_has_data()) {
    data_ = new ::trade::TradeItemData(*from.data_);
  } else {
    data_ = nullptr;
  }
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&isshow_) -
    reinterpret_cast<char*>(&price_)) + sizeof(isshow_));
  // @@protoc_insertion_point(copy_constructor:trade.TradeItem)
}

void TradeItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TradeItem_trade_2eproto.base);
  thisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isshow_) -
      reinterpret_cast<char*>(&data_)) + sizeof(isshow_));
}

TradeItem::~TradeItem() {
  // @@protoc_insertion_point(destructor:trade.TradeItem)
  SharedDtor();
}

void TradeItem::SharedDtor() {
  thisid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
}

void TradeItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TradeItem& TradeItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TradeItem_trade_2eproto.base);
  return *internal_default_instance();
}


void TradeItem::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.TradeItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      thisid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(data_ != nullptr);
      data_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&price_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&isshow_) -
        reinterpret_cast<char*>(&price_)) + sizeof(isshow_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TradeItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string thisid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_thisid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "trade.TradeItem.thisid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 price = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_price(&has_bits);
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 selltime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_selltime(&has_bits);
          selltime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .trade.TradeItemData data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isshow = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_isshow(&has_bits);
          isshow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TradeItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.TradeItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string thisid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_thisid().data(), static_cast<int>(this->_internal_thisid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "trade.TradeItem.thisid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_thisid(), target);
  }

  // optional uint32 price = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_price(), target);
  }

  // optional uint32 selltime = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_selltime(), target);
  }

  // optional .trade.TradeItemData data = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::data(this), target, stream);
  }

  // optional bool isshow = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_isshow(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.TradeItem)
  return target;
}

size_t TradeItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.TradeItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string thisid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_thisid());
    }

    // optional .trade.TradeItemData data = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_);
    }

    // optional uint32 price = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_price());
    }

    // optional uint32 selltime = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_selltime());
    }

    // optional bool isshow = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradeItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.TradeItem)
  GOOGLE_DCHECK_NE(&from, this);
  const TradeItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TradeItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.TradeItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.TradeItem)
    MergeFrom(*source);
  }
}

void TradeItem::MergeFrom(const TradeItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.TradeItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      thisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thisid_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_data()->::trade::TradeItemData::MergeFrom(from._internal_data());
    }
    if (cached_has_bits & 0x00000004u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000008u) {
      selltime_ = from.selltime_;
    }
    if (cached_has_bits & 0x00000010u) {
      isshow_ = from.isshow_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TradeItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.TradeItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeItem::CopyFrom(const TradeItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.TradeItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeItem::IsInitialized() const {
  if (_internal_has_data()) {
    if (!data_->IsInitialized()) return false;
  }
  return true;
}

void TradeItem::InternalSwap(TradeItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  thisid_.Swap(&other->thisid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(data_, other->data_);
  swap(price_, other->price_);
  swap(selltime_, other->selltime_);
  swap(isshow_, other->isshow_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TradeItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqSellingStaff_CS::InitAsDefaultInstance() {
}
class MSG_ReqSellingStaff_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqSellingStaff_CS>()._has_bits_);
};

MSG_ReqSellingStaff_CS::MSG_ReqSellingStaff_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:trade.MSG_ReqSellingStaff_CS)
}
MSG_ReqSellingStaff_CS::MSG_ReqSellingStaff_CS(const MSG_ReqSellingStaff_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:trade.MSG_ReqSellingStaff_CS)
}

void MSG_ReqSellingStaff_CS::SharedCtor() {
}

MSG_ReqSellingStaff_CS::~MSG_ReqSellingStaff_CS() {
  // @@protoc_insertion_point(destructor:trade.MSG_ReqSellingStaff_CS)
  SharedDtor();
}

void MSG_ReqSellingStaff_CS::SharedDtor() {
}

void MSG_ReqSellingStaff_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqSellingStaff_CS& MSG_ReqSellingStaff_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqSellingStaff_CS_trade_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqSellingStaff_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.MSG_ReqSellingStaff_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqSellingStaff_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqSellingStaff_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.MSG_ReqSellingStaff_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.MSG_ReqSellingStaff_CS)
  return target;
}

size_t MSG_ReqSellingStaff_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.MSG_ReqSellingStaff_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqSellingStaff_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.MSG_ReqSellingStaff_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqSellingStaff_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqSellingStaff_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.MSG_ReqSellingStaff_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.MSG_ReqSellingStaff_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqSellingStaff_CS::MergeFrom(const MSG_ReqSellingStaff_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.MSG_ReqSellingStaff_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_ReqSellingStaff_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.MSG_ReqSellingStaff_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqSellingStaff_CS::CopyFrom(const MSG_ReqSellingStaff_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.MSG_ReqSellingStaff_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqSellingStaff_CS::IsInitialized() const {
  return true;
}

void MSG_ReqSellingStaff_CS::InternalSwap(MSG_ReqSellingStaff_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqSellingStaff_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetSellingStaff_SC::InitAsDefaultInstance() {
}
class MSG_RetSellingStaff_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetSellingStaff_SC>()._has_bits_);
};

MSG_RetSellingStaff_SC::MSG_RetSellingStaff_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:trade.MSG_RetSellingStaff_SC)
}
MSG_RetSellingStaff_SC::MSG_RetSellingStaff_SC(const MSG_RetSellingStaff_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      itemlist_(from.itemlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:trade.MSG_RetSellingStaff_SC)
}

void MSG_RetSellingStaff_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_RetSellingStaff_SC_trade_2eproto.base);
}

MSG_RetSellingStaff_SC::~MSG_RetSellingStaff_SC() {
  // @@protoc_insertion_point(destructor:trade.MSG_RetSellingStaff_SC)
  SharedDtor();
}

void MSG_RetSellingStaff_SC::SharedDtor() {
}

void MSG_RetSellingStaff_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetSellingStaff_SC& MSG_RetSellingStaff_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetSellingStaff_SC_trade_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetSellingStaff_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.MSG_RetSellingStaff_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  itemlist_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetSellingStaff_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .trade.TradeItem itemlist = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_itemlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetSellingStaff_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.MSG_RetSellingStaff_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .trade.TradeItem itemlist = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_itemlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_itemlist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.MSG_RetSellingStaff_SC)
  return target;
}

size_t MSG_RetSellingStaff_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.MSG_RetSellingStaff_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .trade.TradeItem itemlist = 1;
  total_size += 1UL * this->_internal_itemlist_size();
  for (const auto& msg : this->itemlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetSellingStaff_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.MSG_RetSellingStaff_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetSellingStaff_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetSellingStaff_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.MSG_RetSellingStaff_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.MSG_RetSellingStaff_SC)
    MergeFrom(*source);
  }
}

void MSG_RetSellingStaff_SC::MergeFrom(const MSG_RetSellingStaff_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.MSG_RetSellingStaff_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  itemlist_.MergeFrom(from.itemlist_);
}

void MSG_RetSellingStaff_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.MSG_RetSellingStaff_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetSellingStaff_SC::CopyFrom(const MSG_RetSellingStaff_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.MSG_RetSellingStaff_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetSellingStaff_SC::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(itemlist_)) return false;
  return true;
}

void MSG_RetSellingStaff_SC::InternalSwap(MSG_RetSellingStaff_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  itemlist_.InternalSwap(&other->itemlist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetSellingStaff_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqRecommandPrice_CS::InitAsDefaultInstance() {
}
class MSG_ReqRecommandPrice_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqRecommandPrice_CS>()._has_bits_);
  static void set_has_itemtype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_baseid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_ReqRecommandPrice_CS::MSG_ReqRecommandPrice_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:trade.MSG_ReqRecommandPrice_CS)
}
MSG_ReqRecommandPrice_CS::MSG_ReqRecommandPrice_CS(const MSG_ReqRecommandPrice_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&itemtype_, &from.itemtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&baseid_) -
    reinterpret_cast<char*>(&itemtype_)) + sizeof(baseid_));
  // @@protoc_insertion_point(copy_constructor:trade.MSG_ReqRecommandPrice_CS)
}

void MSG_ReqRecommandPrice_CS::SharedCtor() {
  ::memset(&itemtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&baseid_) -
      reinterpret_cast<char*>(&itemtype_)) + sizeof(baseid_));
}

MSG_ReqRecommandPrice_CS::~MSG_ReqRecommandPrice_CS() {
  // @@protoc_insertion_point(destructor:trade.MSG_ReqRecommandPrice_CS)
  SharedDtor();
}

void MSG_ReqRecommandPrice_CS::SharedDtor() {
}

void MSG_ReqRecommandPrice_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqRecommandPrice_CS& MSG_ReqRecommandPrice_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqRecommandPrice_CS_trade_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqRecommandPrice_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.MSG_ReqRecommandPrice_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&itemtype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&baseid_) -
        reinterpret_cast<char*>(&itemtype_)) + sizeof(baseid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqRecommandPrice_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .msg.SELLTYPE itemtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::msg::SELLTYPE_IsValid(val))) {
            _internal_set_itemtype(static_cast<::msg::SELLTYPE>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 baseid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_baseid(&has_bits);
          baseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqRecommandPrice_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.MSG_ReqRecommandPrice_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .msg.SELLTYPE itemtype = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_itemtype(), target);
  }

  // optional uint32 baseid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_baseid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.MSG_ReqRecommandPrice_CS)
  return target;
}

size_t MSG_ReqRecommandPrice_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.MSG_ReqRecommandPrice_CS)
  size_t total_size = 0;

  // required .msg.SELLTYPE itemtype = 1;
  if (_internal_has_itemtype()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_itemtype());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 baseid = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_baseid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqRecommandPrice_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.MSG_ReqRecommandPrice_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqRecommandPrice_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqRecommandPrice_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.MSG_ReqRecommandPrice_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.MSG_ReqRecommandPrice_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqRecommandPrice_CS::MergeFrom(const MSG_ReqRecommandPrice_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.MSG_ReqRecommandPrice_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      itemtype_ = from.itemtype_;
    }
    if (cached_has_bits & 0x00000002u) {
      baseid_ = from.baseid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_ReqRecommandPrice_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.MSG_ReqRecommandPrice_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqRecommandPrice_CS::CopyFrom(const MSG_ReqRecommandPrice_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.MSG_ReqRecommandPrice_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqRecommandPrice_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MSG_ReqRecommandPrice_CS::InternalSwap(MSG_ReqRecommandPrice_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(itemtype_, other->itemtype_);
  swap(baseid_, other->baseid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqRecommandPrice_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetRecommandPrice_SC::InitAsDefaultInstance() {
}
class MSG_RetRecommandPrice_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetRecommandPrice_SC>()._has_bits_);
  static void set_has_itemtype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_baseid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_price(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MSG_RetRecommandPrice_SC::MSG_RetRecommandPrice_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:trade.MSG_RetRecommandPrice_SC)
}
MSG_RetRecommandPrice_SC::MSG_RetRecommandPrice_SC(const MSG_RetRecommandPrice_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&itemtype_, &from.itemtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&price_) -
    reinterpret_cast<char*>(&itemtype_)) + sizeof(price_));
  // @@protoc_insertion_point(copy_constructor:trade.MSG_RetRecommandPrice_SC)
}

void MSG_RetRecommandPrice_SC::SharedCtor() {
  ::memset(&itemtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&price_) -
      reinterpret_cast<char*>(&itemtype_)) + sizeof(price_));
}

MSG_RetRecommandPrice_SC::~MSG_RetRecommandPrice_SC() {
  // @@protoc_insertion_point(destructor:trade.MSG_RetRecommandPrice_SC)
  SharedDtor();
}

void MSG_RetRecommandPrice_SC::SharedDtor() {
}

void MSG_RetRecommandPrice_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetRecommandPrice_SC& MSG_RetRecommandPrice_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetRecommandPrice_SC_trade_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetRecommandPrice_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.MSG_RetRecommandPrice_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&itemtype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&price_) -
        reinterpret_cast<char*>(&itemtype_)) + sizeof(price_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetRecommandPrice_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .msg.SELLTYPE itemtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::msg::SELLTYPE_IsValid(val))) {
            _internal_set_itemtype(static_cast<::msg::SELLTYPE>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 baseid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_baseid(&has_bits);
          baseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 price = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_price(&has_bits);
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetRecommandPrice_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.MSG_RetRecommandPrice_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .msg.SELLTYPE itemtype = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_itemtype(), target);
  }

  // optional uint32 baseid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_baseid(), target);
  }

  // optional uint32 price = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_price(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.MSG_RetRecommandPrice_SC)
  return target;
}

size_t MSG_RetRecommandPrice_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.MSG_RetRecommandPrice_SC)
  size_t total_size = 0;

  // required .msg.SELLTYPE itemtype = 1;
  if (_internal_has_itemtype()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_itemtype());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional uint32 baseid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_baseid());
    }

    // optional uint32 price = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_price());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetRecommandPrice_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.MSG_RetRecommandPrice_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetRecommandPrice_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetRecommandPrice_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.MSG_RetRecommandPrice_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.MSG_RetRecommandPrice_SC)
    MergeFrom(*source);
  }
}

void MSG_RetRecommandPrice_SC::MergeFrom(const MSG_RetRecommandPrice_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.MSG_RetRecommandPrice_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      itemtype_ = from.itemtype_;
    }
    if (cached_has_bits & 0x00000002u) {
      baseid_ = from.baseid_;
    }
    if (cached_has_bits & 0x00000004u) {
      price_ = from.price_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_RetRecommandPrice_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.MSG_RetRecommandPrice_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetRecommandPrice_SC::CopyFrom(const MSG_RetRecommandPrice_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.MSG_RetRecommandPrice_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetRecommandPrice_SC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MSG_RetRecommandPrice_SC::InternalSwap(MSG_RetRecommandPrice_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(itemtype_, other->itemtype_);
  swap(baseid_, other->baseid_);
  swap(price_, other->price_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetRecommandPrice_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqStopSellStaff_CS::InitAsDefaultInstance() {
}
class MSG_ReqStopSellStaff_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqStopSellStaff_CS>()._has_bits_);
  static void set_has_thisid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_ReqStopSellStaff_CS::MSG_ReqStopSellStaff_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:trade.MSG_ReqStopSellStaff_CS)
}
MSG_ReqStopSellStaff_CS::MSG_ReqStopSellStaff_CS(const MSG_ReqStopSellStaff_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  thisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_thisid()) {
    thisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thisid_);
  }
  // @@protoc_insertion_point(copy_constructor:trade.MSG_ReqStopSellStaff_CS)
}

void MSG_ReqStopSellStaff_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_ReqStopSellStaff_CS_trade_2eproto.base);
  thisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MSG_ReqStopSellStaff_CS::~MSG_ReqStopSellStaff_CS() {
  // @@protoc_insertion_point(destructor:trade.MSG_ReqStopSellStaff_CS)
  SharedDtor();
}

void MSG_ReqStopSellStaff_CS::SharedDtor() {
  thisid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_ReqStopSellStaff_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqStopSellStaff_CS& MSG_ReqStopSellStaff_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqStopSellStaff_CS_trade_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqStopSellStaff_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.MSG_ReqStopSellStaff_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    thisid_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqStopSellStaff_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string thisid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_thisid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "trade.MSG_ReqStopSellStaff_CS.thisid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqStopSellStaff_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.MSG_ReqStopSellStaff_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string thisid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_thisid().data(), static_cast<int>(this->_internal_thisid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "trade.MSG_ReqStopSellStaff_CS.thisid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_thisid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.MSG_ReqStopSellStaff_CS)
  return target;
}

size_t MSG_ReqStopSellStaff_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.MSG_ReqStopSellStaff_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string thisid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_thisid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqStopSellStaff_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.MSG_ReqStopSellStaff_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqStopSellStaff_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqStopSellStaff_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.MSG_ReqStopSellStaff_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.MSG_ReqStopSellStaff_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqStopSellStaff_CS::MergeFrom(const MSG_ReqStopSellStaff_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.MSG_ReqStopSellStaff_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_thisid()) {
    _has_bits_[0] |= 0x00000001u;
    thisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thisid_);
  }
}

void MSG_ReqStopSellStaff_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.MSG_ReqStopSellStaff_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqStopSellStaff_CS::CopyFrom(const MSG_ReqStopSellStaff_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.MSG_ReqStopSellStaff_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqStopSellStaff_CS::IsInitialized() const {
  return true;
}

void MSG_ReqStopSellStaff_CS::InternalSwap(MSG_ReqStopSellStaff_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  thisid_.Swap(&other->thisid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqStopSellStaff_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetStopSellStaff_SC::InitAsDefaultInstance() {
}
class MSG_RetStopSellStaff_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetStopSellStaff_SC>()._has_bits_);
  static void set_has_retcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_RetStopSellStaff_SC::MSG_RetStopSellStaff_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:trade.MSG_RetStopSellStaff_SC)
}
MSG_RetStopSellStaff_SC::MSG_RetStopSellStaff_SC(const MSG_RetStopSellStaff_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:trade.MSG_RetStopSellStaff_SC)
}

void MSG_RetStopSellStaff_SC::SharedCtor() {
  retcode_ = 0u;
}

MSG_RetStopSellStaff_SC::~MSG_RetStopSellStaff_SC() {
  // @@protoc_insertion_point(destructor:trade.MSG_RetStopSellStaff_SC)
  SharedDtor();
}

void MSG_RetStopSellStaff_SC::SharedDtor() {
}

void MSG_RetStopSellStaff_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetStopSellStaff_SC& MSG_RetStopSellStaff_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetStopSellStaff_SC_trade_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetStopSellStaff_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.MSG_RetStopSellStaff_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetStopSellStaff_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 retcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_retcode(&has_bits);
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetStopSellStaff_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.MSG_RetStopSellStaff_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 retcode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.MSG_RetStopSellStaff_SC)
  return target;
}

size_t MSG_RetStopSellStaff_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.MSG_RetStopSellStaff_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 retcode = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetStopSellStaff_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.MSG_RetStopSellStaff_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetStopSellStaff_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetStopSellStaff_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.MSG_RetStopSellStaff_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.MSG_RetStopSellStaff_SC)
    MergeFrom(*source);
  }
}

void MSG_RetStopSellStaff_SC::MergeFrom(const MSG_RetStopSellStaff_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.MSG_RetStopSellStaff_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_retcode()) {
    _internal_set_retcode(from._internal_retcode());
  }
}

void MSG_RetStopSellStaff_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.MSG_RetStopSellStaff_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetStopSellStaff_SC::CopyFrom(const MSG_RetStopSellStaff_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.MSG_RetStopSellStaff_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetStopSellStaff_SC::IsInitialized() const {
  return true;
}

void MSG_RetStopSellStaff_SC::InternalSwap(MSG_RetStopSellStaff_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(retcode_, other->retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetStopSellStaff_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqSubSellingList_CS::InitAsDefaultInstance() {
}
class MSG_ReqSubSellingList_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqSubSellingList_CS>()._has_bits_);
  static void set_has_itemtype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_levelstar(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_checkshow(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MSG_ReqSubSellingList_CS::MSG_ReqSubSellingList_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:trade.MSG_ReqSubSellingList_CS)
}
MSG_ReqSubSellingList_CS::MSG_ReqSubSellingList_CS(const MSG_ReqSubSellingList_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      idlist_(from.idlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&itemtype_, &from.itemtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&checkshow_) -
    reinterpret_cast<char*>(&itemtype_)) + sizeof(checkshow_));
  // @@protoc_insertion_point(copy_constructor:trade.MSG_ReqSubSellingList_CS)
}

void MSG_ReqSubSellingList_CS::SharedCtor() {
  ::memset(&itemtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&checkshow_) -
      reinterpret_cast<char*>(&itemtype_)) + sizeof(checkshow_));
}

MSG_ReqSubSellingList_CS::~MSG_ReqSubSellingList_CS() {
  // @@protoc_insertion_point(destructor:trade.MSG_ReqSubSellingList_CS)
  SharedDtor();
}

void MSG_ReqSubSellingList_CS::SharedDtor() {
}

void MSG_ReqSubSellingList_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqSubSellingList_CS& MSG_ReqSubSellingList_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqSubSellingList_CS_trade_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqSubSellingList_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.MSG_ReqSubSellingList_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  idlist_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&itemtype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&checkshow_) -
        reinterpret_cast<char*>(&itemtype_)) + sizeof(checkshow_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqSubSellingList_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .msg.SELLTYPE itemtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::msg::SELLTYPE_IsValid(val))) {
            _internal_set_itemtype(static_cast<::msg::SELLTYPE>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 levelstar = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_levelstar(&has_bits);
          levelstar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 idlist = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_idlist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_idlist(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool checkshow = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_checkshow(&has_bits);
          checkshow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqSubSellingList_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.MSG_ReqSubSellingList_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .msg.SELLTYPE itemtype = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_itemtype(), target);
  }

  // optional uint32 levelstar = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_levelstar(), target);
  }

  // repeated uint32 idlist = 3;
  for (int i = 0, n = this->_internal_idlist_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_idlist(i), target);
  }

  // optional bool checkshow = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_checkshow(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.MSG_ReqSubSellingList_CS)
  return target;
}

size_t MSG_ReqSubSellingList_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.MSG_ReqSubSellingList_CS)
  size_t total_size = 0;

  // required .msg.SELLTYPE itemtype = 1;
  if (_internal_has_itemtype()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_itemtype());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 idlist = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->idlist_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_idlist_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional uint32 levelstar = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_levelstar());
    }

    // optional bool checkshow = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqSubSellingList_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.MSG_ReqSubSellingList_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqSubSellingList_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqSubSellingList_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.MSG_ReqSubSellingList_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.MSG_ReqSubSellingList_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqSubSellingList_CS::MergeFrom(const MSG_ReqSubSellingList_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.MSG_ReqSubSellingList_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  idlist_.MergeFrom(from.idlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      itemtype_ = from.itemtype_;
    }
    if (cached_has_bits & 0x00000002u) {
      levelstar_ = from.levelstar_;
    }
    if (cached_has_bits & 0x00000004u) {
      checkshow_ = from.checkshow_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_ReqSubSellingList_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.MSG_ReqSubSellingList_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqSubSellingList_CS::CopyFrom(const MSG_ReqSubSellingList_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.MSG_ReqSubSellingList_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqSubSellingList_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MSG_ReqSubSellingList_CS::InternalSwap(MSG_ReqSubSellingList_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  idlist_.InternalSwap(&other->idlist_);
  swap(itemtype_, other->itemtype_);
  swap(levelstar_, other->levelstar_);
  swap(checkshow_, other->checkshow_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqSubSellingList_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetSubSellingList_SC::InitAsDefaultInstance() {
}
class MSG_RetSubSellingList_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetSubSellingList_SC>()._has_bits_);
  static void set_has_totalpage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_RetSubSellingList_SC::MSG_RetSubSellingList_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:trade.MSG_RetSubSellingList_SC)
}
MSG_RetSubSellingList_SC::MSG_RetSubSellingList_SC(const MSG_RetSubSellingList_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  totalpage_ = from.totalpage_;
  // @@protoc_insertion_point(copy_constructor:trade.MSG_RetSubSellingList_SC)
}

void MSG_RetSubSellingList_SC::SharedCtor() {
  totalpage_ = 0u;
}

MSG_RetSubSellingList_SC::~MSG_RetSubSellingList_SC() {
  // @@protoc_insertion_point(destructor:trade.MSG_RetSubSellingList_SC)
  SharedDtor();
}

void MSG_RetSubSellingList_SC::SharedDtor() {
}

void MSG_RetSubSellingList_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetSubSellingList_SC& MSG_RetSubSellingList_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetSubSellingList_SC_trade_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetSubSellingList_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.MSG_RetSubSellingList_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  totalpage_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetSubSellingList_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 totalpage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_totalpage(&has_bits);
          totalpage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetSubSellingList_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.MSG_RetSubSellingList_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 totalpage = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_totalpage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.MSG_RetSubSellingList_SC)
  return target;
}

size_t MSG_RetSubSellingList_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.MSG_RetSubSellingList_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 totalpage = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_totalpage());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetSubSellingList_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.MSG_RetSubSellingList_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetSubSellingList_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetSubSellingList_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.MSG_RetSubSellingList_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.MSG_RetSubSellingList_SC)
    MergeFrom(*source);
  }
}

void MSG_RetSubSellingList_SC::MergeFrom(const MSG_RetSubSellingList_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.MSG_RetSubSellingList_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_totalpage()) {
    _internal_set_totalpage(from._internal_totalpage());
  }
}

void MSG_RetSubSellingList_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.MSG_RetSubSellingList_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetSubSellingList_SC::CopyFrom(const MSG_RetSubSellingList_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.MSG_RetSubSellingList_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetSubSellingList_SC::IsInitialized() const {
  return true;
}

void MSG_RetSubSellingList_SC::InternalSwap(MSG_RetSubSellingList_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(totalpage_, other->totalpage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetSubSellingList_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqBuyItem_CS::InitAsDefaultInstance() {
}
class MSG_ReqBuyItem_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqBuyItem_CS>()._has_bits_);
  static void set_has_itemtype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_baseid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_levelstar(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_num(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_thisid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_ReqBuyItem_CS::MSG_ReqBuyItem_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:trade.MSG_ReqBuyItem_CS)
}
MSG_ReqBuyItem_CS::MSG_ReqBuyItem_CS(const MSG_ReqBuyItem_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  thisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_thisid()) {
    thisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thisid_);
  }
  ::memcpy(&itemtype_, &from.itemtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&itemtype_)) + sizeof(num_));
  // @@protoc_insertion_point(copy_constructor:trade.MSG_ReqBuyItem_CS)
}

void MSG_ReqBuyItem_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_ReqBuyItem_CS_trade_2eproto.base);
  thisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&itemtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&itemtype_)) + sizeof(num_));
}

MSG_ReqBuyItem_CS::~MSG_ReqBuyItem_CS() {
  // @@protoc_insertion_point(destructor:trade.MSG_ReqBuyItem_CS)
  SharedDtor();
}

void MSG_ReqBuyItem_CS::SharedDtor() {
  thisid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_ReqBuyItem_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqBuyItem_CS& MSG_ReqBuyItem_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqBuyItem_CS_trade_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqBuyItem_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.MSG_ReqBuyItem_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    thisid_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&itemtype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_) -
        reinterpret_cast<char*>(&itemtype_)) + sizeof(num_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqBuyItem_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .msg.SELLTYPE itemtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::msg::SELLTYPE_IsValid(val))) {
            _internal_set_itemtype(static_cast<::msg::SELLTYPE>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 baseid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_baseid(&has_bits);
          baseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 levelstar = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_levelstar(&has_bits);
          levelstar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_num(&has_bits);
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string thisid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_thisid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "trade.MSG_ReqBuyItem_CS.thisid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqBuyItem_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.MSG_ReqBuyItem_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .msg.SELLTYPE itemtype = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_itemtype(), target);
  }

  // optional uint32 baseid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_baseid(), target);
  }

  // optional uint32 levelstar = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_levelstar(), target);
  }

  // optional uint32 num = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_num(), target);
  }

  // optional string thisid = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_thisid().data(), static_cast<int>(this->_internal_thisid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "trade.MSG_ReqBuyItem_CS.thisid");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_thisid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.MSG_ReqBuyItem_CS)
  return target;
}

size_t MSG_ReqBuyItem_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.MSG_ReqBuyItem_CS)
  size_t total_size = 0;

  // required .msg.SELLTYPE itemtype = 1;
  if (_internal_has_itemtype()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_itemtype());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string thisid = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_thisid());
  }

  if (cached_has_bits & 0x0000001cu) {
    // optional uint32 baseid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_baseid());
    }

    // optional uint32 levelstar = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_levelstar());
    }

    // optional uint32 num = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqBuyItem_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.MSG_ReqBuyItem_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqBuyItem_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqBuyItem_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.MSG_ReqBuyItem_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.MSG_ReqBuyItem_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqBuyItem_CS::MergeFrom(const MSG_ReqBuyItem_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.MSG_ReqBuyItem_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      thisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thisid_);
    }
    if (cached_has_bits & 0x00000002u) {
      itemtype_ = from.itemtype_;
    }
    if (cached_has_bits & 0x00000004u) {
      baseid_ = from.baseid_;
    }
    if (cached_has_bits & 0x00000008u) {
      levelstar_ = from.levelstar_;
    }
    if (cached_has_bits & 0x00000010u) {
      num_ = from.num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_ReqBuyItem_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.MSG_ReqBuyItem_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqBuyItem_CS::CopyFrom(const MSG_ReqBuyItem_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.MSG_ReqBuyItem_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqBuyItem_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void MSG_ReqBuyItem_CS::InternalSwap(MSG_ReqBuyItem_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  thisid_.Swap(&other->thisid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(itemtype_, other->itemtype_);
  swap(baseid_, other->baseid_);
  swap(levelstar_, other->levelstar_);
  swap(num_, other->num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqBuyItem_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetBuyItem_SC::InitAsDefaultInstance() {
}
class MSG_RetBuyItem_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetBuyItem_SC>()._has_bits_);
  static void set_has_retcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_RetBuyItem_SC::MSG_RetBuyItem_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:trade.MSG_RetBuyItem_SC)
}
MSG_RetBuyItem_SC::MSG_RetBuyItem_SC(const MSG_RetBuyItem_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:trade.MSG_RetBuyItem_SC)
}

void MSG_RetBuyItem_SC::SharedCtor() {
  retcode_ = 0u;
}

MSG_RetBuyItem_SC::~MSG_RetBuyItem_SC() {
  // @@protoc_insertion_point(destructor:trade.MSG_RetBuyItem_SC)
  SharedDtor();
}

void MSG_RetBuyItem_SC::SharedDtor() {
}

void MSG_RetBuyItem_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetBuyItem_SC& MSG_RetBuyItem_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetBuyItem_SC_trade_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetBuyItem_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.MSG_RetBuyItem_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetBuyItem_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 retcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_retcode(&has_bits);
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetBuyItem_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.MSG_RetBuyItem_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 retcode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.MSG_RetBuyItem_SC)
  return target;
}

size_t MSG_RetBuyItem_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.MSG_RetBuyItem_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 retcode = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetBuyItem_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.MSG_RetBuyItem_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetBuyItem_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetBuyItem_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.MSG_RetBuyItem_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.MSG_RetBuyItem_SC)
    MergeFrom(*source);
  }
}

void MSG_RetBuyItem_SC::MergeFrom(const MSG_RetBuyItem_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.MSG_RetBuyItem_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_retcode()) {
    _internal_set_retcode(from._internal_retcode());
  }
}

void MSG_RetBuyItem_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.MSG_RetBuyItem_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetBuyItem_SC::CopyFrom(const MSG_RetBuyItem_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.MSG_RetBuyItem_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetBuyItem_SC::IsInitialized() const {
  return true;
}

void MSG_RetBuyItem_SC::InternalSwap(MSG_RetBuyItem_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(retcode_, other->retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetBuyItem_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqTradeItemHistory_CS::InitAsDefaultInstance() {
}
class MSG_ReqTradeItemHistory_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqTradeItemHistory_CS>()._has_bits_);
  static void set_has_itemtype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_baseid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_ReqTradeItemHistory_CS::MSG_ReqTradeItemHistory_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:trade.MSG_ReqTradeItemHistory_CS)
}
MSG_ReqTradeItemHistory_CS::MSG_ReqTradeItemHistory_CS(const MSG_ReqTradeItemHistory_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&itemtype_, &from.itemtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&baseid_) -
    reinterpret_cast<char*>(&itemtype_)) + sizeof(baseid_));
  // @@protoc_insertion_point(copy_constructor:trade.MSG_ReqTradeItemHistory_CS)
}

void MSG_ReqTradeItemHistory_CS::SharedCtor() {
  ::memset(&itemtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&baseid_) -
      reinterpret_cast<char*>(&itemtype_)) + sizeof(baseid_));
}

MSG_ReqTradeItemHistory_CS::~MSG_ReqTradeItemHistory_CS() {
  // @@protoc_insertion_point(destructor:trade.MSG_ReqTradeItemHistory_CS)
  SharedDtor();
}

void MSG_ReqTradeItemHistory_CS::SharedDtor() {
}

void MSG_ReqTradeItemHistory_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqTradeItemHistory_CS& MSG_ReqTradeItemHistory_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqTradeItemHistory_CS_trade_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqTradeItemHistory_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.MSG_ReqTradeItemHistory_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&itemtype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&baseid_) -
        reinterpret_cast<char*>(&itemtype_)) + sizeof(baseid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqTradeItemHistory_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .msg.SELLTYPE itemtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::msg::SELLTYPE_IsValid(val))) {
            _internal_set_itemtype(static_cast<::msg::SELLTYPE>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 baseid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_baseid(&has_bits);
          baseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqTradeItemHistory_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.MSG_ReqTradeItemHistory_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .msg.SELLTYPE itemtype = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_itemtype(), target);
  }

  // optional uint32 baseid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_baseid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.MSG_ReqTradeItemHistory_CS)
  return target;
}

size_t MSG_ReqTradeItemHistory_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.MSG_ReqTradeItemHistory_CS)
  size_t total_size = 0;

  // required .msg.SELLTYPE itemtype = 1;
  if (_internal_has_itemtype()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_itemtype());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 baseid = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_baseid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqTradeItemHistory_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.MSG_ReqTradeItemHistory_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqTradeItemHistory_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqTradeItemHistory_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.MSG_ReqTradeItemHistory_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.MSG_ReqTradeItemHistory_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqTradeItemHistory_CS::MergeFrom(const MSG_ReqTradeItemHistory_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.MSG_ReqTradeItemHistory_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      itemtype_ = from.itemtype_;
    }
    if (cached_has_bits & 0x00000002u) {
      baseid_ = from.baseid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_ReqTradeItemHistory_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.MSG_ReqTradeItemHistory_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqTradeItemHistory_CS::CopyFrom(const MSG_ReqTradeItemHistory_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.MSG_ReqTradeItemHistory_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqTradeItemHistory_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MSG_ReqTradeItemHistory_CS::InternalSwap(MSG_ReqTradeItemHistory_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(itemtype_, other->itemtype_);
  swap(baseid_, other->baseid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqTradeItemHistory_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TradeHistoryItem::InitAsDefaultInstance() {
  ::trade::_TradeHistoryItem_default_instance_._instance.get_mutable()->data_ = const_cast< ::trade::TradeItemData*>(
      ::trade::TradeItemData::internal_default_instance());
}
class TradeHistoryItem::_Internal {
 public:
  using HasBits = decltype(std::declval<TradeHistoryItem>()._has_bits_);
  static const ::trade::TradeItemData& data(const TradeHistoryItem* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_price(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tradetime(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::trade::TradeItemData&
TradeHistoryItem::_Internal::data(const TradeHistoryItem* msg) {
  return *msg->data_;
}
TradeHistoryItem::TradeHistoryItem()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:trade.TradeHistoryItem)
}
TradeHistoryItem::TradeHistoryItem(const TradeHistoryItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::trade::TradeItemData(*from.data_);
  } else {
    data_ = nullptr;
  }
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&tradetime_) -
    reinterpret_cast<char*>(&price_)) + sizeof(tradetime_));
  // @@protoc_insertion_point(copy_constructor:trade.TradeHistoryItem)
}

void TradeHistoryItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TradeHistoryItem_trade_2eproto.base);
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tradetime_) -
      reinterpret_cast<char*>(&data_)) + sizeof(tradetime_));
}

TradeHistoryItem::~TradeHistoryItem() {
  // @@protoc_insertion_point(destructor:trade.TradeHistoryItem)
  SharedDtor();
}

void TradeHistoryItem::SharedDtor() {
  if (this != internal_default_instance()) delete data_;
}

void TradeHistoryItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TradeHistoryItem& TradeHistoryItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TradeHistoryItem_trade_2eproto.base);
  return *internal_default_instance();
}


void TradeHistoryItem::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.TradeHistoryItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(data_ != nullptr);
    data_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&price_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tradetime_) -
        reinterpret_cast<char*>(&price_)) + sizeof(tradetime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TradeHistoryItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .trade.TradeItemData data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 price = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_price(&has_bits);
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tradetime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_tradetime(&has_bits);
          tradetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TradeHistoryItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.TradeHistoryItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .trade.TradeItemData data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  // optional uint32 price = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_price(), target);
  }

  // optional uint32 tradetime = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_tradetime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.TradeHistoryItem)
  return target;
}

size_t TradeHistoryItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.TradeHistoryItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .trade.TradeItemData data = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_);
    }

    // optional uint32 price = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_price());
    }

    // optional uint32 tradetime = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tradetime());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradeHistoryItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.TradeHistoryItem)
  GOOGLE_DCHECK_NE(&from, this);
  const TradeHistoryItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TradeHistoryItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.TradeHistoryItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.TradeHistoryItem)
    MergeFrom(*source);
  }
}

void TradeHistoryItem::MergeFrom(const TradeHistoryItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.TradeHistoryItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_data()->::trade::TradeItemData::MergeFrom(from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000004u) {
      tradetime_ = from.tradetime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TradeHistoryItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.TradeHistoryItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeHistoryItem::CopyFrom(const TradeHistoryItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.TradeHistoryItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeHistoryItem::IsInitialized() const {
  if (_internal_has_data()) {
    if (!data_->IsInitialized()) return false;
  }
  return true;
}

void TradeHistoryItem::InternalSwap(TradeHistoryItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(data_, other->data_);
  swap(price_, other->price_);
  swap(tradetime_, other->tradetime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TradeHistoryItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetTradeItemHistory_SC::InitAsDefaultInstance() {
}
class MSG_RetTradeItemHistory_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetTradeItemHistory_SC>()._has_bits_);
};

MSG_RetTradeItemHistory_SC::MSG_RetTradeItemHistory_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:trade.MSG_RetTradeItemHistory_SC)
}
MSG_RetTradeItemHistory_SC::MSG_RetTradeItemHistory_SC(const MSG_RetTradeItemHistory_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      item_(from.item_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:trade.MSG_RetTradeItemHistory_SC)
}

void MSG_RetTradeItemHistory_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_RetTradeItemHistory_SC_trade_2eproto.base);
}

MSG_RetTradeItemHistory_SC::~MSG_RetTradeItemHistory_SC() {
  // @@protoc_insertion_point(destructor:trade.MSG_RetTradeItemHistory_SC)
  SharedDtor();
}

void MSG_RetTradeItemHistory_SC::SharedDtor() {
}

void MSG_RetTradeItemHistory_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetTradeItemHistory_SC& MSG_RetTradeItemHistory_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetTradeItemHistory_SC_trade_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetTradeItemHistory_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.MSG_RetTradeItemHistory_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetTradeItemHistory_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .trade.TradeHistoryItem item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_item(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetTradeItemHistory_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.MSG_RetTradeItemHistory_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .trade.TradeHistoryItem item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_item_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_item(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.MSG_RetTradeItemHistory_SC)
  return target;
}

size_t MSG_RetTradeItemHistory_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.MSG_RetTradeItemHistory_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .trade.TradeHistoryItem item = 1;
  total_size += 1UL * this->_internal_item_size();
  for (const auto& msg : this->item_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetTradeItemHistory_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.MSG_RetTradeItemHistory_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetTradeItemHistory_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetTradeItemHistory_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.MSG_RetTradeItemHistory_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.MSG_RetTradeItemHistory_SC)
    MergeFrom(*source);
  }
}

void MSG_RetTradeItemHistory_SC::MergeFrom(const MSG_RetTradeItemHistory_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.MSG_RetTradeItemHistory_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void MSG_RetTradeItemHistory_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.MSG_RetTradeItemHistory_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetTradeItemHistory_SC::CopyFrom(const MSG_RetTradeItemHistory_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.MSG_RetTradeItemHistory_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetTradeItemHistory_SC::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(item_)) return false;
  return true;
}

void MSG_RetTradeItemHistory_SC::InternalSwap(MSG_RetTradeItemHistory_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  item_.InternalSwap(&other->item_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetTradeItemHistory_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqSublistPage_CS::InitAsDefaultInstance() {
}
class MSG_ReqSublistPage_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqSublistPage_CS>()._has_bits_);
  static void set_has_page(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_ReqSublistPage_CS::MSG_ReqSublistPage_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:trade.MSG_ReqSublistPage_CS)
}
MSG_ReqSublistPage_CS::MSG_ReqSublistPage_CS(const MSG_ReqSublistPage_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  page_ = from.page_;
  // @@protoc_insertion_point(copy_constructor:trade.MSG_ReqSublistPage_CS)
}

void MSG_ReqSublistPage_CS::SharedCtor() {
  page_ = 0u;
}

MSG_ReqSublistPage_CS::~MSG_ReqSublistPage_CS() {
  // @@protoc_insertion_point(destructor:trade.MSG_ReqSublistPage_CS)
  SharedDtor();
}

void MSG_ReqSublistPage_CS::SharedDtor() {
}

void MSG_ReqSublistPage_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqSublistPage_CS& MSG_ReqSublistPage_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqSublistPage_CS_trade_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqSublistPage_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.MSG_ReqSublistPage_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  page_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqSublistPage_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 page = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_page(&has_bits);
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqSublistPage_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.MSG_ReqSublistPage_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 page = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.MSG_ReqSublistPage_CS)
  return target;
}

size_t MSG_ReqSublistPage_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.MSG_ReqSublistPage_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 page = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqSublistPage_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.MSG_ReqSublistPage_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqSublistPage_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqSublistPage_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.MSG_ReqSublistPage_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.MSG_ReqSublistPage_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqSublistPage_CS::MergeFrom(const MSG_ReqSublistPage_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.MSG_ReqSublistPage_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_page()) {
    _internal_set_page(from._internal_page());
  }
}

void MSG_ReqSublistPage_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.MSG_ReqSublistPage_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqSublistPage_CS::CopyFrom(const MSG_ReqSublistPage_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.MSG_ReqSublistPage_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqSublistPage_CS::IsInitialized() const {
  return true;
}

void MSG_ReqSublistPage_CS::InternalSwap(MSG_ReqSublistPage_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(page_, other->page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqSublistPage_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetSublistPage_SC::InitAsDefaultInstance() {
}
class MSG_RetSublistPage_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetSublistPage_SC>()._has_bits_);
};

MSG_RetSublistPage_SC::MSG_RetSublistPage_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:trade.MSG_RetSublistPage_SC)
}
MSG_RetSublistPage_SC::MSG_RetSublistPage_SC(const MSG_RetSublistPage_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      item_(from.item_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:trade.MSG_RetSublistPage_SC)
}

void MSG_RetSublistPage_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_RetSublistPage_SC_trade_2eproto.base);
}

MSG_RetSublistPage_SC::~MSG_RetSublistPage_SC() {
  // @@protoc_insertion_point(destructor:trade.MSG_RetSublistPage_SC)
  SharedDtor();
}

void MSG_RetSublistPage_SC::SharedDtor() {
}

void MSG_RetSublistPage_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetSublistPage_SC& MSG_RetSublistPage_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetSublistPage_SC_trade_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetSublistPage_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.MSG_RetSublistPage_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetSublistPage_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .trade.TradeItem item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_item(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetSublistPage_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.MSG_RetSublistPage_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .trade.TradeItem item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_item_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_item(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.MSG_RetSublistPage_SC)
  return target;
}

size_t MSG_RetSublistPage_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.MSG_RetSublistPage_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .trade.TradeItem item = 1;
  total_size += 1UL * this->_internal_item_size();
  for (const auto& msg : this->item_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetSublistPage_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.MSG_RetSublistPage_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetSublistPage_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetSublistPage_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.MSG_RetSublistPage_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.MSG_RetSublistPage_SC)
    MergeFrom(*source);
  }
}

void MSG_RetSublistPage_SC::MergeFrom(const MSG_RetSublistPage_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.MSG_RetSublistPage_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void MSG_RetSublistPage_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.MSG_RetSublistPage_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetSublistPage_SC::CopyFrom(const MSG_RetSublistPage_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.MSG_RetSublistPage_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetSublistPage_SC::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(item_)) return false;
  return true;
}

void MSG_RetSublistPage_SC::InternalSwap(MSG_RetSublistPage_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  item_.InternalSwap(&other->item_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetSublistPage_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqWatchTradeItem_CS::InitAsDefaultInstance() {
}
class MSG_ReqWatchTradeItem_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqWatchTradeItem_CS>()._has_bits_);
  static void set_has_thisid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ison(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_isshow(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MSG_ReqWatchTradeItem_CS::MSG_ReqWatchTradeItem_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:trade.MSG_ReqWatchTradeItem_CS)
}
MSG_ReqWatchTradeItem_CS::MSG_ReqWatchTradeItem_CS(const MSG_ReqWatchTradeItem_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  thisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_thisid()) {
    thisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thisid_);
  }
  ::memcpy(&ison_, &from.ison_,
    static_cast<size_t>(reinterpret_cast<char*>(&isshow_) -
    reinterpret_cast<char*>(&ison_)) + sizeof(isshow_));
  // @@protoc_insertion_point(copy_constructor:trade.MSG_ReqWatchTradeItem_CS)
}

void MSG_ReqWatchTradeItem_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_ReqWatchTradeItem_CS_trade_2eproto.base);
  thisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&ison_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isshow_) -
      reinterpret_cast<char*>(&ison_)) + sizeof(isshow_));
}

MSG_ReqWatchTradeItem_CS::~MSG_ReqWatchTradeItem_CS() {
  // @@protoc_insertion_point(destructor:trade.MSG_ReqWatchTradeItem_CS)
  SharedDtor();
}

void MSG_ReqWatchTradeItem_CS::SharedDtor() {
  thisid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_ReqWatchTradeItem_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqWatchTradeItem_CS& MSG_ReqWatchTradeItem_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqWatchTradeItem_CS_trade_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqWatchTradeItem_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.MSG_ReqWatchTradeItem_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    thisid_.ClearNonDefaultToEmptyNoArena();
  }
  ::memset(&ison_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isshow_) -
      reinterpret_cast<char*>(&ison_)) + sizeof(isshow_));
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqWatchTradeItem_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string thisid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_thisid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "trade.MSG_ReqWatchTradeItem_CS.thisid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ison = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ison(&has_bits);
          ison_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isshow = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_isshow(&has_bits);
          isshow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqWatchTradeItem_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.MSG_ReqWatchTradeItem_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string thisid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_thisid().data(), static_cast<int>(this->_internal_thisid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "trade.MSG_ReqWatchTradeItem_CS.thisid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_thisid(), target);
  }

  // optional bool ison = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_ison(), target);
  }

  // optional bool isshow = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_isshow(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.MSG_ReqWatchTradeItem_CS)
  return target;
}

size_t MSG_ReqWatchTradeItem_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.MSG_ReqWatchTradeItem_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string thisid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_thisid());
    }

    // optional bool ison = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool isshow = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqWatchTradeItem_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.MSG_ReqWatchTradeItem_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqWatchTradeItem_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqWatchTradeItem_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.MSG_ReqWatchTradeItem_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.MSG_ReqWatchTradeItem_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqWatchTradeItem_CS::MergeFrom(const MSG_ReqWatchTradeItem_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.MSG_ReqWatchTradeItem_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      thisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thisid_);
    }
    if (cached_has_bits & 0x00000002u) {
      ison_ = from.ison_;
    }
    if (cached_has_bits & 0x00000004u) {
      isshow_ = from.isshow_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_ReqWatchTradeItem_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.MSG_ReqWatchTradeItem_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqWatchTradeItem_CS::CopyFrom(const MSG_ReqWatchTradeItem_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.MSG_ReqWatchTradeItem_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqWatchTradeItem_CS::IsInitialized() const {
  return true;
}

void MSG_ReqWatchTradeItem_CS::InternalSwap(MSG_ReqWatchTradeItem_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  thisid_.Swap(&other->thisid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ison_, other->ison_);
  swap(isshow_, other->isshow_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqWatchTradeItem_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetWatchTradeItem_SC::InitAsDefaultInstance() {
}
class MSG_RetWatchTradeItem_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetWatchTradeItem_SC>()._has_bits_);
  static void set_has_retcode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_thisid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ison(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_isshow(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

MSG_RetWatchTradeItem_SC::MSG_RetWatchTradeItem_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:trade.MSG_RetWatchTradeItem_SC)
}
MSG_RetWatchTradeItem_SC::MSG_RetWatchTradeItem_SC(const MSG_RetWatchTradeItem_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  thisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_thisid()) {
    thisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thisid_);
  }
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&isshow_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(isshow_));
  // @@protoc_insertion_point(copy_constructor:trade.MSG_RetWatchTradeItem_SC)
}

void MSG_RetWatchTradeItem_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_RetWatchTradeItem_SC_trade_2eproto.base);
  thisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isshow_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(isshow_));
}

MSG_RetWatchTradeItem_SC::~MSG_RetWatchTradeItem_SC() {
  // @@protoc_insertion_point(destructor:trade.MSG_RetWatchTradeItem_SC)
  SharedDtor();
}

void MSG_RetWatchTradeItem_SC::SharedDtor() {
  thisid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_RetWatchTradeItem_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetWatchTradeItem_SC& MSG_RetWatchTradeItem_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetWatchTradeItem_SC_trade_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetWatchTradeItem_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.MSG_RetWatchTradeItem_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    thisid_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&retcode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&isshow_) -
        reinterpret_cast<char*>(&retcode_)) + sizeof(isshow_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetWatchTradeItem_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 retcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_retcode(&has_bits);
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string thisid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_thisid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "trade.MSG_RetWatchTradeItem_SC.thisid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ison = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_ison(&has_bits);
          ison_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isshow = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_isshow(&has_bits);
          isshow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetWatchTradeItem_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.MSG_RetWatchTradeItem_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 retcode = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  // optional string thisid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_thisid().data(), static_cast<int>(this->_internal_thisid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "trade.MSG_RetWatchTradeItem_SC.thisid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_thisid(), target);
  }

  // optional bool ison = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_ison(), target);
  }

  // optional bool isshow = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_isshow(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.MSG_RetWatchTradeItem_SC)
  return target;
}

size_t MSG_RetWatchTradeItem_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.MSG_RetWatchTradeItem_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string thisid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_thisid());
    }

    // optional uint32 retcode = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_retcode());
    }

    // optional bool ison = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool isshow = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetWatchTradeItem_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.MSG_RetWatchTradeItem_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetWatchTradeItem_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetWatchTradeItem_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.MSG_RetWatchTradeItem_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.MSG_RetWatchTradeItem_SC)
    MergeFrom(*source);
  }
}

void MSG_RetWatchTradeItem_SC::MergeFrom(const MSG_RetWatchTradeItem_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.MSG_RetWatchTradeItem_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      thisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thisid_);
    }
    if (cached_has_bits & 0x00000002u) {
      retcode_ = from.retcode_;
    }
    if (cached_has_bits & 0x00000004u) {
      ison_ = from.ison_;
    }
    if (cached_has_bits & 0x00000008u) {
      isshow_ = from.isshow_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_RetWatchTradeItem_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.MSG_RetWatchTradeItem_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetWatchTradeItem_SC::CopyFrom(const MSG_RetWatchTradeItem_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.MSG_RetWatchTradeItem_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetWatchTradeItem_SC::IsInitialized() const {
  return true;
}

void MSG_RetWatchTradeItem_SC::InternalSwap(MSG_RetWatchTradeItem_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  thisid_.Swap(&other->thisid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(retcode_, other->retcode_);
  swap(ison_, other->ison_);
  swap(isshow_, other->isshow_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetWatchTradeItem_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqWatchList_CS::InitAsDefaultInstance() {
}
class MSG_ReqWatchList_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqWatchList_CS>()._has_bits_);
  static void set_has_isshow(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_ReqWatchList_CS::MSG_ReqWatchList_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:trade.MSG_ReqWatchList_CS)
}
MSG_ReqWatchList_CS::MSG_ReqWatchList_CS(const MSG_ReqWatchList_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  isshow_ = from.isshow_;
  // @@protoc_insertion_point(copy_constructor:trade.MSG_ReqWatchList_CS)
}

void MSG_ReqWatchList_CS::SharedCtor() {
  isshow_ = false;
}

MSG_ReqWatchList_CS::~MSG_ReqWatchList_CS() {
  // @@protoc_insertion_point(destructor:trade.MSG_ReqWatchList_CS)
  SharedDtor();
}

void MSG_ReqWatchList_CS::SharedDtor() {
}

void MSG_ReqWatchList_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqWatchList_CS& MSG_ReqWatchList_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqWatchList_CS_trade_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqWatchList_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.MSG_ReqWatchList_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  isshow_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqWatchList_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool isshow = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_isshow(&has_bits);
          isshow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqWatchList_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.MSG_ReqWatchList_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool isshow = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_isshow(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.MSG_ReqWatchList_CS)
  return target;
}

size_t MSG_ReqWatchList_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.MSG_ReqWatchList_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool isshow = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqWatchList_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.MSG_ReqWatchList_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqWatchList_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqWatchList_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.MSG_ReqWatchList_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.MSG_ReqWatchList_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqWatchList_CS::MergeFrom(const MSG_ReqWatchList_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.MSG_ReqWatchList_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_isshow()) {
    _internal_set_isshow(from._internal_isshow());
  }
}

void MSG_ReqWatchList_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.MSG_ReqWatchList_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqWatchList_CS::CopyFrom(const MSG_ReqWatchList_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.MSG_ReqWatchList_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqWatchList_CS::IsInitialized() const {
  return true;
}

void MSG_ReqWatchList_CS::InternalSwap(MSG_ReqWatchList_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(isshow_, other->isshow_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqWatchList_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetWatchList_SC::InitAsDefaultInstance() {
}
class MSG_RetWatchList_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetWatchList_SC>()._has_bits_);
  static void set_has_isshow(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_RetWatchList_SC::MSG_RetWatchList_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:trade.MSG_RetWatchList_SC)
}
MSG_RetWatchList_SC::MSG_RetWatchList_SC(const MSG_RetWatchList_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      item_(from.item_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  isshow_ = from.isshow_;
  // @@protoc_insertion_point(copy_constructor:trade.MSG_RetWatchList_SC)
}

void MSG_RetWatchList_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_RetWatchList_SC_trade_2eproto.base);
  isshow_ = false;
}

MSG_RetWatchList_SC::~MSG_RetWatchList_SC() {
  // @@protoc_insertion_point(destructor:trade.MSG_RetWatchList_SC)
  SharedDtor();
}

void MSG_RetWatchList_SC::SharedDtor() {
}

void MSG_RetWatchList_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetWatchList_SC& MSG_RetWatchList_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetWatchList_SC_trade_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetWatchList_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.MSG_RetWatchList_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  isshow_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetWatchList_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool isshow = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_isshow(&has_bits);
          isshow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .trade.TradeItem item = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_item(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetWatchList_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.MSG_RetWatchList_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool isshow = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_isshow(), target);
  }

  // repeated .trade.TradeItem item = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_item_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_item(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.MSG_RetWatchList_SC)
  return target;
}

size_t MSG_RetWatchList_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.MSG_RetWatchList_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .trade.TradeItem item = 2;
  total_size += 1UL * this->_internal_item_size();
  for (const auto& msg : this->item_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool isshow = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetWatchList_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.MSG_RetWatchList_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetWatchList_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetWatchList_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.MSG_RetWatchList_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.MSG_RetWatchList_SC)
    MergeFrom(*source);
  }
}

void MSG_RetWatchList_SC::MergeFrom(const MSG_RetWatchList_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.MSG_RetWatchList_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
  if (from._internal_has_isshow()) {
    _internal_set_isshow(from._internal_isshow());
  }
}

void MSG_RetWatchList_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.MSG_RetWatchList_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetWatchList_SC::CopyFrom(const MSG_RetWatchList_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.MSG_RetWatchList_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetWatchList_SC::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(item_)) return false;
  return true;
}

void MSG_RetWatchList_SC::InternalSwap(MSG_RetWatchList_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  item_.InternalSwap(&other->item_);
  swap(isshow_, other->isshow_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetWatchList_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqUserTradeHistory_CS::InitAsDefaultInstance() {
}
class MSG_ReqUserTradeHistory_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqUserTradeHistory_CS>()._has_bits_);
};

MSG_ReqUserTradeHistory_CS::MSG_ReqUserTradeHistory_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:trade.MSG_ReqUserTradeHistory_CS)
}
MSG_ReqUserTradeHistory_CS::MSG_ReqUserTradeHistory_CS(const MSG_ReqUserTradeHistory_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:trade.MSG_ReqUserTradeHistory_CS)
}

void MSG_ReqUserTradeHistory_CS::SharedCtor() {
}

MSG_ReqUserTradeHistory_CS::~MSG_ReqUserTradeHistory_CS() {
  // @@protoc_insertion_point(destructor:trade.MSG_ReqUserTradeHistory_CS)
  SharedDtor();
}

void MSG_ReqUserTradeHistory_CS::SharedDtor() {
}

void MSG_ReqUserTradeHistory_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqUserTradeHistory_CS& MSG_ReqUserTradeHistory_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqUserTradeHistory_CS_trade_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqUserTradeHistory_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.MSG_ReqUserTradeHistory_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqUserTradeHistory_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqUserTradeHistory_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.MSG_ReqUserTradeHistory_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.MSG_ReqUserTradeHistory_CS)
  return target;
}

size_t MSG_ReqUserTradeHistory_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.MSG_ReqUserTradeHistory_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqUserTradeHistory_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.MSG_ReqUserTradeHistory_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqUserTradeHistory_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqUserTradeHistory_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.MSG_ReqUserTradeHistory_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.MSG_ReqUserTradeHistory_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqUserTradeHistory_CS::MergeFrom(const MSG_ReqUserTradeHistory_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.MSG_ReqUserTradeHistory_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_ReqUserTradeHistory_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.MSG_ReqUserTradeHistory_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqUserTradeHistory_CS::CopyFrom(const MSG_ReqUserTradeHistory_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.MSG_ReqUserTradeHistory_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqUserTradeHistory_CS::IsInitialized() const {
  return true;
}

void MSG_ReqUserTradeHistory_CS::InternalSwap(MSG_ReqUserTradeHistory_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqUserTradeHistory_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserTradeItem::InitAsDefaultInstance() {
  ::trade::_UserTradeItem_default_instance_._instance.get_mutable()->item_ = const_cast< ::trade::TradeHistoryItem*>(
      ::trade::TradeHistoryItem::internal_default_instance());
}
class UserTradeItem::_Internal {
 public:
  using HasBits = decltype(std::declval<UserTradeItem>()._has_bits_);
  static void set_has_op(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::trade::TradeHistoryItem& item(const UserTradeItem* msg);
  static void set_has_item(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_judgeduetime(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::trade::TradeHistoryItem&
UserTradeItem::_Internal::item(const UserTradeItem* msg) {
  return *msg->item_;
}
UserTradeItem::UserTradeItem()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:trade.UserTradeItem)
}
UserTradeItem::UserTradeItem(const UserTradeItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_item()) {
    item_ = new ::trade::TradeHistoryItem(*from.item_);
  } else {
    item_ = nullptr;
  }
  ::memcpy(&judgeduetime_, &from.judgeduetime_,
    static_cast<size_t>(reinterpret_cast<char*>(&op_) -
    reinterpret_cast<char*>(&judgeduetime_)) + sizeof(op_));
  // @@protoc_insertion_point(copy_constructor:trade.UserTradeItem)
}

void UserTradeItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserTradeItem_trade_2eproto.base);
  ::memset(&item_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&judgeduetime_) -
      reinterpret_cast<char*>(&item_)) + sizeof(judgeduetime_));
  op_ = 1;
}

UserTradeItem::~UserTradeItem() {
  // @@protoc_insertion_point(destructor:trade.UserTradeItem)
  SharedDtor();
}

void UserTradeItem::SharedDtor() {
  if (this != internal_default_instance()) delete item_;
}

void UserTradeItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserTradeItem& UserTradeItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserTradeItem_trade_2eproto.base);
  return *internal_default_instance();
}


void UserTradeItem::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.UserTradeItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(item_ != nullptr);
    item_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    judgeduetime_ = 0u;
    op_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UserTradeItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .trade.TradeOP op = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::trade::TradeOP_IsValid(val))) {
            _internal_set_op(static_cast<::trade::TradeOP>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .trade.TradeHistoryItem item = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 judgeduetime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_judgeduetime(&has_bits);
          judgeduetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserTradeItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.UserTradeItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .trade.TradeOP op = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_op(), target);
  }

  // optional .trade.TradeHistoryItem item = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::item(this), target, stream);
  }

  // optional uint32 judgeduetime = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_judgeduetime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.UserTradeItem)
  return target;
}

size_t UserTradeItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.UserTradeItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .trade.TradeHistoryItem item = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *item_);
    }

    // optional uint32 judgeduetime = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_judgeduetime());
    }

    // optional .trade.TradeOP op = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_op());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserTradeItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.UserTradeItem)
  GOOGLE_DCHECK_NE(&from, this);
  const UserTradeItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserTradeItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.UserTradeItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.UserTradeItem)
    MergeFrom(*source);
  }
}

void UserTradeItem::MergeFrom(const UserTradeItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.UserTradeItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_item()->::trade::TradeHistoryItem::MergeFrom(from._internal_item());
    }
    if (cached_has_bits & 0x00000002u) {
      judgeduetime_ = from.judgeduetime_;
    }
    if (cached_has_bits & 0x00000004u) {
      op_ = from.op_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserTradeItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.UserTradeItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserTradeItem::CopyFrom(const UserTradeItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.UserTradeItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserTradeItem::IsInitialized() const {
  if (_internal_has_item()) {
    if (!item_->IsInitialized()) return false;
  }
  return true;
}

void UserTradeItem::InternalSwap(UserTradeItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(item_, other->item_);
  swap(judgeduetime_, other->judgeduetime_);
  swap(op_, other->op_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserTradeItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetUserTradeHistory_SC::InitAsDefaultInstance() {
}
class MSG_RetUserTradeHistory_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetUserTradeHistory_SC>()._has_bits_);
};

MSG_RetUserTradeHistory_SC::MSG_RetUserTradeHistory_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:trade.MSG_RetUserTradeHistory_SC)
}
MSG_RetUserTradeHistory_SC::MSG_RetUserTradeHistory_SC(const MSG_RetUserTradeHistory_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      one_(from.one_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:trade.MSG_RetUserTradeHistory_SC)
}

void MSG_RetUserTradeHistory_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_RetUserTradeHistory_SC_trade_2eproto.base);
}

MSG_RetUserTradeHistory_SC::~MSG_RetUserTradeHistory_SC() {
  // @@protoc_insertion_point(destructor:trade.MSG_RetUserTradeHistory_SC)
  SharedDtor();
}

void MSG_RetUserTradeHistory_SC::SharedDtor() {
}

void MSG_RetUserTradeHistory_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetUserTradeHistory_SC& MSG_RetUserTradeHistory_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetUserTradeHistory_SC_trade_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetUserTradeHistory_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.MSG_RetUserTradeHistory_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  one_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetUserTradeHistory_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .trade.UserTradeItem one = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_one(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetUserTradeHistory_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.MSG_RetUserTradeHistory_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .trade.UserTradeItem one = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_one_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_one(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.MSG_RetUserTradeHistory_SC)
  return target;
}

size_t MSG_RetUserTradeHistory_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.MSG_RetUserTradeHistory_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .trade.UserTradeItem one = 1;
  total_size += 1UL * this->_internal_one_size();
  for (const auto& msg : this->one_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetUserTradeHistory_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.MSG_RetUserTradeHistory_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetUserTradeHistory_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetUserTradeHistory_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.MSG_RetUserTradeHistory_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.MSG_RetUserTradeHistory_SC)
    MergeFrom(*source);
  }
}

void MSG_RetUserTradeHistory_SC::MergeFrom(const MSG_RetUserTradeHistory_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.MSG_RetUserTradeHistory_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  one_.MergeFrom(from.one_);
}

void MSG_RetUserTradeHistory_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.MSG_RetUserTradeHistory_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetUserTradeHistory_SC::CopyFrom(const MSG_RetUserTradeHistory_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.MSG_RetUserTradeHistory_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetUserTradeHistory_SC::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(one_)) return false;
  return true;
}

void MSG_RetUserTradeHistory_SC::InternalSwap(MSG_RetUserTradeHistory_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  one_.InternalSwap(&other->one_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetUserTradeHistory_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqGetNewestStaff_CS::InitAsDefaultInstance() {
}
class MSG_ReqGetNewestStaff_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqGetNewestStaff_CS>()._has_bits_);
};

MSG_ReqGetNewestStaff_CS::MSG_ReqGetNewestStaff_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:trade.MSG_ReqGetNewestStaff_CS)
}
MSG_ReqGetNewestStaff_CS::MSG_ReqGetNewestStaff_CS(const MSG_ReqGetNewestStaff_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:trade.MSG_ReqGetNewestStaff_CS)
}

void MSG_ReqGetNewestStaff_CS::SharedCtor() {
}

MSG_ReqGetNewestStaff_CS::~MSG_ReqGetNewestStaff_CS() {
  // @@protoc_insertion_point(destructor:trade.MSG_ReqGetNewestStaff_CS)
  SharedDtor();
}

void MSG_ReqGetNewestStaff_CS::SharedDtor() {
}

void MSG_ReqGetNewestStaff_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqGetNewestStaff_CS& MSG_ReqGetNewestStaff_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqGetNewestStaff_CS_trade_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqGetNewestStaff_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.MSG_ReqGetNewestStaff_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqGetNewestStaff_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqGetNewestStaff_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.MSG_ReqGetNewestStaff_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.MSG_ReqGetNewestStaff_CS)
  return target;
}

size_t MSG_ReqGetNewestStaff_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.MSG_ReqGetNewestStaff_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqGetNewestStaff_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.MSG_ReqGetNewestStaff_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqGetNewestStaff_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqGetNewestStaff_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.MSG_ReqGetNewestStaff_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.MSG_ReqGetNewestStaff_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqGetNewestStaff_CS::MergeFrom(const MSG_ReqGetNewestStaff_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.MSG_ReqGetNewestStaff_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_ReqGetNewestStaff_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.MSG_ReqGetNewestStaff_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqGetNewestStaff_CS::CopyFrom(const MSG_ReqGetNewestStaff_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.MSG_ReqGetNewestStaff_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqGetNewestStaff_CS::IsInitialized() const {
  return true;
}

void MSG_ReqGetNewestStaff_CS::InternalSwap(MSG_ReqGetNewestStaff_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqGetNewestStaff_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetGetNewestStaff_SC::InitAsDefaultInstance() {
}
class MSG_RetGetNewestStaff_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetGetNewestStaff_SC>()._has_bits_);
};

MSG_RetGetNewestStaff_SC::MSG_RetGetNewestStaff_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:trade.MSG_RetGetNewestStaff_SC)
}
MSG_RetGetNewestStaff_SC::MSG_RetGetNewestStaff_SC(const MSG_RetGetNewestStaff_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      itemlist_(from.itemlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:trade.MSG_RetGetNewestStaff_SC)
}

void MSG_RetGetNewestStaff_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_RetGetNewestStaff_SC_trade_2eproto.base);
}

MSG_RetGetNewestStaff_SC::~MSG_RetGetNewestStaff_SC() {
  // @@protoc_insertion_point(destructor:trade.MSG_RetGetNewestStaff_SC)
  SharedDtor();
}

void MSG_RetGetNewestStaff_SC::SharedDtor() {
}

void MSG_RetGetNewestStaff_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetGetNewestStaff_SC& MSG_RetGetNewestStaff_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetGetNewestStaff_SC_trade_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetGetNewestStaff_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.MSG_RetGetNewestStaff_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  itemlist_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetGetNewestStaff_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .trade.TradeItem itemlist = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_itemlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetGetNewestStaff_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.MSG_RetGetNewestStaff_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .trade.TradeItem itemlist = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_itemlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_itemlist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.MSG_RetGetNewestStaff_SC)
  return target;
}

size_t MSG_RetGetNewestStaff_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.MSG_RetGetNewestStaff_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .trade.TradeItem itemlist = 1;
  total_size += 1UL * this->_internal_itemlist_size();
  for (const auto& msg : this->itemlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetGetNewestStaff_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.MSG_RetGetNewestStaff_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetGetNewestStaff_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetGetNewestStaff_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.MSG_RetGetNewestStaff_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.MSG_RetGetNewestStaff_SC)
    MergeFrom(*source);
  }
}

void MSG_RetGetNewestStaff_SC::MergeFrom(const MSG_RetGetNewestStaff_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.MSG_RetGetNewestStaff_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  itemlist_.MergeFrom(from.itemlist_);
}

void MSG_RetGetNewestStaff_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.MSG_RetGetNewestStaff_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetGetNewestStaff_SC::CopyFrom(const MSG_RetGetNewestStaff_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.MSG_RetGetNewestStaff_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetGetNewestStaff_SC::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(itemlist_)) return false;
  return true;
}

void MSG_RetGetNewestStaff_SC::InternalSwap(MSG_RetGetNewestStaff_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  itemlist_.InternalSwap(&other->itemlist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetGetNewestStaff_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace trade
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::trade::MSG_ReqSellStaff_CS* Arena::CreateMaybeMessage< ::trade::MSG_ReqSellStaff_CS >(Arena* arena) {
  return Arena::CreateInternal< ::trade::MSG_ReqSellStaff_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::trade::MSG_RetSellStaff_SC* Arena::CreateMaybeMessage< ::trade::MSG_RetSellStaff_SC >(Arena* arena) {
  return Arena::CreateInternal< ::trade::MSG_RetSellStaff_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::trade::TradeItemData* Arena::CreateMaybeMessage< ::trade::TradeItemData >(Arena* arena) {
  return Arena::CreateInternal< ::trade::TradeItemData >(arena);
}
template<> PROTOBUF_NOINLINE ::trade::TradeItem* Arena::CreateMaybeMessage< ::trade::TradeItem >(Arena* arena) {
  return Arena::CreateInternal< ::trade::TradeItem >(arena);
}
template<> PROTOBUF_NOINLINE ::trade::MSG_ReqSellingStaff_CS* Arena::CreateMaybeMessage< ::trade::MSG_ReqSellingStaff_CS >(Arena* arena) {
  return Arena::CreateInternal< ::trade::MSG_ReqSellingStaff_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::trade::MSG_RetSellingStaff_SC* Arena::CreateMaybeMessage< ::trade::MSG_RetSellingStaff_SC >(Arena* arena) {
  return Arena::CreateInternal< ::trade::MSG_RetSellingStaff_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::trade::MSG_ReqRecommandPrice_CS* Arena::CreateMaybeMessage< ::trade::MSG_ReqRecommandPrice_CS >(Arena* arena) {
  return Arena::CreateInternal< ::trade::MSG_ReqRecommandPrice_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::trade::MSG_RetRecommandPrice_SC* Arena::CreateMaybeMessage< ::trade::MSG_RetRecommandPrice_SC >(Arena* arena) {
  return Arena::CreateInternal< ::trade::MSG_RetRecommandPrice_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::trade::MSG_ReqStopSellStaff_CS* Arena::CreateMaybeMessage< ::trade::MSG_ReqStopSellStaff_CS >(Arena* arena) {
  return Arena::CreateInternal< ::trade::MSG_ReqStopSellStaff_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::trade::MSG_RetStopSellStaff_SC* Arena::CreateMaybeMessage< ::trade::MSG_RetStopSellStaff_SC >(Arena* arena) {
  return Arena::CreateInternal< ::trade::MSG_RetStopSellStaff_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::trade::MSG_ReqSubSellingList_CS* Arena::CreateMaybeMessage< ::trade::MSG_ReqSubSellingList_CS >(Arena* arena) {
  return Arena::CreateInternal< ::trade::MSG_ReqSubSellingList_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::trade::MSG_RetSubSellingList_SC* Arena::CreateMaybeMessage< ::trade::MSG_RetSubSellingList_SC >(Arena* arena) {
  return Arena::CreateInternal< ::trade::MSG_RetSubSellingList_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::trade::MSG_ReqBuyItem_CS* Arena::CreateMaybeMessage< ::trade::MSG_ReqBuyItem_CS >(Arena* arena) {
  return Arena::CreateInternal< ::trade::MSG_ReqBuyItem_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::trade::MSG_RetBuyItem_SC* Arena::CreateMaybeMessage< ::trade::MSG_RetBuyItem_SC >(Arena* arena) {
  return Arena::CreateInternal< ::trade::MSG_RetBuyItem_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::trade::MSG_ReqTradeItemHistory_CS* Arena::CreateMaybeMessage< ::trade::MSG_ReqTradeItemHistory_CS >(Arena* arena) {
  return Arena::CreateInternal< ::trade::MSG_ReqTradeItemHistory_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::trade::TradeHistoryItem* Arena::CreateMaybeMessage< ::trade::TradeHistoryItem >(Arena* arena) {
  return Arena::CreateInternal< ::trade::TradeHistoryItem >(arena);
}
template<> PROTOBUF_NOINLINE ::trade::MSG_RetTradeItemHistory_SC* Arena::CreateMaybeMessage< ::trade::MSG_RetTradeItemHistory_SC >(Arena* arena) {
  return Arena::CreateInternal< ::trade::MSG_RetTradeItemHistory_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::trade::MSG_ReqSublistPage_CS* Arena::CreateMaybeMessage< ::trade::MSG_ReqSublistPage_CS >(Arena* arena) {
  return Arena::CreateInternal< ::trade::MSG_ReqSublistPage_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::trade::MSG_RetSublistPage_SC* Arena::CreateMaybeMessage< ::trade::MSG_RetSublistPage_SC >(Arena* arena) {
  return Arena::CreateInternal< ::trade::MSG_RetSublistPage_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::trade::MSG_ReqWatchTradeItem_CS* Arena::CreateMaybeMessage< ::trade::MSG_ReqWatchTradeItem_CS >(Arena* arena) {
  return Arena::CreateInternal< ::trade::MSG_ReqWatchTradeItem_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::trade::MSG_RetWatchTradeItem_SC* Arena::CreateMaybeMessage< ::trade::MSG_RetWatchTradeItem_SC >(Arena* arena) {
  return Arena::CreateInternal< ::trade::MSG_RetWatchTradeItem_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::trade::MSG_ReqWatchList_CS* Arena::CreateMaybeMessage< ::trade::MSG_ReqWatchList_CS >(Arena* arena) {
  return Arena::CreateInternal< ::trade::MSG_ReqWatchList_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::trade::MSG_RetWatchList_SC* Arena::CreateMaybeMessage< ::trade::MSG_RetWatchList_SC >(Arena* arena) {
  return Arena::CreateInternal< ::trade::MSG_RetWatchList_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::trade::MSG_ReqUserTradeHistory_CS* Arena::CreateMaybeMessage< ::trade::MSG_ReqUserTradeHistory_CS >(Arena* arena) {
  return Arena::CreateInternal< ::trade::MSG_ReqUserTradeHistory_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::trade::UserTradeItem* Arena::CreateMaybeMessage< ::trade::UserTradeItem >(Arena* arena) {
  return Arena::CreateInternal< ::trade::UserTradeItem >(arena);
}
template<> PROTOBUF_NOINLINE ::trade::MSG_RetUserTradeHistory_SC* Arena::CreateMaybeMessage< ::trade::MSG_RetUserTradeHistory_SC >(Arena* arena) {
  return Arena::CreateInternal< ::trade::MSG_RetUserTradeHistory_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::trade::MSG_ReqGetNewestStaff_CS* Arena::CreateMaybeMessage< ::trade::MSG_ReqGetNewestStaff_CS >(Arena* arena) {
  return Arena::CreateInternal< ::trade::MSG_ReqGetNewestStaff_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::trade::MSG_RetGetNewestStaff_SC* Arena::CreateMaybeMessage< ::trade::MSG_RetGetNewestStaff_SC >(Arena* arena) {
  return Arena::CreateInternal< ::trade::MSG_RetGetNewestStaff_SC >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
