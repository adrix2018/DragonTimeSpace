// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: quest.proto

#include "quest.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_quest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChangeMapFindWayInfo_quest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_quest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Ret_QuestInfo_SC_quest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_quest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QuestStateInfo_quest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_quest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RingQuestRingCount_quest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_quest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnorderQuestBranchInfo_quest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_quest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_npcQuestList_quest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_quest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_npcValidQuest_quest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_quest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_questCRC_quest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_quest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ringQuestInfo_quest_2eproto;
namespace quest {
class questCRCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<questCRC> _instance;
} _questCRC_default_instance_;
class validQuestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<validQuest> _instance;
} _validQuest_default_instance_;
class npcValidQuestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<npcValidQuest> _instance;
} _npcValidQuest_default_instance_;
class MSG_Req_VisitNpcTrade_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_VisitNpcTrade_CS> _instance;
} _MSG_Req_VisitNpcTrade_CS_default_instance_;
class MSG_Ret_VisitNpcTrade_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_VisitNpcTrade_SC> _instance;
} _MSG_Ret_VisitNpcTrade_SC_default_instance_;
class MSG_Req_QuestInfo_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_QuestInfo_CS> _instance;
} _MSG_Req_QuestInfo_CS_default_instance_;
class UnorderQuestBranchInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnorderQuestBranchInfo> _instance;
} _UnorderQuestBranchInfo_default_instance_;
class MSG_Ret_QuestInfo_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_QuestInfo_SC> _instance;
} _MSG_Ret_QuestInfo_SC_default_instance_;
class MSG_ReqExecuteQuest_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqExecuteQuest_CS> _instance;
} _MSG_ReqExecuteQuest_CS_default_instance_;
class MSG_ReqValidQuests_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqValidQuests_CS> _instance;
} _MSG_ReqValidQuests_CS_default_instance_;
class MSG_RetValidQuests_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetValidQuests_SC> _instance;
} _MSG_RetValidQuests_SC_default_instance_;
class MSG_ReqRetQuestState_CSCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqRetQuestState_CSC> _instance;
} _MSG_ReqRetQuestState_CSC_default_instance_;
class MSG_ReqAbandonQuest_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqAbandonQuest_CS> _instance;
} _MSG_ReqAbandonQuest_CS_default_instance_;
class MSG_RetAbandonQuest_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetAbandonQuest_SC> _instance;
} _MSG_RetAbandonQuest_SC_default_instance_;
class QuestStateInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QuestStateInfo> _instance;
} _QuestStateInfo_default_instance_;
class npcQuestListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<npcQuestList> _instance;
} _npcQuestList_default_instance_;
class MSG_ReqMapQuestInfo_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqMapQuestInfo_CS> _instance;
} _MSG_ReqMapQuestInfo_CS_default_instance_;
class MSG_RetMapQuestInfo_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetMapQuestInfo_SC> _instance;
} _MSG_RetMapQuestInfo_SC_default_instance_;
class MSG_ReqCurActiveQuest_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqCurActiveQuest_CS> _instance;
} _MSG_ReqCurActiveQuest_CS_default_instance_;
class ringQuestInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ringQuestInfo> _instance;
} _ringQuestInfo_default_instance_;
class MSG_RetCurActiveQuest_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetCurActiveQuest_SC> _instance;
} _MSG_RetCurActiveQuest_SC_default_instance_;
class MSG_ReqChangeMapFindPath_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqChangeMapFindPath_CS> _instance;
} _MSG_ReqChangeMapFindPath_CS_default_instance_;
class MSG_RetChangeMapFindPath_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetChangeMapFindPath_SC> _instance;
} _MSG_RetChangeMapFindPath_SC_default_instance_;
class ChangeMapFindWayInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChangeMapFindWayInfo> _instance;
} _ChangeMapFindWayInfo_default_instance_;
class MSG_RetPlotTalkID_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetPlotTalkID_SC> _instance;
} _MSG_RetPlotTalkID_SC_default_instance_;
class MSG_CartoonCompleteNotify_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_CartoonCompleteNotify_SC> _instance;
} _MSG_CartoonCompleteNotify_SC_default_instance_;
class MSG_PlayCartoonAndGoMap_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_PlayCartoonAndGoMap_SC> _instance;
} _MSG_PlayCartoonAndGoMap_SC_default_instance_;
class MSG_ReqSubmitObjs_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqSubmitObjs_CS> _instance;
} _MSG_ReqSubmitObjs_CS_default_instance_;
class MSG_RetSubmitObjs_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetSubmitObjs_SC> _instance;
} _MSG_RetSubmitObjs_SC_default_instance_;
class RingQuestRingCountDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RingQuestRingCount> _instance;
} _RingQuestRingCount_default_instance_;
class MSG_RetRingQuestRingCount_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetRingQuestRingCount_SC> _instance;
} _MSG_RetRingQuestRingCount_SC_default_instance_;
class MSG_notifyRefreshQuestInfo_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_notifyRefreshQuestInfo_SC> _instance;
} _MSG_notifyRefreshQuestInfo_SC_default_instance_;
class MSG_PlayBellQTE_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_PlayBellQTE_SC> _instance;
} _MSG_PlayBellQTE_SC_default_instance_;
class MSG_PlayBellQTEResult_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_PlayBellQTEResult_CS> _instance;
} _MSG_PlayBellQTEResult_CS_default_instance_;
class MSG_Req_SetQuestNeedShow_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_SetQuestNeedShow_CS> _instance;
} _MSG_Req_SetQuestNeedShow_CS_default_instance_;
class MSG_Ret_SetQuestNeedShow_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_SetQuestNeedShow_SC> _instance;
} _MSG_Ret_SetQuestNeedShow_SC_default_instance_;
class MSG_Req_ShareQuestToTeamMember_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_ShareQuestToTeamMember_CS> _instance;
} _MSG_Req_ShareQuestToTeamMember_CS_default_instance_;
class MSG_Ret_NotifyShareQuest_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_NotifyShareQuest_SC> _instance;
} _MSG_Ret_NotifyShareQuest_SC_default_instance_;
class MSG_Req_AnswerShareQuest_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_AnswerShareQuest_CS> _instance;
} _MSG_Req_AnswerShareQuest_CS_default_instance_;
class MSG_Ret_AnswerShareQuest_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_AnswerShareQuest_SC> _instance;
} _MSG_Ret_AnswerShareQuest_SC_default_instance_;
class MSG_Ret_NotifyCountDown_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_NotifyCountDown_SC> _instance;
} _MSG_Ret_NotifyCountDown_SC_default_instance_;
class MSG_NotifyClientOptional_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_NotifyClientOptional_SC> _instance;
} _MSG_NotifyClientOptional_SC_default_instance_;
class MSG_notifyQuestStateEffect_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_notifyQuestStateEffect_SC> _instance;
} _MSG_notifyQuestStateEffect_SC_default_instance_;
class MSG_Req_CommitYQDData_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_CommitYQDData_CS> _instance;
} _MSG_Req_CommitYQDData_CS_default_instance_;
class MSG_Req_PlayYQDRetry_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_PlayYQDRetry_CS> _instance;
} _MSG_Req_PlayYQDRetry_CS_default_instance_;
}  // namespace quest
static void InitDefaultsscc_info_ChangeMapFindWayInfo_quest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quest::_ChangeMapFindWayInfo_default_instance_;
    new (ptr) ::quest::ChangeMapFindWayInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quest::ChangeMapFindWayInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChangeMapFindWayInfo_quest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChangeMapFindWayInfo_quest_2eproto}, {}};

static void InitDefaultsscc_info_MSG_CartoonCompleteNotify_SC_quest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quest::_MSG_CartoonCompleteNotify_SC_default_instance_;
    new (ptr) ::quest::MSG_CartoonCompleteNotify_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quest::MSG_CartoonCompleteNotify_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_CartoonCompleteNotify_SC_quest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_CartoonCompleteNotify_SC_quest_2eproto}, {}};

static void InitDefaultsscc_info_MSG_NotifyClientOptional_SC_quest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quest::_MSG_NotifyClientOptional_SC_default_instance_;
    new (ptr) ::quest::MSG_NotifyClientOptional_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quest::MSG_NotifyClientOptional_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_NotifyClientOptional_SC_quest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_NotifyClientOptional_SC_quest_2eproto}, {}};

static void InitDefaultsscc_info_MSG_PlayBellQTEResult_CS_quest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quest::_MSG_PlayBellQTEResult_CS_default_instance_;
    new (ptr) ::quest::MSG_PlayBellQTEResult_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quest::MSG_PlayBellQTEResult_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_PlayBellQTEResult_CS_quest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_PlayBellQTEResult_CS_quest_2eproto}, {}};

static void InitDefaultsscc_info_MSG_PlayBellQTE_SC_quest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quest::_MSG_PlayBellQTE_SC_default_instance_;
    new (ptr) ::quest::MSG_PlayBellQTE_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quest::MSG_PlayBellQTE_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_PlayBellQTE_SC_quest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_PlayBellQTE_SC_quest_2eproto}, {}};

static void InitDefaultsscc_info_MSG_PlayCartoonAndGoMap_SC_quest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quest::_MSG_PlayCartoonAndGoMap_SC_default_instance_;
    new (ptr) ::quest::MSG_PlayCartoonAndGoMap_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quest::MSG_PlayCartoonAndGoMap_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_PlayCartoonAndGoMap_SC_quest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_PlayCartoonAndGoMap_SC_quest_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqAbandonQuest_CS_quest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quest::_MSG_ReqAbandonQuest_CS_default_instance_;
    new (ptr) ::quest::MSG_ReqAbandonQuest_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quest::MSG_ReqAbandonQuest_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqAbandonQuest_CS_quest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqAbandonQuest_CS_quest_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqChangeMapFindPath_CS_quest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quest::_MSG_ReqChangeMapFindPath_CS_default_instance_;
    new (ptr) ::quest::MSG_ReqChangeMapFindPath_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quest::MSG_ReqChangeMapFindPath_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqChangeMapFindPath_CS_quest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqChangeMapFindPath_CS_quest_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqCurActiveQuest_CS_quest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quest::_MSG_ReqCurActiveQuest_CS_default_instance_;
    new (ptr) ::quest::MSG_ReqCurActiveQuest_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quest::MSG_ReqCurActiveQuest_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqCurActiveQuest_CS_quest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqCurActiveQuest_CS_quest_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqExecuteQuest_CS_quest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quest::_MSG_ReqExecuteQuest_CS_default_instance_;
    new (ptr) ::quest::MSG_ReqExecuteQuest_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quest::MSG_ReqExecuteQuest_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqExecuteQuest_CS_quest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqExecuteQuest_CS_quest_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqMapQuestInfo_CS_quest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quest::_MSG_ReqMapQuestInfo_CS_default_instance_;
    new (ptr) ::quest::MSG_ReqMapQuestInfo_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quest::MSG_ReqMapQuestInfo_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqMapQuestInfo_CS_quest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqMapQuestInfo_CS_quest_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqRetQuestState_CSC_quest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quest::_MSG_ReqRetQuestState_CSC_default_instance_;
    new (ptr) ::quest::MSG_ReqRetQuestState_CSC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quest::MSG_ReqRetQuestState_CSC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqRetQuestState_CSC_quest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqRetQuestState_CSC_quest_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqSubmitObjs_CS_quest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quest::_MSG_ReqSubmitObjs_CS_default_instance_;
    new (ptr) ::quest::MSG_ReqSubmitObjs_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quest::MSG_ReqSubmitObjs_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqSubmitObjs_CS_quest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqSubmitObjs_CS_quest_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqValidQuests_CS_quest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quest::_MSG_ReqValidQuests_CS_default_instance_;
    new (ptr) ::quest::MSG_ReqValidQuests_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quest::MSG_ReqValidQuests_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqValidQuests_CS_quest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqValidQuests_CS_quest_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_AnswerShareQuest_CS_quest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quest::_MSG_Req_AnswerShareQuest_CS_default_instance_;
    new (ptr) ::quest::MSG_Req_AnswerShareQuest_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quest::MSG_Req_AnswerShareQuest_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_AnswerShareQuest_CS_quest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_AnswerShareQuest_CS_quest_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_CommitYQDData_CS_quest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quest::_MSG_Req_CommitYQDData_CS_default_instance_;
    new (ptr) ::quest::MSG_Req_CommitYQDData_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quest::MSG_Req_CommitYQDData_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_CommitYQDData_CS_quest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_CommitYQDData_CS_quest_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_PlayYQDRetry_CS_quest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quest::_MSG_Req_PlayYQDRetry_CS_default_instance_;
    new (ptr) ::quest::MSG_Req_PlayYQDRetry_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quest::MSG_Req_PlayYQDRetry_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_PlayYQDRetry_CS_quest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_PlayYQDRetry_CS_quest_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_QuestInfo_CS_quest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quest::_MSG_Req_QuestInfo_CS_default_instance_;
    new (ptr) ::quest::MSG_Req_QuestInfo_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quest::MSG_Req_QuestInfo_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_QuestInfo_CS_quest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_QuestInfo_CS_quest_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_SetQuestNeedShow_CS_quest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quest::_MSG_Req_SetQuestNeedShow_CS_default_instance_;
    new (ptr) ::quest::MSG_Req_SetQuestNeedShow_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quest::MSG_Req_SetQuestNeedShow_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_SetQuestNeedShow_CS_quest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_SetQuestNeedShow_CS_quest_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_ShareQuestToTeamMember_CS_quest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quest::_MSG_Req_ShareQuestToTeamMember_CS_default_instance_;
    new (ptr) ::quest::MSG_Req_ShareQuestToTeamMember_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quest::MSG_Req_ShareQuestToTeamMember_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_ShareQuestToTeamMember_CS_quest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_ShareQuestToTeamMember_CS_quest_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_VisitNpcTrade_CS_quest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quest::_MSG_Req_VisitNpcTrade_CS_default_instance_;
    new (ptr) ::quest::MSG_Req_VisitNpcTrade_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quest::MSG_Req_VisitNpcTrade_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Req_VisitNpcTrade_CS_quest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Req_VisitNpcTrade_CS_quest_2eproto}, {
      &scc_info_questCRC_quest_2eproto.base,}};

static void InitDefaultsscc_info_MSG_RetAbandonQuest_SC_quest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quest::_MSG_RetAbandonQuest_SC_default_instance_;
    new (ptr) ::quest::MSG_RetAbandonQuest_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quest::MSG_RetAbandonQuest_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RetAbandonQuest_SC_quest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_RetAbandonQuest_SC_quest_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RetChangeMapFindPath_SC_quest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quest::_MSG_RetChangeMapFindPath_SC_default_instance_;
    new (ptr) ::quest::MSG_RetChangeMapFindPath_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quest::MSG_RetChangeMapFindPath_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_RetChangeMapFindPath_SC_quest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_RetChangeMapFindPath_SC_quest_2eproto}, {
      &scc_info_ChangeMapFindWayInfo_quest_2eproto.base,}};

static void InitDefaultsscc_info_MSG_RetCurActiveQuest_SC_quest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quest::_MSG_RetCurActiveQuest_SC_default_instance_;
    new (ptr) ::quest::MSG_RetCurActiveQuest_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quest::MSG_RetCurActiveQuest_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MSG_RetCurActiveQuest_SC_quest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_MSG_RetCurActiveQuest_SC_quest_2eproto}, {
      &scc_info_MSG_Ret_QuestInfo_SC_quest_2eproto.base,
      &scc_info_npcValidQuest_quest_2eproto.base,
      &scc_info_ringQuestInfo_quest_2eproto.base,}};

static void InitDefaultsscc_info_MSG_RetMapQuestInfo_SC_quest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quest::_MSG_RetMapQuestInfo_SC_default_instance_;
    new (ptr) ::quest::MSG_RetMapQuestInfo_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quest::MSG_RetMapQuestInfo_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_RetMapQuestInfo_SC_quest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_RetMapQuestInfo_SC_quest_2eproto}, {
      &scc_info_npcQuestList_quest_2eproto.base,}};

static void InitDefaultsscc_info_MSG_RetPlotTalkID_SC_quest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quest::_MSG_RetPlotTalkID_SC_default_instance_;
    new (ptr) ::quest::MSG_RetPlotTalkID_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quest::MSG_RetPlotTalkID_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RetPlotTalkID_SC_quest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_RetPlotTalkID_SC_quest_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RetRingQuestRingCount_SC_quest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quest::_MSG_RetRingQuestRingCount_SC_default_instance_;
    new (ptr) ::quest::MSG_RetRingQuestRingCount_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quest::MSG_RetRingQuestRingCount_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_RetRingQuestRingCount_SC_quest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_RetRingQuestRingCount_SC_quest_2eproto}, {
      &scc_info_RingQuestRingCount_quest_2eproto.base,}};

static void InitDefaultsscc_info_MSG_RetSubmitObjs_SC_quest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quest::_MSG_RetSubmitObjs_SC_default_instance_;
    new (ptr) ::quest::MSG_RetSubmitObjs_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quest::MSG_RetSubmitObjs_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RetSubmitObjs_SC_quest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_RetSubmitObjs_SC_quest_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RetValidQuests_SC_quest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quest::_MSG_RetValidQuests_SC_default_instance_;
    new (ptr) ::quest::MSG_RetValidQuests_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quest::MSG_RetValidQuests_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_RetValidQuests_SC_quest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_RetValidQuests_SC_quest_2eproto}, {
      &scc_info_npcValidQuest_quest_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Ret_AnswerShareQuest_SC_quest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quest::_MSG_Ret_AnswerShareQuest_SC_default_instance_;
    new (ptr) ::quest::MSG_Ret_AnswerShareQuest_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quest::MSG_Ret_AnswerShareQuest_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_AnswerShareQuest_SC_quest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_AnswerShareQuest_SC_quest_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_NotifyCountDown_SC_quest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quest::_MSG_Ret_NotifyCountDown_SC_default_instance_;
    new (ptr) ::quest::MSG_Ret_NotifyCountDown_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quest::MSG_Ret_NotifyCountDown_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_NotifyCountDown_SC_quest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_NotifyCountDown_SC_quest_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_NotifyShareQuest_SC_quest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quest::_MSG_Ret_NotifyShareQuest_SC_default_instance_;
    new (ptr) ::quest::MSG_Ret_NotifyShareQuest_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quest::MSG_Ret_NotifyShareQuest_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_NotifyShareQuest_SC_quest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_NotifyShareQuest_SC_quest_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_QuestInfo_SC_quest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quest::_MSG_Ret_QuestInfo_SC_default_instance_;
    new (ptr) ::quest::MSG_Ret_QuestInfo_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quest::MSG_Ret_QuestInfo_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Ret_QuestInfo_SC_quest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Ret_QuestInfo_SC_quest_2eproto}, {
      &scc_info_UnorderQuestBranchInfo_quest_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Ret_SetQuestNeedShow_SC_quest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quest::_MSG_Ret_SetQuestNeedShow_SC_default_instance_;
    new (ptr) ::quest::MSG_Ret_SetQuestNeedShow_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quest::MSG_Ret_SetQuestNeedShow_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_SetQuestNeedShow_SC_quest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_SetQuestNeedShow_SC_quest_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_VisitNpcTrade_SC_quest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quest::_MSG_Ret_VisitNpcTrade_SC_default_instance_;
    new (ptr) ::quest::MSG_Ret_VisitNpcTrade_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quest::MSG_Ret_VisitNpcTrade_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Ret_VisitNpcTrade_SC_quest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Ret_VisitNpcTrade_SC_quest_2eproto}, {
      &scc_info_questCRC_quest_2eproto.base,}};

static void InitDefaultsscc_info_MSG_notifyQuestStateEffect_SC_quest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quest::_MSG_notifyQuestStateEffect_SC_default_instance_;
    new (ptr) ::quest::MSG_notifyQuestStateEffect_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quest::MSG_notifyQuestStateEffect_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_notifyQuestStateEffect_SC_quest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_notifyQuestStateEffect_SC_quest_2eproto}, {}};

static void InitDefaultsscc_info_MSG_notifyRefreshQuestInfo_SC_quest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quest::_MSG_notifyRefreshQuestInfo_SC_default_instance_;
    new (ptr) ::quest::MSG_notifyRefreshQuestInfo_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quest::MSG_notifyRefreshQuestInfo_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_notifyRefreshQuestInfo_SC_quest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_notifyRefreshQuestInfo_SC_quest_2eproto}, {
      &scc_info_MSG_Ret_QuestInfo_SC_quest_2eproto.base,}};

static void InitDefaultsscc_info_QuestStateInfo_quest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quest::_QuestStateInfo_default_instance_;
    new (ptr) ::quest::QuestStateInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quest::QuestStateInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QuestStateInfo_quest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_QuestStateInfo_quest_2eproto}, {}};

static void InitDefaultsscc_info_RingQuestRingCount_quest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quest::_RingQuestRingCount_default_instance_;
    new (ptr) ::quest::RingQuestRingCount();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quest::RingQuestRingCount::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RingQuestRingCount_quest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RingQuestRingCount_quest_2eproto}, {}};

static void InitDefaultsscc_info_UnorderQuestBranchInfo_quest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quest::_UnorderQuestBranchInfo_default_instance_;
    new (ptr) ::quest::UnorderQuestBranchInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quest::UnorderQuestBranchInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnorderQuestBranchInfo_quest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnorderQuestBranchInfo_quest_2eproto}, {}};

static void InitDefaultsscc_info_npcQuestList_quest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quest::_npcQuestList_default_instance_;
    new (ptr) ::quest::npcQuestList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quest::npcQuestList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_npcQuestList_quest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_npcQuestList_quest_2eproto}, {
      &scc_info_QuestStateInfo_quest_2eproto.base,}};

static void InitDefaultsscc_info_npcValidQuest_quest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quest::_npcValidQuest_default_instance_;
    new (ptr) ::quest::npcValidQuest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quest::npcValidQuest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_npcValidQuest_quest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_npcValidQuest_quest_2eproto}, {}};

static void InitDefaultsscc_info_questCRC_quest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quest::_questCRC_default_instance_;
    new (ptr) ::quest::questCRC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quest::questCRC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_questCRC_quest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_questCRC_quest_2eproto}, {}};

static void InitDefaultsscc_info_ringQuestInfo_quest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quest::_ringQuestInfo_default_instance_;
    new (ptr) ::quest::ringQuestInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quest::ringQuestInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ringQuestInfo_quest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ringQuestInfo_quest_2eproto}, {}};

static void InitDefaultsscc_info_validQuest_quest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quest::_validQuest_default_instance_;
    new (ptr) ::quest::validQuest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quest::validQuest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_validQuest_quest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_validQuest_quest_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_quest_2eproto[45];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_quest_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_quest_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_quest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::quest::questCRC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::quest::questCRC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::quest::questCRC, quest_id_),
  PROTOBUF_FIELD_OFFSET(::quest::questCRC, branch_id_),
  PROTOBUF_FIELD_OFFSET(::quest::questCRC, crc_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::quest::validQuest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::quest::validQuest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::quest::validQuest, quest_id_),
  PROTOBUF_FIELD_OFFSET(::quest::validQuest, branch_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::quest::npcValidQuest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::quest::npcValidQuest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::quest::npcValidQuest, npcid_),
  PROTOBUF_FIELD_OFFSET(::quest::npcValidQuest, questid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Req_VisitNpcTrade_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Req_VisitNpcTrade_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Req_VisitNpcTrade_CS, npc_temp_id_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Req_VisitNpcTrade_CS, allcrc_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Ret_VisitNpcTrade_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Ret_VisitNpcTrade_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Ret_VisitNpcTrade_SC, action_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Ret_VisitNpcTrade_SC, retcode_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Ret_VisitNpcTrade_SC, flag_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Ret_VisitNpcTrade_SC, npc_temp_id_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Ret_VisitNpcTrade_SC, type_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Ret_VisitNpcTrade_SC, conv_exchange_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Ret_VisitNpcTrade_SC, show_type_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Ret_VisitNpcTrade_SC, crc_ret_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Ret_VisitNpcTrade_SC, user_menu_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Ret_VisitNpcTrade_SC, npc_menu_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Ret_VisitNpcTrade_SC, allcrc_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Ret_VisitNpcTrade_SC, source_),
  2,
  3,
  5,
  4,
  6,
  7,
  8,
  9,
  0,
  1,
  ~0u,
  10,
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Req_QuestInfo_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Req_QuestInfo_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Req_QuestInfo_CS, id_),
  0,
  PROTOBUF_FIELD_OFFSET(::quest::UnorderQuestBranchInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::quest::UnorderQuestBranchInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::quest::UnorderQuestBranchInfo, degreevar_),
  PROTOBUF_FIELD_OFFSET(::quest::UnorderQuestBranchInfo, curvalue_),
  PROTOBUF_FIELD_OFFSET(::quest::UnorderQuestBranchInfo, maxvalue_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Ret_QuestInfo_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Ret_QuestInfo_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Ret_QuestInfo_SC, id_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Ret_QuestInfo_SC, state_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Ret_QuestInfo_SC, score_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Ret_QuestInfo_SC, curvalue_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Ret_QuestInfo_SC, maxvalue_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Ret_QuestInfo_SC, starttime_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Ret_QuestInfo_SC, cur_extvalue_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Ret_QuestInfo_SC, max_extvalue_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Ret_QuestInfo_SC, leftsecs_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Ret_QuestInfo_SC, extinfo_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Ret_QuestInfo_SC, show_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  ~0u,
  9,
  PROTOBUF_FIELD_OFFSET(::quest::MSG_ReqExecuteQuest_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_ReqExecuteQuest_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::quest::MSG_ReqExecuteQuest_CS, id_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_ReqExecuteQuest_CS, target_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_ReqExecuteQuest_CS, offset_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_ReqExecuteQuest_CS, questdesccrc_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_ReqExecuteQuest_CS, chartarget_),
  1,
  0,
  2,
  4,
  3,
  PROTOBUF_FIELD_OFFSET(::quest::MSG_ReqValidQuests_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_ReqValidQuests_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::quest::MSG_RetValidQuests_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_RetValidQuests_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::quest::MSG_RetValidQuests_SC, onequest_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::quest::MSG_ReqRetQuestState_CSC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_ReqRetQuestState_CSC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::quest::MSG_ReqRetQuestState_CSC, id_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_ReqRetQuestState_CSC, state_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::quest::MSG_ReqAbandonQuest_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_ReqAbandonQuest_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::quest::MSG_ReqAbandonQuest_CS, id_),
  0,
  PROTOBUF_FIELD_OFFSET(::quest::MSG_RetAbandonQuest_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_RetAbandonQuest_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::quest::MSG_RetAbandonQuest_SC, id_),
  0,
  PROTOBUF_FIELD_OFFSET(::quest::QuestStateInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::quest::QuestStateInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::quest::QuestStateInfo, questid_),
  PROTOBUF_FIELD_OFFSET(::quest::QuestStateInfo, state_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::quest::npcQuestList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::quest::npcQuestList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::quest::npcQuestList, npcid_),
  PROTOBUF_FIELD_OFFSET(::quest::npcQuestList, quests_),
  PROTOBUF_FIELD_OFFSET(::quest::npcQuestList, state_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::quest::MSG_ReqMapQuestInfo_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_ReqMapQuestInfo_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::quest::MSG_RetMapQuestInfo_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_RetMapQuestInfo_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::quest::MSG_RetMapQuestInfo_SC, npclists_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::quest::MSG_ReqCurActiveQuest_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_ReqCurActiveQuest_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::quest::ringQuestInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::quest::ringQuestInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::quest::ringQuestInfo, mainquestid_),
  PROTOBUF_FIELD_OFFSET(::quest::ringQuestInfo, finishringnum_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::quest::MSG_RetCurActiveQuest_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_RetCurActiveQuest_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::quest::MSG_RetCurActiveQuest_SC, item_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_RetCurActiveQuest_SC, newaccept_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_RetCurActiveQuest_SC, dayvar_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_RetCurActiveQuest_SC, ringinfo_),
  ~0u,
  ~0u,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::quest::MSG_ReqChangeMapFindPath_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_ReqChangeMapFindPath_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::quest::MSG_ReqChangeMapFindPath_CS, pathwayid_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_ReqChangeMapFindPath_CS, questid_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_ReqChangeMapFindPath_CS, destx_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_ReqChangeMapFindPath_CS, desty_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::quest::MSG_RetChangeMapFindPath_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_RetChangeMapFindPath_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::quest::MSG_RetChangeMapFindPath_SC, info_),
  0,
  PROTOBUF_FIELD_OFFSET(::quest::ChangeMapFindWayInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::quest::ChangeMapFindWayInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::quest::ChangeMapFindWayInfo, errcode_),
  PROTOBUF_FIELD_OFFSET(::quest::ChangeMapFindWayInfo, pathwayid_),
  PROTOBUF_FIELD_OFFSET(::quest::ChangeMapFindWayInfo, destmapid_),
  PROTOBUF_FIELD_OFFSET(::quest::ChangeMapFindWayInfo, findingway_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::quest::MSG_RetPlotTalkID_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_RetPlotTalkID_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::quest::MSG_RetPlotTalkID_SC, groupid_),
  0,
  PROTOBUF_FIELD_OFFSET(::quest::MSG_CartoonCompleteNotify_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_CartoonCompleteNotify_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::quest::MSG_CartoonCompleteNotify_SC, groupid_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_CartoonCompleteNotify_SC, command_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_CartoonCompleteNotify_SC, delay_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::quest::MSG_PlayCartoonAndGoMap_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_PlayCartoonAndGoMap_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::quest::MSG_PlayCartoonAndGoMap_SC, groupid_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_PlayCartoonAndGoMap_SC, command_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_PlayCartoonAndGoMap_SC, delay_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_PlayCartoonAndGoMap_SC, callbackid_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::quest::MSG_ReqSubmitObjs_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_ReqSubmitObjs_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::quest::MSG_ReqSubmitObjs_CS, thisid_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_ReqSubmitObjs_CS, bagid_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::quest::MSG_RetSubmitObjs_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_RetSubmitObjs_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::quest::MSG_RetSubmitObjs_SC, retcode_),
  0,
  PROTOBUF_FIELD_OFFSET(::quest::RingQuestRingCount, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::quest::RingQuestRingCount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::quest::RingQuestRingCount, questtype_),
  PROTOBUF_FIELD_OFFSET(::quest::RingQuestRingCount, ring_count_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::quest::MSG_RetRingQuestRingCount_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_RetRingQuestRingCount_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::quest::MSG_RetRingQuestRingCount_SC, ringcount_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::quest::MSG_notifyRefreshQuestInfo_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_notifyRefreshQuestInfo_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::quest::MSG_notifyRefreshQuestInfo_SC, item_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::quest::MSG_PlayBellQTE_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_PlayBellQTE_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::quest::MSG_PlayBellQTE_SC, qtelevel_),
  0,
  PROTOBUF_FIELD_OFFSET(::quest::MSG_PlayBellQTEResult_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_PlayBellQTEResult_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::quest::MSG_PlayBellQTEResult_CS, qtelevel_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_PlayBellQTEResult_CS, result_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Req_SetQuestNeedShow_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Req_SetQuestNeedShow_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Req_SetQuestNeedShow_CS, questid_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Req_SetQuestNeedShow_CS, show_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Ret_SetQuestNeedShow_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Ret_SetQuestNeedShow_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Ret_SetQuestNeedShow_SC, questid_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Ret_SetQuestNeedShow_SC, result_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Ret_SetQuestNeedShow_SC, code_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Req_ShareQuestToTeamMember_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Req_ShareQuestToTeamMember_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Req_ShareQuestToTeamMember_CS, questid_),
  0,
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Ret_NotifyShareQuest_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Ret_NotifyShareQuest_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Ret_NotifyShareQuest_SC, name_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Ret_NotifyShareQuest_SC, questid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Req_AnswerShareQuest_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Req_AnswerShareQuest_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Req_AnswerShareQuest_CS, questid_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Req_AnswerShareQuest_CS, accept_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Ret_AnswerShareQuest_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Ret_AnswerShareQuest_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Ret_AnswerShareQuest_SC, code_),
  0,
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Ret_NotifyCountDown_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Ret_NotifyCountDown_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Ret_NotifyCountDown_SC, bset_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Ret_NotifyCountDown_SC, delay_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Ret_NotifyCountDown_SC, seconds_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::quest::MSG_NotifyClientOptional_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_NotifyClientOptional_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::quest::MSG_NotifyClientOptional_SC, type_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_NotifyClientOptional_SC, setting_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::quest::MSG_notifyQuestStateEffect_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_notifyQuestStateEffect_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::quest::MSG_notifyQuestStateEffect_SC, questid_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_notifyQuestStateEffect_SC, state_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Req_CommitYQDData_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Req_CommitYQDData_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Req_CommitYQDData_CS, step_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Req_CommitYQDData_CS, success_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Req_CommitYQDData_CS, type_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Req_PlayYQDRetry_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Req_PlayYQDRetry_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::quest::MSG_Req_PlayYQDRetry_CS, type_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::quest::questCRC)},
  { 11, 18, sizeof(::quest::validQuest)},
  { 20, 27, sizeof(::quest::npcValidQuest)},
  { 29, 36, sizeof(::quest::MSG_Req_VisitNpcTrade_CS)},
  { 38, 55, sizeof(::quest::MSG_Ret_VisitNpcTrade_SC)},
  { 67, 73, sizeof(::quest::MSG_Req_QuestInfo_CS)},
  { 74, 82, sizeof(::quest::UnorderQuestBranchInfo)},
  { 85, 101, sizeof(::quest::MSG_Ret_QuestInfo_SC)},
  { 112, 122, sizeof(::quest::MSG_ReqExecuteQuest_CS)},
  { 127, 132, sizeof(::quest::MSG_ReqValidQuests_CS)},
  { 132, 138, sizeof(::quest::MSG_RetValidQuests_SC)},
  { 139, 146, sizeof(::quest::MSG_ReqRetQuestState_CSC)},
  { 148, 154, sizeof(::quest::MSG_ReqAbandonQuest_CS)},
  { 155, 161, sizeof(::quest::MSG_RetAbandonQuest_SC)},
  { 162, 169, sizeof(::quest::QuestStateInfo)},
  { 171, 179, sizeof(::quest::npcQuestList)},
  { 182, 187, sizeof(::quest::MSG_ReqMapQuestInfo_CS)},
  { 187, 193, sizeof(::quest::MSG_RetMapQuestInfo_SC)},
  { 194, 199, sizeof(::quest::MSG_ReqCurActiveQuest_CS)},
  { 199, 206, sizeof(::quest::ringQuestInfo)},
  { 208, 217, sizeof(::quest::MSG_RetCurActiveQuest_SC)},
  { 221, 230, sizeof(::quest::MSG_ReqChangeMapFindPath_CS)},
  { 234, 240, sizeof(::quest::MSG_RetChangeMapFindPath_SC)},
  { 241, 250, sizeof(::quest::ChangeMapFindWayInfo)},
  { 254, 260, sizeof(::quest::MSG_RetPlotTalkID_SC)},
  { 261, 269, sizeof(::quest::MSG_CartoonCompleteNotify_SC)},
  { 272, 281, sizeof(::quest::MSG_PlayCartoonAndGoMap_SC)},
  { 285, 292, sizeof(::quest::MSG_ReqSubmitObjs_CS)},
  { 294, 300, sizeof(::quest::MSG_RetSubmitObjs_SC)},
  { 301, 308, sizeof(::quest::RingQuestRingCount)},
  { 310, 316, sizeof(::quest::MSG_RetRingQuestRingCount_SC)},
  { 317, 323, sizeof(::quest::MSG_notifyRefreshQuestInfo_SC)},
  { 324, 330, sizeof(::quest::MSG_PlayBellQTE_SC)},
  { 331, 338, sizeof(::quest::MSG_PlayBellQTEResult_CS)},
  { 340, 347, sizeof(::quest::MSG_Req_SetQuestNeedShow_CS)},
  { 349, 357, sizeof(::quest::MSG_Ret_SetQuestNeedShow_SC)},
  { 360, 366, sizeof(::quest::MSG_Req_ShareQuestToTeamMember_CS)},
  { 367, 374, sizeof(::quest::MSG_Ret_NotifyShareQuest_SC)},
  { 376, 383, sizeof(::quest::MSG_Req_AnswerShareQuest_CS)},
  { 385, 391, sizeof(::quest::MSG_Ret_AnswerShareQuest_SC)},
  { 392, 400, sizeof(::quest::MSG_Ret_NotifyCountDown_SC)},
  { 403, 410, sizeof(::quest::MSG_NotifyClientOptional_SC)},
  { 412, 419, sizeof(::quest::MSG_notifyQuestStateEffect_SC)},
  { 421, 429, sizeof(::quest::MSG_Req_CommitYQDData_CS)},
  { 432, 438, sizeof(::quest::MSG_Req_PlayYQDRetry_CS)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quest::_questCRC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quest::_validQuest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quest::_npcValidQuest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quest::_MSG_Req_VisitNpcTrade_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quest::_MSG_Ret_VisitNpcTrade_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quest::_MSG_Req_QuestInfo_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quest::_UnorderQuestBranchInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quest::_MSG_Ret_QuestInfo_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quest::_MSG_ReqExecuteQuest_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quest::_MSG_ReqValidQuests_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quest::_MSG_RetValidQuests_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quest::_MSG_ReqRetQuestState_CSC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quest::_MSG_ReqAbandonQuest_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quest::_MSG_RetAbandonQuest_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quest::_QuestStateInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quest::_npcQuestList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quest::_MSG_ReqMapQuestInfo_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quest::_MSG_RetMapQuestInfo_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quest::_MSG_ReqCurActiveQuest_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quest::_ringQuestInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quest::_MSG_RetCurActiveQuest_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quest::_MSG_ReqChangeMapFindPath_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quest::_MSG_RetChangeMapFindPath_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quest::_ChangeMapFindWayInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quest::_MSG_RetPlotTalkID_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quest::_MSG_CartoonCompleteNotify_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quest::_MSG_PlayCartoonAndGoMap_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quest::_MSG_ReqSubmitObjs_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quest::_MSG_RetSubmitObjs_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quest::_RingQuestRingCount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quest::_MSG_RetRingQuestRingCount_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quest::_MSG_notifyRefreshQuestInfo_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quest::_MSG_PlayBellQTE_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quest::_MSG_PlayBellQTEResult_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quest::_MSG_Req_SetQuestNeedShow_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quest::_MSG_Ret_SetQuestNeedShow_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quest::_MSG_Req_ShareQuestToTeamMember_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quest::_MSG_Ret_NotifyShareQuest_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quest::_MSG_Req_AnswerShareQuest_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quest::_MSG_Ret_AnswerShareQuest_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quest::_MSG_Ret_NotifyCountDown_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quest::_MSG_NotifyClientOptional_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quest::_MSG_notifyQuestStateEffect_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quest::_MSG_Req_CommitYQDData_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quest::_MSG_Req_PlayYQDRetry_CS_default_instance_),
};

const char descriptor_table_protodef_quest_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013quest.proto\022\005quest\"<\n\010questCRC\022\020\n\010ques"
  "t_id\030\001 \001(\r\022\021\n\tbranch_id\030\002 \001(\r\022\013\n\003crc\030\003 \001"
  "(\r\"1\n\nvalidQuest\022\020\n\010quest_id\030\001 \001(\r\022\021\n\tbr"
  "anch_id\030\002 \001(\r\"/\n\rnpcValidQuest\022\r\n\005npcid\030"
  "\001 \001(\r\022\017\n\007questid\030\002 \001(\r\"P\n\030MSG_Req_VisitN"
  "pcTrade_CS\022\023\n\013npc_temp_id\030\001 \001(\004\022\037\n\006allcr"
  "c\030\002 \003(\0132\017.quest.questCRC\"\375\001\n\030MSG_Ret_Vis"
  "itNpcTrade_SC\022\016\n\006action\030\001 \001(\r\022\017\n\007retcode"
  "\030\002 \001(\r\022\014\n\004flag\030\003 \001(\r\022\023\n\013npc_temp_id\030\004 \001("
  "\004\022\014\n\004type\030\005 \001(\r\022\025\n\rconv_exchange\030\006 \001(\r\022\021"
  "\n\tshow_type\030\007 \001(\r\022\017\n\007crc_ret\030\010 \001(\r\022\021\n\tus"
  "er_menu\030\t \001(\t\022\020\n\010npc_menu\030\n \001(\t\022\037\n\006allcr"
  "c\030\013 \003(\0132\017.quest.questCRC\022\016\n\006source\030\014 \001(\r"
  "\"\"\n\024MSG_Req_QuestInfo_CS\022\n\n\002id\030\001 \001(\r\"O\n\026"
  "UnorderQuestBranchInfo\022\021\n\tdegreevar\030\001 \001("
  "\t\022\020\n\010curvalue\030\002 \001(\r\022\020\n\010maxvalue\030\003 \001(\r\"\363\001"
  "\n\024MSG_Ret_QuestInfo_SC\022\n\n\002id\030\001 \001(\r\022\r\n\005st"
  "ate\030\002 \001(\r\022\r\n\005score\030\003 \001(\r\022\020\n\010curvalue\030\004 \001"
  "(\r\022\020\n\010maxvalue\030\005 \001(\r\022\021\n\tstarttime\030\006 \001(\r\022"
  "\024\n\014cur_extvalue\030\007 \001(\r\022\024\n\014max_extvalue\030\010 "
  "\001(\r\022\020\n\010leftsecs\030\t \001(\005\022.\n\007extinfo\030\n \003(\0132\035"
  ".quest.UnorderQuestBranchInfo\022\014\n\004show\030\013 "
  "\001(\010\"n\n\026MSG_ReqExecuteQuest_CS\022\n\n\002id\030\001 \001("
  "\r\022\016\n\006target\030\002 \001(\t\022\016\n\006offset\030\003 \001(\r\022\024\n\014que"
  "stdesccrc\030\004 \001(\r\022\022\n\nchartarget\030\005 \001(\004\"\027\n\025M"
  "SG_ReqValidQuests_CS\"\?\n\025MSG_RetValidQues"
  "ts_SC\022&\n\010onequest\030\001 \003(\0132\024.quest.npcValid"
  "Quest\"5\n\030MSG_ReqRetQuestState_CSC\022\n\n\002id\030"
  "\001 \001(\r\022\r\n\005state\030\002 \001(\r\"$\n\026MSG_ReqAbandonQu"
  "est_CS\022\n\n\002id\030\001 \001(\r\"$\n\026MSG_RetAbandonQues"
  "t_SC\022\n\n\002id\030\001 \001(\r\"0\n\016QuestStateInfo\022\017\n\007qu"
  "estid\030\001 \001(\r\022\r\n\005state\030\002 \001(\r\"S\n\014npcQuestLi"
  "st\022\r\n\005npcid\030\001 \001(\r\022%\n\006quests\030\002 \003(\0132\025.ques"
  "t.QuestStateInfo\022\r\n\005state\030\003 \001(\005\"\030\n\026MSG_R"
  "eqMapQuestInfo_CS\"\?\n\026MSG_RetMapQuestInfo"
  "_SC\022%\n\010npclists\030\001 \003(\0132\023.quest.npcQuestLi"
  "st\"\032\n\030MSG_ReqCurActiveQuest_CS\";\n\rringQu"
  "estInfo\022\023\n\013mainquestid\030\001 \001(\r\022\025\n\rfinishri"
  "ngnum\030\002 \001(\r\"\246\001\n\030MSG_RetCurActiveQuest_SC"
  "\022)\n\004item\030\001 \003(\0132\033.quest.MSG_Ret_QuestInfo"
  "_SC\022\'\n\tnewaccept\030\002 \003(\0132\024.quest.npcValidQ"
  "uest\022\016\n\006dayvar\030\003 \001(\t\022&\n\010ringinfo\030\004 \003(\0132\024"
  ".quest.ringQuestInfo\"_\n\033MSG_ReqChangeMap"
  "FindPath_CS\022\021\n\tpathwayid\030\001 \001(\r\022\017\n\007questi"
  "d\030\002 \001(\r\022\r\n\005destx\030\003 \001(\r\022\r\n\005desty\030\004 \001(\r\"H\n"
  "\033MSG_RetChangeMapFindPath_SC\022)\n\004info\030\001 \001"
  "(\0132\033.quest.ChangeMapFindWayInfo\"h\n\024Chang"
  "eMapFindWayInfo\022\017\n\007errcode\030\001 \001(\r\022\021\n\tpath"
  "wayid\030\002 \001(\r\022\021\n\tdestmapid\030\003 \001(\r\022\031\n\nfindin"
  "gway\030\004 \001(\010:\005false\"\'\n\024MSG_RetPlotTalkID_S"
  "C\022\017\n\007groupid\030\001 \001(\r\"O\n\034MSG_CartoonComplet"
  "eNotify_SC\022\017\n\007groupid\030\001 \001(\r\022\017\n\007command\030\002"
  " \001(\t\022\r\n\005delay\030\003 \001(\r\"a\n\032MSG_PlayCartoonAn"
  "dGoMap_SC\022\017\n\007groupid\030\001 \001(\r\022\017\n\007command\030\002 "
  "\001(\t\022\r\n\005delay\030\003 \001(\r\022\022\n\ncallbackid\030\004 \001(\r\"5"
  "\n\024MSG_ReqSubmitObjs_CS\022\016\n\006thisid\030\001 \003(\t\022\r"
  "\n\005bagid\030\002 \001(\r\"\'\n\024MSG_RetSubmitObjs_SC\022\017\n"
  "\007retcode\030\001 \001(\r\";\n\022RingQuestRingCount\022\021\n\t"
  "questtype\030\001 \001(\r\022\022\n\nring_count\030\002 \001(\r\"L\n\034M"
  "SG_RetRingQuestRingCount_SC\022,\n\tringcount"
  "\030\001 \003(\0132\031.quest.RingQuestRingCount\"J\n\035MSG"
  "_notifyRefreshQuestInfo_SC\022)\n\004item\030\001 \003(\013"
  "2\033.quest.MSG_Ret_QuestInfo_SC\"&\n\022MSG_Pla"
  "yBellQTE_SC\022\020\n\010qtelevel\030\001 \001(\r\"<\n\030MSG_Pla"
  "yBellQTEResult_CS\022\020\n\010qtelevel\030\001 \001(\r\022\016\n\006r"
  "esult\030\002 \001(\r\"<\n\033MSG_Req_SetQuestNeedShow_"
  "CS\022\017\n\007questid\030\001 \001(\r\022\014\n\004show\030\002 \001(\010\"L\n\033MSG"
  "_Ret_SetQuestNeedShow_SC\022\017\n\007questid\030\001 \001("
  "\r\022\016\n\006result\030\002 \001(\010\022\014\n\004code\030\003 \001(\010\"4\n!MSG_R"
  "eq_ShareQuestToTeamMember_CS\022\017\n\007questid\030"
  "\001 \001(\r\"<\n\033MSG_Ret_NotifyShareQuest_SC\022\014\n\004"
  "name\030\001 \001(\t\022\017\n\007questid\030\002 \001(\r\">\n\033MSG_Req_A"
  "nswerShareQuest_CS\022\017\n\007questid\030\001 \001(\r\022\016\n\006a"
  "ccept\030\002 \001(\010\"+\n\033MSG_Ret_AnswerShareQuest_"
  "SC\022\014\n\004code\030\001 \001(\r\"J\n\032MSG_Ret_NotifyCountD"
  "own_SC\022\014\n\004bset\030\001 \001(\010\022\r\n\005delay\030\002 \001(\r\022\017\n\007s"
  "econds\030\003 \001(\r\"<\n\033MSG_NotifyClientOptional"
  "_SC\022\014\n\004type\030\001 \001(\r\022\017\n\007setting\030\002 \001(\t\"\?\n\035MS"
  "G_notifyQuestStateEffect_SC\022\017\n\007questid\030\001"
  " \001(\r\022\r\n\005state\030\002 \001(\r\"G\n\030MSG_Req_CommitYQD"
  "Data_CS\022\014\n\004step\030\001 \001(\r\022\017\n\007success\030\002 \001(\r\022\014"
  "\n\004type\030\003 \001(\r\"\'\n\027MSG_Req_PlayYQDRetry_CS\022"
  "\014\n\004type\030\001 \001(\r"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_quest_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_quest_2eproto_sccs[45] = {
  &scc_info_ChangeMapFindWayInfo_quest_2eproto.base,
  &scc_info_MSG_CartoonCompleteNotify_SC_quest_2eproto.base,
  &scc_info_MSG_NotifyClientOptional_SC_quest_2eproto.base,
  &scc_info_MSG_PlayBellQTEResult_CS_quest_2eproto.base,
  &scc_info_MSG_PlayBellQTE_SC_quest_2eproto.base,
  &scc_info_MSG_PlayCartoonAndGoMap_SC_quest_2eproto.base,
  &scc_info_MSG_ReqAbandonQuest_CS_quest_2eproto.base,
  &scc_info_MSG_ReqChangeMapFindPath_CS_quest_2eproto.base,
  &scc_info_MSG_ReqCurActiveQuest_CS_quest_2eproto.base,
  &scc_info_MSG_ReqExecuteQuest_CS_quest_2eproto.base,
  &scc_info_MSG_ReqMapQuestInfo_CS_quest_2eproto.base,
  &scc_info_MSG_ReqRetQuestState_CSC_quest_2eproto.base,
  &scc_info_MSG_ReqSubmitObjs_CS_quest_2eproto.base,
  &scc_info_MSG_ReqValidQuests_CS_quest_2eproto.base,
  &scc_info_MSG_Req_AnswerShareQuest_CS_quest_2eproto.base,
  &scc_info_MSG_Req_CommitYQDData_CS_quest_2eproto.base,
  &scc_info_MSG_Req_PlayYQDRetry_CS_quest_2eproto.base,
  &scc_info_MSG_Req_QuestInfo_CS_quest_2eproto.base,
  &scc_info_MSG_Req_SetQuestNeedShow_CS_quest_2eproto.base,
  &scc_info_MSG_Req_ShareQuestToTeamMember_CS_quest_2eproto.base,
  &scc_info_MSG_Req_VisitNpcTrade_CS_quest_2eproto.base,
  &scc_info_MSG_RetAbandonQuest_SC_quest_2eproto.base,
  &scc_info_MSG_RetChangeMapFindPath_SC_quest_2eproto.base,
  &scc_info_MSG_RetCurActiveQuest_SC_quest_2eproto.base,
  &scc_info_MSG_RetMapQuestInfo_SC_quest_2eproto.base,
  &scc_info_MSG_RetPlotTalkID_SC_quest_2eproto.base,
  &scc_info_MSG_RetRingQuestRingCount_SC_quest_2eproto.base,
  &scc_info_MSG_RetSubmitObjs_SC_quest_2eproto.base,
  &scc_info_MSG_RetValidQuests_SC_quest_2eproto.base,
  &scc_info_MSG_Ret_AnswerShareQuest_SC_quest_2eproto.base,
  &scc_info_MSG_Ret_NotifyCountDown_SC_quest_2eproto.base,
  &scc_info_MSG_Ret_NotifyShareQuest_SC_quest_2eproto.base,
  &scc_info_MSG_Ret_QuestInfo_SC_quest_2eproto.base,
  &scc_info_MSG_Ret_SetQuestNeedShow_SC_quest_2eproto.base,
  &scc_info_MSG_Ret_VisitNpcTrade_SC_quest_2eproto.base,
  &scc_info_MSG_notifyQuestStateEffect_SC_quest_2eproto.base,
  &scc_info_MSG_notifyRefreshQuestInfo_SC_quest_2eproto.base,
  &scc_info_QuestStateInfo_quest_2eproto.base,
  &scc_info_RingQuestRingCount_quest_2eproto.base,
  &scc_info_UnorderQuestBranchInfo_quest_2eproto.base,
  &scc_info_npcQuestList_quest_2eproto.base,
  &scc_info_npcValidQuest_quest_2eproto.base,
  &scc_info_questCRC_quest_2eproto.base,
  &scc_info_ringQuestInfo_quest_2eproto.base,
  &scc_info_validQuest_quest_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_quest_2eproto_once;
static bool descriptor_table_quest_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_quest_2eproto = {
  &descriptor_table_quest_2eproto_initialized, descriptor_table_protodef_quest_2eproto, "quest.proto", 3293,
  &descriptor_table_quest_2eproto_once, descriptor_table_quest_2eproto_sccs, descriptor_table_quest_2eproto_deps, 45, 0,
  schemas, file_default_instances, TableStruct_quest_2eproto::offsets,
  file_level_metadata_quest_2eproto, 45, file_level_enum_descriptors_quest_2eproto, file_level_service_descriptors_quest_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_quest_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_quest_2eproto)), true);
namespace quest {

// ===================================================================

void questCRC::InitAsDefaultInstance() {
}
class questCRC::_Internal {
 public:
  using HasBits = decltype(std::declval<questCRC>()._has_bits_);
  static void set_has_quest_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_branch_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_crc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

questCRC::questCRC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:quest.questCRC)
}
questCRC::questCRC(const questCRC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&quest_id_, &from.quest_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&crc_) -
    reinterpret_cast<char*>(&quest_id_)) + sizeof(crc_));
  // @@protoc_insertion_point(copy_constructor:quest.questCRC)
}

void questCRC::SharedCtor() {
  ::memset(&quest_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&crc_) -
      reinterpret_cast<char*>(&quest_id_)) + sizeof(crc_));
}

questCRC::~questCRC() {
  // @@protoc_insertion_point(destructor:quest.questCRC)
  SharedDtor();
}

void questCRC::SharedDtor() {
}

void questCRC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const questCRC& questCRC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_questCRC_quest_2eproto.base);
  return *internal_default_instance();
}


void questCRC::Clear() {
// @@protoc_insertion_point(message_clear_start:quest.questCRC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&quest_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&crc_) -
        reinterpret_cast<char*>(&quest_id_)) + sizeof(crc_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* questCRC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 quest_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_quest_id(&has_bits);
          quest_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 branch_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_branch_id(&has_bits);
          branch_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 crc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_crc(&has_bits);
          crc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* questCRC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quest.questCRC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 quest_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_quest_id(), target);
  }

  // optional uint32 branch_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_branch_id(), target);
  }

  // optional uint32 crc = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_crc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quest.questCRC)
  return target;
}

size_t questCRC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quest.questCRC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 quest_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_quest_id());
    }

    // optional uint32 branch_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_branch_id());
    }

    // optional uint32 crc = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_crc());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void questCRC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quest.questCRC)
  GOOGLE_DCHECK_NE(&from, this);
  const questCRC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<questCRC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quest.questCRC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quest.questCRC)
    MergeFrom(*source);
  }
}

void questCRC::MergeFrom(const questCRC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quest.questCRC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      quest_id_ = from.quest_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      branch_id_ = from.branch_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      crc_ = from.crc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void questCRC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quest.questCRC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void questCRC::CopyFrom(const questCRC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quest.questCRC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool questCRC::IsInitialized() const {
  return true;
}

void questCRC::InternalSwap(questCRC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(quest_id_, other->quest_id_);
  swap(branch_id_, other->branch_id_);
  swap(crc_, other->crc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata questCRC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void validQuest::InitAsDefaultInstance() {
}
class validQuest::_Internal {
 public:
  using HasBits = decltype(std::declval<validQuest>()._has_bits_);
  static void set_has_quest_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_branch_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

validQuest::validQuest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:quest.validQuest)
}
validQuest::validQuest(const validQuest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&quest_id_, &from.quest_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&branch_id_) -
    reinterpret_cast<char*>(&quest_id_)) + sizeof(branch_id_));
  // @@protoc_insertion_point(copy_constructor:quest.validQuest)
}

void validQuest::SharedCtor() {
  ::memset(&quest_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&branch_id_) -
      reinterpret_cast<char*>(&quest_id_)) + sizeof(branch_id_));
}

validQuest::~validQuest() {
  // @@protoc_insertion_point(destructor:quest.validQuest)
  SharedDtor();
}

void validQuest::SharedDtor() {
}

void validQuest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const validQuest& validQuest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_validQuest_quest_2eproto.base);
  return *internal_default_instance();
}


void validQuest::Clear() {
// @@protoc_insertion_point(message_clear_start:quest.validQuest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&quest_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&branch_id_) -
        reinterpret_cast<char*>(&quest_id_)) + sizeof(branch_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* validQuest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 quest_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_quest_id(&has_bits);
          quest_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 branch_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_branch_id(&has_bits);
          branch_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* validQuest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quest.validQuest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 quest_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_quest_id(), target);
  }

  // optional uint32 branch_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_branch_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quest.validQuest)
  return target;
}

size_t validQuest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quest.validQuest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 quest_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_quest_id());
    }

    // optional uint32 branch_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_branch_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void validQuest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quest.validQuest)
  GOOGLE_DCHECK_NE(&from, this);
  const validQuest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<validQuest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quest.validQuest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quest.validQuest)
    MergeFrom(*source);
  }
}

void validQuest::MergeFrom(const validQuest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quest.validQuest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      quest_id_ = from.quest_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      branch_id_ = from.branch_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void validQuest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quest.validQuest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void validQuest::CopyFrom(const validQuest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quest.validQuest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool validQuest::IsInitialized() const {
  return true;
}

void validQuest::InternalSwap(validQuest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(quest_id_, other->quest_id_);
  swap(branch_id_, other->branch_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata validQuest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void npcValidQuest::InitAsDefaultInstance() {
}
class npcValidQuest::_Internal {
 public:
  using HasBits = decltype(std::declval<npcValidQuest>()._has_bits_);
  static void set_has_npcid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_questid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

npcValidQuest::npcValidQuest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:quest.npcValidQuest)
}
npcValidQuest::npcValidQuest(const npcValidQuest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&npcid_, &from.npcid_,
    static_cast<size_t>(reinterpret_cast<char*>(&questid_) -
    reinterpret_cast<char*>(&npcid_)) + sizeof(questid_));
  // @@protoc_insertion_point(copy_constructor:quest.npcValidQuest)
}

void npcValidQuest::SharedCtor() {
  ::memset(&npcid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&questid_) -
      reinterpret_cast<char*>(&npcid_)) + sizeof(questid_));
}

npcValidQuest::~npcValidQuest() {
  // @@protoc_insertion_point(destructor:quest.npcValidQuest)
  SharedDtor();
}

void npcValidQuest::SharedDtor() {
}

void npcValidQuest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const npcValidQuest& npcValidQuest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_npcValidQuest_quest_2eproto.base);
  return *internal_default_instance();
}


void npcValidQuest::Clear() {
// @@protoc_insertion_point(message_clear_start:quest.npcValidQuest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&npcid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&questid_) -
        reinterpret_cast<char*>(&npcid_)) + sizeof(questid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* npcValidQuest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 npcid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_npcid(&has_bits);
          npcid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 questid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_questid(&has_bits);
          questid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* npcValidQuest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quest.npcValidQuest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 npcid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_npcid(), target);
  }

  // optional uint32 questid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_questid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quest.npcValidQuest)
  return target;
}

size_t npcValidQuest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quest.npcValidQuest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 npcid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_npcid());
    }

    // optional uint32 questid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_questid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void npcValidQuest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quest.npcValidQuest)
  GOOGLE_DCHECK_NE(&from, this);
  const npcValidQuest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<npcValidQuest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quest.npcValidQuest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quest.npcValidQuest)
    MergeFrom(*source);
  }
}

void npcValidQuest::MergeFrom(const npcValidQuest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quest.npcValidQuest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      npcid_ = from.npcid_;
    }
    if (cached_has_bits & 0x00000002u) {
      questid_ = from.questid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void npcValidQuest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quest.npcValidQuest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void npcValidQuest::CopyFrom(const npcValidQuest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quest.npcValidQuest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool npcValidQuest::IsInitialized() const {
  return true;
}

void npcValidQuest::InternalSwap(npcValidQuest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(npcid_, other->npcid_);
  swap(questid_, other->questid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata npcValidQuest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_VisitNpcTrade_CS::InitAsDefaultInstance() {
}
class MSG_Req_VisitNpcTrade_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_VisitNpcTrade_CS>()._has_bits_);
  static void set_has_npc_temp_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Req_VisitNpcTrade_CS::MSG_Req_VisitNpcTrade_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:quest.MSG_Req_VisitNpcTrade_CS)
}
MSG_Req_VisitNpcTrade_CS::MSG_Req_VisitNpcTrade_CS(const MSG_Req_VisitNpcTrade_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      allcrc_(from.allcrc_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  npc_temp_id_ = from.npc_temp_id_;
  // @@protoc_insertion_point(copy_constructor:quest.MSG_Req_VisitNpcTrade_CS)
}

void MSG_Req_VisitNpcTrade_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Req_VisitNpcTrade_CS_quest_2eproto.base);
  npc_temp_id_ = PROTOBUF_ULONGLONG(0);
}

MSG_Req_VisitNpcTrade_CS::~MSG_Req_VisitNpcTrade_CS() {
  // @@protoc_insertion_point(destructor:quest.MSG_Req_VisitNpcTrade_CS)
  SharedDtor();
}

void MSG_Req_VisitNpcTrade_CS::SharedDtor() {
}

void MSG_Req_VisitNpcTrade_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_VisitNpcTrade_CS& MSG_Req_VisitNpcTrade_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_VisitNpcTrade_CS_quest_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_VisitNpcTrade_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:quest.MSG_Req_VisitNpcTrade_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  allcrc_.Clear();
  npc_temp_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_VisitNpcTrade_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 npc_temp_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_npc_temp_id(&has_bits);
          npc_temp_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .quest.questCRC allcrc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_allcrc(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_VisitNpcTrade_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quest.MSG_Req_VisitNpcTrade_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 npc_temp_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_npc_temp_id(), target);
  }

  // repeated .quest.questCRC allcrc = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_allcrc_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_allcrc(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quest.MSG_Req_VisitNpcTrade_CS)
  return target;
}

size_t MSG_Req_VisitNpcTrade_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quest.MSG_Req_VisitNpcTrade_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .quest.questCRC allcrc = 2;
  total_size += 1UL * this->_internal_allcrc_size();
  for (const auto& msg : this->allcrc_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint64 npc_temp_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_npc_temp_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_VisitNpcTrade_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quest.MSG_Req_VisitNpcTrade_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_VisitNpcTrade_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_VisitNpcTrade_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quest.MSG_Req_VisitNpcTrade_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quest.MSG_Req_VisitNpcTrade_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_VisitNpcTrade_CS::MergeFrom(const MSG_Req_VisitNpcTrade_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quest.MSG_Req_VisitNpcTrade_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  allcrc_.MergeFrom(from.allcrc_);
  if (from._internal_has_npc_temp_id()) {
    _internal_set_npc_temp_id(from._internal_npc_temp_id());
  }
}

void MSG_Req_VisitNpcTrade_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quest.MSG_Req_VisitNpcTrade_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_VisitNpcTrade_CS::CopyFrom(const MSG_Req_VisitNpcTrade_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quest.MSG_Req_VisitNpcTrade_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_VisitNpcTrade_CS::IsInitialized() const {
  return true;
}

void MSG_Req_VisitNpcTrade_CS::InternalSwap(MSG_Req_VisitNpcTrade_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  allcrc_.InternalSwap(&other->allcrc_);
  swap(npc_temp_id_, other->npc_temp_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_VisitNpcTrade_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_VisitNpcTrade_SC::InitAsDefaultInstance() {
}
class MSG_Ret_VisitNpcTrade_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_VisitNpcTrade_SC>()._has_bits_);
  static void set_has_action(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_retcode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_flag(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_npc_temp_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_conv_exchange(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_show_type(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_crc_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_user_menu(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_npc_menu(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_source(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

MSG_Ret_VisitNpcTrade_SC::MSG_Ret_VisitNpcTrade_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:quest.MSG_Ret_VisitNpcTrade_SC)
}
MSG_Ret_VisitNpcTrade_SC::MSG_Ret_VisitNpcTrade_SC(const MSG_Ret_VisitNpcTrade_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      allcrc_(from.allcrc_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_menu_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_menu()) {
    user_menu_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_menu_);
  }
  npc_menu_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_npc_menu()) {
    npc_menu_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.npc_menu_);
  }
  ::memcpy(&action_, &from.action_,
    static_cast<size_t>(reinterpret_cast<char*>(&source_) -
    reinterpret_cast<char*>(&action_)) + sizeof(source_));
  // @@protoc_insertion_point(copy_constructor:quest.MSG_Ret_VisitNpcTrade_SC)
}

void MSG_Ret_VisitNpcTrade_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_VisitNpcTrade_SC_quest_2eproto.base);
  user_menu_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  npc_menu_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&action_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_) -
      reinterpret_cast<char*>(&action_)) + sizeof(source_));
}

MSG_Ret_VisitNpcTrade_SC::~MSG_Ret_VisitNpcTrade_SC() {
  // @@protoc_insertion_point(destructor:quest.MSG_Ret_VisitNpcTrade_SC)
  SharedDtor();
}

void MSG_Ret_VisitNpcTrade_SC::SharedDtor() {
  user_menu_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  npc_menu_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_Ret_VisitNpcTrade_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_VisitNpcTrade_SC& MSG_Ret_VisitNpcTrade_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_VisitNpcTrade_SC_quest_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_VisitNpcTrade_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:quest.MSG_Ret_VisitNpcTrade_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  allcrc_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      user_menu_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      npc_menu_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&action_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&conv_exchange_) -
        reinterpret_cast<char*>(&action_)) + sizeof(conv_exchange_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&show_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&source_) -
        reinterpret_cast<char*>(&show_type_)) + sizeof(source_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_VisitNpcTrade_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_action(&has_bits);
          action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 retcode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_retcode(&has_bits);
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 flag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_flag(&has_bits);
          flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 npc_temp_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_npc_temp_id(&has_bits);
          npc_temp_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 conv_exchange = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_conv_exchange(&has_bits);
          conv_exchange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 show_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_show_type(&has_bits);
          show_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 crc_ret = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_crc_ret(&has_bits);
          crc_ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_menu = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_user_menu();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "quest.MSG_Ret_VisitNpcTrade_SC.user_menu");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string npc_menu = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_npc_menu();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "quest.MSG_Ret_VisitNpcTrade_SC.npc_menu");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .quest.questCRC allcrc = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_allcrc(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 source = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_source(&has_bits);
          source_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_VisitNpcTrade_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quest.MSG_Ret_VisitNpcTrade_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 action = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_action(), target);
  }

  // optional uint32 retcode = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_retcode(), target);
  }

  // optional uint32 flag = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_flag(), target);
  }

  // optional uint64 npc_temp_id = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_npc_temp_id(), target);
  }

  // optional uint32 type = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_type(), target);
  }

  // optional uint32 conv_exchange = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_conv_exchange(), target);
  }

  // optional uint32 show_type = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_show_type(), target);
  }

  // optional uint32 crc_ret = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_crc_ret(), target);
  }

  // optional string user_menu = 9;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_menu().data(), static_cast<int>(this->_internal_user_menu().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "quest.MSG_Ret_VisitNpcTrade_SC.user_menu");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_user_menu(), target);
  }

  // optional string npc_menu = 10;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_npc_menu().data(), static_cast<int>(this->_internal_npc_menu().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "quest.MSG_Ret_VisitNpcTrade_SC.npc_menu");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_npc_menu(), target);
  }

  // repeated .quest.questCRC allcrc = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_allcrc_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_allcrc(i), target, stream);
  }

  // optional uint32 source = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_source(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quest.MSG_Ret_VisitNpcTrade_SC)
  return target;
}

size_t MSG_Ret_VisitNpcTrade_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quest.MSG_Ret_VisitNpcTrade_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .quest.questCRC allcrc = 11;
  total_size += 1UL * this->_internal_allcrc_size();
  for (const auto& msg : this->allcrc_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string user_menu = 9;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_menu());
    }

    // optional string npc_menu = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_npc_menu());
    }

    // optional uint32 action = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_action());
    }

    // optional uint32 retcode = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_retcode());
    }

    // optional uint64 npc_temp_id = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_npc_temp_id());
    }

    // optional uint32 flag = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_flag());
    }

    // optional uint32 type = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_type());
    }

    // optional uint32 conv_exchange = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_conv_exchange());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional uint32 show_type = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_show_type());
    }

    // optional uint32 crc_ret = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_crc_ret());
    }

    // optional uint32 source = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_source());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_VisitNpcTrade_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quest.MSG_Ret_VisitNpcTrade_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_VisitNpcTrade_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_VisitNpcTrade_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quest.MSG_Ret_VisitNpcTrade_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quest.MSG_Ret_VisitNpcTrade_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_VisitNpcTrade_SC::MergeFrom(const MSG_Ret_VisitNpcTrade_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quest.MSG_Ret_VisitNpcTrade_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  allcrc_.MergeFrom(from.allcrc_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      user_menu_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_menu_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      npc_menu_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.npc_menu_);
    }
    if (cached_has_bits & 0x00000004u) {
      action_ = from.action_;
    }
    if (cached_has_bits & 0x00000008u) {
      retcode_ = from.retcode_;
    }
    if (cached_has_bits & 0x00000010u) {
      npc_temp_id_ = from.npc_temp_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      flag_ = from.flag_;
    }
    if (cached_has_bits & 0x00000040u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000080u) {
      conv_exchange_ = from.conv_exchange_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      show_type_ = from.show_type_;
    }
    if (cached_has_bits & 0x00000200u) {
      crc_ret_ = from.crc_ret_;
    }
    if (cached_has_bits & 0x00000400u) {
      source_ = from.source_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_VisitNpcTrade_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quest.MSG_Ret_VisitNpcTrade_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_VisitNpcTrade_SC::CopyFrom(const MSG_Ret_VisitNpcTrade_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quest.MSG_Ret_VisitNpcTrade_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_VisitNpcTrade_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_VisitNpcTrade_SC::InternalSwap(MSG_Ret_VisitNpcTrade_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  allcrc_.InternalSwap(&other->allcrc_);
  user_menu_.Swap(&other->user_menu_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  npc_menu_.Swap(&other->npc_menu_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(action_, other->action_);
  swap(retcode_, other->retcode_);
  swap(npc_temp_id_, other->npc_temp_id_);
  swap(flag_, other->flag_);
  swap(type_, other->type_);
  swap(conv_exchange_, other->conv_exchange_);
  swap(show_type_, other->show_type_);
  swap(crc_ret_, other->crc_ret_);
  swap(source_, other->source_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_VisitNpcTrade_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_QuestInfo_CS::InitAsDefaultInstance() {
}
class MSG_Req_QuestInfo_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_QuestInfo_CS>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Req_QuestInfo_CS::MSG_Req_QuestInfo_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:quest.MSG_Req_QuestInfo_CS)
}
MSG_Req_QuestInfo_CS::MSG_Req_QuestInfo_CS(const MSG_Req_QuestInfo_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:quest.MSG_Req_QuestInfo_CS)
}

void MSG_Req_QuestInfo_CS::SharedCtor() {
  id_ = 0u;
}

MSG_Req_QuestInfo_CS::~MSG_Req_QuestInfo_CS() {
  // @@protoc_insertion_point(destructor:quest.MSG_Req_QuestInfo_CS)
  SharedDtor();
}

void MSG_Req_QuestInfo_CS::SharedDtor() {
}

void MSG_Req_QuestInfo_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_QuestInfo_CS& MSG_Req_QuestInfo_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_QuestInfo_CS_quest_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_QuestInfo_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:quest.MSG_Req_QuestInfo_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_QuestInfo_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_QuestInfo_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quest.MSG_Req_QuestInfo_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quest.MSG_Req_QuestInfo_CS)
  return target;
}

size_t MSG_Req_QuestInfo_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quest.MSG_Req_QuestInfo_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_QuestInfo_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quest.MSG_Req_QuestInfo_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_QuestInfo_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_QuestInfo_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quest.MSG_Req_QuestInfo_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quest.MSG_Req_QuestInfo_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_QuestInfo_CS::MergeFrom(const MSG_Req_QuestInfo_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quest.MSG_Req_QuestInfo_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
}

void MSG_Req_QuestInfo_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quest.MSG_Req_QuestInfo_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_QuestInfo_CS::CopyFrom(const MSG_Req_QuestInfo_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quest.MSG_Req_QuestInfo_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_QuestInfo_CS::IsInitialized() const {
  return true;
}

void MSG_Req_QuestInfo_CS::InternalSwap(MSG_Req_QuestInfo_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_QuestInfo_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnorderQuestBranchInfo::InitAsDefaultInstance() {
}
class UnorderQuestBranchInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<UnorderQuestBranchInfo>()._has_bits_);
  static void set_has_degreevar(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_curvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_maxvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

UnorderQuestBranchInfo::UnorderQuestBranchInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:quest.UnorderQuestBranchInfo)
}
UnorderQuestBranchInfo::UnorderQuestBranchInfo(const UnorderQuestBranchInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  degreevar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_degreevar()) {
    degreevar_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.degreevar_);
  }
  ::memcpy(&curvalue_, &from.curvalue_,
    static_cast<size_t>(reinterpret_cast<char*>(&maxvalue_) -
    reinterpret_cast<char*>(&curvalue_)) + sizeof(maxvalue_));
  // @@protoc_insertion_point(copy_constructor:quest.UnorderQuestBranchInfo)
}

void UnorderQuestBranchInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnorderQuestBranchInfo_quest_2eproto.base);
  degreevar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&curvalue_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxvalue_) -
      reinterpret_cast<char*>(&curvalue_)) + sizeof(maxvalue_));
}

UnorderQuestBranchInfo::~UnorderQuestBranchInfo() {
  // @@protoc_insertion_point(destructor:quest.UnorderQuestBranchInfo)
  SharedDtor();
}

void UnorderQuestBranchInfo::SharedDtor() {
  degreevar_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UnorderQuestBranchInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnorderQuestBranchInfo& UnorderQuestBranchInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnorderQuestBranchInfo_quest_2eproto.base);
  return *internal_default_instance();
}


void UnorderQuestBranchInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:quest.UnorderQuestBranchInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    degreevar_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&curvalue_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&maxvalue_) -
        reinterpret_cast<char*>(&curvalue_)) + sizeof(maxvalue_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UnorderQuestBranchInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string degreevar = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_degreevar();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "quest.UnorderQuestBranchInfo.degreevar");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 curvalue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_curvalue(&has_bits);
          curvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 maxvalue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_maxvalue(&has_bits);
          maxvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnorderQuestBranchInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quest.UnorderQuestBranchInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string degreevar = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_degreevar().data(), static_cast<int>(this->_internal_degreevar().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "quest.UnorderQuestBranchInfo.degreevar");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_degreevar(), target);
  }

  // optional uint32 curvalue = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_curvalue(), target);
  }

  // optional uint32 maxvalue = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_maxvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quest.UnorderQuestBranchInfo)
  return target;
}

size_t UnorderQuestBranchInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quest.UnorderQuestBranchInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string degreevar = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_degreevar());
    }

    // optional uint32 curvalue = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_curvalue());
    }

    // optional uint32 maxvalue = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_maxvalue());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnorderQuestBranchInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quest.UnorderQuestBranchInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const UnorderQuestBranchInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnorderQuestBranchInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quest.UnorderQuestBranchInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quest.UnorderQuestBranchInfo)
    MergeFrom(*source);
  }
}

void UnorderQuestBranchInfo::MergeFrom(const UnorderQuestBranchInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quest.UnorderQuestBranchInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      degreevar_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.degreevar_);
    }
    if (cached_has_bits & 0x00000002u) {
      curvalue_ = from.curvalue_;
    }
    if (cached_has_bits & 0x00000004u) {
      maxvalue_ = from.maxvalue_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UnorderQuestBranchInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quest.UnorderQuestBranchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnorderQuestBranchInfo::CopyFrom(const UnorderQuestBranchInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quest.UnorderQuestBranchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnorderQuestBranchInfo::IsInitialized() const {
  return true;
}

void UnorderQuestBranchInfo::InternalSwap(UnorderQuestBranchInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  degreevar_.Swap(&other->degreevar_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(curvalue_, other->curvalue_);
  swap(maxvalue_, other->maxvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnorderQuestBranchInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_QuestInfo_SC::InitAsDefaultInstance() {
}
class MSG_Ret_QuestInfo_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_QuestInfo_SC>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_curvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_maxvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_starttime(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_cur_extvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_max_extvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_leftsecs(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_show(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

MSG_Ret_QuestInfo_SC::MSG_Ret_QuestInfo_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:quest.MSG_Ret_QuestInfo_SC)
}
MSG_Ret_QuestInfo_SC::MSG_Ret_QuestInfo_SC(const MSG_Ret_QuestInfo_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      extinfo_(from.extinfo_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&show_) -
    reinterpret_cast<char*>(&id_)) + sizeof(show_));
  // @@protoc_insertion_point(copy_constructor:quest.MSG_Ret_QuestInfo_SC)
}

void MSG_Ret_QuestInfo_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_QuestInfo_SC_quest_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&show_) -
      reinterpret_cast<char*>(&id_)) + sizeof(show_));
}

MSG_Ret_QuestInfo_SC::~MSG_Ret_QuestInfo_SC() {
  // @@protoc_insertion_point(destructor:quest.MSG_Ret_QuestInfo_SC)
  SharedDtor();
}

void MSG_Ret_QuestInfo_SC::SharedDtor() {
}

void MSG_Ret_QuestInfo_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_QuestInfo_SC& MSG_Ret_QuestInfo_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_QuestInfo_SC_quest_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_QuestInfo_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:quest.MSG_Ret_QuestInfo_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extinfo_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_extvalue_) -
        reinterpret_cast<char*>(&id_)) + sizeof(max_extvalue_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&leftsecs_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&show_) -
        reinterpret_cast<char*>(&leftsecs_)) + sizeof(show_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_QuestInfo_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_state(&has_bits);
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_score(&has_bits);
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 curvalue = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_curvalue(&has_bits);
          curvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 maxvalue = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_maxvalue(&has_bits);
          maxvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 starttime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_starttime(&has_bits);
          starttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 cur_extvalue = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_cur_extvalue(&has_bits);
          cur_extvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_extvalue = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_max_extvalue(&has_bits);
          max_extvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 leftsecs = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_leftsecs(&has_bits);
          leftsecs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .quest.UnorderQuestBranchInfo extinfo = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_extinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool show = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_show(&has_bits);
          show_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_QuestInfo_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quest.MSG_Ret_QuestInfo_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional uint32 state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_state(), target);
  }

  // optional uint32 score = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_score(), target);
  }

  // optional uint32 curvalue = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_curvalue(), target);
  }

  // optional uint32 maxvalue = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_maxvalue(), target);
  }

  // optional uint32 starttime = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_starttime(), target);
  }

  // optional uint32 cur_extvalue = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_cur_extvalue(), target);
  }

  // optional uint32 max_extvalue = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_max_extvalue(), target);
  }

  // optional int32 leftsecs = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_leftsecs(), target);
  }

  // repeated .quest.UnorderQuestBranchInfo extinfo = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_extinfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_extinfo(i), target, stream);
  }

  // optional bool show = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_show(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quest.MSG_Ret_QuestInfo_SC)
  return target;
}

size_t MSG_Ret_QuestInfo_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quest.MSG_Ret_QuestInfo_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .quest.UnorderQuestBranchInfo extinfo = 10;
  total_size += 1UL * this->_internal_extinfo_size();
  for (const auto& msg : this->extinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_id());
    }

    // optional uint32 state = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_state());
    }

    // optional uint32 score = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_score());
    }

    // optional uint32 curvalue = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_curvalue());
    }

    // optional uint32 maxvalue = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_maxvalue());
    }

    // optional uint32 starttime = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_starttime());
    }

    // optional uint32 cur_extvalue = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cur_extvalue());
    }

    // optional uint32 max_extvalue = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_extvalue());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional int32 leftsecs = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_leftsecs());
    }

    // optional bool show = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_QuestInfo_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quest.MSG_Ret_QuestInfo_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_QuestInfo_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_QuestInfo_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quest.MSG_Ret_QuestInfo_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quest.MSG_Ret_QuestInfo_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_QuestInfo_SC::MergeFrom(const MSG_Ret_QuestInfo_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quest.MSG_Ret_QuestInfo_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  extinfo_.MergeFrom(from.extinfo_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000004u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000008u) {
      curvalue_ = from.curvalue_;
    }
    if (cached_has_bits & 0x00000010u) {
      maxvalue_ = from.maxvalue_;
    }
    if (cached_has_bits & 0x00000020u) {
      starttime_ = from.starttime_;
    }
    if (cached_has_bits & 0x00000040u) {
      cur_extvalue_ = from.cur_extvalue_;
    }
    if (cached_has_bits & 0x00000080u) {
      max_extvalue_ = from.max_extvalue_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      leftsecs_ = from.leftsecs_;
    }
    if (cached_has_bits & 0x00000200u) {
      show_ = from.show_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_QuestInfo_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quest.MSG_Ret_QuestInfo_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_QuestInfo_SC::CopyFrom(const MSG_Ret_QuestInfo_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quest.MSG_Ret_QuestInfo_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_QuestInfo_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_QuestInfo_SC::InternalSwap(MSG_Ret_QuestInfo_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  extinfo_.InternalSwap(&other->extinfo_);
  swap(id_, other->id_);
  swap(state_, other->state_);
  swap(score_, other->score_);
  swap(curvalue_, other->curvalue_);
  swap(maxvalue_, other->maxvalue_);
  swap(starttime_, other->starttime_);
  swap(cur_extvalue_, other->cur_extvalue_);
  swap(max_extvalue_, other->max_extvalue_);
  swap(leftsecs_, other->leftsecs_);
  swap(show_, other->show_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_QuestInfo_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqExecuteQuest_CS::InitAsDefaultInstance() {
}
class MSG_ReqExecuteQuest_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqExecuteQuest_CS>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_target(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_questdesccrc(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_chartarget(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

MSG_ReqExecuteQuest_CS::MSG_ReqExecuteQuest_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:quest.MSG_ReqExecuteQuest_CS)
}
MSG_ReqExecuteQuest_CS::MSG_ReqExecuteQuest_CS(const MSG_ReqExecuteQuest_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_target()) {
    target_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.target_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&questdesccrc_) -
    reinterpret_cast<char*>(&id_)) + sizeof(questdesccrc_));
  // @@protoc_insertion_point(copy_constructor:quest.MSG_ReqExecuteQuest_CS)
}

void MSG_ReqExecuteQuest_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_ReqExecuteQuest_CS_quest_2eproto.base);
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&questdesccrc_) -
      reinterpret_cast<char*>(&id_)) + sizeof(questdesccrc_));
}

MSG_ReqExecuteQuest_CS::~MSG_ReqExecuteQuest_CS() {
  // @@protoc_insertion_point(destructor:quest.MSG_ReqExecuteQuest_CS)
  SharedDtor();
}

void MSG_ReqExecuteQuest_CS::SharedDtor() {
  target_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_ReqExecuteQuest_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqExecuteQuest_CS& MSG_ReqExecuteQuest_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqExecuteQuest_CS_quest_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqExecuteQuest_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:quest.MSG_ReqExecuteQuest_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    target_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&questdesccrc_) -
        reinterpret_cast<char*>(&id_)) + sizeof(questdesccrc_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqExecuteQuest_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string target = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_target();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "quest.MSG_ReqExecuteQuest_CS.target");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_offset(&has_bits);
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 questdesccrc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_questdesccrc(&has_bits);
          questdesccrc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 chartarget = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_chartarget(&has_bits);
          chartarget_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqExecuteQuest_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quest.MSG_ReqExecuteQuest_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional string target = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_target().data(), static_cast<int>(this->_internal_target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "quest.MSG_ReqExecuteQuest_CS.target");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_target(), target);
  }

  // optional uint32 offset = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_offset(), target);
  }

  // optional uint32 questdesccrc = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_questdesccrc(), target);
  }

  // optional uint64 chartarget = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_chartarget(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quest.MSG_ReqExecuteQuest_CS)
  return target;
}

size_t MSG_ReqExecuteQuest_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quest.MSG_ReqExecuteQuest_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string target = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_target());
    }

    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_id());
    }

    // optional uint32 offset = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_offset());
    }

    // optional uint64 chartarget = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_chartarget());
    }

    // optional uint32 questdesccrc = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_questdesccrc());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqExecuteQuest_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quest.MSG_ReqExecuteQuest_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqExecuteQuest_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqExecuteQuest_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quest.MSG_ReqExecuteQuest_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quest.MSG_ReqExecuteQuest_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqExecuteQuest_CS::MergeFrom(const MSG_ReqExecuteQuest_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quest.MSG_ReqExecuteQuest_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      target_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.target_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      offset_ = from.offset_;
    }
    if (cached_has_bits & 0x00000008u) {
      chartarget_ = from.chartarget_;
    }
    if (cached_has_bits & 0x00000010u) {
      questdesccrc_ = from.questdesccrc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_ReqExecuteQuest_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quest.MSG_ReqExecuteQuest_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqExecuteQuest_CS::CopyFrom(const MSG_ReqExecuteQuest_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quest.MSG_ReqExecuteQuest_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqExecuteQuest_CS::IsInitialized() const {
  return true;
}

void MSG_ReqExecuteQuest_CS::InternalSwap(MSG_ReqExecuteQuest_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  target_.Swap(&other->target_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(offset_, other->offset_);
  swap(chartarget_, other->chartarget_);
  swap(questdesccrc_, other->questdesccrc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqExecuteQuest_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqValidQuests_CS::InitAsDefaultInstance() {
}
class MSG_ReqValidQuests_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqValidQuests_CS>()._has_bits_);
};

MSG_ReqValidQuests_CS::MSG_ReqValidQuests_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:quest.MSG_ReqValidQuests_CS)
}
MSG_ReqValidQuests_CS::MSG_ReqValidQuests_CS(const MSG_ReqValidQuests_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:quest.MSG_ReqValidQuests_CS)
}

void MSG_ReqValidQuests_CS::SharedCtor() {
}

MSG_ReqValidQuests_CS::~MSG_ReqValidQuests_CS() {
  // @@protoc_insertion_point(destructor:quest.MSG_ReqValidQuests_CS)
  SharedDtor();
}

void MSG_ReqValidQuests_CS::SharedDtor() {
}

void MSG_ReqValidQuests_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqValidQuests_CS& MSG_ReqValidQuests_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqValidQuests_CS_quest_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqValidQuests_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:quest.MSG_ReqValidQuests_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqValidQuests_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqValidQuests_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quest.MSG_ReqValidQuests_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quest.MSG_ReqValidQuests_CS)
  return target;
}

size_t MSG_ReqValidQuests_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quest.MSG_ReqValidQuests_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqValidQuests_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quest.MSG_ReqValidQuests_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqValidQuests_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqValidQuests_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quest.MSG_ReqValidQuests_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quest.MSG_ReqValidQuests_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqValidQuests_CS::MergeFrom(const MSG_ReqValidQuests_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quest.MSG_ReqValidQuests_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_ReqValidQuests_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quest.MSG_ReqValidQuests_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqValidQuests_CS::CopyFrom(const MSG_ReqValidQuests_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quest.MSG_ReqValidQuests_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqValidQuests_CS::IsInitialized() const {
  return true;
}

void MSG_ReqValidQuests_CS::InternalSwap(MSG_ReqValidQuests_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqValidQuests_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetValidQuests_SC::InitAsDefaultInstance() {
}
class MSG_RetValidQuests_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetValidQuests_SC>()._has_bits_);
};

MSG_RetValidQuests_SC::MSG_RetValidQuests_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:quest.MSG_RetValidQuests_SC)
}
MSG_RetValidQuests_SC::MSG_RetValidQuests_SC(const MSG_RetValidQuests_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      onequest_(from.onequest_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:quest.MSG_RetValidQuests_SC)
}

void MSG_RetValidQuests_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_RetValidQuests_SC_quest_2eproto.base);
}

MSG_RetValidQuests_SC::~MSG_RetValidQuests_SC() {
  // @@protoc_insertion_point(destructor:quest.MSG_RetValidQuests_SC)
  SharedDtor();
}

void MSG_RetValidQuests_SC::SharedDtor() {
}

void MSG_RetValidQuests_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetValidQuests_SC& MSG_RetValidQuests_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetValidQuests_SC_quest_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetValidQuests_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:quest.MSG_RetValidQuests_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  onequest_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetValidQuests_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .quest.npcValidQuest onequest = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_onequest(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetValidQuests_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quest.MSG_RetValidQuests_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .quest.npcValidQuest onequest = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_onequest_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_onequest(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quest.MSG_RetValidQuests_SC)
  return target;
}

size_t MSG_RetValidQuests_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quest.MSG_RetValidQuests_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .quest.npcValidQuest onequest = 1;
  total_size += 1UL * this->_internal_onequest_size();
  for (const auto& msg : this->onequest_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetValidQuests_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quest.MSG_RetValidQuests_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetValidQuests_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetValidQuests_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quest.MSG_RetValidQuests_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quest.MSG_RetValidQuests_SC)
    MergeFrom(*source);
  }
}

void MSG_RetValidQuests_SC::MergeFrom(const MSG_RetValidQuests_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quest.MSG_RetValidQuests_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  onequest_.MergeFrom(from.onequest_);
}

void MSG_RetValidQuests_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quest.MSG_RetValidQuests_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetValidQuests_SC::CopyFrom(const MSG_RetValidQuests_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quest.MSG_RetValidQuests_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetValidQuests_SC::IsInitialized() const {
  return true;
}

void MSG_RetValidQuests_SC::InternalSwap(MSG_RetValidQuests_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  onequest_.InternalSwap(&other->onequest_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetValidQuests_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqRetQuestState_CSC::InitAsDefaultInstance() {
}
class MSG_ReqRetQuestState_CSC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqRetQuestState_CSC>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_ReqRetQuestState_CSC::MSG_ReqRetQuestState_CSC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:quest.MSG_ReqRetQuestState_CSC)
}
MSG_ReqRetQuestState_CSC::MSG_ReqRetQuestState_CSC(const MSG_ReqRetQuestState_CSC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&id_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:quest.MSG_ReqRetQuestState_CSC)
}

void MSG_ReqRetQuestState_CSC::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&id_)) + sizeof(state_));
}

MSG_ReqRetQuestState_CSC::~MSG_ReqRetQuestState_CSC() {
  // @@protoc_insertion_point(destructor:quest.MSG_ReqRetQuestState_CSC)
  SharedDtor();
}

void MSG_ReqRetQuestState_CSC::SharedDtor() {
}

void MSG_ReqRetQuestState_CSC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqRetQuestState_CSC& MSG_ReqRetQuestState_CSC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqRetQuestState_CSC_quest_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqRetQuestState_CSC::Clear() {
// @@protoc_insertion_point(message_clear_start:quest.MSG_ReqRetQuestState_CSC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&state_) -
        reinterpret_cast<char*>(&id_)) + sizeof(state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqRetQuestState_CSC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_state(&has_bits);
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqRetQuestState_CSC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quest.MSG_ReqRetQuestState_CSC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional uint32 state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quest.MSG_ReqRetQuestState_CSC)
  return target;
}

size_t MSG_ReqRetQuestState_CSC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quest.MSG_ReqRetQuestState_CSC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_id());
    }

    // optional uint32 state = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_state());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqRetQuestState_CSC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quest.MSG_ReqRetQuestState_CSC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqRetQuestState_CSC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqRetQuestState_CSC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quest.MSG_ReqRetQuestState_CSC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quest.MSG_ReqRetQuestState_CSC)
    MergeFrom(*source);
  }
}

void MSG_ReqRetQuestState_CSC::MergeFrom(const MSG_ReqRetQuestState_CSC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quest.MSG_ReqRetQuestState_CSC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_ReqRetQuestState_CSC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quest.MSG_ReqRetQuestState_CSC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqRetQuestState_CSC::CopyFrom(const MSG_ReqRetQuestState_CSC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quest.MSG_ReqRetQuestState_CSC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqRetQuestState_CSC::IsInitialized() const {
  return true;
}

void MSG_ReqRetQuestState_CSC::InternalSwap(MSG_ReqRetQuestState_CSC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqRetQuestState_CSC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqAbandonQuest_CS::InitAsDefaultInstance() {
}
class MSG_ReqAbandonQuest_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqAbandonQuest_CS>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_ReqAbandonQuest_CS::MSG_ReqAbandonQuest_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:quest.MSG_ReqAbandonQuest_CS)
}
MSG_ReqAbandonQuest_CS::MSG_ReqAbandonQuest_CS(const MSG_ReqAbandonQuest_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:quest.MSG_ReqAbandonQuest_CS)
}

void MSG_ReqAbandonQuest_CS::SharedCtor() {
  id_ = 0u;
}

MSG_ReqAbandonQuest_CS::~MSG_ReqAbandonQuest_CS() {
  // @@protoc_insertion_point(destructor:quest.MSG_ReqAbandonQuest_CS)
  SharedDtor();
}

void MSG_ReqAbandonQuest_CS::SharedDtor() {
}

void MSG_ReqAbandonQuest_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqAbandonQuest_CS& MSG_ReqAbandonQuest_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqAbandonQuest_CS_quest_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqAbandonQuest_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:quest.MSG_ReqAbandonQuest_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqAbandonQuest_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqAbandonQuest_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quest.MSG_ReqAbandonQuest_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quest.MSG_ReqAbandonQuest_CS)
  return target;
}

size_t MSG_ReqAbandonQuest_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quest.MSG_ReqAbandonQuest_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqAbandonQuest_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quest.MSG_ReqAbandonQuest_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqAbandonQuest_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqAbandonQuest_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quest.MSG_ReqAbandonQuest_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quest.MSG_ReqAbandonQuest_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqAbandonQuest_CS::MergeFrom(const MSG_ReqAbandonQuest_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quest.MSG_ReqAbandonQuest_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
}

void MSG_ReqAbandonQuest_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quest.MSG_ReqAbandonQuest_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqAbandonQuest_CS::CopyFrom(const MSG_ReqAbandonQuest_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quest.MSG_ReqAbandonQuest_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqAbandonQuest_CS::IsInitialized() const {
  return true;
}

void MSG_ReqAbandonQuest_CS::InternalSwap(MSG_ReqAbandonQuest_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqAbandonQuest_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetAbandonQuest_SC::InitAsDefaultInstance() {
}
class MSG_RetAbandonQuest_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetAbandonQuest_SC>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_RetAbandonQuest_SC::MSG_RetAbandonQuest_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:quest.MSG_RetAbandonQuest_SC)
}
MSG_RetAbandonQuest_SC::MSG_RetAbandonQuest_SC(const MSG_RetAbandonQuest_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:quest.MSG_RetAbandonQuest_SC)
}

void MSG_RetAbandonQuest_SC::SharedCtor() {
  id_ = 0u;
}

MSG_RetAbandonQuest_SC::~MSG_RetAbandonQuest_SC() {
  // @@protoc_insertion_point(destructor:quest.MSG_RetAbandonQuest_SC)
  SharedDtor();
}

void MSG_RetAbandonQuest_SC::SharedDtor() {
}

void MSG_RetAbandonQuest_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetAbandonQuest_SC& MSG_RetAbandonQuest_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetAbandonQuest_SC_quest_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetAbandonQuest_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:quest.MSG_RetAbandonQuest_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetAbandonQuest_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetAbandonQuest_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quest.MSG_RetAbandonQuest_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quest.MSG_RetAbandonQuest_SC)
  return target;
}

size_t MSG_RetAbandonQuest_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quest.MSG_RetAbandonQuest_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetAbandonQuest_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quest.MSG_RetAbandonQuest_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetAbandonQuest_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetAbandonQuest_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quest.MSG_RetAbandonQuest_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quest.MSG_RetAbandonQuest_SC)
    MergeFrom(*source);
  }
}

void MSG_RetAbandonQuest_SC::MergeFrom(const MSG_RetAbandonQuest_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quest.MSG_RetAbandonQuest_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
}

void MSG_RetAbandonQuest_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quest.MSG_RetAbandonQuest_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetAbandonQuest_SC::CopyFrom(const MSG_RetAbandonQuest_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quest.MSG_RetAbandonQuest_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetAbandonQuest_SC::IsInitialized() const {
  return true;
}

void MSG_RetAbandonQuest_SC::InternalSwap(MSG_RetAbandonQuest_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetAbandonQuest_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QuestStateInfo::InitAsDefaultInstance() {
}
class QuestStateInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<QuestStateInfo>()._has_bits_);
  static void set_has_questid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

QuestStateInfo::QuestStateInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:quest.QuestStateInfo)
}
QuestStateInfo::QuestStateInfo(const QuestStateInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&questid_, &from.questid_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&questid_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:quest.QuestStateInfo)
}

void QuestStateInfo::SharedCtor() {
  ::memset(&questid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&questid_)) + sizeof(state_));
}

QuestStateInfo::~QuestStateInfo() {
  // @@protoc_insertion_point(destructor:quest.QuestStateInfo)
  SharedDtor();
}

void QuestStateInfo::SharedDtor() {
}

void QuestStateInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QuestStateInfo& QuestStateInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QuestStateInfo_quest_2eproto.base);
  return *internal_default_instance();
}


void QuestStateInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:quest.QuestStateInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&questid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&state_) -
        reinterpret_cast<char*>(&questid_)) + sizeof(state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* QuestStateInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 questid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_questid(&has_bits);
          questid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_state(&has_bits);
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QuestStateInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quest.QuestStateInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 questid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_questid(), target);
  }

  // optional uint32 state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quest.QuestStateInfo)
  return target;
}

size_t QuestStateInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quest.QuestStateInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 questid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_questid());
    }

    // optional uint32 state = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_state());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QuestStateInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quest.QuestStateInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const QuestStateInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QuestStateInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quest.QuestStateInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quest.QuestStateInfo)
    MergeFrom(*source);
  }
}

void QuestStateInfo::MergeFrom(const QuestStateInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quest.QuestStateInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      questid_ = from.questid_;
    }
    if (cached_has_bits & 0x00000002u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QuestStateInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quest.QuestStateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestStateInfo::CopyFrom(const QuestStateInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quest.QuestStateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestStateInfo::IsInitialized() const {
  return true;
}

void QuestStateInfo::InternalSwap(QuestStateInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(questid_, other->questid_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QuestStateInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void npcQuestList::InitAsDefaultInstance() {
}
class npcQuestList::_Internal {
 public:
  using HasBits = decltype(std::declval<npcQuestList>()._has_bits_);
  static void set_has_npcid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

npcQuestList::npcQuestList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:quest.npcQuestList)
}
npcQuestList::npcQuestList(const npcQuestList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      quests_(from.quests_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&npcid_, &from.npcid_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&npcid_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:quest.npcQuestList)
}

void npcQuestList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_npcQuestList_quest_2eproto.base);
  ::memset(&npcid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&npcid_)) + sizeof(state_));
}

npcQuestList::~npcQuestList() {
  // @@protoc_insertion_point(destructor:quest.npcQuestList)
  SharedDtor();
}

void npcQuestList::SharedDtor() {
}

void npcQuestList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const npcQuestList& npcQuestList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_npcQuestList_quest_2eproto.base);
  return *internal_default_instance();
}


void npcQuestList::Clear() {
// @@protoc_insertion_point(message_clear_start:quest.npcQuestList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  quests_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&npcid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&state_) -
        reinterpret_cast<char*>(&npcid_)) + sizeof(state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* npcQuestList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 npcid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_npcid(&has_bits);
          npcid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .quest.QuestStateInfo quests = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_quests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_state(&has_bits);
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* npcQuestList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quest.npcQuestList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 npcid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_npcid(), target);
  }

  // repeated .quest.QuestStateInfo quests = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_quests_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_quests(i), target, stream);
  }

  // optional int32 state = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quest.npcQuestList)
  return target;
}

size_t npcQuestList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quest.npcQuestList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .quest.QuestStateInfo quests = 2;
  total_size += 1UL * this->_internal_quests_size();
  for (const auto& msg : this->quests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 npcid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_npcid());
    }

    // optional int32 state = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_state());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void npcQuestList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quest.npcQuestList)
  GOOGLE_DCHECK_NE(&from, this);
  const npcQuestList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<npcQuestList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quest.npcQuestList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quest.npcQuestList)
    MergeFrom(*source);
  }
}

void npcQuestList::MergeFrom(const npcQuestList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quest.npcQuestList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  quests_.MergeFrom(from.quests_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      npcid_ = from.npcid_;
    }
    if (cached_has_bits & 0x00000002u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void npcQuestList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quest.npcQuestList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void npcQuestList::CopyFrom(const npcQuestList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quest.npcQuestList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool npcQuestList::IsInitialized() const {
  return true;
}

void npcQuestList::InternalSwap(npcQuestList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  quests_.InternalSwap(&other->quests_);
  swap(npcid_, other->npcid_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata npcQuestList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqMapQuestInfo_CS::InitAsDefaultInstance() {
}
class MSG_ReqMapQuestInfo_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqMapQuestInfo_CS>()._has_bits_);
};

MSG_ReqMapQuestInfo_CS::MSG_ReqMapQuestInfo_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:quest.MSG_ReqMapQuestInfo_CS)
}
MSG_ReqMapQuestInfo_CS::MSG_ReqMapQuestInfo_CS(const MSG_ReqMapQuestInfo_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:quest.MSG_ReqMapQuestInfo_CS)
}

void MSG_ReqMapQuestInfo_CS::SharedCtor() {
}

MSG_ReqMapQuestInfo_CS::~MSG_ReqMapQuestInfo_CS() {
  // @@protoc_insertion_point(destructor:quest.MSG_ReqMapQuestInfo_CS)
  SharedDtor();
}

void MSG_ReqMapQuestInfo_CS::SharedDtor() {
}

void MSG_ReqMapQuestInfo_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqMapQuestInfo_CS& MSG_ReqMapQuestInfo_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqMapQuestInfo_CS_quest_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqMapQuestInfo_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:quest.MSG_ReqMapQuestInfo_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqMapQuestInfo_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqMapQuestInfo_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quest.MSG_ReqMapQuestInfo_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quest.MSG_ReqMapQuestInfo_CS)
  return target;
}

size_t MSG_ReqMapQuestInfo_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quest.MSG_ReqMapQuestInfo_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqMapQuestInfo_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quest.MSG_ReqMapQuestInfo_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqMapQuestInfo_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqMapQuestInfo_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quest.MSG_ReqMapQuestInfo_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quest.MSG_ReqMapQuestInfo_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqMapQuestInfo_CS::MergeFrom(const MSG_ReqMapQuestInfo_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quest.MSG_ReqMapQuestInfo_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_ReqMapQuestInfo_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quest.MSG_ReqMapQuestInfo_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqMapQuestInfo_CS::CopyFrom(const MSG_ReqMapQuestInfo_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quest.MSG_ReqMapQuestInfo_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqMapQuestInfo_CS::IsInitialized() const {
  return true;
}

void MSG_ReqMapQuestInfo_CS::InternalSwap(MSG_ReqMapQuestInfo_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqMapQuestInfo_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetMapQuestInfo_SC::InitAsDefaultInstance() {
}
class MSG_RetMapQuestInfo_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetMapQuestInfo_SC>()._has_bits_);
};

MSG_RetMapQuestInfo_SC::MSG_RetMapQuestInfo_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:quest.MSG_RetMapQuestInfo_SC)
}
MSG_RetMapQuestInfo_SC::MSG_RetMapQuestInfo_SC(const MSG_RetMapQuestInfo_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      npclists_(from.npclists_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:quest.MSG_RetMapQuestInfo_SC)
}

void MSG_RetMapQuestInfo_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_RetMapQuestInfo_SC_quest_2eproto.base);
}

MSG_RetMapQuestInfo_SC::~MSG_RetMapQuestInfo_SC() {
  // @@protoc_insertion_point(destructor:quest.MSG_RetMapQuestInfo_SC)
  SharedDtor();
}

void MSG_RetMapQuestInfo_SC::SharedDtor() {
}

void MSG_RetMapQuestInfo_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetMapQuestInfo_SC& MSG_RetMapQuestInfo_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetMapQuestInfo_SC_quest_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetMapQuestInfo_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:quest.MSG_RetMapQuestInfo_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  npclists_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetMapQuestInfo_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .quest.npcQuestList npclists = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_npclists(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetMapQuestInfo_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quest.MSG_RetMapQuestInfo_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .quest.npcQuestList npclists = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_npclists_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_npclists(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quest.MSG_RetMapQuestInfo_SC)
  return target;
}

size_t MSG_RetMapQuestInfo_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quest.MSG_RetMapQuestInfo_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .quest.npcQuestList npclists = 1;
  total_size += 1UL * this->_internal_npclists_size();
  for (const auto& msg : this->npclists_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetMapQuestInfo_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quest.MSG_RetMapQuestInfo_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetMapQuestInfo_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetMapQuestInfo_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quest.MSG_RetMapQuestInfo_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quest.MSG_RetMapQuestInfo_SC)
    MergeFrom(*source);
  }
}

void MSG_RetMapQuestInfo_SC::MergeFrom(const MSG_RetMapQuestInfo_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quest.MSG_RetMapQuestInfo_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  npclists_.MergeFrom(from.npclists_);
}

void MSG_RetMapQuestInfo_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quest.MSG_RetMapQuestInfo_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetMapQuestInfo_SC::CopyFrom(const MSG_RetMapQuestInfo_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quest.MSG_RetMapQuestInfo_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetMapQuestInfo_SC::IsInitialized() const {
  return true;
}

void MSG_RetMapQuestInfo_SC::InternalSwap(MSG_RetMapQuestInfo_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  npclists_.InternalSwap(&other->npclists_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetMapQuestInfo_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqCurActiveQuest_CS::InitAsDefaultInstance() {
}
class MSG_ReqCurActiveQuest_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqCurActiveQuest_CS>()._has_bits_);
};

MSG_ReqCurActiveQuest_CS::MSG_ReqCurActiveQuest_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:quest.MSG_ReqCurActiveQuest_CS)
}
MSG_ReqCurActiveQuest_CS::MSG_ReqCurActiveQuest_CS(const MSG_ReqCurActiveQuest_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:quest.MSG_ReqCurActiveQuest_CS)
}

void MSG_ReqCurActiveQuest_CS::SharedCtor() {
}

MSG_ReqCurActiveQuest_CS::~MSG_ReqCurActiveQuest_CS() {
  // @@protoc_insertion_point(destructor:quest.MSG_ReqCurActiveQuest_CS)
  SharedDtor();
}

void MSG_ReqCurActiveQuest_CS::SharedDtor() {
}

void MSG_ReqCurActiveQuest_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqCurActiveQuest_CS& MSG_ReqCurActiveQuest_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqCurActiveQuest_CS_quest_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqCurActiveQuest_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:quest.MSG_ReqCurActiveQuest_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqCurActiveQuest_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqCurActiveQuest_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quest.MSG_ReqCurActiveQuest_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quest.MSG_ReqCurActiveQuest_CS)
  return target;
}

size_t MSG_ReqCurActiveQuest_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quest.MSG_ReqCurActiveQuest_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqCurActiveQuest_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quest.MSG_ReqCurActiveQuest_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqCurActiveQuest_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqCurActiveQuest_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quest.MSG_ReqCurActiveQuest_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quest.MSG_ReqCurActiveQuest_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqCurActiveQuest_CS::MergeFrom(const MSG_ReqCurActiveQuest_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quest.MSG_ReqCurActiveQuest_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_ReqCurActiveQuest_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quest.MSG_ReqCurActiveQuest_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqCurActiveQuest_CS::CopyFrom(const MSG_ReqCurActiveQuest_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quest.MSG_ReqCurActiveQuest_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqCurActiveQuest_CS::IsInitialized() const {
  return true;
}

void MSG_ReqCurActiveQuest_CS::InternalSwap(MSG_ReqCurActiveQuest_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqCurActiveQuest_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ringQuestInfo::InitAsDefaultInstance() {
}
class ringQuestInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ringQuestInfo>()._has_bits_);
  static void set_has_mainquestid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_finishringnum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ringQuestInfo::ringQuestInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:quest.ringQuestInfo)
}
ringQuestInfo::ringQuestInfo(const ringQuestInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mainquestid_, &from.mainquestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&finishringnum_) -
    reinterpret_cast<char*>(&mainquestid_)) + sizeof(finishringnum_));
  // @@protoc_insertion_point(copy_constructor:quest.ringQuestInfo)
}

void ringQuestInfo::SharedCtor() {
  ::memset(&mainquestid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&finishringnum_) -
      reinterpret_cast<char*>(&mainquestid_)) + sizeof(finishringnum_));
}

ringQuestInfo::~ringQuestInfo() {
  // @@protoc_insertion_point(destructor:quest.ringQuestInfo)
  SharedDtor();
}

void ringQuestInfo::SharedDtor() {
}

void ringQuestInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ringQuestInfo& ringQuestInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ringQuestInfo_quest_2eproto.base);
  return *internal_default_instance();
}


void ringQuestInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:quest.ringQuestInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&mainquestid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&finishringnum_) -
        reinterpret_cast<char*>(&mainquestid_)) + sizeof(finishringnum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ringQuestInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 mainquestid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mainquestid(&has_bits);
          mainquestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 finishringnum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_finishringnum(&has_bits);
          finishringnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ringQuestInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quest.ringQuestInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 mainquestid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_mainquestid(), target);
  }

  // optional uint32 finishringnum = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_finishringnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quest.ringQuestInfo)
  return target;
}

size_t ringQuestInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quest.ringQuestInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 mainquestid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_mainquestid());
    }

    // optional uint32 finishringnum = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_finishringnum());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ringQuestInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quest.ringQuestInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ringQuestInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ringQuestInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quest.ringQuestInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quest.ringQuestInfo)
    MergeFrom(*source);
  }
}

void ringQuestInfo::MergeFrom(const ringQuestInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quest.ringQuestInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mainquestid_ = from.mainquestid_;
    }
    if (cached_has_bits & 0x00000002u) {
      finishringnum_ = from.finishringnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ringQuestInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quest.ringQuestInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ringQuestInfo::CopyFrom(const ringQuestInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quest.ringQuestInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ringQuestInfo::IsInitialized() const {
  return true;
}

void ringQuestInfo::InternalSwap(ringQuestInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(mainquestid_, other->mainquestid_);
  swap(finishringnum_, other->finishringnum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ringQuestInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetCurActiveQuest_SC::InitAsDefaultInstance() {
}
class MSG_RetCurActiveQuest_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetCurActiveQuest_SC>()._has_bits_);
  static void set_has_dayvar(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_RetCurActiveQuest_SC::MSG_RetCurActiveQuest_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:quest.MSG_RetCurActiveQuest_SC)
}
MSG_RetCurActiveQuest_SC::MSG_RetCurActiveQuest_SC(const MSG_RetCurActiveQuest_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      item_(from.item_),
      newaccept_(from.newaccept_),
      ringinfo_(from.ringinfo_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dayvar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_dayvar()) {
    dayvar_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dayvar_);
  }
  // @@protoc_insertion_point(copy_constructor:quest.MSG_RetCurActiveQuest_SC)
}

void MSG_RetCurActiveQuest_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_RetCurActiveQuest_SC_quest_2eproto.base);
  dayvar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MSG_RetCurActiveQuest_SC::~MSG_RetCurActiveQuest_SC() {
  // @@protoc_insertion_point(destructor:quest.MSG_RetCurActiveQuest_SC)
  SharedDtor();
}

void MSG_RetCurActiveQuest_SC::SharedDtor() {
  dayvar_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_RetCurActiveQuest_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetCurActiveQuest_SC& MSG_RetCurActiveQuest_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetCurActiveQuest_SC_quest_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetCurActiveQuest_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:quest.MSG_RetCurActiveQuest_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  newaccept_.Clear();
  ringinfo_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    dayvar_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetCurActiveQuest_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .quest.MSG_Ret_QuestInfo_SC item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_item(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .quest.npcValidQuest newaccept = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_newaccept(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string dayvar = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_dayvar();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "quest.MSG_RetCurActiveQuest_SC.dayvar");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .quest.ringQuestInfo ringinfo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ringinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetCurActiveQuest_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quest.MSG_RetCurActiveQuest_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .quest.MSG_Ret_QuestInfo_SC item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_item_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_item(i), target, stream);
  }

  // repeated .quest.npcValidQuest newaccept = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_newaccept_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_newaccept(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional string dayvar = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_dayvar().data(), static_cast<int>(this->_internal_dayvar().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "quest.MSG_RetCurActiveQuest_SC.dayvar");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_dayvar(), target);
  }

  // repeated .quest.ringQuestInfo ringinfo = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ringinfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_ringinfo(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quest.MSG_RetCurActiveQuest_SC)
  return target;
}

size_t MSG_RetCurActiveQuest_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quest.MSG_RetCurActiveQuest_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .quest.MSG_Ret_QuestInfo_SC item = 1;
  total_size += 1UL * this->_internal_item_size();
  for (const auto& msg : this->item_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .quest.npcValidQuest newaccept = 2;
  total_size += 1UL * this->_internal_newaccept_size();
  for (const auto& msg : this->newaccept_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .quest.ringQuestInfo ringinfo = 4;
  total_size += 1UL * this->_internal_ringinfo_size();
  for (const auto& msg : this->ringinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string dayvar = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dayvar());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetCurActiveQuest_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quest.MSG_RetCurActiveQuest_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetCurActiveQuest_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetCurActiveQuest_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quest.MSG_RetCurActiveQuest_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quest.MSG_RetCurActiveQuest_SC)
    MergeFrom(*source);
  }
}

void MSG_RetCurActiveQuest_SC::MergeFrom(const MSG_RetCurActiveQuest_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quest.MSG_RetCurActiveQuest_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
  newaccept_.MergeFrom(from.newaccept_);
  ringinfo_.MergeFrom(from.ringinfo_);
  if (from._internal_has_dayvar()) {
    _has_bits_[0] |= 0x00000001u;
    dayvar_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dayvar_);
  }
}

void MSG_RetCurActiveQuest_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quest.MSG_RetCurActiveQuest_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetCurActiveQuest_SC::CopyFrom(const MSG_RetCurActiveQuest_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quest.MSG_RetCurActiveQuest_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetCurActiveQuest_SC::IsInitialized() const {
  return true;
}

void MSG_RetCurActiveQuest_SC::InternalSwap(MSG_RetCurActiveQuest_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  item_.InternalSwap(&other->item_);
  newaccept_.InternalSwap(&other->newaccept_);
  ringinfo_.InternalSwap(&other->ringinfo_);
  dayvar_.Swap(&other->dayvar_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetCurActiveQuest_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqChangeMapFindPath_CS::InitAsDefaultInstance() {
}
class MSG_ReqChangeMapFindPath_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqChangeMapFindPath_CS>()._has_bits_);
  static void set_has_pathwayid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_questid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_destx(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_desty(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

MSG_ReqChangeMapFindPath_CS::MSG_ReqChangeMapFindPath_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:quest.MSG_ReqChangeMapFindPath_CS)
}
MSG_ReqChangeMapFindPath_CS::MSG_ReqChangeMapFindPath_CS(const MSG_ReqChangeMapFindPath_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pathwayid_, &from.pathwayid_,
    static_cast<size_t>(reinterpret_cast<char*>(&desty_) -
    reinterpret_cast<char*>(&pathwayid_)) + sizeof(desty_));
  // @@protoc_insertion_point(copy_constructor:quest.MSG_ReqChangeMapFindPath_CS)
}

void MSG_ReqChangeMapFindPath_CS::SharedCtor() {
  ::memset(&pathwayid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&desty_) -
      reinterpret_cast<char*>(&pathwayid_)) + sizeof(desty_));
}

MSG_ReqChangeMapFindPath_CS::~MSG_ReqChangeMapFindPath_CS() {
  // @@protoc_insertion_point(destructor:quest.MSG_ReqChangeMapFindPath_CS)
  SharedDtor();
}

void MSG_ReqChangeMapFindPath_CS::SharedDtor() {
}

void MSG_ReqChangeMapFindPath_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqChangeMapFindPath_CS& MSG_ReqChangeMapFindPath_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqChangeMapFindPath_CS_quest_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqChangeMapFindPath_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:quest.MSG_ReqChangeMapFindPath_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&pathwayid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&desty_) -
        reinterpret_cast<char*>(&pathwayid_)) + sizeof(desty_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqChangeMapFindPath_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 pathwayid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_pathwayid(&has_bits);
          pathwayid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 questid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_questid(&has_bits);
          questid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 destx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_destx(&has_bits);
          destx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 desty = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_desty(&has_bits);
          desty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqChangeMapFindPath_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quest.MSG_ReqChangeMapFindPath_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pathwayid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pathwayid(), target);
  }

  // optional uint32 questid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_questid(), target);
  }

  // optional uint32 destx = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_destx(), target);
  }

  // optional uint32 desty = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_desty(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quest.MSG_ReqChangeMapFindPath_CS)
  return target;
}

size_t MSG_ReqChangeMapFindPath_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quest.MSG_ReqChangeMapFindPath_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 pathwayid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pathwayid());
    }

    // optional uint32 questid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_questid());
    }

    // optional uint32 destx = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_destx());
    }

    // optional uint32 desty = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_desty());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqChangeMapFindPath_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quest.MSG_ReqChangeMapFindPath_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqChangeMapFindPath_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqChangeMapFindPath_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quest.MSG_ReqChangeMapFindPath_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quest.MSG_ReqChangeMapFindPath_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqChangeMapFindPath_CS::MergeFrom(const MSG_ReqChangeMapFindPath_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quest.MSG_ReqChangeMapFindPath_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      pathwayid_ = from.pathwayid_;
    }
    if (cached_has_bits & 0x00000002u) {
      questid_ = from.questid_;
    }
    if (cached_has_bits & 0x00000004u) {
      destx_ = from.destx_;
    }
    if (cached_has_bits & 0x00000008u) {
      desty_ = from.desty_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_ReqChangeMapFindPath_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quest.MSG_ReqChangeMapFindPath_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqChangeMapFindPath_CS::CopyFrom(const MSG_ReqChangeMapFindPath_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quest.MSG_ReqChangeMapFindPath_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqChangeMapFindPath_CS::IsInitialized() const {
  return true;
}

void MSG_ReqChangeMapFindPath_CS::InternalSwap(MSG_ReqChangeMapFindPath_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pathwayid_, other->pathwayid_);
  swap(questid_, other->questid_);
  swap(destx_, other->destx_);
  swap(desty_, other->desty_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqChangeMapFindPath_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetChangeMapFindPath_SC::InitAsDefaultInstance() {
  ::quest::_MSG_RetChangeMapFindPath_SC_default_instance_._instance.get_mutable()->info_ = const_cast< ::quest::ChangeMapFindWayInfo*>(
      ::quest::ChangeMapFindWayInfo::internal_default_instance());
}
class MSG_RetChangeMapFindPath_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetChangeMapFindPath_SC>()._has_bits_);
  static const ::quest::ChangeMapFindWayInfo& info(const MSG_RetChangeMapFindPath_SC* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::quest::ChangeMapFindWayInfo&
MSG_RetChangeMapFindPath_SC::_Internal::info(const MSG_RetChangeMapFindPath_SC* msg) {
  return *msg->info_;
}
MSG_RetChangeMapFindPath_SC::MSG_RetChangeMapFindPath_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:quest.MSG_RetChangeMapFindPath_SC)
}
MSG_RetChangeMapFindPath_SC::MSG_RetChangeMapFindPath_SC(const MSG_RetChangeMapFindPath_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::quest::ChangeMapFindWayInfo(*from.info_);
  } else {
    info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:quest.MSG_RetChangeMapFindPath_SC)
}

void MSG_RetChangeMapFindPath_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_RetChangeMapFindPath_SC_quest_2eproto.base);
  info_ = nullptr;
}

MSG_RetChangeMapFindPath_SC::~MSG_RetChangeMapFindPath_SC() {
  // @@protoc_insertion_point(destructor:quest.MSG_RetChangeMapFindPath_SC)
  SharedDtor();
}

void MSG_RetChangeMapFindPath_SC::SharedDtor() {
  if (this != internal_default_instance()) delete info_;
}

void MSG_RetChangeMapFindPath_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetChangeMapFindPath_SC& MSG_RetChangeMapFindPath_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetChangeMapFindPath_SC_quest_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetChangeMapFindPath_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:quest.MSG_RetChangeMapFindPath_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(info_ != nullptr);
    info_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetChangeMapFindPath_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .quest.ChangeMapFindWayInfo info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetChangeMapFindPath_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quest.MSG_RetChangeMapFindPath_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .quest.ChangeMapFindWayInfo info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quest.MSG_RetChangeMapFindPath_SC)
  return target;
}

size_t MSG_RetChangeMapFindPath_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quest.MSG_RetChangeMapFindPath_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .quest.ChangeMapFindWayInfo info = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetChangeMapFindPath_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quest.MSG_RetChangeMapFindPath_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetChangeMapFindPath_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetChangeMapFindPath_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quest.MSG_RetChangeMapFindPath_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quest.MSG_RetChangeMapFindPath_SC)
    MergeFrom(*source);
  }
}

void MSG_RetChangeMapFindPath_SC::MergeFrom(const MSG_RetChangeMapFindPath_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quest.MSG_RetChangeMapFindPath_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_info()) {
    _internal_mutable_info()->::quest::ChangeMapFindWayInfo::MergeFrom(from._internal_info());
  }
}

void MSG_RetChangeMapFindPath_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quest.MSG_RetChangeMapFindPath_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetChangeMapFindPath_SC::CopyFrom(const MSG_RetChangeMapFindPath_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quest.MSG_RetChangeMapFindPath_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetChangeMapFindPath_SC::IsInitialized() const {
  return true;
}

void MSG_RetChangeMapFindPath_SC::InternalSwap(MSG_RetChangeMapFindPath_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(info_, other->info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetChangeMapFindPath_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChangeMapFindWayInfo::InitAsDefaultInstance() {
}
class ChangeMapFindWayInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ChangeMapFindWayInfo>()._has_bits_);
  static void set_has_errcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pathwayid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_destmapid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_findingway(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ChangeMapFindWayInfo::ChangeMapFindWayInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:quest.ChangeMapFindWayInfo)
}
ChangeMapFindWayInfo::ChangeMapFindWayInfo(const ChangeMapFindWayInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&errcode_, &from.errcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&findingway_) -
    reinterpret_cast<char*>(&errcode_)) + sizeof(findingway_));
  // @@protoc_insertion_point(copy_constructor:quest.ChangeMapFindWayInfo)
}

void ChangeMapFindWayInfo::SharedCtor() {
  ::memset(&errcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&findingway_) -
      reinterpret_cast<char*>(&errcode_)) + sizeof(findingway_));
}

ChangeMapFindWayInfo::~ChangeMapFindWayInfo() {
  // @@protoc_insertion_point(destructor:quest.ChangeMapFindWayInfo)
  SharedDtor();
}

void ChangeMapFindWayInfo::SharedDtor() {
}

void ChangeMapFindWayInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChangeMapFindWayInfo& ChangeMapFindWayInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChangeMapFindWayInfo_quest_2eproto.base);
  return *internal_default_instance();
}


void ChangeMapFindWayInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:quest.ChangeMapFindWayInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&errcode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&findingway_) -
        reinterpret_cast<char*>(&errcode_)) + sizeof(findingway_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ChangeMapFindWayInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 errcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_errcode(&has_bits);
          errcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pathwayid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_pathwayid(&has_bits);
          pathwayid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 destmapid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_destmapid(&has_bits);
          destmapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool findingway = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_findingway(&has_bits);
          findingway_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChangeMapFindWayInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quest.ChangeMapFindWayInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 errcode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_errcode(), target);
  }

  // optional uint32 pathwayid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pathwayid(), target);
  }

  // optional uint32 destmapid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_destmapid(), target);
  }

  // optional bool findingway = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_findingway(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quest.ChangeMapFindWayInfo)
  return target;
}

size_t ChangeMapFindWayInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quest.ChangeMapFindWayInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 errcode = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_errcode());
    }

    // optional uint32 pathwayid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pathwayid());
    }

    // optional uint32 destmapid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_destmapid());
    }

    // optional bool findingway = 4 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangeMapFindWayInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quest.ChangeMapFindWayInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeMapFindWayInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChangeMapFindWayInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quest.ChangeMapFindWayInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quest.ChangeMapFindWayInfo)
    MergeFrom(*source);
  }
}

void ChangeMapFindWayInfo::MergeFrom(const ChangeMapFindWayInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quest.ChangeMapFindWayInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      errcode_ = from.errcode_;
    }
    if (cached_has_bits & 0x00000002u) {
      pathwayid_ = from.pathwayid_;
    }
    if (cached_has_bits & 0x00000004u) {
      destmapid_ = from.destmapid_;
    }
    if (cached_has_bits & 0x00000008u) {
      findingway_ = from.findingway_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChangeMapFindWayInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quest.ChangeMapFindWayInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeMapFindWayInfo::CopyFrom(const ChangeMapFindWayInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quest.ChangeMapFindWayInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeMapFindWayInfo::IsInitialized() const {
  return true;
}

void ChangeMapFindWayInfo::InternalSwap(ChangeMapFindWayInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(errcode_, other->errcode_);
  swap(pathwayid_, other->pathwayid_);
  swap(destmapid_, other->destmapid_);
  swap(findingway_, other->findingway_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangeMapFindWayInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetPlotTalkID_SC::InitAsDefaultInstance() {
}
class MSG_RetPlotTalkID_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetPlotTalkID_SC>()._has_bits_);
  static void set_has_groupid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_RetPlotTalkID_SC::MSG_RetPlotTalkID_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:quest.MSG_RetPlotTalkID_SC)
}
MSG_RetPlotTalkID_SC::MSG_RetPlotTalkID_SC(const MSG_RetPlotTalkID_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  groupid_ = from.groupid_;
  // @@protoc_insertion_point(copy_constructor:quest.MSG_RetPlotTalkID_SC)
}

void MSG_RetPlotTalkID_SC::SharedCtor() {
  groupid_ = 0u;
}

MSG_RetPlotTalkID_SC::~MSG_RetPlotTalkID_SC() {
  // @@protoc_insertion_point(destructor:quest.MSG_RetPlotTalkID_SC)
  SharedDtor();
}

void MSG_RetPlotTalkID_SC::SharedDtor() {
}

void MSG_RetPlotTalkID_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetPlotTalkID_SC& MSG_RetPlotTalkID_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetPlotTalkID_SC_quest_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetPlotTalkID_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:quest.MSG_RetPlotTalkID_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  groupid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetPlotTalkID_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 groupid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_groupid(&has_bits);
          groupid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetPlotTalkID_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quest.MSG_RetPlotTalkID_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 groupid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_groupid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quest.MSG_RetPlotTalkID_SC)
  return target;
}

size_t MSG_RetPlotTalkID_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quest.MSG_RetPlotTalkID_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 groupid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_groupid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetPlotTalkID_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quest.MSG_RetPlotTalkID_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetPlotTalkID_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetPlotTalkID_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quest.MSG_RetPlotTalkID_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quest.MSG_RetPlotTalkID_SC)
    MergeFrom(*source);
  }
}

void MSG_RetPlotTalkID_SC::MergeFrom(const MSG_RetPlotTalkID_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quest.MSG_RetPlotTalkID_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_groupid()) {
    _internal_set_groupid(from._internal_groupid());
  }
}

void MSG_RetPlotTalkID_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quest.MSG_RetPlotTalkID_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetPlotTalkID_SC::CopyFrom(const MSG_RetPlotTalkID_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quest.MSG_RetPlotTalkID_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetPlotTalkID_SC::IsInitialized() const {
  return true;
}

void MSG_RetPlotTalkID_SC::InternalSwap(MSG_RetPlotTalkID_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(groupid_, other->groupid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetPlotTalkID_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_CartoonCompleteNotify_SC::InitAsDefaultInstance() {
}
class MSG_CartoonCompleteNotify_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_CartoonCompleteNotify_SC>()._has_bits_);
  static void set_has_groupid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_command(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MSG_CartoonCompleteNotify_SC::MSG_CartoonCompleteNotify_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:quest.MSG_CartoonCompleteNotify_SC)
}
MSG_CartoonCompleteNotify_SC::MSG_CartoonCompleteNotify_SC(const MSG_CartoonCompleteNotify_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_command()) {
    command_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.command_);
  }
  ::memcpy(&groupid_, &from.groupid_,
    static_cast<size_t>(reinterpret_cast<char*>(&delay_) -
    reinterpret_cast<char*>(&groupid_)) + sizeof(delay_));
  // @@protoc_insertion_point(copy_constructor:quest.MSG_CartoonCompleteNotify_SC)
}

void MSG_CartoonCompleteNotify_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_CartoonCompleteNotify_SC_quest_2eproto.base);
  command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&groupid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delay_) -
      reinterpret_cast<char*>(&groupid_)) + sizeof(delay_));
}

MSG_CartoonCompleteNotify_SC::~MSG_CartoonCompleteNotify_SC() {
  // @@protoc_insertion_point(destructor:quest.MSG_CartoonCompleteNotify_SC)
  SharedDtor();
}

void MSG_CartoonCompleteNotify_SC::SharedDtor() {
  command_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_CartoonCompleteNotify_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_CartoonCompleteNotify_SC& MSG_CartoonCompleteNotify_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_CartoonCompleteNotify_SC_quest_2eproto.base);
  return *internal_default_instance();
}


void MSG_CartoonCompleteNotify_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:quest.MSG_CartoonCompleteNotify_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    command_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&groupid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&delay_) -
        reinterpret_cast<char*>(&groupid_)) + sizeof(delay_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_CartoonCompleteNotify_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 groupid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_groupid(&has_bits);
          groupid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string command = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_command();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "quest.MSG_CartoonCompleteNotify_SC.command");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 delay = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_delay(&has_bits);
          delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_CartoonCompleteNotify_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quest.MSG_CartoonCompleteNotify_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 groupid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_groupid(), target);
  }

  // optional string command = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_command().data(), static_cast<int>(this->_internal_command().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "quest.MSG_CartoonCompleteNotify_SC.command");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_command(), target);
  }

  // optional uint32 delay = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_delay(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quest.MSG_CartoonCompleteNotify_SC)
  return target;
}

size_t MSG_CartoonCompleteNotify_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quest.MSG_CartoonCompleteNotify_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string command = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_command());
    }

    // optional uint32 groupid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_groupid());
    }

    // optional uint32 delay = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_delay());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_CartoonCompleteNotify_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quest.MSG_CartoonCompleteNotify_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_CartoonCompleteNotify_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_CartoonCompleteNotify_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quest.MSG_CartoonCompleteNotify_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quest.MSG_CartoonCompleteNotify_SC)
    MergeFrom(*source);
  }
}

void MSG_CartoonCompleteNotify_SC::MergeFrom(const MSG_CartoonCompleteNotify_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quest.MSG_CartoonCompleteNotify_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      command_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.command_);
    }
    if (cached_has_bits & 0x00000002u) {
      groupid_ = from.groupid_;
    }
    if (cached_has_bits & 0x00000004u) {
      delay_ = from.delay_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_CartoonCompleteNotify_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quest.MSG_CartoonCompleteNotify_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_CartoonCompleteNotify_SC::CopyFrom(const MSG_CartoonCompleteNotify_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quest.MSG_CartoonCompleteNotify_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_CartoonCompleteNotify_SC::IsInitialized() const {
  return true;
}

void MSG_CartoonCompleteNotify_SC::InternalSwap(MSG_CartoonCompleteNotify_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  command_.Swap(&other->command_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(groupid_, other->groupid_);
  swap(delay_, other->delay_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_CartoonCompleteNotify_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_PlayCartoonAndGoMap_SC::InitAsDefaultInstance() {
}
class MSG_PlayCartoonAndGoMap_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_PlayCartoonAndGoMap_SC>()._has_bits_);
  static void set_has_groupid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_command(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_callbackid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

MSG_PlayCartoonAndGoMap_SC::MSG_PlayCartoonAndGoMap_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:quest.MSG_PlayCartoonAndGoMap_SC)
}
MSG_PlayCartoonAndGoMap_SC::MSG_PlayCartoonAndGoMap_SC(const MSG_PlayCartoonAndGoMap_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_command()) {
    command_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.command_);
  }
  ::memcpy(&groupid_, &from.groupid_,
    static_cast<size_t>(reinterpret_cast<char*>(&callbackid_) -
    reinterpret_cast<char*>(&groupid_)) + sizeof(callbackid_));
  // @@protoc_insertion_point(copy_constructor:quest.MSG_PlayCartoonAndGoMap_SC)
}

void MSG_PlayCartoonAndGoMap_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_PlayCartoonAndGoMap_SC_quest_2eproto.base);
  command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&groupid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&callbackid_) -
      reinterpret_cast<char*>(&groupid_)) + sizeof(callbackid_));
}

MSG_PlayCartoonAndGoMap_SC::~MSG_PlayCartoonAndGoMap_SC() {
  // @@protoc_insertion_point(destructor:quest.MSG_PlayCartoonAndGoMap_SC)
  SharedDtor();
}

void MSG_PlayCartoonAndGoMap_SC::SharedDtor() {
  command_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_PlayCartoonAndGoMap_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_PlayCartoonAndGoMap_SC& MSG_PlayCartoonAndGoMap_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_PlayCartoonAndGoMap_SC_quest_2eproto.base);
  return *internal_default_instance();
}


void MSG_PlayCartoonAndGoMap_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:quest.MSG_PlayCartoonAndGoMap_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    command_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&groupid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&callbackid_) -
        reinterpret_cast<char*>(&groupid_)) + sizeof(callbackid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_PlayCartoonAndGoMap_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 groupid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_groupid(&has_bits);
          groupid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string command = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_command();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "quest.MSG_PlayCartoonAndGoMap_SC.command");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 delay = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_delay(&has_bits);
          delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 callbackid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_callbackid(&has_bits);
          callbackid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_PlayCartoonAndGoMap_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quest.MSG_PlayCartoonAndGoMap_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 groupid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_groupid(), target);
  }

  // optional string command = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_command().data(), static_cast<int>(this->_internal_command().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "quest.MSG_PlayCartoonAndGoMap_SC.command");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_command(), target);
  }

  // optional uint32 delay = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_delay(), target);
  }

  // optional uint32 callbackid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_callbackid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quest.MSG_PlayCartoonAndGoMap_SC)
  return target;
}

size_t MSG_PlayCartoonAndGoMap_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quest.MSG_PlayCartoonAndGoMap_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string command = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_command());
    }

    // optional uint32 groupid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_groupid());
    }

    // optional uint32 delay = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_delay());
    }

    // optional uint32 callbackid = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_callbackid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_PlayCartoonAndGoMap_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quest.MSG_PlayCartoonAndGoMap_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_PlayCartoonAndGoMap_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_PlayCartoonAndGoMap_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quest.MSG_PlayCartoonAndGoMap_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quest.MSG_PlayCartoonAndGoMap_SC)
    MergeFrom(*source);
  }
}

void MSG_PlayCartoonAndGoMap_SC::MergeFrom(const MSG_PlayCartoonAndGoMap_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quest.MSG_PlayCartoonAndGoMap_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      command_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.command_);
    }
    if (cached_has_bits & 0x00000002u) {
      groupid_ = from.groupid_;
    }
    if (cached_has_bits & 0x00000004u) {
      delay_ = from.delay_;
    }
    if (cached_has_bits & 0x00000008u) {
      callbackid_ = from.callbackid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_PlayCartoonAndGoMap_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quest.MSG_PlayCartoonAndGoMap_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_PlayCartoonAndGoMap_SC::CopyFrom(const MSG_PlayCartoonAndGoMap_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quest.MSG_PlayCartoonAndGoMap_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_PlayCartoonAndGoMap_SC::IsInitialized() const {
  return true;
}

void MSG_PlayCartoonAndGoMap_SC::InternalSwap(MSG_PlayCartoonAndGoMap_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  command_.Swap(&other->command_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(groupid_, other->groupid_);
  swap(delay_, other->delay_);
  swap(callbackid_, other->callbackid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_PlayCartoonAndGoMap_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqSubmitObjs_CS::InitAsDefaultInstance() {
}
class MSG_ReqSubmitObjs_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqSubmitObjs_CS>()._has_bits_);
  static void set_has_bagid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_ReqSubmitObjs_CS::MSG_ReqSubmitObjs_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:quest.MSG_ReqSubmitObjs_CS)
}
MSG_ReqSubmitObjs_CS::MSG_ReqSubmitObjs_CS(const MSG_ReqSubmitObjs_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      thisid_(from.thisid_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bagid_ = from.bagid_;
  // @@protoc_insertion_point(copy_constructor:quest.MSG_ReqSubmitObjs_CS)
}

void MSG_ReqSubmitObjs_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_ReqSubmitObjs_CS_quest_2eproto.base);
  bagid_ = 0u;
}

MSG_ReqSubmitObjs_CS::~MSG_ReqSubmitObjs_CS() {
  // @@protoc_insertion_point(destructor:quest.MSG_ReqSubmitObjs_CS)
  SharedDtor();
}

void MSG_ReqSubmitObjs_CS::SharedDtor() {
}

void MSG_ReqSubmitObjs_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqSubmitObjs_CS& MSG_ReqSubmitObjs_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqSubmitObjs_CS_quest_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqSubmitObjs_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:quest.MSG_ReqSubmitObjs_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  thisid_.Clear();
  bagid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqSubmitObjs_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string thisid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_thisid();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "quest.MSG_ReqSubmitObjs_CS.thisid");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 bagid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_bagid(&has_bits);
          bagid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqSubmitObjs_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quest.MSG_ReqSubmitObjs_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string thisid = 1;
  for (int i = 0, n = this->_internal_thisid_size(); i < n; i++) {
    const auto& s = this->_internal_thisid(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "quest.MSG_ReqSubmitObjs_CS.thisid");
    target = stream->WriteString(1, s, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 bagid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_bagid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quest.MSG_ReqSubmitObjs_CS)
  return target;
}

size_t MSG_ReqSubmitObjs_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quest.MSG_ReqSubmitObjs_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string thisid = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(thisid_.size());
  for (int i = 0, n = thisid_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      thisid_.Get(i));
  }

  // optional uint32 bagid = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bagid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqSubmitObjs_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quest.MSG_ReqSubmitObjs_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqSubmitObjs_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqSubmitObjs_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quest.MSG_ReqSubmitObjs_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quest.MSG_ReqSubmitObjs_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqSubmitObjs_CS::MergeFrom(const MSG_ReqSubmitObjs_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quest.MSG_ReqSubmitObjs_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  thisid_.MergeFrom(from.thisid_);
  if (from._internal_has_bagid()) {
    _internal_set_bagid(from._internal_bagid());
  }
}

void MSG_ReqSubmitObjs_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quest.MSG_ReqSubmitObjs_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqSubmitObjs_CS::CopyFrom(const MSG_ReqSubmitObjs_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quest.MSG_ReqSubmitObjs_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqSubmitObjs_CS::IsInitialized() const {
  return true;
}

void MSG_ReqSubmitObjs_CS::InternalSwap(MSG_ReqSubmitObjs_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  thisid_.InternalSwap(&other->thisid_);
  swap(bagid_, other->bagid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqSubmitObjs_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetSubmitObjs_SC::InitAsDefaultInstance() {
}
class MSG_RetSubmitObjs_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetSubmitObjs_SC>()._has_bits_);
  static void set_has_retcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_RetSubmitObjs_SC::MSG_RetSubmitObjs_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:quest.MSG_RetSubmitObjs_SC)
}
MSG_RetSubmitObjs_SC::MSG_RetSubmitObjs_SC(const MSG_RetSubmitObjs_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:quest.MSG_RetSubmitObjs_SC)
}

void MSG_RetSubmitObjs_SC::SharedCtor() {
  retcode_ = 0u;
}

MSG_RetSubmitObjs_SC::~MSG_RetSubmitObjs_SC() {
  // @@protoc_insertion_point(destructor:quest.MSG_RetSubmitObjs_SC)
  SharedDtor();
}

void MSG_RetSubmitObjs_SC::SharedDtor() {
}

void MSG_RetSubmitObjs_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetSubmitObjs_SC& MSG_RetSubmitObjs_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetSubmitObjs_SC_quest_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetSubmitObjs_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:quest.MSG_RetSubmitObjs_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetSubmitObjs_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 retcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_retcode(&has_bits);
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetSubmitObjs_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quest.MSG_RetSubmitObjs_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 retcode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quest.MSG_RetSubmitObjs_SC)
  return target;
}

size_t MSG_RetSubmitObjs_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quest.MSG_RetSubmitObjs_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 retcode = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetSubmitObjs_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quest.MSG_RetSubmitObjs_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetSubmitObjs_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetSubmitObjs_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quest.MSG_RetSubmitObjs_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quest.MSG_RetSubmitObjs_SC)
    MergeFrom(*source);
  }
}

void MSG_RetSubmitObjs_SC::MergeFrom(const MSG_RetSubmitObjs_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quest.MSG_RetSubmitObjs_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_retcode()) {
    _internal_set_retcode(from._internal_retcode());
  }
}

void MSG_RetSubmitObjs_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quest.MSG_RetSubmitObjs_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetSubmitObjs_SC::CopyFrom(const MSG_RetSubmitObjs_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quest.MSG_RetSubmitObjs_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetSubmitObjs_SC::IsInitialized() const {
  return true;
}

void MSG_RetSubmitObjs_SC::InternalSwap(MSG_RetSubmitObjs_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(retcode_, other->retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetSubmitObjs_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RingQuestRingCount::InitAsDefaultInstance() {
}
class RingQuestRingCount::_Internal {
 public:
  using HasBits = decltype(std::declval<RingQuestRingCount>()._has_bits_);
  static void set_has_questtype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ring_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RingQuestRingCount::RingQuestRingCount()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:quest.RingQuestRingCount)
}
RingQuestRingCount::RingQuestRingCount(const RingQuestRingCount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&questtype_, &from.questtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&ring_count_) -
    reinterpret_cast<char*>(&questtype_)) + sizeof(ring_count_));
  // @@protoc_insertion_point(copy_constructor:quest.RingQuestRingCount)
}

void RingQuestRingCount::SharedCtor() {
  ::memset(&questtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ring_count_) -
      reinterpret_cast<char*>(&questtype_)) + sizeof(ring_count_));
}

RingQuestRingCount::~RingQuestRingCount() {
  // @@protoc_insertion_point(destructor:quest.RingQuestRingCount)
  SharedDtor();
}

void RingQuestRingCount::SharedDtor() {
}

void RingQuestRingCount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RingQuestRingCount& RingQuestRingCount::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RingQuestRingCount_quest_2eproto.base);
  return *internal_default_instance();
}


void RingQuestRingCount::Clear() {
// @@protoc_insertion_point(message_clear_start:quest.RingQuestRingCount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&questtype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ring_count_) -
        reinterpret_cast<char*>(&questtype_)) + sizeof(ring_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RingQuestRingCount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 questtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_questtype(&has_bits);
          questtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ring_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ring_count(&has_bits);
          ring_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RingQuestRingCount::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quest.RingQuestRingCount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 questtype = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_questtype(), target);
  }

  // optional uint32 ring_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ring_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quest.RingQuestRingCount)
  return target;
}

size_t RingQuestRingCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quest.RingQuestRingCount)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 questtype = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_questtype());
    }

    // optional uint32 ring_count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ring_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RingQuestRingCount::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quest.RingQuestRingCount)
  GOOGLE_DCHECK_NE(&from, this);
  const RingQuestRingCount* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RingQuestRingCount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quest.RingQuestRingCount)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quest.RingQuestRingCount)
    MergeFrom(*source);
  }
}

void RingQuestRingCount::MergeFrom(const RingQuestRingCount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quest.RingQuestRingCount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      questtype_ = from.questtype_;
    }
    if (cached_has_bits & 0x00000002u) {
      ring_count_ = from.ring_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RingQuestRingCount::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quest.RingQuestRingCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RingQuestRingCount::CopyFrom(const RingQuestRingCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quest.RingQuestRingCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RingQuestRingCount::IsInitialized() const {
  return true;
}

void RingQuestRingCount::InternalSwap(RingQuestRingCount* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(questtype_, other->questtype_);
  swap(ring_count_, other->ring_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RingQuestRingCount::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetRingQuestRingCount_SC::InitAsDefaultInstance() {
}
class MSG_RetRingQuestRingCount_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetRingQuestRingCount_SC>()._has_bits_);
};

MSG_RetRingQuestRingCount_SC::MSG_RetRingQuestRingCount_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:quest.MSG_RetRingQuestRingCount_SC)
}
MSG_RetRingQuestRingCount_SC::MSG_RetRingQuestRingCount_SC(const MSG_RetRingQuestRingCount_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      ringcount_(from.ringcount_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:quest.MSG_RetRingQuestRingCount_SC)
}

void MSG_RetRingQuestRingCount_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_RetRingQuestRingCount_SC_quest_2eproto.base);
}

MSG_RetRingQuestRingCount_SC::~MSG_RetRingQuestRingCount_SC() {
  // @@protoc_insertion_point(destructor:quest.MSG_RetRingQuestRingCount_SC)
  SharedDtor();
}

void MSG_RetRingQuestRingCount_SC::SharedDtor() {
}

void MSG_RetRingQuestRingCount_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetRingQuestRingCount_SC& MSG_RetRingQuestRingCount_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetRingQuestRingCount_SC_quest_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetRingQuestRingCount_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:quest.MSG_RetRingQuestRingCount_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ringcount_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetRingQuestRingCount_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .quest.RingQuestRingCount ringcount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ringcount(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetRingQuestRingCount_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quest.MSG_RetRingQuestRingCount_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .quest.RingQuestRingCount ringcount = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ringcount_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_ringcount(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quest.MSG_RetRingQuestRingCount_SC)
  return target;
}

size_t MSG_RetRingQuestRingCount_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quest.MSG_RetRingQuestRingCount_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .quest.RingQuestRingCount ringcount = 1;
  total_size += 1UL * this->_internal_ringcount_size();
  for (const auto& msg : this->ringcount_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetRingQuestRingCount_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quest.MSG_RetRingQuestRingCount_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetRingQuestRingCount_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetRingQuestRingCount_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quest.MSG_RetRingQuestRingCount_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quest.MSG_RetRingQuestRingCount_SC)
    MergeFrom(*source);
  }
}

void MSG_RetRingQuestRingCount_SC::MergeFrom(const MSG_RetRingQuestRingCount_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quest.MSG_RetRingQuestRingCount_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ringcount_.MergeFrom(from.ringcount_);
}

void MSG_RetRingQuestRingCount_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quest.MSG_RetRingQuestRingCount_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetRingQuestRingCount_SC::CopyFrom(const MSG_RetRingQuestRingCount_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quest.MSG_RetRingQuestRingCount_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetRingQuestRingCount_SC::IsInitialized() const {
  return true;
}

void MSG_RetRingQuestRingCount_SC::InternalSwap(MSG_RetRingQuestRingCount_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ringcount_.InternalSwap(&other->ringcount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetRingQuestRingCount_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_notifyRefreshQuestInfo_SC::InitAsDefaultInstance() {
}
class MSG_notifyRefreshQuestInfo_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_notifyRefreshQuestInfo_SC>()._has_bits_);
};

MSG_notifyRefreshQuestInfo_SC::MSG_notifyRefreshQuestInfo_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:quest.MSG_notifyRefreshQuestInfo_SC)
}
MSG_notifyRefreshQuestInfo_SC::MSG_notifyRefreshQuestInfo_SC(const MSG_notifyRefreshQuestInfo_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      item_(from.item_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:quest.MSG_notifyRefreshQuestInfo_SC)
}

void MSG_notifyRefreshQuestInfo_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_notifyRefreshQuestInfo_SC_quest_2eproto.base);
}

MSG_notifyRefreshQuestInfo_SC::~MSG_notifyRefreshQuestInfo_SC() {
  // @@protoc_insertion_point(destructor:quest.MSG_notifyRefreshQuestInfo_SC)
  SharedDtor();
}

void MSG_notifyRefreshQuestInfo_SC::SharedDtor() {
}

void MSG_notifyRefreshQuestInfo_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_notifyRefreshQuestInfo_SC& MSG_notifyRefreshQuestInfo_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_notifyRefreshQuestInfo_SC_quest_2eproto.base);
  return *internal_default_instance();
}


void MSG_notifyRefreshQuestInfo_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:quest.MSG_notifyRefreshQuestInfo_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_notifyRefreshQuestInfo_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .quest.MSG_Ret_QuestInfo_SC item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_item(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_notifyRefreshQuestInfo_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quest.MSG_notifyRefreshQuestInfo_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .quest.MSG_Ret_QuestInfo_SC item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_item_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_item(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quest.MSG_notifyRefreshQuestInfo_SC)
  return target;
}

size_t MSG_notifyRefreshQuestInfo_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quest.MSG_notifyRefreshQuestInfo_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .quest.MSG_Ret_QuestInfo_SC item = 1;
  total_size += 1UL * this->_internal_item_size();
  for (const auto& msg : this->item_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_notifyRefreshQuestInfo_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quest.MSG_notifyRefreshQuestInfo_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_notifyRefreshQuestInfo_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_notifyRefreshQuestInfo_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quest.MSG_notifyRefreshQuestInfo_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quest.MSG_notifyRefreshQuestInfo_SC)
    MergeFrom(*source);
  }
}

void MSG_notifyRefreshQuestInfo_SC::MergeFrom(const MSG_notifyRefreshQuestInfo_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quest.MSG_notifyRefreshQuestInfo_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void MSG_notifyRefreshQuestInfo_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quest.MSG_notifyRefreshQuestInfo_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_notifyRefreshQuestInfo_SC::CopyFrom(const MSG_notifyRefreshQuestInfo_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quest.MSG_notifyRefreshQuestInfo_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_notifyRefreshQuestInfo_SC::IsInitialized() const {
  return true;
}

void MSG_notifyRefreshQuestInfo_SC::InternalSwap(MSG_notifyRefreshQuestInfo_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  item_.InternalSwap(&other->item_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_notifyRefreshQuestInfo_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_PlayBellQTE_SC::InitAsDefaultInstance() {
}
class MSG_PlayBellQTE_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_PlayBellQTE_SC>()._has_bits_);
  static void set_has_qtelevel(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_PlayBellQTE_SC::MSG_PlayBellQTE_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:quest.MSG_PlayBellQTE_SC)
}
MSG_PlayBellQTE_SC::MSG_PlayBellQTE_SC(const MSG_PlayBellQTE_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  qtelevel_ = from.qtelevel_;
  // @@protoc_insertion_point(copy_constructor:quest.MSG_PlayBellQTE_SC)
}

void MSG_PlayBellQTE_SC::SharedCtor() {
  qtelevel_ = 0u;
}

MSG_PlayBellQTE_SC::~MSG_PlayBellQTE_SC() {
  // @@protoc_insertion_point(destructor:quest.MSG_PlayBellQTE_SC)
  SharedDtor();
}

void MSG_PlayBellQTE_SC::SharedDtor() {
}

void MSG_PlayBellQTE_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_PlayBellQTE_SC& MSG_PlayBellQTE_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_PlayBellQTE_SC_quest_2eproto.base);
  return *internal_default_instance();
}


void MSG_PlayBellQTE_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:quest.MSG_PlayBellQTE_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  qtelevel_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_PlayBellQTE_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 qtelevel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_qtelevel(&has_bits);
          qtelevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_PlayBellQTE_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quest.MSG_PlayBellQTE_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 qtelevel = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_qtelevel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quest.MSG_PlayBellQTE_SC)
  return target;
}

size_t MSG_PlayBellQTE_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quest.MSG_PlayBellQTE_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 qtelevel = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_qtelevel());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_PlayBellQTE_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quest.MSG_PlayBellQTE_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_PlayBellQTE_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_PlayBellQTE_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quest.MSG_PlayBellQTE_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quest.MSG_PlayBellQTE_SC)
    MergeFrom(*source);
  }
}

void MSG_PlayBellQTE_SC::MergeFrom(const MSG_PlayBellQTE_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quest.MSG_PlayBellQTE_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_qtelevel()) {
    _internal_set_qtelevel(from._internal_qtelevel());
  }
}

void MSG_PlayBellQTE_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quest.MSG_PlayBellQTE_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_PlayBellQTE_SC::CopyFrom(const MSG_PlayBellQTE_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quest.MSG_PlayBellQTE_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_PlayBellQTE_SC::IsInitialized() const {
  return true;
}

void MSG_PlayBellQTE_SC::InternalSwap(MSG_PlayBellQTE_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(qtelevel_, other->qtelevel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_PlayBellQTE_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_PlayBellQTEResult_CS::InitAsDefaultInstance() {
}
class MSG_PlayBellQTEResult_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_PlayBellQTEResult_CS>()._has_bits_);
  static void set_has_qtelevel(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_PlayBellQTEResult_CS::MSG_PlayBellQTEResult_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:quest.MSG_PlayBellQTEResult_CS)
}
MSG_PlayBellQTEResult_CS::MSG_PlayBellQTEResult_CS(const MSG_PlayBellQTEResult_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&qtelevel_, &from.qtelevel_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&qtelevel_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:quest.MSG_PlayBellQTEResult_CS)
}

void MSG_PlayBellQTEResult_CS::SharedCtor() {
  ::memset(&qtelevel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&qtelevel_)) + sizeof(result_));
}

MSG_PlayBellQTEResult_CS::~MSG_PlayBellQTEResult_CS() {
  // @@protoc_insertion_point(destructor:quest.MSG_PlayBellQTEResult_CS)
  SharedDtor();
}

void MSG_PlayBellQTEResult_CS::SharedDtor() {
}

void MSG_PlayBellQTEResult_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_PlayBellQTEResult_CS& MSG_PlayBellQTEResult_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_PlayBellQTEResult_CS_quest_2eproto.base);
  return *internal_default_instance();
}


void MSG_PlayBellQTEResult_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:quest.MSG_PlayBellQTEResult_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&qtelevel_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&result_) -
        reinterpret_cast<char*>(&qtelevel_)) + sizeof(result_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_PlayBellQTEResult_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 qtelevel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_qtelevel(&has_bits);
          qtelevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_PlayBellQTEResult_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quest.MSG_PlayBellQTEResult_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 qtelevel = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_qtelevel(), target);
  }

  // optional uint32 result = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quest.MSG_PlayBellQTEResult_CS)
  return target;
}

size_t MSG_PlayBellQTEResult_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quest.MSG_PlayBellQTEResult_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 qtelevel = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_qtelevel());
    }

    // optional uint32 result = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_result());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_PlayBellQTEResult_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quest.MSG_PlayBellQTEResult_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_PlayBellQTEResult_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_PlayBellQTEResult_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quest.MSG_PlayBellQTEResult_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quest.MSG_PlayBellQTEResult_CS)
    MergeFrom(*source);
  }
}

void MSG_PlayBellQTEResult_CS::MergeFrom(const MSG_PlayBellQTEResult_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quest.MSG_PlayBellQTEResult_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      qtelevel_ = from.qtelevel_;
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_PlayBellQTEResult_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quest.MSG_PlayBellQTEResult_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_PlayBellQTEResult_CS::CopyFrom(const MSG_PlayBellQTEResult_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quest.MSG_PlayBellQTEResult_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_PlayBellQTEResult_CS::IsInitialized() const {
  return true;
}

void MSG_PlayBellQTEResult_CS::InternalSwap(MSG_PlayBellQTEResult_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(qtelevel_, other->qtelevel_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_PlayBellQTEResult_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_SetQuestNeedShow_CS::InitAsDefaultInstance() {
}
class MSG_Req_SetQuestNeedShow_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_SetQuestNeedShow_CS>()._has_bits_);
  static void set_has_questid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_show(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_Req_SetQuestNeedShow_CS::MSG_Req_SetQuestNeedShow_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:quest.MSG_Req_SetQuestNeedShow_CS)
}
MSG_Req_SetQuestNeedShow_CS::MSG_Req_SetQuestNeedShow_CS(const MSG_Req_SetQuestNeedShow_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&questid_, &from.questid_,
    static_cast<size_t>(reinterpret_cast<char*>(&show_) -
    reinterpret_cast<char*>(&questid_)) + sizeof(show_));
  // @@protoc_insertion_point(copy_constructor:quest.MSG_Req_SetQuestNeedShow_CS)
}

void MSG_Req_SetQuestNeedShow_CS::SharedCtor() {
  ::memset(&questid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&show_) -
      reinterpret_cast<char*>(&questid_)) + sizeof(show_));
}

MSG_Req_SetQuestNeedShow_CS::~MSG_Req_SetQuestNeedShow_CS() {
  // @@protoc_insertion_point(destructor:quest.MSG_Req_SetQuestNeedShow_CS)
  SharedDtor();
}

void MSG_Req_SetQuestNeedShow_CS::SharedDtor() {
}

void MSG_Req_SetQuestNeedShow_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_SetQuestNeedShow_CS& MSG_Req_SetQuestNeedShow_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_SetQuestNeedShow_CS_quest_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_SetQuestNeedShow_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:quest.MSG_Req_SetQuestNeedShow_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&questid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&show_) -
        reinterpret_cast<char*>(&questid_)) + sizeof(show_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_SetQuestNeedShow_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 questid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_questid(&has_bits);
          questid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool show = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_show(&has_bits);
          show_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_SetQuestNeedShow_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quest.MSG_Req_SetQuestNeedShow_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 questid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_questid(), target);
  }

  // optional bool show = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_show(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quest.MSG_Req_SetQuestNeedShow_CS)
  return target;
}

size_t MSG_Req_SetQuestNeedShow_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quest.MSG_Req_SetQuestNeedShow_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 questid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_questid());
    }

    // optional bool show = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_SetQuestNeedShow_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quest.MSG_Req_SetQuestNeedShow_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_SetQuestNeedShow_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_SetQuestNeedShow_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quest.MSG_Req_SetQuestNeedShow_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quest.MSG_Req_SetQuestNeedShow_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_SetQuestNeedShow_CS::MergeFrom(const MSG_Req_SetQuestNeedShow_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quest.MSG_Req_SetQuestNeedShow_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      questid_ = from.questid_;
    }
    if (cached_has_bits & 0x00000002u) {
      show_ = from.show_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Req_SetQuestNeedShow_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quest.MSG_Req_SetQuestNeedShow_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_SetQuestNeedShow_CS::CopyFrom(const MSG_Req_SetQuestNeedShow_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quest.MSG_Req_SetQuestNeedShow_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_SetQuestNeedShow_CS::IsInitialized() const {
  return true;
}

void MSG_Req_SetQuestNeedShow_CS::InternalSwap(MSG_Req_SetQuestNeedShow_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(questid_, other->questid_);
  swap(show_, other->show_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_SetQuestNeedShow_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_SetQuestNeedShow_SC::InitAsDefaultInstance() {
}
class MSG_Ret_SetQuestNeedShow_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_SetQuestNeedShow_SC>()._has_bits_);
  static void set_has_questid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MSG_Ret_SetQuestNeedShow_SC::MSG_Ret_SetQuestNeedShow_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:quest.MSG_Ret_SetQuestNeedShow_SC)
}
MSG_Ret_SetQuestNeedShow_SC::MSG_Ret_SetQuestNeedShow_SC(const MSG_Ret_SetQuestNeedShow_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&questid_, &from.questid_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&questid_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:quest.MSG_Ret_SetQuestNeedShow_SC)
}

void MSG_Ret_SetQuestNeedShow_SC::SharedCtor() {
  ::memset(&questid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&questid_)) + sizeof(code_));
}

MSG_Ret_SetQuestNeedShow_SC::~MSG_Ret_SetQuestNeedShow_SC() {
  // @@protoc_insertion_point(destructor:quest.MSG_Ret_SetQuestNeedShow_SC)
  SharedDtor();
}

void MSG_Ret_SetQuestNeedShow_SC::SharedDtor() {
}

void MSG_Ret_SetQuestNeedShow_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_SetQuestNeedShow_SC& MSG_Ret_SetQuestNeedShow_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_SetQuestNeedShow_SC_quest_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_SetQuestNeedShow_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:quest.MSG_Ret_SetQuestNeedShow_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&questid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&code_) -
        reinterpret_cast<char*>(&questid_)) + sizeof(code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_SetQuestNeedShow_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 questid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_questid(&has_bits);
          questid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_code(&has_bits);
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_SetQuestNeedShow_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quest.MSG_Ret_SetQuestNeedShow_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 questid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_questid(), target);
  }

  // optional bool result = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_result(), target);
  }

  // optional bool code = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quest.MSG_Ret_SetQuestNeedShow_SC)
  return target;
}

size_t MSG_Ret_SetQuestNeedShow_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quest.MSG_Ret_SetQuestNeedShow_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 questid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_questid());
    }

    // optional bool result = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool code = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_SetQuestNeedShow_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quest.MSG_Ret_SetQuestNeedShow_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_SetQuestNeedShow_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_SetQuestNeedShow_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quest.MSG_Ret_SetQuestNeedShow_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quest.MSG_Ret_SetQuestNeedShow_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_SetQuestNeedShow_SC::MergeFrom(const MSG_Ret_SetQuestNeedShow_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quest.MSG_Ret_SetQuestNeedShow_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      questid_ = from.questid_;
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000004u) {
      code_ = from.code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_SetQuestNeedShow_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quest.MSG_Ret_SetQuestNeedShow_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_SetQuestNeedShow_SC::CopyFrom(const MSG_Ret_SetQuestNeedShow_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quest.MSG_Ret_SetQuestNeedShow_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_SetQuestNeedShow_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_SetQuestNeedShow_SC::InternalSwap(MSG_Ret_SetQuestNeedShow_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(questid_, other->questid_);
  swap(result_, other->result_);
  swap(code_, other->code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_SetQuestNeedShow_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_ShareQuestToTeamMember_CS::InitAsDefaultInstance() {
}
class MSG_Req_ShareQuestToTeamMember_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_ShareQuestToTeamMember_CS>()._has_bits_);
  static void set_has_questid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Req_ShareQuestToTeamMember_CS::MSG_Req_ShareQuestToTeamMember_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:quest.MSG_Req_ShareQuestToTeamMember_CS)
}
MSG_Req_ShareQuestToTeamMember_CS::MSG_Req_ShareQuestToTeamMember_CS(const MSG_Req_ShareQuestToTeamMember_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  questid_ = from.questid_;
  // @@protoc_insertion_point(copy_constructor:quest.MSG_Req_ShareQuestToTeamMember_CS)
}

void MSG_Req_ShareQuestToTeamMember_CS::SharedCtor() {
  questid_ = 0u;
}

MSG_Req_ShareQuestToTeamMember_CS::~MSG_Req_ShareQuestToTeamMember_CS() {
  // @@protoc_insertion_point(destructor:quest.MSG_Req_ShareQuestToTeamMember_CS)
  SharedDtor();
}

void MSG_Req_ShareQuestToTeamMember_CS::SharedDtor() {
}

void MSG_Req_ShareQuestToTeamMember_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_ShareQuestToTeamMember_CS& MSG_Req_ShareQuestToTeamMember_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_ShareQuestToTeamMember_CS_quest_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_ShareQuestToTeamMember_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:quest.MSG_Req_ShareQuestToTeamMember_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  questid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_ShareQuestToTeamMember_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 questid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_questid(&has_bits);
          questid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_ShareQuestToTeamMember_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quest.MSG_Req_ShareQuestToTeamMember_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 questid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_questid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quest.MSG_Req_ShareQuestToTeamMember_CS)
  return target;
}

size_t MSG_Req_ShareQuestToTeamMember_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quest.MSG_Req_ShareQuestToTeamMember_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 questid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_questid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_ShareQuestToTeamMember_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quest.MSG_Req_ShareQuestToTeamMember_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_ShareQuestToTeamMember_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_ShareQuestToTeamMember_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quest.MSG_Req_ShareQuestToTeamMember_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quest.MSG_Req_ShareQuestToTeamMember_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_ShareQuestToTeamMember_CS::MergeFrom(const MSG_Req_ShareQuestToTeamMember_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quest.MSG_Req_ShareQuestToTeamMember_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_questid()) {
    _internal_set_questid(from._internal_questid());
  }
}

void MSG_Req_ShareQuestToTeamMember_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quest.MSG_Req_ShareQuestToTeamMember_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_ShareQuestToTeamMember_CS::CopyFrom(const MSG_Req_ShareQuestToTeamMember_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quest.MSG_Req_ShareQuestToTeamMember_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_ShareQuestToTeamMember_CS::IsInitialized() const {
  return true;
}

void MSG_Req_ShareQuestToTeamMember_CS::InternalSwap(MSG_Req_ShareQuestToTeamMember_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(questid_, other->questid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_ShareQuestToTeamMember_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_NotifyShareQuest_SC::InitAsDefaultInstance() {
}
class MSG_Ret_NotifyShareQuest_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_NotifyShareQuest_SC>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_questid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_Ret_NotifyShareQuest_SC::MSG_Ret_NotifyShareQuest_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:quest.MSG_Ret_NotifyShareQuest_SC)
}
MSG_Ret_NotifyShareQuest_SC::MSG_Ret_NotifyShareQuest_SC(const MSG_Ret_NotifyShareQuest_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  questid_ = from.questid_;
  // @@protoc_insertion_point(copy_constructor:quest.MSG_Ret_NotifyShareQuest_SC)
}

void MSG_Ret_NotifyShareQuest_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_NotifyShareQuest_SC_quest_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  questid_ = 0u;
}

MSG_Ret_NotifyShareQuest_SC::~MSG_Ret_NotifyShareQuest_SC() {
  // @@protoc_insertion_point(destructor:quest.MSG_Ret_NotifyShareQuest_SC)
  SharedDtor();
}

void MSG_Ret_NotifyShareQuest_SC::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_Ret_NotifyShareQuest_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_NotifyShareQuest_SC& MSG_Ret_NotifyShareQuest_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_NotifyShareQuest_SC_quest_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_NotifyShareQuest_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:quest.MSG_Ret_NotifyShareQuest_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  questid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_NotifyShareQuest_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "quest.MSG_Ret_NotifyShareQuest_SC.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 questid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_questid(&has_bits);
          questid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_NotifyShareQuest_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quest.MSG_Ret_NotifyShareQuest_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "quest.MSG_Ret_NotifyShareQuest_SC.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional uint32 questid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_questid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quest.MSG_Ret_NotifyShareQuest_SC)
  return target;
}

size_t MSG_Ret_NotifyShareQuest_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quest.MSG_Ret_NotifyShareQuest_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint32 questid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_questid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_NotifyShareQuest_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quest.MSG_Ret_NotifyShareQuest_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_NotifyShareQuest_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_NotifyShareQuest_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quest.MSG_Ret_NotifyShareQuest_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quest.MSG_Ret_NotifyShareQuest_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_NotifyShareQuest_SC::MergeFrom(const MSG_Ret_NotifyShareQuest_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quest.MSG_Ret_NotifyShareQuest_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      questid_ = from.questid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_NotifyShareQuest_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quest.MSG_Ret_NotifyShareQuest_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_NotifyShareQuest_SC::CopyFrom(const MSG_Ret_NotifyShareQuest_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quest.MSG_Ret_NotifyShareQuest_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_NotifyShareQuest_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_NotifyShareQuest_SC::InternalSwap(MSG_Ret_NotifyShareQuest_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(questid_, other->questid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_NotifyShareQuest_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_AnswerShareQuest_CS::InitAsDefaultInstance() {
}
class MSG_Req_AnswerShareQuest_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_AnswerShareQuest_CS>()._has_bits_);
  static void set_has_questid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_accept(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_Req_AnswerShareQuest_CS::MSG_Req_AnswerShareQuest_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:quest.MSG_Req_AnswerShareQuest_CS)
}
MSG_Req_AnswerShareQuest_CS::MSG_Req_AnswerShareQuest_CS(const MSG_Req_AnswerShareQuest_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&questid_, &from.questid_,
    static_cast<size_t>(reinterpret_cast<char*>(&accept_) -
    reinterpret_cast<char*>(&questid_)) + sizeof(accept_));
  // @@protoc_insertion_point(copy_constructor:quest.MSG_Req_AnswerShareQuest_CS)
}

void MSG_Req_AnswerShareQuest_CS::SharedCtor() {
  ::memset(&questid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&accept_) -
      reinterpret_cast<char*>(&questid_)) + sizeof(accept_));
}

MSG_Req_AnswerShareQuest_CS::~MSG_Req_AnswerShareQuest_CS() {
  // @@protoc_insertion_point(destructor:quest.MSG_Req_AnswerShareQuest_CS)
  SharedDtor();
}

void MSG_Req_AnswerShareQuest_CS::SharedDtor() {
}

void MSG_Req_AnswerShareQuest_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_AnswerShareQuest_CS& MSG_Req_AnswerShareQuest_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_AnswerShareQuest_CS_quest_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_AnswerShareQuest_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:quest.MSG_Req_AnswerShareQuest_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&questid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&accept_) -
        reinterpret_cast<char*>(&questid_)) + sizeof(accept_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_AnswerShareQuest_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 questid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_questid(&has_bits);
          questid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool accept = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_accept(&has_bits);
          accept_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_AnswerShareQuest_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quest.MSG_Req_AnswerShareQuest_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 questid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_questid(), target);
  }

  // optional bool accept = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_accept(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quest.MSG_Req_AnswerShareQuest_CS)
  return target;
}

size_t MSG_Req_AnswerShareQuest_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quest.MSG_Req_AnswerShareQuest_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 questid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_questid());
    }

    // optional bool accept = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_AnswerShareQuest_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quest.MSG_Req_AnswerShareQuest_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_AnswerShareQuest_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_AnswerShareQuest_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quest.MSG_Req_AnswerShareQuest_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quest.MSG_Req_AnswerShareQuest_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_AnswerShareQuest_CS::MergeFrom(const MSG_Req_AnswerShareQuest_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quest.MSG_Req_AnswerShareQuest_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      questid_ = from.questid_;
    }
    if (cached_has_bits & 0x00000002u) {
      accept_ = from.accept_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Req_AnswerShareQuest_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quest.MSG_Req_AnswerShareQuest_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_AnswerShareQuest_CS::CopyFrom(const MSG_Req_AnswerShareQuest_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quest.MSG_Req_AnswerShareQuest_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_AnswerShareQuest_CS::IsInitialized() const {
  return true;
}

void MSG_Req_AnswerShareQuest_CS::InternalSwap(MSG_Req_AnswerShareQuest_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(questid_, other->questid_);
  swap(accept_, other->accept_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_AnswerShareQuest_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_AnswerShareQuest_SC::InitAsDefaultInstance() {
}
class MSG_Ret_AnswerShareQuest_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_AnswerShareQuest_SC>()._has_bits_);
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Ret_AnswerShareQuest_SC::MSG_Ret_AnswerShareQuest_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:quest.MSG_Ret_AnswerShareQuest_SC)
}
MSG_Ret_AnswerShareQuest_SC::MSG_Ret_AnswerShareQuest_SC(const MSG_Ret_AnswerShareQuest_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:quest.MSG_Ret_AnswerShareQuest_SC)
}

void MSG_Ret_AnswerShareQuest_SC::SharedCtor() {
  code_ = 0u;
}

MSG_Ret_AnswerShareQuest_SC::~MSG_Ret_AnswerShareQuest_SC() {
  // @@protoc_insertion_point(destructor:quest.MSG_Ret_AnswerShareQuest_SC)
  SharedDtor();
}

void MSG_Ret_AnswerShareQuest_SC::SharedDtor() {
}

void MSG_Ret_AnswerShareQuest_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_AnswerShareQuest_SC& MSG_Ret_AnswerShareQuest_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_AnswerShareQuest_SC_quest_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_AnswerShareQuest_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:quest.MSG_Ret_AnswerShareQuest_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_AnswerShareQuest_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_code(&has_bits);
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_AnswerShareQuest_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quest.MSG_Ret_AnswerShareQuest_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 code = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quest.MSG_Ret_AnswerShareQuest_SC)
  return target;
}

size_t MSG_Ret_AnswerShareQuest_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quest.MSG_Ret_AnswerShareQuest_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 code = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_AnswerShareQuest_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quest.MSG_Ret_AnswerShareQuest_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_AnswerShareQuest_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_AnswerShareQuest_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quest.MSG_Ret_AnswerShareQuest_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quest.MSG_Ret_AnswerShareQuest_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_AnswerShareQuest_SC::MergeFrom(const MSG_Ret_AnswerShareQuest_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quest.MSG_Ret_AnswerShareQuest_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_code()) {
    _internal_set_code(from._internal_code());
  }
}

void MSG_Ret_AnswerShareQuest_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quest.MSG_Ret_AnswerShareQuest_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_AnswerShareQuest_SC::CopyFrom(const MSG_Ret_AnswerShareQuest_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quest.MSG_Ret_AnswerShareQuest_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_AnswerShareQuest_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_AnswerShareQuest_SC::InternalSwap(MSG_Ret_AnswerShareQuest_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(code_, other->code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_AnswerShareQuest_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_NotifyCountDown_SC::InitAsDefaultInstance() {
}
class MSG_Ret_NotifyCountDown_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_NotifyCountDown_SC>()._has_bits_);
  static void set_has_bset(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MSG_Ret_NotifyCountDown_SC::MSG_Ret_NotifyCountDown_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:quest.MSG_Ret_NotifyCountDown_SC)
}
MSG_Ret_NotifyCountDown_SC::MSG_Ret_NotifyCountDown_SC(const MSG_Ret_NotifyCountDown_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bset_, &from.bset_,
    static_cast<size_t>(reinterpret_cast<char*>(&seconds_) -
    reinterpret_cast<char*>(&bset_)) + sizeof(seconds_));
  // @@protoc_insertion_point(copy_constructor:quest.MSG_Ret_NotifyCountDown_SC)
}

void MSG_Ret_NotifyCountDown_SC::SharedCtor() {
  ::memset(&bset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seconds_) -
      reinterpret_cast<char*>(&bset_)) + sizeof(seconds_));
}

MSG_Ret_NotifyCountDown_SC::~MSG_Ret_NotifyCountDown_SC() {
  // @@protoc_insertion_point(destructor:quest.MSG_Ret_NotifyCountDown_SC)
  SharedDtor();
}

void MSG_Ret_NotifyCountDown_SC::SharedDtor() {
}

void MSG_Ret_NotifyCountDown_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_NotifyCountDown_SC& MSG_Ret_NotifyCountDown_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_NotifyCountDown_SC_quest_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_NotifyCountDown_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:quest.MSG_Ret_NotifyCountDown_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&bset_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seconds_) -
        reinterpret_cast<char*>(&bset_)) + sizeof(seconds_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_NotifyCountDown_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bset(&has_bits);
          bset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 delay = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_delay(&has_bits);
          delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 seconds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_seconds(&has_bits);
          seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_NotifyCountDown_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quest.MSG_Ret_NotifyCountDown_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bset = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bset(), target);
  }

  // optional uint32 delay = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_delay(), target);
  }

  // optional uint32 seconds = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_seconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quest.MSG_Ret_NotifyCountDown_SC)
  return target;
}

size_t MSG_Ret_NotifyCountDown_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quest.MSG_Ret_NotifyCountDown_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bool bset = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional uint32 delay = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_delay());
    }

    // optional uint32 seconds = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_seconds());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_NotifyCountDown_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quest.MSG_Ret_NotifyCountDown_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_NotifyCountDown_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_NotifyCountDown_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quest.MSG_Ret_NotifyCountDown_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quest.MSG_Ret_NotifyCountDown_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_NotifyCountDown_SC::MergeFrom(const MSG_Ret_NotifyCountDown_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quest.MSG_Ret_NotifyCountDown_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      bset_ = from.bset_;
    }
    if (cached_has_bits & 0x00000002u) {
      delay_ = from.delay_;
    }
    if (cached_has_bits & 0x00000004u) {
      seconds_ = from.seconds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_NotifyCountDown_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quest.MSG_Ret_NotifyCountDown_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_NotifyCountDown_SC::CopyFrom(const MSG_Ret_NotifyCountDown_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quest.MSG_Ret_NotifyCountDown_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_NotifyCountDown_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_NotifyCountDown_SC::InternalSwap(MSG_Ret_NotifyCountDown_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bset_, other->bset_);
  swap(delay_, other->delay_);
  swap(seconds_, other->seconds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_NotifyCountDown_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_NotifyClientOptional_SC::InitAsDefaultInstance() {
}
class MSG_NotifyClientOptional_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_NotifyClientOptional_SC>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_setting(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_NotifyClientOptional_SC::MSG_NotifyClientOptional_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:quest.MSG_NotifyClientOptional_SC)
}
MSG_NotifyClientOptional_SC::MSG_NotifyClientOptional_SC(const MSG_NotifyClientOptional_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  setting_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_setting()) {
    setting_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.setting_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:quest.MSG_NotifyClientOptional_SC)
}

void MSG_NotifyClientOptional_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_NotifyClientOptional_SC_quest_2eproto.base);
  setting_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0u;
}

MSG_NotifyClientOptional_SC::~MSG_NotifyClientOptional_SC() {
  // @@protoc_insertion_point(destructor:quest.MSG_NotifyClientOptional_SC)
  SharedDtor();
}

void MSG_NotifyClientOptional_SC::SharedDtor() {
  setting_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_NotifyClientOptional_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_NotifyClientOptional_SC& MSG_NotifyClientOptional_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_NotifyClientOptional_SC_quest_2eproto.base);
  return *internal_default_instance();
}


void MSG_NotifyClientOptional_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:quest.MSG_NotifyClientOptional_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    setting_.ClearNonDefaultToEmptyNoArena();
  }
  type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_NotifyClientOptional_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string setting = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_setting();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "quest.MSG_NotifyClientOptional_SC.setting");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_NotifyClientOptional_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quest.MSG_NotifyClientOptional_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // optional string setting = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_setting().data(), static_cast<int>(this->_internal_setting().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "quest.MSG_NotifyClientOptional_SC.setting");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_setting(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quest.MSG_NotifyClientOptional_SC)
  return target;
}

size_t MSG_NotifyClientOptional_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quest.MSG_NotifyClientOptional_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string setting = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_setting());
    }

    // optional uint32 type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_NotifyClientOptional_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quest.MSG_NotifyClientOptional_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_NotifyClientOptional_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_NotifyClientOptional_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quest.MSG_NotifyClientOptional_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quest.MSG_NotifyClientOptional_SC)
    MergeFrom(*source);
  }
}

void MSG_NotifyClientOptional_SC::MergeFrom(const MSG_NotifyClientOptional_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quest.MSG_NotifyClientOptional_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      setting_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.setting_);
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_NotifyClientOptional_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quest.MSG_NotifyClientOptional_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_NotifyClientOptional_SC::CopyFrom(const MSG_NotifyClientOptional_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quest.MSG_NotifyClientOptional_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_NotifyClientOptional_SC::IsInitialized() const {
  return true;
}

void MSG_NotifyClientOptional_SC::InternalSwap(MSG_NotifyClientOptional_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  setting_.Swap(&other->setting_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_NotifyClientOptional_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_notifyQuestStateEffect_SC::InitAsDefaultInstance() {
}
class MSG_notifyQuestStateEffect_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_notifyQuestStateEffect_SC>()._has_bits_);
  static void set_has_questid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_notifyQuestStateEffect_SC::MSG_notifyQuestStateEffect_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:quest.MSG_notifyQuestStateEffect_SC)
}
MSG_notifyQuestStateEffect_SC::MSG_notifyQuestStateEffect_SC(const MSG_notifyQuestStateEffect_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&questid_, &from.questid_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&questid_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:quest.MSG_notifyQuestStateEffect_SC)
}

void MSG_notifyQuestStateEffect_SC::SharedCtor() {
  ::memset(&questid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&questid_)) + sizeof(state_));
}

MSG_notifyQuestStateEffect_SC::~MSG_notifyQuestStateEffect_SC() {
  // @@protoc_insertion_point(destructor:quest.MSG_notifyQuestStateEffect_SC)
  SharedDtor();
}

void MSG_notifyQuestStateEffect_SC::SharedDtor() {
}

void MSG_notifyQuestStateEffect_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_notifyQuestStateEffect_SC& MSG_notifyQuestStateEffect_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_notifyQuestStateEffect_SC_quest_2eproto.base);
  return *internal_default_instance();
}


void MSG_notifyQuestStateEffect_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:quest.MSG_notifyQuestStateEffect_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&questid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&state_) -
        reinterpret_cast<char*>(&questid_)) + sizeof(state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_notifyQuestStateEffect_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 questid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_questid(&has_bits);
          questid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_state(&has_bits);
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_notifyQuestStateEffect_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quest.MSG_notifyQuestStateEffect_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 questid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_questid(), target);
  }

  // optional uint32 state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quest.MSG_notifyQuestStateEffect_SC)
  return target;
}

size_t MSG_notifyQuestStateEffect_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quest.MSG_notifyQuestStateEffect_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 questid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_questid());
    }

    // optional uint32 state = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_state());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_notifyQuestStateEffect_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quest.MSG_notifyQuestStateEffect_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_notifyQuestStateEffect_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_notifyQuestStateEffect_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quest.MSG_notifyQuestStateEffect_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quest.MSG_notifyQuestStateEffect_SC)
    MergeFrom(*source);
  }
}

void MSG_notifyQuestStateEffect_SC::MergeFrom(const MSG_notifyQuestStateEffect_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quest.MSG_notifyQuestStateEffect_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      questid_ = from.questid_;
    }
    if (cached_has_bits & 0x00000002u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_notifyQuestStateEffect_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quest.MSG_notifyQuestStateEffect_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_notifyQuestStateEffect_SC::CopyFrom(const MSG_notifyQuestStateEffect_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quest.MSG_notifyQuestStateEffect_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_notifyQuestStateEffect_SC::IsInitialized() const {
  return true;
}

void MSG_notifyQuestStateEffect_SC::InternalSwap(MSG_notifyQuestStateEffect_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(questid_, other->questid_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_notifyQuestStateEffect_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_CommitYQDData_CS::InitAsDefaultInstance() {
}
class MSG_Req_CommitYQDData_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_CommitYQDData_CS>()._has_bits_);
  static void set_has_step(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MSG_Req_CommitYQDData_CS::MSG_Req_CommitYQDData_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:quest.MSG_Req_CommitYQDData_CS)
}
MSG_Req_CommitYQDData_CS::MSG_Req_CommitYQDData_CS(const MSG_Req_CommitYQDData_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&step_, &from.step_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&step_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:quest.MSG_Req_CommitYQDData_CS)
}

void MSG_Req_CommitYQDData_CS::SharedCtor() {
  ::memset(&step_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&step_)) + sizeof(type_));
}

MSG_Req_CommitYQDData_CS::~MSG_Req_CommitYQDData_CS() {
  // @@protoc_insertion_point(destructor:quest.MSG_Req_CommitYQDData_CS)
  SharedDtor();
}

void MSG_Req_CommitYQDData_CS::SharedDtor() {
}

void MSG_Req_CommitYQDData_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_CommitYQDData_CS& MSG_Req_CommitYQDData_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_CommitYQDData_CS_quest_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_CommitYQDData_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:quest.MSG_Req_CommitYQDData_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&step_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&step_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_CommitYQDData_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 step = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_step(&has_bits);
          step_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_success(&has_bits);
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_CommitYQDData_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quest.MSG_Req_CommitYQDData_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 step = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_step(), target);
  }

  // optional uint32 success = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_success(), target);
  }

  // optional uint32 type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quest.MSG_Req_CommitYQDData_CS)
  return target;
}

size_t MSG_Req_CommitYQDData_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quest.MSG_Req_CommitYQDData_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 step = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_step());
    }

    // optional uint32 success = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_success());
    }

    // optional uint32 type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_CommitYQDData_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quest.MSG_Req_CommitYQDData_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_CommitYQDData_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_CommitYQDData_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quest.MSG_Req_CommitYQDData_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quest.MSG_Req_CommitYQDData_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_CommitYQDData_CS::MergeFrom(const MSG_Req_CommitYQDData_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quest.MSG_Req_CommitYQDData_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      step_ = from.step_;
    }
    if (cached_has_bits & 0x00000002u) {
      success_ = from.success_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Req_CommitYQDData_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quest.MSG_Req_CommitYQDData_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_CommitYQDData_CS::CopyFrom(const MSG_Req_CommitYQDData_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quest.MSG_Req_CommitYQDData_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_CommitYQDData_CS::IsInitialized() const {
  return true;
}

void MSG_Req_CommitYQDData_CS::InternalSwap(MSG_Req_CommitYQDData_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(step_, other->step_);
  swap(success_, other->success_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_CommitYQDData_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_PlayYQDRetry_CS::InitAsDefaultInstance() {
}
class MSG_Req_PlayYQDRetry_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_PlayYQDRetry_CS>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Req_PlayYQDRetry_CS::MSG_Req_PlayYQDRetry_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:quest.MSG_Req_PlayYQDRetry_CS)
}
MSG_Req_PlayYQDRetry_CS::MSG_Req_PlayYQDRetry_CS(const MSG_Req_PlayYQDRetry_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:quest.MSG_Req_PlayYQDRetry_CS)
}

void MSG_Req_PlayYQDRetry_CS::SharedCtor() {
  type_ = 0u;
}

MSG_Req_PlayYQDRetry_CS::~MSG_Req_PlayYQDRetry_CS() {
  // @@protoc_insertion_point(destructor:quest.MSG_Req_PlayYQDRetry_CS)
  SharedDtor();
}

void MSG_Req_PlayYQDRetry_CS::SharedDtor() {
}

void MSG_Req_PlayYQDRetry_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_PlayYQDRetry_CS& MSG_Req_PlayYQDRetry_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_PlayYQDRetry_CS_quest_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_PlayYQDRetry_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:quest.MSG_Req_PlayYQDRetry_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_PlayYQDRetry_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_PlayYQDRetry_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quest.MSG_Req_PlayYQDRetry_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quest.MSG_Req_PlayYQDRetry_CS)
  return target;
}

size_t MSG_Req_PlayYQDRetry_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quest.MSG_Req_PlayYQDRetry_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 type = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_PlayYQDRetry_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quest.MSG_Req_PlayYQDRetry_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_PlayYQDRetry_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_PlayYQDRetry_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quest.MSG_Req_PlayYQDRetry_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quest.MSG_Req_PlayYQDRetry_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_PlayYQDRetry_CS::MergeFrom(const MSG_Req_PlayYQDRetry_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quest.MSG_Req_PlayYQDRetry_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_type()) {
    _internal_set_type(from._internal_type());
  }
}

void MSG_Req_PlayYQDRetry_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quest.MSG_Req_PlayYQDRetry_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_PlayYQDRetry_CS::CopyFrom(const MSG_Req_PlayYQDRetry_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quest.MSG_Req_PlayYQDRetry_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_PlayYQDRetry_CS::IsInitialized() const {
  return true;
}

void MSG_Req_PlayYQDRetry_CS::InternalSwap(MSG_Req_PlayYQDRetry_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_PlayYQDRetry_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace quest
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::quest::questCRC* Arena::CreateMaybeMessage< ::quest::questCRC >(Arena* arena) {
  return Arena::CreateInternal< ::quest::questCRC >(arena);
}
template<> PROTOBUF_NOINLINE ::quest::validQuest* Arena::CreateMaybeMessage< ::quest::validQuest >(Arena* arena) {
  return Arena::CreateInternal< ::quest::validQuest >(arena);
}
template<> PROTOBUF_NOINLINE ::quest::npcValidQuest* Arena::CreateMaybeMessage< ::quest::npcValidQuest >(Arena* arena) {
  return Arena::CreateInternal< ::quest::npcValidQuest >(arena);
}
template<> PROTOBUF_NOINLINE ::quest::MSG_Req_VisitNpcTrade_CS* Arena::CreateMaybeMessage< ::quest::MSG_Req_VisitNpcTrade_CS >(Arena* arena) {
  return Arena::CreateInternal< ::quest::MSG_Req_VisitNpcTrade_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::quest::MSG_Ret_VisitNpcTrade_SC* Arena::CreateMaybeMessage< ::quest::MSG_Ret_VisitNpcTrade_SC >(Arena* arena) {
  return Arena::CreateInternal< ::quest::MSG_Ret_VisitNpcTrade_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::quest::MSG_Req_QuestInfo_CS* Arena::CreateMaybeMessage< ::quest::MSG_Req_QuestInfo_CS >(Arena* arena) {
  return Arena::CreateInternal< ::quest::MSG_Req_QuestInfo_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::quest::UnorderQuestBranchInfo* Arena::CreateMaybeMessage< ::quest::UnorderQuestBranchInfo >(Arena* arena) {
  return Arena::CreateInternal< ::quest::UnorderQuestBranchInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::quest::MSG_Ret_QuestInfo_SC* Arena::CreateMaybeMessage< ::quest::MSG_Ret_QuestInfo_SC >(Arena* arena) {
  return Arena::CreateInternal< ::quest::MSG_Ret_QuestInfo_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::quest::MSG_ReqExecuteQuest_CS* Arena::CreateMaybeMessage< ::quest::MSG_ReqExecuteQuest_CS >(Arena* arena) {
  return Arena::CreateInternal< ::quest::MSG_ReqExecuteQuest_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::quest::MSG_ReqValidQuests_CS* Arena::CreateMaybeMessage< ::quest::MSG_ReqValidQuests_CS >(Arena* arena) {
  return Arena::CreateInternal< ::quest::MSG_ReqValidQuests_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::quest::MSG_RetValidQuests_SC* Arena::CreateMaybeMessage< ::quest::MSG_RetValidQuests_SC >(Arena* arena) {
  return Arena::CreateInternal< ::quest::MSG_RetValidQuests_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::quest::MSG_ReqRetQuestState_CSC* Arena::CreateMaybeMessage< ::quest::MSG_ReqRetQuestState_CSC >(Arena* arena) {
  return Arena::CreateInternal< ::quest::MSG_ReqRetQuestState_CSC >(arena);
}
template<> PROTOBUF_NOINLINE ::quest::MSG_ReqAbandonQuest_CS* Arena::CreateMaybeMessage< ::quest::MSG_ReqAbandonQuest_CS >(Arena* arena) {
  return Arena::CreateInternal< ::quest::MSG_ReqAbandonQuest_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::quest::MSG_RetAbandonQuest_SC* Arena::CreateMaybeMessage< ::quest::MSG_RetAbandonQuest_SC >(Arena* arena) {
  return Arena::CreateInternal< ::quest::MSG_RetAbandonQuest_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::quest::QuestStateInfo* Arena::CreateMaybeMessage< ::quest::QuestStateInfo >(Arena* arena) {
  return Arena::CreateInternal< ::quest::QuestStateInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::quest::npcQuestList* Arena::CreateMaybeMessage< ::quest::npcQuestList >(Arena* arena) {
  return Arena::CreateInternal< ::quest::npcQuestList >(arena);
}
template<> PROTOBUF_NOINLINE ::quest::MSG_ReqMapQuestInfo_CS* Arena::CreateMaybeMessage< ::quest::MSG_ReqMapQuestInfo_CS >(Arena* arena) {
  return Arena::CreateInternal< ::quest::MSG_ReqMapQuestInfo_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::quest::MSG_RetMapQuestInfo_SC* Arena::CreateMaybeMessage< ::quest::MSG_RetMapQuestInfo_SC >(Arena* arena) {
  return Arena::CreateInternal< ::quest::MSG_RetMapQuestInfo_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::quest::MSG_ReqCurActiveQuest_CS* Arena::CreateMaybeMessage< ::quest::MSG_ReqCurActiveQuest_CS >(Arena* arena) {
  return Arena::CreateInternal< ::quest::MSG_ReqCurActiveQuest_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::quest::ringQuestInfo* Arena::CreateMaybeMessage< ::quest::ringQuestInfo >(Arena* arena) {
  return Arena::CreateInternal< ::quest::ringQuestInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::quest::MSG_RetCurActiveQuest_SC* Arena::CreateMaybeMessage< ::quest::MSG_RetCurActiveQuest_SC >(Arena* arena) {
  return Arena::CreateInternal< ::quest::MSG_RetCurActiveQuest_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::quest::MSG_ReqChangeMapFindPath_CS* Arena::CreateMaybeMessage< ::quest::MSG_ReqChangeMapFindPath_CS >(Arena* arena) {
  return Arena::CreateInternal< ::quest::MSG_ReqChangeMapFindPath_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::quest::MSG_RetChangeMapFindPath_SC* Arena::CreateMaybeMessage< ::quest::MSG_RetChangeMapFindPath_SC >(Arena* arena) {
  return Arena::CreateInternal< ::quest::MSG_RetChangeMapFindPath_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::quest::ChangeMapFindWayInfo* Arena::CreateMaybeMessage< ::quest::ChangeMapFindWayInfo >(Arena* arena) {
  return Arena::CreateInternal< ::quest::ChangeMapFindWayInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::quest::MSG_RetPlotTalkID_SC* Arena::CreateMaybeMessage< ::quest::MSG_RetPlotTalkID_SC >(Arena* arena) {
  return Arena::CreateInternal< ::quest::MSG_RetPlotTalkID_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::quest::MSG_CartoonCompleteNotify_SC* Arena::CreateMaybeMessage< ::quest::MSG_CartoonCompleteNotify_SC >(Arena* arena) {
  return Arena::CreateInternal< ::quest::MSG_CartoonCompleteNotify_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::quest::MSG_PlayCartoonAndGoMap_SC* Arena::CreateMaybeMessage< ::quest::MSG_PlayCartoonAndGoMap_SC >(Arena* arena) {
  return Arena::CreateInternal< ::quest::MSG_PlayCartoonAndGoMap_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::quest::MSG_ReqSubmitObjs_CS* Arena::CreateMaybeMessage< ::quest::MSG_ReqSubmitObjs_CS >(Arena* arena) {
  return Arena::CreateInternal< ::quest::MSG_ReqSubmitObjs_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::quest::MSG_RetSubmitObjs_SC* Arena::CreateMaybeMessage< ::quest::MSG_RetSubmitObjs_SC >(Arena* arena) {
  return Arena::CreateInternal< ::quest::MSG_RetSubmitObjs_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::quest::RingQuestRingCount* Arena::CreateMaybeMessage< ::quest::RingQuestRingCount >(Arena* arena) {
  return Arena::CreateInternal< ::quest::RingQuestRingCount >(arena);
}
template<> PROTOBUF_NOINLINE ::quest::MSG_RetRingQuestRingCount_SC* Arena::CreateMaybeMessage< ::quest::MSG_RetRingQuestRingCount_SC >(Arena* arena) {
  return Arena::CreateInternal< ::quest::MSG_RetRingQuestRingCount_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::quest::MSG_notifyRefreshQuestInfo_SC* Arena::CreateMaybeMessage< ::quest::MSG_notifyRefreshQuestInfo_SC >(Arena* arena) {
  return Arena::CreateInternal< ::quest::MSG_notifyRefreshQuestInfo_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::quest::MSG_PlayBellQTE_SC* Arena::CreateMaybeMessage< ::quest::MSG_PlayBellQTE_SC >(Arena* arena) {
  return Arena::CreateInternal< ::quest::MSG_PlayBellQTE_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::quest::MSG_PlayBellQTEResult_CS* Arena::CreateMaybeMessage< ::quest::MSG_PlayBellQTEResult_CS >(Arena* arena) {
  return Arena::CreateInternal< ::quest::MSG_PlayBellQTEResult_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::quest::MSG_Req_SetQuestNeedShow_CS* Arena::CreateMaybeMessage< ::quest::MSG_Req_SetQuestNeedShow_CS >(Arena* arena) {
  return Arena::CreateInternal< ::quest::MSG_Req_SetQuestNeedShow_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::quest::MSG_Ret_SetQuestNeedShow_SC* Arena::CreateMaybeMessage< ::quest::MSG_Ret_SetQuestNeedShow_SC >(Arena* arena) {
  return Arena::CreateInternal< ::quest::MSG_Ret_SetQuestNeedShow_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::quest::MSG_Req_ShareQuestToTeamMember_CS* Arena::CreateMaybeMessage< ::quest::MSG_Req_ShareQuestToTeamMember_CS >(Arena* arena) {
  return Arena::CreateInternal< ::quest::MSG_Req_ShareQuestToTeamMember_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::quest::MSG_Ret_NotifyShareQuest_SC* Arena::CreateMaybeMessage< ::quest::MSG_Ret_NotifyShareQuest_SC >(Arena* arena) {
  return Arena::CreateInternal< ::quest::MSG_Ret_NotifyShareQuest_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::quest::MSG_Req_AnswerShareQuest_CS* Arena::CreateMaybeMessage< ::quest::MSG_Req_AnswerShareQuest_CS >(Arena* arena) {
  return Arena::CreateInternal< ::quest::MSG_Req_AnswerShareQuest_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::quest::MSG_Ret_AnswerShareQuest_SC* Arena::CreateMaybeMessage< ::quest::MSG_Ret_AnswerShareQuest_SC >(Arena* arena) {
  return Arena::CreateInternal< ::quest::MSG_Ret_AnswerShareQuest_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::quest::MSG_Ret_NotifyCountDown_SC* Arena::CreateMaybeMessage< ::quest::MSG_Ret_NotifyCountDown_SC >(Arena* arena) {
  return Arena::CreateInternal< ::quest::MSG_Ret_NotifyCountDown_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::quest::MSG_NotifyClientOptional_SC* Arena::CreateMaybeMessage< ::quest::MSG_NotifyClientOptional_SC >(Arena* arena) {
  return Arena::CreateInternal< ::quest::MSG_NotifyClientOptional_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::quest::MSG_notifyQuestStateEffect_SC* Arena::CreateMaybeMessage< ::quest::MSG_notifyQuestStateEffect_SC >(Arena* arena) {
  return Arena::CreateInternal< ::quest::MSG_notifyQuestStateEffect_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::quest::MSG_Req_CommitYQDData_CS* Arena::CreateMaybeMessage< ::quest::MSG_Req_CommitYQDData_CS >(Arena* arena) {
  return Arena::CreateInternal< ::quest::MSG_Req_CommitYQDData_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::quest::MSG_Req_PlayYQDRetry_CS* Arena::CreateMaybeMessage< ::quest::MSG_Req_PlayYQDRetry_CS >(Arena* arena) {
  return Arena::CreateInternal< ::quest::MSG_Req_PlayYQDRetry_CS >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
