// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: guildpk_msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_guildpk_5fmsg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_guildpk_5fmsg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "msg_enum.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_guildpk_5fmsg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_guildpk_5fmsg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[25]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_guildpk_5fmsg_2eproto;
namespace guildpk_msg {
class GuildPkGuildInfo;
class GuildPkGuildInfoDefaultTypeInternal;
extern GuildPkGuildInfoDefaultTypeInternal _GuildPkGuildInfo_default_instance_;
class GuildPkGuildScore;
class GuildPkGuildScoreDefaultTypeInternal;
extern GuildPkGuildScoreDefaultTypeInternal _GuildPkGuildScore_default_instance_;
class GuildPkMemberInfo;
class GuildPkMemberInfoDefaultTypeInternal;
extern GuildPkMemberInfoDefaultTypeInternal _GuildPkMemberInfo_default_instance_;
class GuildPkTeamInfo;
class GuildPkTeamInfoDefaultTypeInternal;
extern GuildPkTeamInfoDefaultTypeInternal _GuildPkTeamInfo_default_instance_;
class GuildPkWinInfo;
class GuildPkWinInfoDefaultTypeInternal;
extern GuildPkWinInfoDefaultTypeInternal _GuildPkWinInfo_default_instance_;
class MSG_GuildPk_FinalResult_SC;
class MSG_GuildPk_FinalResult_SCDefaultTypeInternal;
extern MSG_GuildPk_FinalResult_SCDefaultTypeInternal _MSG_GuildPk_FinalResult_SC_default_instance_;
class MSG_RealTime_GuildPkTeam_Rank_SC;
class MSG_RealTime_GuildPkTeam_Rank_SCDefaultTypeInternal;
extern MSG_RealTime_GuildPkTeam_Rank_SCDefaultTypeInternal _MSG_RealTime_GuildPkTeam_Rank_SC_default_instance_;
class MSG_Refresh_GuildPkMemberInfo_SC;
class MSG_Refresh_GuildPkMemberInfo_SCDefaultTypeInternal;
extern MSG_Refresh_GuildPkMemberInfo_SCDefaultTypeInternal _MSG_Refresh_GuildPkMemberInfo_SC_default_instance_;
class MSG_Req_EnterGuildPk_CS;
class MSG_Req_EnterGuildPk_CSDefaultTypeInternal;
extern MSG_Req_EnterGuildPk_CSDefaultTypeInternal _MSG_Req_EnterGuildPk_CS_default_instance_;
class MSG_Req_GuildPkEnroll_CS;
class MSG_Req_GuildPkEnroll_CSDefaultTypeInternal;
extern MSG_Req_GuildPkEnroll_CSDefaultTypeInternal _MSG_Req_GuildPkEnroll_CS_default_instance_;
class MSG_Req_GuildPkInfo_CS;
class MSG_Req_GuildPkInfo_CSDefaultTypeInternal;
extern MSG_Req_GuildPkInfo_CSDefaultTypeInternal _MSG_Req_GuildPkInfo_CS_default_instance_;
class MSG_Req_GuildPkJoinTeam_CS;
class MSG_Req_GuildPkJoinTeam_CSDefaultTypeInternal;
extern MSG_Req_GuildPkJoinTeam_CSDefaultTypeInternal _MSG_Req_GuildPkJoinTeam_CS_default_instance_;
class MSG_Req_GuildPkQuitTeam_CS;
class MSG_Req_GuildPkQuitTeam_CSDefaultTypeInternal;
extern MSG_Req_GuildPkQuitTeam_CSDefaultTypeInternal _MSG_Req_GuildPkQuitTeam_CS_default_instance_;
class MSG_Req_GuildPkRank_CS;
class MSG_Req_GuildPkRank_CSDefaultTypeInternal;
extern MSG_Req_GuildPkRank_CSDefaultTypeInternal _MSG_Req_GuildPkRank_CS_default_instance_;
class MSG_Req_GuildPkWinList_CS;
class MSG_Req_GuildPkWinList_CSDefaultTypeInternal;
extern MSG_Req_GuildPkWinList_CSDefaultTypeInternal _MSG_Req_GuildPkWinList_CS_default_instance_;
class MSG_Ret_GuildPkCountDown_SC;
class MSG_Ret_GuildPkCountDown_SCDefaultTypeInternal;
extern MSG_Ret_GuildPkCountDown_SCDefaultTypeInternal _MSG_Ret_GuildPkCountDown_SC_default_instance_;
class MSG_Ret_GuildPkEnroll_Finish_SC;
class MSG_Ret_GuildPkEnroll_Finish_SCDefaultTypeInternal;
extern MSG_Ret_GuildPkEnroll_Finish_SCDefaultTypeInternal _MSG_Ret_GuildPkEnroll_Finish_SC_default_instance_;
class MSG_Ret_GuildPkEnroll_SC;
class MSG_Ret_GuildPkEnroll_SCDefaultTypeInternal;
extern MSG_Ret_GuildPkEnroll_SCDefaultTypeInternal _MSG_Ret_GuildPkEnroll_SC_default_instance_;
class MSG_Ret_GuildPkFight_SC;
class MSG_Ret_GuildPkFight_SCDefaultTypeInternal;
extern MSG_Ret_GuildPkFight_SCDefaultTypeInternal _MSG_Ret_GuildPkFight_SC_default_instance_;
class MSG_Ret_GuildPkInfo_SC;
class MSG_Ret_GuildPkInfo_SCDefaultTypeInternal;
extern MSG_Ret_GuildPkInfo_SCDefaultTypeInternal _MSG_Ret_GuildPkInfo_SC_default_instance_;
class MSG_Ret_GuildPkMatchResult_SC;
class MSG_Ret_GuildPkMatchResult_SCDefaultTypeInternal;
extern MSG_Ret_GuildPkMatchResult_SCDefaultTypeInternal _MSG_Ret_GuildPkMatchResult_SC_default_instance_;
class MSG_Ret_GuildPkRank_SC;
class MSG_Ret_GuildPkRank_SCDefaultTypeInternal;
extern MSG_Ret_GuildPkRank_SCDefaultTypeInternal _MSG_Ret_GuildPkRank_SC_default_instance_;
class MSG_Ret_GuildPkWinList_SC;
class MSG_Ret_GuildPkWinList_SCDefaultTypeInternal;
extern MSG_Ret_GuildPkWinList_SCDefaultTypeInternal _MSG_Ret_GuildPkWinList_SC_default_instance_;
class finalresult_guildteam_info;
class finalresult_guildteam_infoDefaultTypeInternal;
extern finalresult_guildteam_infoDefaultTypeInternal _finalresult_guildteam_info_default_instance_;
class realtime_guildteam_info;
class realtime_guildteam_infoDefaultTypeInternal;
extern realtime_guildteam_infoDefaultTypeInternal _realtime_guildteam_info_default_instance_;
}  // namespace guildpk_msg
PROTOBUF_NAMESPACE_OPEN
template<> ::guildpk_msg::GuildPkGuildInfo* Arena::CreateMaybeMessage<::guildpk_msg::GuildPkGuildInfo>(Arena*);
template<> ::guildpk_msg::GuildPkGuildScore* Arena::CreateMaybeMessage<::guildpk_msg::GuildPkGuildScore>(Arena*);
template<> ::guildpk_msg::GuildPkMemberInfo* Arena::CreateMaybeMessage<::guildpk_msg::GuildPkMemberInfo>(Arena*);
template<> ::guildpk_msg::GuildPkTeamInfo* Arena::CreateMaybeMessage<::guildpk_msg::GuildPkTeamInfo>(Arena*);
template<> ::guildpk_msg::GuildPkWinInfo* Arena::CreateMaybeMessage<::guildpk_msg::GuildPkWinInfo>(Arena*);
template<> ::guildpk_msg::MSG_GuildPk_FinalResult_SC* Arena::CreateMaybeMessage<::guildpk_msg::MSG_GuildPk_FinalResult_SC>(Arena*);
template<> ::guildpk_msg::MSG_RealTime_GuildPkTeam_Rank_SC* Arena::CreateMaybeMessage<::guildpk_msg::MSG_RealTime_GuildPkTeam_Rank_SC>(Arena*);
template<> ::guildpk_msg::MSG_Refresh_GuildPkMemberInfo_SC* Arena::CreateMaybeMessage<::guildpk_msg::MSG_Refresh_GuildPkMemberInfo_SC>(Arena*);
template<> ::guildpk_msg::MSG_Req_EnterGuildPk_CS* Arena::CreateMaybeMessage<::guildpk_msg::MSG_Req_EnterGuildPk_CS>(Arena*);
template<> ::guildpk_msg::MSG_Req_GuildPkEnroll_CS* Arena::CreateMaybeMessage<::guildpk_msg::MSG_Req_GuildPkEnroll_CS>(Arena*);
template<> ::guildpk_msg::MSG_Req_GuildPkInfo_CS* Arena::CreateMaybeMessage<::guildpk_msg::MSG_Req_GuildPkInfo_CS>(Arena*);
template<> ::guildpk_msg::MSG_Req_GuildPkJoinTeam_CS* Arena::CreateMaybeMessage<::guildpk_msg::MSG_Req_GuildPkJoinTeam_CS>(Arena*);
template<> ::guildpk_msg::MSG_Req_GuildPkQuitTeam_CS* Arena::CreateMaybeMessage<::guildpk_msg::MSG_Req_GuildPkQuitTeam_CS>(Arena*);
template<> ::guildpk_msg::MSG_Req_GuildPkRank_CS* Arena::CreateMaybeMessage<::guildpk_msg::MSG_Req_GuildPkRank_CS>(Arena*);
template<> ::guildpk_msg::MSG_Req_GuildPkWinList_CS* Arena::CreateMaybeMessage<::guildpk_msg::MSG_Req_GuildPkWinList_CS>(Arena*);
template<> ::guildpk_msg::MSG_Ret_GuildPkCountDown_SC* Arena::CreateMaybeMessage<::guildpk_msg::MSG_Ret_GuildPkCountDown_SC>(Arena*);
template<> ::guildpk_msg::MSG_Ret_GuildPkEnroll_Finish_SC* Arena::CreateMaybeMessage<::guildpk_msg::MSG_Ret_GuildPkEnroll_Finish_SC>(Arena*);
template<> ::guildpk_msg::MSG_Ret_GuildPkEnroll_SC* Arena::CreateMaybeMessage<::guildpk_msg::MSG_Ret_GuildPkEnroll_SC>(Arena*);
template<> ::guildpk_msg::MSG_Ret_GuildPkFight_SC* Arena::CreateMaybeMessage<::guildpk_msg::MSG_Ret_GuildPkFight_SC>(Arena*);
template<> ::guildpk_msg::MSG_Ret_GuildPkInfo_SC* Arena::CreateMaybeMessage<::guildpk_msg::MSG_Ret_GuildPkInfo_SC>(Arena*);
template<> ::guildpk_msg::MSG_Ret_GuildPkMatchResult_SC* Arena::CreateMaybeMessage<::guildpk_msg::MSG_Ret_GuildPkMatchResult_SC>(Arena*);
template<> ::guildpk_msg::MSG_Ret_GuildPkRank_SC* Arena::CreateMaybeMessage<::guildpk_msg::MSG_Ret_GuildPkRank_SC>(Arena*);
template<> ::guildpk_msg::MSG_Ret_GuildPkWinList_SC* Arena::CreateMaybeMessage<::guildpk_msg::MSG_Ret_GuildPkWinList_SC>(Arena*);
template<> ::guildpk_msg::finalresult_guildteam_info* Arena::CreateMaybeMessage<::guildpk_msg::finalresult_guildteam_info>(Arena*);
template<> ::guildpk_msg::realtime_guildteam_info* Arena::CreateMaybeMessage<::guildpk_msg::realtime_guildteam_info>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace guildpk_msg {

// ===================================================================

class MSG_Req_GuildPkEnroll_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:guildpk_msg.MSG_Req_GuildPkEnroll_CS) */ {
 public:
  MSG_Req_GuildPkEnroll_CS();
  virtual ~MSG_Req_GuildPkEnroll_CS();

  MSG_Req_GuildPkEnroll_CS(const MSG_Req_GuildPkEnroll_CS& from);
  MSG_Req_GuildPkEnroll_CS(MSG_Req_GuildPkEnroll_CS&& from) noexcept
    : MSG_Req_GuildPkEnroll_CS() {
    *this = ::std::move(from);
  }

  inline MSG_Req_GuildPkEnroll_CS& operator=(const MSG_Req_GuildPkEnroll_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Req_GuildPkEnroll_CS& operator=(MSG_Req_GuildPkEnroll_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Req_GuildPkEnroll_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Req_GuildPkEnroll_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_Req_GuildPkEnroll_CS*>(
               &_MSG_Req_GuildPkEnroll_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MSG_Req_GuildPkEnroll_CS& a, MSG_Req_GuildPkEnroll_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Req_GuildPkEnroll_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Req_GuildPkEnroll_CS* New() const final {
    return CreateMaybeMessage<MSG_Req_GuildPkEnroll_CS>(nullptr);
  }

  MSG_Req_GuildPkEnroll_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Req_GuildPkEnroll_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Req_GuildPkEnroll_CS& from);
  void MergeFrom(const MSG_Req_GuildPkEnroll_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Req_GuildPkEnroll_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "guildpk_msg.MSG_Req_GuildPkEnroll_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_guildpk_5fmsg_2eproto);
    return ::descriptor_table_guildpk_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:guildpk_msg.MSG_Req_GuildPkEnroll_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_guildpk_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class MSG_Ret_GuildPkEnroll_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:guildpk_msg.MSG_Ret_GuildPkEnroll_SC) */ {
 public:
  MSG_Ret_GuildPkEnroll_SC();
  virtual ~MSG_Ret_GuildPkEnroll_SC();

  MSG_Ret_GuildPkEnroll_SC(const MSG_Ret_GuildPkEnroll_SC& from);
  MSG_Ret_GuildPkEnroll_SC(MSG_Ret_GuildPkEnroll_SC&& from) noexcept
    : MSG_Ret_GuildPkEnroll_SC() {
    *this = ::std::move(from);
  }

  inline MSG_Ret_GuildPkEnroll_SC& operator=(const MSG_Ret_GuildPkEnroll_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Ret_GuildPkEnroll_SC& operator=(MSG_Ret_GuildPkEnroll_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Ret_GuildPkEnroll_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Ret_GuildPkEnroll_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_Ret_GuildPkEnroll_SC*>(
               &_MSG_Ret_GuildPkEnroll_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MSG_Ret_GuildPkEnroll_SC& a, MSG_Ret_GuildPkEnroll_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Ret_GuildPkEnroll_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Ret_GuildPkEnroll_SC* New() const final {
    return CreateMaybeMessage<MSG_Ret_GuildPkEnroll_SC>(nullptr);
  }

  MSG_Ret_GuildPkEnroll_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Ret_GuildPkEnroll_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Ret_GuildPkEnroll_SC& from);
  void MergeFrom(const MSG_Ret_GuildPkEnroll_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Ret_GuildPkEnroll_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "guildpk_msg.MSG_Ret_GuildPkEnroll_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_guildpk_5fmsg_2eproto);
    return ::descriptor_table_guildpk_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // optional bool result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:guildpk_msg.MSG_Ret_GuildPkEnroll_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool result_;
  friend struct ::TableStruct_guildpk_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class GuildPkMemberInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:guildpk_msg.GuildPkMemberInfo) */ {
 public:
  GuildPkMemberInfo();
  virtual ~GuildPkMemberInfo();

  GuildPkMemberInfo(const GuildPkMemberInfo& from);
  GuildPkMemberInfo(GuildPkMemberInfo&& from) noexcept
    : GuildPkMemberInfo() {
    *this = ::std::move(from);
  }

  inline GuildPkMemberInfo& operator=(const GuildPkMemberInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GuildPkMemberInfo& operator=(GuildPkMemberInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GuildPkMemberInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GuildPkMemberInfo* internal_default_instance() {
    return reinterpret_cast<const GuildPkMemberInfo*>(
               &_GuildPkMemberInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GuildPkMemberInfo& a, GuildPkMemberInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GuildPkMemberInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GuildPkMemberInfo* New() const final {
    return CreateMaybeMessage<GuildPkMemberInfo>(nullptr);
  }

  GuildPkMemberInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GuildPkMemberInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GuildPkMemberInfo& from);
  void MergeFrom(const GuildPkMemberInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GuildPkMemberInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "guildpk_msg.GuildPkMemberInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_guildpk_5fmsg_2eproto);
    return ::descriptor_table_guildpk_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kCharidFieldNumber = 1,
    kLevelFieldNumber = 3,
    kTeamidFieldNumber = 4,
    kPosidFieldNumber = 5,
  };
  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional uint64 charid = 1;
  bool has_charid() const;
  private:
  bool _internal_has_charid() const;
  public:
  void clear_charid();
  ::PROTOBUF_NAMESPACE_ID::uint64 charid() const;
  void set_charid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_charid() const;
  void _internal_set_charid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 level = 3;
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 teamid = 4;
  bool has_teamid() const;
  private:
  bool _internal_has_teamid() const;
  public:
  void clear_teamid();
  ::PROTOBUF_NAMESPACE_ID::uint32 teamid() const;
  void set_teamid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_teamid() const;
  void _internal_set_teamid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 posid = 5;
  bool has_posid() const;
  private:
  bool _internal_has_posid() const;
  public:
  void clear_posid();
  ::PROTOBUF_NAMESPACE_ID::uint32 posid() const;
  void set_posid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_posid() const;
  void _internal_set_posid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:guildpk_msg.GuildPkMemberInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 charid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 level_;
  ::PROTOBUF_NAMESPACE_ID::uint32 teamid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 posid_;
  friend struct ::TableStruct_guildpk_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class GuildPkTeamInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:guildpk_msg.GuildPkTeamInfo) */ {
 public:
  GuildPkTeamInfo();
  virtual ~GuildPkTeamInfo();

  GuildPkTeamInfo(const GuildPkTeamInfo& from);
  GuildPkTeamInfo(GuildPkTeamInfo&& from) noexcept
    : GuildPkTeamInfo() {
    *this = ::std::move(from);
  }

  inline GuildPkTeamInfo& operator=(const GuildPkTeamInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GuildPkTeamInfo& operator=(GuildPkTeamInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GuildPkTeamInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GuildPkTeamInfo* internal_default_instance() {
    return reinterpret_cast<const GuildPkTeamInfo*>(
               &_GuildPkTeamInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GuildPkTeamInfo& a, GuildPkTeamInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GuildPkTeamInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GuildPkTeamInfo* New() const final {
    return CreateMaybeMessage<GuildPkTeamInfo>(nullptr);
  }

  GuildPkTeamInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GuildPkTeamInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GuildPkTeamInfo& from);
  void MergeFrom(const GuildPkTeamInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GuildPkTeamInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "guildpk_msg.GuildPkTeamInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_guildpk_5fmsg_2eproto);
    return ::descriptor_table_guildpk_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 3,
    kTeamidFieldNumber = 1,
    kUnlocklvFieldNumber = 2,
  };
  // repeated .guildpk_msg.GuildPkMemberInfo members = 3;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  ::guildpk_msg::GuildPkMemberInfo* mutable_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::guildpk_msg::GuildPkMemberInfo >*
      mutable_members();
  private:
  const ::guildpk_msg::GuildPkMemberInfo& _internal_members(int index) const;
  ::guildpk_msg::GuildPkMemberInfo* _internal_add_members();
  public:
  const ::guildpk_msg::GuildPkMemberInfo& members(int index) const;
  ::guildpk_msg::GuildPkMemberInfo* add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::guildpk_msg::GuildPkMemberInfo >&
      members() const;

  // optional uint32 teamid = 1;
  bool has_teamid() const;
  private:
  bool _internal_has_teamid() const;
  public:
  void clear_teamid();
  ::PROTOBUF_NAMESPACE_ID::uint32 teamid() const;
  void set_teamid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_teamid() const;
  void _internal_set_teamid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 unlocklv = 2;
  bool has_unlocklv() const;
  private:
  bool _internal_has_unlocklv() const;
  public:
  void clear_unlocklv();
  ::PROTOBUF_NAMESPACE_ID::uint32 unlocklv() const;
  void set_unlocklv(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_unlocklv() const;
  void _internal_set_unlocklv(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:guildpk_msg.GuildPkTeamInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::guildpk_msg::GuildPkMemberInfo > members_;
  ::PROTOBUF_NAMESPACE_ID::uint32 teamid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 unlocklv_;
  friend struct ::TableStruct_guildpk_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class GuildPkGuildInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:guildpk_msg.GuildPkGuildInfo) */ {
 public:
  GuildPkGuildInfo();
  virtual ~GuildPkGuildInfo();

  GuildPkGuildInfo(const GuildPkGuildInfo& from);
  GuildPkGuildInfo(GuildPkGuildInfo&& from) noexcept
    : GuildPkGuildInfo() {
    *this = ::std::move(from);
  }

  inline GuildPkGuildInfo& operator=(const GuildPkGuildInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GuildPkGuildInfo& operator=(GuildPkGuildInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GuildPkGuildInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GuildPkGuildInfo* internal_default_instance() {
    return reinterpret_cast<const GuildPkGuildInfo*>(
               &_GuildPkGuildInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GuildPkGuildInfo& a, GuildPkGuildInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GuildPkGuildInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GuildPkGuildInfo* New() const final {
    return CreateMaybeMessage<GuildPkGuildInfo>(nullptr);
  }

  GuildPkGuildInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GuildPkGuildInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GuildPkGuildInfo& from);
  void MergeFrom(const GuildPkGuildInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GuildPkGuildInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "guildpk_msg.GuildPkGuildInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_guildpk_5fmsg_2eproto);
    return ::descriptor_table_guildpk_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeaminfoFieldNumber = 4,
    kGuildnameFieldNumber = 2,
    kGuildidFieldNumber = 1,
    kTeamlimitFieldNumber = 3,
  };
  // repeated .guildpk_msg.GuildPkTeamInfo teaminfo = 4;
  int teaminfo_size() const;
  private:
  int _internal_teaminfo_size() const;
  public:
  void clear_teaminfo();
  ::guildpk_msg::GuildPkTeamInfo* mutable_teaminfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::guildpk_msg::GuildPkTeamInfo >*
      mutable_teaminfo();
  private:
  const ::guildpk_msg::GuildPkTeamInfo& _internal_teaminfo(int index) const;
  ::guildpk_msg::GuildPkTeamInfo* _internal_add_teaminfo();
  public:
  const ::guildpk_msg::GuildPkTeamInfo& teaminfo(int index) const;
  ::guildpk_msg::GuildPkTeamInfo* add_teaminfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::guildpk_msg::GuildPkTeamInfo >&
      teaminfo() const;

  // optional string guildname = 2;
  bool has_guildname() const;
  private:
  bool _internal_has_guildname() const;
  public:
  void clear_guildname();
  const std::string& guildname() const;
  void set_guildname(const std::string& value);
  void set_guildname(std::string&& value);
  void set_guildname(const char* value);
  void set_guildname(const char* value, size_t size);
  std::string* mutable_guildname();
  std::string* release_guildname();
  void set_allocated_guildname(std::string* guildname);
  private:
  const std::string& _internal_guildname() const;
  void _internal_set_guildname(const std::string& value);
  std::string* _internal_mutable_guildname();
  public:

  // optional uint64 guildid = 1;
  bool has_guildid() const;
  private:
  bool _internal_has_guildid() const;
  public:
  void clear_guildid();
  ::PROTOBUF_NAMESPACE_ID::uint64 guildid() const;
  void set_guildid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guildid() const;
  void _internal_set_guildid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 teamlimit = 3;
  bool has_teamlimit() const;
  private:
  bool _internal_has_teamlimit() const;
  public:
  void clear_teamlimit();
  ::PROTOBUF_NAMESPACE_ID::uint32 teamlimit() const;
  void set_teamlimit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_teamlimit() const;
  void _internal_set_teamlimit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:guildpk_msg.GuildPkGuildInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::guildpk_msg::GuildPkTeamInfo > teaminfo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr guildname_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guildid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 teamlimit_;
  friend struct ::TableStruct_guildpk_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class MSG_Ret_GuildPkInfo_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:guildpk_msg.MSG_Ret_GuildPkInfo_SC) */ {
 public:
  MSG_Ret_GuildPkInfo_SC();
  virtual ~MSG_Ret_GuildPkInfo_SC();

  MSG_Ret_GuildPkInfo_SC(const MSG_Ret_GuildPkInfo_SC& from);
  MSG_Ret_GuildPkInfo_SC(MSG_Ret_GuildPkInfo_SC&& from) noexcept
    : MSG_Ret_GuildPkInfo_SC() {
    *this = ::std::move(from);
  }

  inline MSG_Ret_GuildPkInfo_SC& operator=(const MSG_Ret_GuildPkInfo_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Ret_GuildPkInfo_SC& operator=(MSG_Ret_GuildPkInfo_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Ret_GuildPkInfo_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Ret_GuildPkInfo_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_Ret_GuildPkInfo_SC*>(
               &_MSG_Ret_GuildPkInfo_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MSG_Ret_GuildPkInfo_SC& a, MSG_Ret_GuildPkInfo_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Ret_GuildPkInfo_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Ret_GuildPkInfo_SC* New() const final {
    return CreateMaybeMessage<MSG_Ret_GuildPkInfo_SC>(nullptr);
  }

  MSG_Ret_GuildPkInfo_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Ret_GuildPkInfo_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Ret_GuildPkInfo_SC& from);
  void MergeFrom(const MSG_Ret_GuildPkInfo_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Ret_GuildPkInfo_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "guildpk_msg.MSG_Ret_GuildPkInfo_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_guildpk_5fmsg_2eproto);
    return ::descriptor_table_guildpk_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildinfoFieldNumber = 1,
  };
  // optional .guildpk_msg.GuildPkGuildInfo guildinfo = 1;
  bool has_guildinfo() const;
  private:
  bool _internal_has_guildinfo() const;
  public:
  void clear_guildinfo();
  const ::guildpk_msg::GuildPkGuildInfo& guildinfo() const;
  ::guildpk_msg::GuildPkGuildInfo* release_guildinfo();
  ::guildpk_msg::GuildPkGuildInfo* mutable_guildinfo();
  void set_allocated_guildinfo(::guildpk_msg::GuildPkGuildInfo* guildinfo);
  private:
  const ::guildpk_msg::GuildPkGuildInfo& _internal_guildinfo() const;
  ::guildpk_msg::GuildPkGuildInfo* _internal_mutable_guildinfo();
  public:

  // @@protoc_insertion_point(class_scope:guildpk_msg.MSG_Ret_GuildPkInfo_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::guildpk_msg::GuildPkGuildInfo* guildinfo_;
  friend struct ::TableStruct_guildpk_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class MSG_Req_GuildPkInfo_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:guildpk_msg.MSG_Req_GuildPkInfo_CS) */ {
 public:
  MSG_Req_GuildPkInfo_CS();
  virtual ~MSG_Req_GuildPkInfo_CS();

  MSG_Req_GuildPkInfo_CS(const MSG_Req_GuildPkInfo_CS& from);
  MSG_Req_GuildPkInfo_CS(MSG_Req_GuildPkInfo_CS&& from) noexcept
    : MSG_Req_GuildPkInfo_CS() {
    *this = ::std::move(from);
  }

  inline MSG_Req_GuildPkInfo_CS& operator=(const MSG_Req_GuildPkInfo_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Req_GuildPkInfo_CS& operator=(MSG_Req_GuildPkInfo_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Req_GuildPkInfo_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Req_GuildPkInfo_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_Req_GuildPkInfo_CS*>(
               &_MSG_Req_GuildPkInfo_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MSG_Req_GuildPkInfo_CS& a, MSG_Req_GuildPkInfo_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Req_GuildPkInfo_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Req_GuildPkInfo_CS* New() const final {
    return CreateMaybeMessage<MSG_Req_GuildPkInfo_CS>(nullptr);
  }

  MSG_Req_GuildPkInfo_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Req_GuildPkInfo_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Req_GuildPkInfo_CS& from);
  void MergeFrom(const MSG_Req_GuildPkInfo_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Req_GuildPkInfo_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "guildpk_msg.MSG_Req_GuildPkInfo_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_guildpk_5fmsg_2eproto);
    return ::descriptor_table_guildpk_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:guildpk_msg.MSG_Req_GuildPkInfo_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_guildpk_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class MSG_Req_GuildPkJoinTeam_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:guildpk_msg.MSG_Req_GuildPkJoinTeam_CS) */ {
 public:
  MSG_Req_GuildPkJoinTeam_CS();
  virtual ~MSG_Req_GuildPkJoinTeam_CS();

  MSG_Req_GuildPkJoinTeam_CS(const MSG_Req_GuildPkJoinTeam_CS& from);
  MSG_Req_GuildPkJoinTeam_CS(MSG_Req_GuildPkJoinTeam_CS&& from) noexcept
    : MSG_Req_GuildPkJoinTeam_CS() {
    *this = ::std::move(from);
  }

  inline MSG_Req_GuildPkJoinTeam_CS& operator=(const MSG_Req_GuildPkJoinTeam_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Req_GuildPkJoinTeam_CS& operator=(MSG_Req_GuildPkJoinTeam_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Req_GuildPkJoinTeam_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Req_GuildPkJoinTeam_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_Req_GuildPkJoinTeam_CS*>(
               &_MSG_Req_GuildPkJoinTeam_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MSG_Req_GuildPkJoinTeam_CS& a, MSG_Req_GuildPkJoinTeam_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Req_GuildPkJoinTeam_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Req_GuildPkJoinTeam_CS* New() const final {
    return CreateMaybeMessage<MSG_Req_GuildPkJoinTeam_CS>(nullptr);
  }

  MSG_Req_GuildPkJoinTeam_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Req_GuildPkJoinTeam_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Req_GuildPkJoinTeam_CS& from);
  void MergeFrom(const MSG_Req_GuildPkJoinTeam_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Req_GuildPkJoinTeam_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "guildpk_msg.MSG_Req_GuildPkJoinTeam_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_guildpk_5fmsg_2eproto);
    return ::descriptor_table_guildpk_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamidFieldNumber = 1,
    kPosidFieldNumber = 2,
  };
  // optional uint32 teamid = 1;
  bool has_teamid() const;
  private:
  bool _internal_has_teamid() const;
  public:
  void clear_teamid();
  ::PROTOBUF_NAMESPACE_ID::uint32 teamid() const;
  void set_teamid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_teamid() const;
  void _internal_set_teamid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 posid = 2;
  bool has_posid() const;
  private:
  bool _internal_has_posid() const;
  public:
  void clear_posid();
  ::PROTOBUF_NAMESPACE_ID::uint32 posid() const;
  void set_posid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_posid() const;
  void _internal_set_posid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:guildpk_msg.MSG_Req_GuildPkJoinTeam_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 teamid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 posid_;
  friend struct ::TableStruct_guildpk_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class MSG_Req_GuildPkQuitTeam_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:guildpk_msg.MSG_Req_GuildPkQuitTeam_CS) */ {
 public:
  MSG_Req_GuildPkQuitTeam_CS();
  virtual ~MSG_Req_GuildPkQuitTeam_CS();

  MSG_Req_GuildPkQuitTeam_CS(const MSG_Req_GuildPkQuitTeam_CS& from);
  MSG_Req_GuildPkQuitTeam_CS(MSG_Req_GuildPkQuitTeam_CS&& from) noexcept
    : MSG_Req_GuildPkQuitTeam_CS() {
    *this = ::std::move(from);
  }

  inline MSG_Req_GuildPkQuitTeam_CS& operator=(const MSG_Req_GuildPkQuitTeam_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Req_GuildPkQuitTeam_CS& operator=(MSG_Req_GuildPkQuitTeam_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Req_GuildPkQuitTeam_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Req_GuildPkQuitTeam_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_Req_GuildPkQuitTeam_CS*>(
               &_MSG_Req_GuildPkQuitTeam_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(MSG_Req_GuildPkQuitTeam_CS& a, MSG_Req_GuildPkQuitTeam_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Req_GuildPkQuitTeam_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Req_GuildPkQuitTeam_CS* New() const final {
    return CreateMaybeMessage<MSG_Req_GuildPkQuitTeam_CS>(nullptr);
  }

  MSG_Req_GuildPkQuitTeam_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Req_GuildPkQuitTeam_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Req_GuildPkQuitTeam_CS& from);
  void MergeFrom(const MSG_Req_GuildPkQuitTeam_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Req_GuildPkQuitTeam_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "guildpk_msg.MSG_Req_GuildPkQuitTeam_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_guildpk_5fmsg_2eproto);
    return ::descriptor_table_guildpk_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:guildpk_msg.MSG_Req_GuildPkQuitTeam_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_guildpk_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class MSG_Refresh_GuildPkMemberInfo_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:guildpk_msg.MSG_Refresh_GuildPkMemberInfo_SC) */ {
 public:
  MSG_Refresh_GuildPkMemberInfo_SC();
  virtual ~MSG_Refresh_GuildPkMemberInfo_SC();

  MSG_Refresh_GuildPkMemberInfo_SC(const MSG_Refresh_GuildPkMemberInfo_SC& from);
  MSG_Refresh_GuildPkMemberInfo_SC(MSG_Refresh_GuildPkMemberInfo_SC&& from) noexcept
    : MSG_Refresh_GuildPkMemberInfo_SC() {
    *this = ::std::move(from);
  }

  inline MSG_Refresh_GuildPkMemberInfo_SC& operator=(const MSG_Refresh_GuildPkMemberInfo_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Refresh_GuildPkMemberInfo_SC& operator=(MSG_Refresh_GuildPkMemberInfo_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Refresh_GuildPkMemberInfo_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Refresh_GuildPkMemberInfo_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_Refresh_GuildPkMemberInfo_SC*>(
               &_MSG_Refresh_GuildPkMemberInfo_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(MSG_Refresh_GuildPkMemberInfo_SC& a, MSG_Refresh_GuildPkMemberInfo_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Refresh_GuildPkMemberInfo_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Refresh_GuildPkMemberInfo_SC* New() const final {
    return CreateMaybeMessage<MSG_Refresh_GuildPkMemberInfo_SC>(nullptr);
  }

  MSG_Refresh_GuildPkMemberInfo_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Refresh_GuildPkMemberInfo_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Refresh_GuildPkMemberInfo_SC& from);
  void MergeFrom(const MSG_Refresh_GuildPkMemberInfo_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Refresh_GuildPkMemberInfo_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "guildpk_msg.MSG_Refresh_GuildPkMemberInfo_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_guildpk_5fmsg_2eproto);
    return ::descriptor_table_guildpk_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemberFieldNumber = 1,
  };
  // optional .guildpk_msg.GuildPkMemberInfo member = 1;
  bool has_member() const;
  private:
  bool _internal_has_member() const;
  public:
  void clear_member();
  const ::guildpk_msg::GuildPkMemberInfo& member() const;
  ::guildpk_msg::GuildPkMemberInfo* release_member();
  ::guildpk_msg::GuildPkMemberInfo* mutable_member();
  void set_allocated_member(::guildpk_msg::GuildPkMemberInfo* member);
  private:
  const ::guildpk_msg::GuildPkMemberInfo& _internal_member() const;
  ::guildpk_msg::GuildPkMemberInfo* _internal_mutable_member();
  public:

  // @@protoc_insertion_point(class_scope:guildpk_msg.MSG_Refresh_GuildPkMemberInfo_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::guildpk_msg::GuildPkMemberInfo* member_;
  friend struct ::TableStruct_guildpk_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class MSG_Req_GuildPkRank_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:guildpk_msg.MSG_Req_GuildPkRank_CS) */ {
 public:
  MSG_Req_GuildPkRank_CS();
  virtual ~MSG_Req_GuildPkRank_CS();

  MSG_Req_GuildPkRank_CS(const MSG_Req_GuildPkRank_CS& from);
  MSG_Req_GuildPkRank_CS(MSG_Req_GuildPkRank_CS&& from) noexcept
    : MSG_Req_GuildPkRank_CS() {
    *this = ::std::move(from);
  }

  inline MSG_Req_GuildPkRank_CS& operator=(const MSG_Req_GuildPkRank_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Req_GuildPkRank_CS& operator=(MSG_Req_GuildPkRank_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Req_GuildPkRank_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Req_GuildPkRank_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_Req_GuildPkRank_CS*>(
               &_MSG_Req_GuildPkRank_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(MSG_Req_GuildPkRank_CS& a, MSG_Req_GuildPkRank_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Req_GuildPkRank_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Req_GuildPkRank_CS* New() const final {
    return CreateMaybeMessage<MSG_Req_GuildPkRank_CS>(nullptr);
  }

  MSG_Req_GuildPkRank_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Req_GuildPkRank_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Req_GuildPkRank_CS& from);
  void MergeFrom(const MSG_Req_GuildPkRank_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Req_GuildPkRank_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "guildpk_msg.MSG_Req_GuildPkRank_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_guildpk_5fmsg_2eproto);
    return ::descriptor_table_guildpk_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:guildpk_msg.MSG_Req_GuildPkRank_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_guildpk_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class GuildPkGuildScore :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:guildpk_msg.GuildPkGuildScore) */ {
 public:
  GuildPkGuildScore();
  virtual ~GuildPkGuildScore();

  GuildPkGuildScore(const GuildPkGuildScore& from);
  GuildPkGuildScore(GuildPkGuildScore&& from) noexcept
    : GuildPkGuildScore() {
    *this = ::std::move(from);
  }

  inline GuildPkGuildScore& operator=(const GuildPkGuildScore& from) {
    CopyFrom(from);
    return *this;
  }
  inline GuildPkGuildScore& operator=(GuildPkGuildScore&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GuildPkGuildScore& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GuildPkGuildScore* internal_default_instance() {
    return reinterpret_cast<const GuildPkGuildScore*>(
               &_GuildPkGuildScore_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GuildPkGuildScore& a, GuildPkGuildScore& b) {
    a.Swap(&b);
  }
  inline void Swap(GuildPkGuildScore* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GuildPkGuildScore* New() const final {
    return CreateMaybeMessage<GuildPkGuildScore>(nullptr);
  }

  GuildPkGuildScore* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GuildPkGuildScore>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GuildPkGuildScore& from);
  void MergeFrom(const GuildPkGuildScore& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GuildPkGuildScore* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "guildpk_msg.GuildPkGuildScore";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_guildpk_5fmsg_2eproto);
    return ::descriptor_table_guildpk_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildnameFieldNumber = 3,
    kGuildidFieldNumber = 2,
    kRankFieldNumber = 1,
    kScoreFieldNumber = 4,
  };
  // optional string guildname = 3;
  bool has_guildname() const;
  private:
  bool _internal_has_guildname() const;
  public:
  void clear_guildname();
  const std::string& guildname() const;
  void set_guildname(const std::string& value);
  void set_guildname(std::string&& value);
  void set_guildname(const char* value);
  void set_guildname(const char* value, size_t size);
  std::string* mutable_guildname();
  std::string* release_guildname();
  void set_allocated_guildname(std::string* guildname);
  private:
  const std::string& _internal_guildname() const;
  void _internal_set_guildname(const std::string& value);
  std::string* _internal_mutable_guildname();
  public:

  // optional uint64 guildid = 2;
  bool has_guildid() const;
  private:
  bool _internal_has_guildid() const;
  public:
  void clear_guildid();
  ::PROTOBUF_NAMESPACE_ID::uint64 guildid() const;
  void set_guildid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guildid() const;
  void _internal_set_guildid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 rank = 1;
  bool has_rank() const;
  private:
  bool _internal_has_rank() const;
  public:
  void clear_rank();
  ::PROTOBUF_NAMESPACE_ID::uint32 rank() const;
  void set_rank(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rank() const;
  void _internal_set_rank(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 score = 4;
  bool has_score() const;
  private:
  bool _internal_has_score() const;
  public:
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::uint32 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:guildpk_msg.GuildPkGuildScore)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr guildname_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guildid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rank_;
  ::PROTOBUF_NAMESPACE_ID::uint32 score_;
  friend struct ::TableStruct_guildpk_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class MSG_Ret_GuildPkRank_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:guildpk_msg.MSG_Ret_GuildPkRank_SC) */ {
 public:
  MSG_Ret_GuildPkRank_SC();
  virtual ~MSG_Ret_GuildPkRank_SC();

  MSG_Ret_GuildPkRank_SC(const MSG_Ret_GuildPkRank_SC& from);
  MSG_Ret_GuildPkRank_SC(MSG_Ret_GuildPkRank_SC&& from) noexcept
    : MSG_Ret_GuildPkRank_SC() {
    *this = ::std::move(from);
  }

  inline MSG_Ret_GuildPkRank_SC& operator=(const MSG_Ret_GuildPkRank_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Ret_GuildPkRank_SC& operator=(MSG_Ret_GuildPkRank_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Ret_GuildPkRank_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Ret_GuildPkRank_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_Ret_GuildPkRank_SC*>(
               &_MSG_Ret_GuildPkRank_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(MSG_Ret_GuildPkRank_SC& a, MSG_Ret_GuildPkRank_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Ret_GuildPkRank_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Ret_GuildPkRank_SC* New() const final {
    return CreateMaybeMessage<MSG_Ret_GuildPkRank_SC>(nullptr);
  }

  MSG_Ret_GuildPkRank_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Ret_GuildPkRank_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Ret_GuildPkRank_SC& from);
  void MergeFrom(const MSG_Ret_GuildPkRank_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Ret_GuildPkRank_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "guildpk_msg.MSG_Ret_GuildPkRank_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_guildpk_5fmsg_2eproto);
    return ::descriptor_table_guildpk_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScorerankFieldNumber = 1,
  };
  // repeated .guildpk_msg.GuildPkGuildScore scorerank = 1;
  int scorerank_size() const;
  private:
  int _internal_scorerank_size() const;
  public:
  void clear_scorerank();
  ::guildpk_msg::GuildPkGuildScore* mutable_scorerank(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::guildpk_msg::GuildPkGuildScore >*
      mutable_scorerank();
  private:
  const ::guildpk_msg::GuildPkGuildScore& _internal_scorerank(int index) const;
  ::guildpk_msg::GuildPkGuildScore* _internal_add_scorerank();
  public:
  const ::guildpk_msg::GuildPkGuildScore& scorerank(int index) const;
  ::guildpk_msg::GuildPkGuildScore* add_scorerank();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::guildpk_msg::GuildPkGuildScore >&
      scorerank() const;

  // @@protoc_insertion_point(class_scope:guildpk_msg.MSG_Ret_GuildPkRank_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::guildpk_msg::GuildPkGuildScore > scorerank_;
  friend struct ::TableStruct_guildpk_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class MSG_Req_GuildPkWinList_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:guildpk_msg.MSG_Req_GuildPkWinList_CS) */ {
 public:
  MSG_Req_GuildPkWinList_CS();
  virtual ~MSG_Req_GuildPkWinList_CS();

  MSG_Req_GuildPkWinList_CS(const MSG_Req_GuildPkWinList_CS& from);
  MSG_Req_GuildPkWinList_CS(MSG_Req_GuildPkWinList_CS&& from) noexcept
    : MSG_Req_GuildPkWinList_CS() {
    *this = ::std::move(from);
  }

  inline MSG_Req_GuildPkWinList_CS& operator=(const MSG_Req_GuildPkWinList_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Req_GuildPkWinList_CS& operator=(MSG_Req_GuildPkWinList_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Req_GuildPkWinList_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Req_GuildPkWinList_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_Req_GuildPkWinList_CS*>(
               &_MSG_Req_GuildPkWinList_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(MSG_Req_GuildPkWinList_CS& a, MSG_Req_GuildPkWinList_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Req_GuildPkWinList_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Req_GuildPkWinList_CS* New() const final {
    return CreateMaybeMessage<MSG_Req_GuildPkWinList_CS>(nullptr);
  }

  MSG_Req_GuildPkWinList_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Req_GuildPkWinList_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Req_GuildPkWinList_CS& from);
  void MergeFrom(const MSG_Req_GuildPkWinList_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Req_GuildPkWinList_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "guildpk_msg.MSG_Req_GuildPkWinList_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_guildpk_5fmsg_2eproto);
    return ::descriptor_table_guildpk_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:guildpk_msg.MSG_Req_GuildPkWinList_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_guildpk_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class GuildPkWinInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:guildpk_msg.GuildPkWinInfo) */ {
 public:
  GuildPkWinInfo();
  virtual ~GuildPkWinInfo();

  GuildPkWinInfo(const GuildPkWinInfo& from);
  GuildPkWinInfo(GuildPkWinInfo&& from) noexcept
    : GuildPkWinInfo() {
    *this = ::std::move(from);
  }

  inline GuildPkWinInfo& operator=(const GuildPkWinInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GuildPkWinInfo& operator=(GuildPkWinInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GuildPkWinInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GuildPkWinInfo* internal_default_instance() {
    return reinterpret_cast<const GuildPkWinInfo*>(
               &_GuildPkWinInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(GuildPkWinInfo& a, GuildPkWinInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GuildPkWinInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GuildPkWinInfo* New() const final {
    return CreateMaybeMessage<GuildPkWinInfo>(nullptr);
  }

  GuildPkWinInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GuildPkWinInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GuildPkWinInfo& from);
  void MergeFrom(const GuildPkWinInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GuildPkWinInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "guildpk_msg.GuildPkWinInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_guildpk_5fmsg_2eproto);
    return ::descriptor_table_guildpk_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWinGuildNameFieldNumber = 2,
    kWinLeaderNameFieldNumber = 3,
    kUidFieldNumber = 1,
  };
  // optional string win_guild_name = 2;
  bool has_win_guild_name() const;
  private:
  bool _internal_has_win_guild_name() const;
  public:
  void clear_win_guild_name();
  const std::string& win_guild_name() const;
  void set_win_guild_name(const std::string& value);
  void set_win_guild_name(std::string&& value);
  void set_win_guild_name(const char* value);
  void set_win_guild_name(const char* value, size_t size);
  std::string* mutable_win_guild_name();
  std::string* release_win_guild_name();
  void set_allocated_win_guild_name(std::string* win_guild_name);
  private:
  const std::string& _internal_win_guild_name() const;
  void _internal_set_win_guild_name(const std::string& value);
  std::string* _internal_mutable_win_guild_name();
  public:

  // optional string win_leader_name = 3;
  bool has_win_leader_name() const;
  private:
  bool _internal_has_win_leader_name() const;
  public:
  void clear_win_leader_name();
  const std::string& win_leader_name() const;
  void set_win_leader_name(const std::string& value);
  void set_win_leader_name(std::string&& value);
  void set_win_leader_name(const char* value);
  void set_win_leader_name(const char* value, size_t size);
  std::string* mutable_win_leader_name();
  std::string* release_win_leader_name();
  void set_allocated_win_leader_name(std::string* win_leader_name);
  private:
  const std::string& _internal_win_leader_name() const;
  void _internal_set_win_leader_name(const std::string& value);
  std::string* _internal_mutable_win_leader_name();
  public:

  // optional uint64 uid = 1;
  bool has_uid() const;
  private:
  bool _internal_has_uid() const;
  public:
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint64 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:guildpk_msg.GuildPkWinInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr win_guild_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr win_leader_name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 uid_;
  friend struct ::TableStruct_guildpk_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class MSG_Ret_GuildPkWinList_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:guildpk_msg.MSG_Ret_GuildPkWinList_SC) */ {
 public:
  MSG_Ret_GuildPkWinList_SC();
  virtual ~MSG_Ret_GuildPkWinList_SC();

  MSG_Ret_GuildPkWinList_SC(const MSG_Ret_GuildPkWinList_SC& from);
  MSG_Ret_GuildPkWinList_SC(MSG_Ret_GuildPkWinList_SC&& from) noexcept
    : MSG_Ret_GuildPkWinList_SC() {
    *this = ::std::move(from);
  }

  inline MSG_Ret_GuildPkWinList_SC& operator=(const MSG_Ret_GuildPkWinList_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Ret_GuildPkWinList_SC& operator=(MSG_Ret_GuildPkWinList_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Ret_GuildPkWinList_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Ret_GuildPkWinList_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_Ret_GuildPkWinList_SC*>(
               &_MSG_Ret_GuildPkWinList_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(MSG_Ret_GuildPkWinList_SC& a, MSG_Ret_GuildPkWinList_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Ret_GuildPkWinList_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Ret_GuildPkWinList_SC* New() const final {
    return CreateMaybeMessage<MSG_Ret_GuildPkWinList_SC>(nullptr);
  }

  MSG_Ret_GuildPkWinList_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Ret_GuildPkWinList_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Ret_GuildPkWinList_SC& from);
  void MergeFrom(const MSG_Ret_GuildPkWinList_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Ret_GuildPkWinList_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "guildpk_msg.MSG_Ret_GuildPkWinList_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_guildpk_5fmsg_2eproto);
    return ::descriptor_table_guildpk_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWinersFieldNumber = 1,
  };
  // repeated .guildpk_msg.GuildPkWinInfo winers = 1;
  int winers_size() const;
  private:
  int _internal_winers_size() const;
  public:
  void clear_winers();
  ::guildpk_msg::GuildPkWinInfo* mutable_winers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::guildpk_msg::GuildPkWinInfo >*
      mutable_winers();
  private:
  const ::guildpk_msg::GuildPkWinInfo& _internal_winers(int index) const;
  ::guildpk_msg::GuildPkWinInfo* _internal_add_winers();
  public:
  const ::guildpk_msg::GuildPkWinInfo& winers(int index) const;
  ::guildpk_msg::GuildPkWinInfo* add_winers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::guildpk_msg::GuildPkWinInfo >&
      winers() const;

  // @@protoc_insertion_point(class_scope:guildpk_msg.MSG_Ret_GuildPkWinList_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::guildpk_msg::GuildPkWinInfo > winers_;
  friend struct ::TableStruct_guildpk_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class MSG_Ret_GuildPkMatchResult_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:guildpk_msg.MSG_Ret_GuildPkMatchResult_SC) */ {
 public:
  MSG_Ret_GuildPkMatchResult_SC();
  virtual ~MSG_Ret_GuildPkMatchResult_SC();

  MSG_Ret_GuildPkMatchResult_SC(const MSG_Ret_GuildPkMatchResult_SC& from);
  MSG_Ret_GuildPkMatchResult_SC(MSG_Ret_GuildPkMatchResult_SC&& from) noexcept
    : MSG_Ret_GuildPkMatchResult_SC() {
    *this = ::std::move(from);
  }

  inline MSG_Ret_GuildPkMatchResult_SC& operator=(const MSG_Ret_GuildPkMatchResult_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Ret_GuildPkMatchResult_SC& operator=(MSG_Ret_GuildPkMatchResult_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Ret_GuildPkMatchResult_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Ret_GuildPkMatchResult_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_Ret_GuildPkMatchResult_SC*>(
               &_MSG_Ret_GuildPkMatchResult_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(MSG_Ret_GuildPkMatchResult_SC& a, MSG_Ret_GuildPkMatchResult_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Ret_GuildPkMatchResult_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Ret_GuildPkMatchResult_SC* New() const final {
    return CreateMaybeMessage<MSG_Ret_GuildPkMatchResult_SC>(nullptr);
  }

  MSG_Ret_GuildPkMatchResult_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Ret_GuildPkMatchResult_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Ret_GuildPkMatchResult_SC& from);
  void MergeFrom(const MSG_Ret_GuildPkMatchResult_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Ret_GuildPkMatchResult_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "guildpk_msg.MSG_Ret_GuildPkMatchResult_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_guildpk_5fmsg_2eproto);
    return ::descriptor_table_guildpk_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRetcodeFieldNumber = 1,
    kLefttimeFieldNumber = 2,
  };
  // optional uint32 retcode = 1;
  bool has_retcode() const;
  private:
  bool _internal_has_retcode() const;
  public:
  void clear_retcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 retcode() const;
  void set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_retcode() const;
  void _internal_set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 lefttime = 2;
  bool has_lefttime() const;
  private:
  bool _internal_has_lefttime() const;
  public:
  void clear_lefttime();
  ::PROTOBUF_NAMESPACE_ID::uint32 lefttime() const;
  void set_lefttime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lefttime() const;
  void _internal_set_lefttime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:guildpk_msg.MSG_Ret_GuildPkMatchResult_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 retcode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lefttime_;
  friend struct ::TableStruct_guildpk_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class MSG_Req_EnterGuildPk_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:guildpk_msg.MSG_Req_EnterGuildPk_CS) */ {
 public:
  MSG_Req_EnterGuildPk_CS();
  virtual ~MSG_Req_EnterGuildPk_CS();

  MSG_Req_EnterGuildPk_CS(const MSG_Req_EnterGuildPk_CS& from);
  MSG_Req_EnterGuildPk_CS(MSG_Req_EnterGuildPk_CS&& from) noexcept
    : MSG_Req_EnterGuildPk_CS() {
    *this = ::std::move(from);
  }

  inline MSG_Req_EnterGuildPk_CS& operator=(const MSG_Req_EnterGuildPk_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Req_EnterGuildPk_CS& operator=(MSG_Req_EnterGuildPk_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Req_EnterGuildPk_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Req_EnterGuildPk_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_Req_EnterGuildPk_CS*>(
               &_MSG_Req_EnterGuildPk_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(MSG_Req_EnterGuildPk_CS& a, MSG_Req_EnterGuildPk_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Req_EnterGuildPk_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Req_EnterGuildPk_CS* New() const final {
    return CreateMaybeMessage<MSG_Req_EnterGuildPk_CS>(nullptr);
  }

  MSG_Req_EnterGuildPk_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Req_EnterGuildPk_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Req_EnterGuildPk_CS& from);
  void MergeFrom(const MSG_Req_EnterGuildPk_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Req_EnterGuildPk_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "guildpk_msg.MSG_Req_EnterGuildPk_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_guildpk_5fmsg_2eproto);
    return ::descriptor_table_guildpk_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:guildpk_msg.MSG_Req_EnterGuildPk_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_guildpk_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class MSG_Ret_GuildPkCountDown_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:guildpk_msg.MSG_Ret_GuildPkCountDown_SC) */ {
 public:
  MSG_Ret_GuildPkCountDown_SC();
  virtual ~MSG_Ret_GuildPkCountDown_SC();

  MSG_Ret_GuildPkCountDown_SC(const MSG_Ret_GuildPkCountDown_SC& from);
  MSG_Ret_GuildPkCountDown_SC(MSG_Ret_GuildPkCountDown_SC&& from) noexcept
    : MSG_Ret_GuildPkCountDown_SC() {
    *this = ::std::move(from);
  }

  inline MSG_Ret_GuildPkCountDown_SC& operator=(const MSG_Ret_GuildPkCountDown_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Ret_GuildPkCountDown_SC& operator=(MSG_Ret_GuildPkCountDown_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Ret_GuildPkCountDown_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Ret_GuildPkCountDown_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_Ret_GuildPkCountDown_SC*>(
               &_MSG_Ret_GuildPkCountDown_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(MSG_Ret_GuildPkCountDown_SC& a, MSG_Ret_GuildPkCountDown_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Ret_GuildPkCountDown_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Ret_GuildPkCountDown_SC* New() const final {
    return CreateMaybeMessage<MSG_Ret_GuildPkCountDown_SC>(nullptr);
  }

  MSG_Ret_GuildPkCountDown_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Ret_GuildPkCountDown_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Ret_GuildPkCountDown_SC& from);
  void MergeFrom(const MSG_Ret_GuildPkCountDown_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Ret_GuildPkCountDown_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "guildpk_msg.MSG_Ret_GuildPkCountDown_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_guildpk_5fmsg_2eproto);
    return ::descriptor_table_guildpk_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLefttimeFieldNumber = 1,
  };
  // optional uint32 lefttime = 1;
  bool has_lefttime() const;
  private:
  bool _internal_has_lefttime() const;
  public:
  void clear_lefttime();
  ::PROTOBUF_NAMESPACE_ID::uint32 lefttime() const;
  void set_lefttime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lefttime() const;
  void _internal_set_lefttime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:guildpk_msg.MSG_Ret_GuildPkCountDown_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lefttime_;
  friend struct ::TableStruct_guildpk_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class MSG_Ret_GuildPkFight_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:guildpk_msg.MSG_Ret_GuildPkFight_SC) */ {
 public:
  MSG_Ret_GuildPkFight_SC();
  virtual ~MSG_Ret_GuildPkFight_SC();

  MSG_Ret_GuildPkFight_SC(const MSG_Ret_GuildPkFight_SC& from);
  MSG_Ret_GuildPkFight_SC(MSG_Ret_GuildPkFight_SC&& from) noexcept
    : MSG_Ret_GuildPkFight_SC() {
    *this = ::std::move(from);
  }

  inline MSG_Ret_GuildPkFight_SC& operator=(const MSG_Ret_GuildPkFight_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Ret_GuildPkFight_SC& operator=(MSG_Ret_GuildPkFight_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Ret_GuildPkFight_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Ret_GuildPkFight_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_Ret_GuildPkFight_SC*>(
               &_MSG_Ret_GuildPkFight_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(MSG_Ret_GuildPkFight_SC& a, MSG_Ret_GuildPkFight_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Ret_GuildPkFight_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Ret_GuildPkFight_SC* New() const final {
    return CreateMaybeMessage<MSG_Ret_GuildPkFight_SC>(nullptr);
  }

  MSG_Ret_GuildPkFight_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Ret_GuildPkFight_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Ret_GuildPkFight_SC& from);
  void MergeFrom(const MSG_Ret_GuildPkFight_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Ret_GuildPkFight_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "guildpk_msg.MSG_Ret_GuildPkFight_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_guildpk_5fmsg_2eproto);
    return ::descriptor_table_guildpk_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLefttimeFieldNumber = 1,
  };
  // optional uint32 lefttime = 1;
  bool has_lefttime() const;
  private:
  bool _internal_has_lefttime() const;
  public:
  void clear_lefttime();
  ::PROTOBUF_NAMESPACE_ID::uint32 lefttime() const;
  void set_lefttime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lefttime() const;
  void _internal_set_lefttime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:guildpk_msg.MSG_Ret_GuildPkFight_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lefttime_;
  friend struct ::TableStruct_guildpk_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class realtime_guildteam_info :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:guildpk_msg.realtime_guildteam_info) */ {
 public:
  realtime_guildteam_info();
  virtual ~realtime_guildteam_info();

  realtime_guildteam_info(const realtime_guildteam_info& from);
  realtime_guildteam_info(realtime_guildteam_info&& from) noexcept
    : realtime_guildteam_info() {
    *this = ::std::move(from);
  }

  inline realtime_guildteam_info& operator=(const realtime_guildteam_info& from) {
    CopyFrom(from);
    return *this;
  }
  inline realtime_guildteam_info& operator=(realtime_guildteam_info&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const realtime_guildteam_info& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const realtime_guildteam_info* internal_default_instance() {
    return reinterpret_cast<const realtime_guildteam_info*>(
               &_realtime_guildteam_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(realtime_guildteam_info& a, realtime_guildteam_info& b) {
    a.Swap(&b);
  }
  inline void Swap(realtime_guildteam_info* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline realtime_guildteam_info* New() const final {
    return CreateMaybeMessage<realtime_guildteam_info>(nullptr);
  }

  realtime_guildteam_info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<realtime_guildteam_info>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const realtime_guildteam_info& from);
  void MergeFrom(const realtime_guildteam_info& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(realtime_guildteam_info* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "guildpk_msg.realtime_guildteam_info";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_guildpk_5fmsg_2eproto);
    return ::descriptor_table_guildpk_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildnameFieldNumber = 2,
    kGuildidFieldNumber = 1,
    kLeftnumFieldNumber = 3,
  };
  // optional string guildname = 2;
  bool has_guildname() const;
  private:
  bool _internal_has_guildname() const;
  public:
  void clear_guildname();
  const std::string& guildname() const;
  void set_guildname(const std::string& value);
  void set_guildname(std::string&& value);
  void set_guildname(const char* value);
  void set_guildname(const char* value, size_t size);
  std::string* mutable_guildname();
  std::string* release_guildname();
  void set_allocated_guildname(std::string* guildname);
  private:
  const std::string& _internal_guildname() const;
  void _internal_set_guildname(const std::string& value);
  std::string* _internal_mutable_guildname();
  public:

  // optional uint64 guildid = 1;
  bool has_guildid() const;
  private:
  bool _internal_has_guildid() const;
  public:
  void clear_guildid();
  ::PROTOBUF_NAMESPACE_ID::uint64 guildid() const;
  void set_guildid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guildid() const;
  void _internal_set_guildid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 leftnum = 3;
  bool has_leftnum() const;
  private:
  bool _internal_has_leftnum() const;
  public:
  void clear_leftnum();
  ::PROTOBUF_NAMESPACE_ID::uint32 leftnum() const;
  void set_leftnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_leftnum() const;
  void _internal_set_leftnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:guildpk_msg.realtime_guildteam_info)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr guildname_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guildid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 leftnum_;
  friend struct ::TableStruct_guildpk_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class MSG_RealTime_GuildPkTeam_Rank_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:guildpk_msg.MSG_RealTime_GuildPkTeam_Rank_SC) */ {
 public:
  MSG_RealTime_GuildPkTeam_Rank_SC();
  virtual ~MSG_RealTime_GuildPkTeam_Rank_SC();

  MSG_RealTime_GuildPkTeam_Rank_SC(const MSG_RealTime_GuildPkTeam_Rank_SC& from);
  MSG_RealTime_GuildPkTeam_Rank_SC(MSG_RealTime_GuildPkTeam_Rank_SC&& from) noexcept
    : MSG_RealTime_GuildPkTeam_Rank_SC() {
    *this = ::std::move(from);
  }

  inline MSG_RealTime_GuildPkTeam_Rank_SC& operator=(const MSG_RealTime_GuildPkTeam_Rank_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_RealTime_GuildPkTeam_Rank_SC& operator=(MSG_RealTime_GuildPkTeam_Rank_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_RealTime_GuildPkTeam_Rank_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_RealTime_GuildPkTeam_Rank_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_RealTime_GuildPkTeam_Rank_SC*>(
               &_MSG_RealTime_GuildPkTeam_Rank_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(MSG_RealTime_GuildPkTeam_Rank_SC& a, MSG_RealTime_GuildPkTeam_Rank_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_RealTime_GuildPkTeam_Rank_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_RealTime_GuildPkTeam_Rank_SC* New() const final {
    return CreateMaybeMessage<MSG_RealTime_GuildPkTeam_Rank_SC>(nullptr);
  }

  MSG_RealTime_GuildPkTeam_Rank_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_RealTime_GuildPkTeam_Rank_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_RealTime_GuildPkTeam_Rank_SC& from);
  void MergeFrom(const MSG_RealTime_GuildPkTeam_Rank_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_RealTime_GuildPkTeam_Rank_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "guildpk_msg.MSG_RealTime_GuildPkTeam_Rank_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_guildpk_5fmsg_2eproto);
    return ::descriptor_table_guildpk_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamrankFieldNumber = 1,
  };
  // repeated .guildpk_msg.realtime_guildteam_info teamrank = 1;
  int teamrank_size() const;
  private:
  int _internal_teamrank_size() const;
  public:
  void clear_teamrank();
  ::guildpk_msg::realtime_guildteam_info* mutable_teamrank(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::guildpk_msg::realtime_guildteam_info >*
      mutable_teamrank();
  private:
  const ::guildpk_msg::realtime_guildteam_info& _internal_teamrank(int index) const;
  ::guildpk_msg::realtime_guildteam_info* _internal_add_teamrank();
  public:
  const ::guildpk_msg::realtime_guildteam_info& teamrank(int index) const;
  ::guildpk_msg::realtime_guildteam_info* add_teamrank();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::guildpk_msg::realtime_guildteam_info >&
      teamrank() const;

  // @@protoc_insertion_point(class_scope:guildpk_msg.MSG_RealTime_GuildPkTeam_Rank_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::guildpk_msg::realtime_guildteam_info > teamrank_;
  friend struct ::TableStruct_guildpk_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class finalresult_guildteam_info :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:guildpk_msg.finalresult_guildteam_info) */ {
 public:
  finalresult_guildteam_info();
  virtual ~finalresult_guildteam_info();

  finalresult_guildteam_info(const finalresult_guildteam_info& from);
  finalresult_guildteam_info(finalresult_guildteam_info&& from) noexcept
    : finalresult_guildteam_info() {
    *this = ::std::move(from);
  }

  inline finalresult_guildteam_info& operator=(const finalresult_guildteam_info& from) {
    CopyFrom(from);
    return *this;
  }
  inline finalresult_guildteam_info& operator=(finalresult_guildteam_info&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const finalresult_guildteam_info& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const finalresult_guildteam_info* internal_default_instance() {
    return reinterpret_cast<const finalresult_guildteam_info*>(
               &_finalresult_guildteam_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(finalresult_guildteam_info& a, finalresult_guildteam_info& b) {
    a.Swap(&b);
  }
  inline void Swap(finalresult_guildteam_info* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline finalresult_guildteam_info* New() const final {
    return CreateMaybeMessage<finalresult_guildteam_info>(nullptr);
  }

  finalresult_guildteam_info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<finalresult_guildteam_info>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const finalresult_guildteam_info& from);
  void MergeFrom(const finalresult_guildteam_info& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(finalresult_guildteam_info* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "guildpk_msg.finalresult_guildteam_info";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_guildpk_5fmsg_2eproto);
    return ::descriptor_table_guildpk_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kRankFieldNumber = 1,
    kKillnumFieldNumber = 3,
    kTotaldmgFieldNumber = 4,
  };
  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional uint32 rank = 1;
  bool has_rank() const;
  private:
  bool _internal_has_rank() const;
  public:
  void clear_rank();
  ::PROTOBUF_NAMESPACE_ID::uint32 rank() const;
  void set_rank(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rank() const;
  void _internal_set_rank(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 killnum = 3;
  bool has_killnum() const;
  private:
  bool _internal_has_killnum() const;
  public:
  void clear_killnum();
  ::PROTOBUF_NAMESPACE_ID::uint32 killnum() const;
  void set_killnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_killnum() const;
  void _internal_set_killnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 totaldmg = 4;
  bool has_totaldmg() const;
  private:
  bool _internal_has_totaldmg() const;
  public:
  void clear_totaldmg();
  ::PROTOBUF_NAMESPACE_ID::uint32 totaldmg() const;
  void set_totaldmg(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_totaldmg() const;
  void _internal_set_totaldmg(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:guildpk_msg.finalresult_guildteam_info)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rank_;
  ::PROTOBUF_NAMESPACE_ID::uint32 killnum_;
  ::PROTOBUF_NAMESPACE_ID::uint32 totaldmg_;
  friend struct ::TableStruct_guildpk_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class MSG_GuildPk_FinalResult_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:guildpk_msg.MSG_GuildPk_FinalResult_SC) */ {
 public:
  MSG_GuildPk_FinalResult_SC();
  virtual ~MSG_GuildPk_FinalResult_SC();

  MSG_GuildPk_FinalResult_SC(const MSG_GuildPk_FinalResult_SC& from);
  MSG_GuildPk_FinalResult_SC(MSG_GuildPk_FinalResult_SC&& from) noexcept
    : MSG_GuildPk_FinalResult_SC() {
    *this = ::std::move(from);
  }

  inline MSG_GuildPk_FinalResult_SC& operator=(const MSG_GuildPk_FinalResult_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_GuildPk_FinalResult_SC& operator=(MSG_GuildPk_FinalResult_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_GuildPk_FinalResult_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_GuildPk_FinalResult_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_GuildPk_FinalResult_SC*>(
               &_MSG_GuildPk_FinalResult_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(MSG_GuildPk_FinalResult_SC& a, MSG_GuildPk_FinalResult_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_GuildPk_FinalResult_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_GuildPk_FinalResult_SC* New() const final {
    return CreateMaybeMessage<MSG_GuildPk_FinalResult_SC>(nullptr);
  }

  MSG_GuildPk_FinalResult_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_GuildPk_FinalResult_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_GuildPk_FinalResult_SC& from);
  void MergeFrom(const MSG_GuildPk_FinalResult_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_GuildPk_FinalResult_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "guildpk_msg.MSG_GuildPk_FinalResult_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_guildpk_5fmsg_2eproto);
    return ::descriptor_table_guildpk_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamlistFieldNumber = 2,
    kIswinFieldNumber = 1,
  };
  // repeated .guildpk_msg.finalresult_guildteam_info teamlist = 2;
  int teamlist_size() const;
  private:
  int _internal_teamlist_size() const;
  public:
  void clear_teamlist();
  ::guildpk_msg::finalresult_guildteam_info* mutable_teamlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::guildpk_msg::finalresult_guildteam_info >*
      mutable_teamlist();
  private:
  const ::guildpk_msg::finalresult_guildteam_info& _internal_teamlist(int index) const;
  ::guildpk_msg::finalresult_guildteam_info* _internal_add_teamlist();
  public:
  const ::guildpk_msg::finalresult_guildteam_info& teamlist(int index) const;
  ::guildpk_msg::finalresult_guildteam_info* add_teamlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::guildpk_msg::finalresult_guildteam_info >&
      teamlist() const;

  // optional bool iswin = 1;
  bool has_iswin() const;
  private:
  bool _internal_has_iswin() const;
  public:
  void clear_iswin();
  bool iswin() const;
  void set_iswin(bool value);
  private:
  bool _internal_iswin() const;
  void _internal_set_iswin(bool value);
  public:

  // @@protoc_insertion_point(class_scope:guildpk_msg.MSG_GuildPk_FinalResult_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::guildpk_msg::finalresult_guildteam_info > teamlist_;
  bool iswin_;
  friend struct ::TableStruct_guildpk_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class MSG_Ret_GuildPkEnroll_Finish_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:guildpk_msg.MSG_Ret_GuildPkEnroll_Finish_SC) */ {
 public:
  MSG_Ret_GuildPkEnroll_Finish_SC();
  virtual ~MSG_Ret_GuildPkEnroll_Finish_SC();

  MSG_Ret_GuildPkEnroll_Finish_SC(const MSG_Ret_GuildPkEnroll_Finish_SC& from);
  MSG_Ret_GuildPkEnroll_Finish_SC(MSG_Ret_GuildPkEnroll_Finish_SC&& from) noexcept
    : MSG_Ret_GuildPkEnroll_Finish_SC() {
    *this = ::std::move(from);
  }

  inline MSG_Ret_GuildPkEnroll_Finish_SC& operator=(const MSG_Ret_GuildPkEnroll_Finish_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Ret_GuildPkEnroll_Finish_SC& operator=(MSG_Ret_GuildPkEnroll_Finish_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Ret_GuildPkEnroll_Finish_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Ret_GuildPkEnroll_Finish_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_Ret_GuildPkEnroll_Finish_SC*>(
               &_MSG_Ret_GuildPkEnroll_Finish_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(MSG_Ret_GuildPkEnroll_Finish_SC& a, MSG_Ret_GuildPkEnroll_Finish_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Ret_GuildPkEnroll_Finish_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Ret_GuildPkEnroll_Finish_SC* New() const final {
    return CreateMaybeMessage<MSG_Ret_GuildPkEnroll_Finish_SC>(nullptr);
  }

  MSG_Ret_GuildPkEnroll_Finish_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Ret_GuildPkEnroll_Finish_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Ret_GuildPkEnroll_Finish_SC& from);
  void MergeFrom(const MSG_Ret_GuildPkEnroll_Finish_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Ret_GuildPkEnroll_Finish_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "guildpk_msg.MSG_Ret_GuildPkEnroll_Finish_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_guildpk_5fmsg_2eproto);
    return ::descriptor_table_guildpk_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:guildpk_msg.MSG_Ret_GuildPkEnroll_Finish_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_guildpk_5fmsg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MSG_Req_GuildPkEnroll_CS

// -------------------------------------------------------------------

// MSG_Ret_GuildPkEnroll_SC

// optional bool result = 1;
inline bool MSG_Ret_GuildPkEnroll_SC::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_Ret_GuildPkEnroll_SC::has_result() const {
  return _internal_has_result();
}
inline void MSG_Ret_GuildPkEnroll_SC::clear_result() {
  result_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool MSG_Ret_GuildPkEnroll_SC::_internal_result() const {
  return result_;
}
inline bool MSG_Ret_GuildPkEnroll_SC::result() const {
  // @@protoc_insertion_point(field_get:guildpk_msg.MSG_Ret_GuildPkEnroll_SC.result)
  return _internal_result();
}
inline void MSG_Ret_GuildPkEnroll_SC::_internal_set_result(bool value) {
  _has_bits_[0] |= 0x00000001u;
  result_ = value;
}
inline void MSG_Ret_GuildPkEnroll_SC::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:guildpk_msg.MSG_Ret_GuildPkEnroll_SC.result)
}

// -------------------------------------------------------------------

// GuildPkMemberInfo

// optional uint64 charid = 1;
inline bool GuildPkMemberInfo::_internal_has_charid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GuildPkMemberInfo::has_charid() const {
  return _internal_has_charid();
}
inline void GuildPkMemberInfo::clear_charid() {
  charid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GuildPkMemberInfo::_internal_charid() const {
  return charid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GuildPkMemberInfo::charid() const {
  // @@protoc_insertion_point(field_get:guildpk_msg.GuildPkMemberInfo.charid)
  return _internal_charid();
}
inline void GuildPkMemberInfo::_internal_set_charid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  charid_ = value;
}
inline void GuildPkMemberInfo::set_charid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_charid(value);
  // @@protoc_insertion_point(field_set:guildpk_msg.GuildPkMemberInfo.charid)
}

// optional string name = 2;
inline bool GuildPkMemberInfo::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GuildPkMemberInfo::has_name() const {
  return _internal_has_name();
}
inline void GuildPkMemberInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GuildPkMemberInfo::name() const {
  // @@protoc_insertion_point(field_get:guildpk_msg.GuildPkMemberInfo.name)
  return _internal_name();
}
inline void GuildPkMemberInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:guildpk_msg.GuildPkMemberInfo.name)
}
inline std::string* GuildPkMemberInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:guildpk_msg.GuildPkMemberInfo.name)
  return _internal_mutable_name();
}
inline const std::string& GuildPkMemberInfo::_internal_name() const {
  return name_.GetNoArena();
}
inline void GuildPkMemberInfo::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GuildPkMemberInfo::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:guildpk_msg.GuildPkMemberInfo.name)
}
inline void GuildPkMemberInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:guildpk_msg.GuildPkMemberInfo.name)
}
inline void GuildPkMemberInfo::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:guildpk_msg.GuildPkMemberInfo.name)
}
inline std::string* GuildPkMemberInfo::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GuildPkMemberInfo::release_name() {
  // @@protoc_insertion_point(field_release:guildpk_msg.GuildPkMemberInfo.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GuildPkMemberInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:guildpk_msg.GuildPkMemberInfo.name)
}

// optional uint32 level = 3;
inline bool GuildPkMemberInfo::_internal_has_level() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GuildPkMemberInfo::has_level() const {
  return _internal_has_level();
}
inline void GuildPkMemberInfo::clear_level() {
  level_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GuildPkMemberInfo::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GuildPkMemberInfo::level() const {
  // @@protoc_insertion_point(field_get:guildpk_msg.GuildPkMemberInfo.level)
  return _internal_level();
}
inline void GuildPkMemberInfo::_internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  level_ = value;
}
inline void GuildPkMemberInfo::set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:guildpk_msg.GuildPkMemberInfo.level)
}

// optional uint32 teamid = 4;
inline bool GuildPkMemberInfo::_internal_has_teamid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GuildPkMemberInfo::has_teamid() const {
  return _internal_has_teamid();
}
inline void GuildPkMemberInfo::clear_teamid() {
  teamid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GuildPkMemberInfo::_internal_teamid() const {
  return teamid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GuildPkMemberInfo::teamid() const {
  // @@protoc_insertion_point(field_get:guildpk_msg.GuildPkMemberInfo.teamid)
  return _internal_teamid();
}
inline void GuildPkMemberInfo::_internal_set_teamid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  teamid_ = value;
}
inline void GuildPkMemberInfo::set_teamid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_teamid(value);
  // @@protoc_insertion_point(field_set:guildpk_msg.GuildPkMemberInfo.teamid)
}

// optional uint32 posid = 5;
inline bool GuildPkMemberInfo::_internal_has_posid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GuildPkMemberInfo::has_posid() const {
  return _internal_has_posid();
}
inline void GuildPkMemberInfo::clear_posid() {
  posid_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GuildPkMemberInfo::_internal_posid() const {
  return posid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GuildPkMemberInfo::posid() const {
  // @@protoc_insertion_point(field_get:guildpk_msg.GuildPkMemberInfo.posid)
  return _internal_posid();
}
inline void GuildPkMemberInfo::_internal_set_posid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  posid_ = value;
}
inline void GuildPkMemberInfo::set_posid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_posid(value);
  // @@protoc_insertion_point(field_set:guildpk_msg.GuildPkMemberInfo.posid)
}

// -------------------------------------------------------------------

// GuildPkTeamInfo

// optional uint32 teamid = 1;
inline bool GuildPkTeamInfo::_internal_has_teamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GuildPkTeamInfo::has_teamid() const {
  return _internal_has_teamid();
}
inline void GuildPkTeamInfo::clear_teamid() {
  teamid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GuildPkTeamInfo::_internal_teamid() const {
  return teamid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GuildPkTeamInfo::teamid() const {
  // @@protoc_insertion_point(field_get:guildpk_msg.GuildPkTeamInfo.teamid)
  return _internal_teamid();
}
inline void GuildPkTeamInfo::_internal_set_teamid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  teamid_ = value;
}
inline void GuildPkTeamInfo::set_teamid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_teamid(value);
  // @@protoc_insertion_point(field_set:guildpk_msg.GuildPkTeamInfo.teamid)
}

// optional uint32 unlocklv = 2;
inline bool GuildPkTeamInfo::_internal_has_unlocklv() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GuildPkTeamInfo::has_unlocklv() const {
  return _internal_has_unlocklv();
}
inline void GuildPkTeamInfo::clear_unlocklv() {
  unlocklv_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GuildPkTeamInfo::_internal_unlocklv() const {
  return unlocklv_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GuildPkTeamInfo::unlocklv() const {
  // @@protoc_insertion_point(field_get:guildpk_msg.GuildPkTeamInfo.unlocklv)
  return _internal_unlocklv();
}
inline void GuildPkTeamInfo::_internal_set_unlocklv(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  unlocklv_ = value;
}
inline void GuildPkTeamInfo::set_unlocklv(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_unlocklv(value);
  // @@protoc_insertion_point(field_set:guildpk_msg.GuildPkTeamInfo.unlocklv)
}

// repeated .guildpk_msg.GuildPkMemberInfo members = 3;
inline int GuildPkTeamInfo::_internal_members_size() const {
  return members_.size();
}
inline int GuildPkTeamInfo::members_size() const {
  return _internal_members_size();
}
inline void GuildPkTeamInfo::clear_members() {
  members_.Clear();
}
inline ::guildpk_msg::GuildPkMemberInfo* GuildPkTeamInfo::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:guildpk_msg.GuildPkTeamInfo.members)
  return members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::guildpk_msg::GuildPkMemberInfo >*
GuildPkTeamInfo::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:guildpk_msg.GuildPkTeamInfo.members)
  return &members_;
}
inline const ::guildpk_msg::GuildPkMemberInfo& GuildPkTeamInfo::_internal_members(int index) const {
  return members_.Get(index);
}
inline const ::guildpk_msg::GuildPkMemberInfo& GuildPkTeamInfo::members(int index) const {
  // @@protoc_insertion_point(field_get:guildpk_msg.GuildPkTeamInfo.members)
  return _internal_members(index);
}
inline ::guildpk_msg::GuildPkMemberInfo* GuildPkTeamInfo::_internal_add_members() {
  return members_.Add();
}
inline ::guildpk_msg::GuildPkMemberInfo* GuildPkTeamInfo::add_members() {
  // @@protoc_insertion_point(field_add:guildpk_msg.GuildPkTeamInfo.members)
  return _internal_add_members();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::guildpk_msg::GuildPkMemberInfo >&
GuildPkTeamInfo::members() const {
  // @@protoc_insertion_point(field_list:guildpk_msg.GuildPkTeamInfo.members)
  return members_;
}

// -------------------------------------------------------------------

// GuildPkGuildInfo

// optional uint64 guildid = 1;
inline bool GuildPkGuildInfo::_internal_has_guildid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GuildPkGuildInfo::has_guildid() const {
  return _internal_has_guildid();
}
inline void GuildPkGuildInfo::clear_guildid() {
  guildid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GuildPkGuildInfo::_internal_guildid() const {
  return guildid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GuildPkGuildInfo::guildid() const {
  // @@protoc_insertion_point(field_get:guildpk_msg.GuildPkGuildInfo.guildid)
  return _internal_guildid();
}
inline void GuildPkGuildInfo::_internal_set_guildid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  guildid_ = value;
}
inline void GuildPkGuildInfo::set_guildid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guildid(value);
  // @@protoc_insertion_point(field_set:guildpk_msg.GuildPkGuildInfo.guildid)
}

// optional string guildname = 2;
inline bool GuildPkGuildInfo::_internal_has_guildname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GuildPkGuildInfo::has_guildname() const {
  return _internal_has_guildname();
}
inline void GuildPkGuildInfo::clear_guildname() {
  guildname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GuildPkGuildInfo::guildname() const {
  // @@protoc_insertion_point(field_get:guildpk_msg.GuildPkGuildInfo.guildname)
  return _internal_guildname();
}
inline void GuildPkGuildInfo::set_guildname(const std::string& value) {
  _internal_set_guildname(value);
  // @@protoc_insertion_point(field_set:guildpk_msg.GuildPkGuildInfo.guildname)
}
inline std::string* GuildPkGuildInfo::mutable_guildname() {
  // @@protoc_insertion_point(field_mutable:guildpk_msg.GuildPkGuildInfo.guildname)
  return _internal_mutable_guildname();
}
inline const std::string& GuildPkGuildInfo::_internal_guildname() const {
  return guildname_.GetNoArena();
}
inline void GuildPkGuildInfo::_internal_set_guildname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  guildname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GuildPkGuildInfo::set_guildname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  guildname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:guildpk_msg.GuildPkGuildInfo.guildname)
}
inline void GuildPkGuildInfo::set_guildname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  guildname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:guildpk_msg.GuildPkGuildInfo.guildname)
}
inline void GuildPkGuildInfo::set_guildname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  guildname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:guildpk_msg.GuildPkGuildInfo.guildname)
}
inline std::string* GuildPkGuildInfo::_internal_mutable_guildname() {
  _has_bits_[0] |= 0x00000001u;
  return guildname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GuildPkGuildInfo::release_guildname() {
  // @@protoc_insertion_point(field_release:guildpk_msg.GuildPkGuildInfo.guildname)
  if (!_internal_has_guildname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return guildname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GuildPkGuildInfo::set_allocated_guildname(std::string* guildname) {
  if (guildname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  guildname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), guildname);
  // @@protoc_insertion_point(field_set_allocated:guildpk_msg.GuildPkGuildInfo.guildname)
}

// optional uint32 teamlimit = 3;
inline bool GuildPkGuildInfo::_internal_has_teamlimit() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GuildPkGuildInfo::has_teamlimit() const {
  return _internal_has_teamlimit();
}
inline void GuildPkGuildInfo::clear_teamlimit() {
  teamlimit_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GuildPkGuildInfo::_internal_teamlimit() const {
  return teamlimit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GuildPkGuildInfo::teamlimit() const {
  // @@protoc_insertion_point(field_get:guildpk_msg.GuildPkGuildInfo.teamlimit)
  return _internal_teamlimit();
}
inline void GuildPkGuildInfo::_internal_set_teamlimit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  teamlimit_ = value;
}
inline void GuildPkGuildInfo::set_teamlimit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_teamlimit(value);
  // @@protoc_insertion_point(field_set:guildpk_msg.GuildPkGuildInfo.teamlimit)
}

// repeated .guildpk_msg.GuildPkTeamInfo teaminfo = 4;
inline int GuildPkGuildInfo::_internal_teaminfo_size() const {
  return teaminfo_.size();
}
inline int GuildPkGuildInfo::teaminfo_size() const {
  return _internal_teaminfo_size();
}
inline void GuildPkGuildInfo::clear_teaminfo() {
  teaminfo_.Clear();
}
inline ::guildpk_msg::GuildPkTeamInfo* GuildPkGuildInfo::mutable_teaminfo(int index) {
  // @@protoc_insertion_point(field_mutable:guildpk_msg.GuildPkGuildInfo.teaminfo)
  return teaminfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::guildpk_msg::GuildPkTeamInfo >*
GuildPkGuildInfo::mutable_teaminfo() {
  // @@protoc_insertion_point(field_mutable_list:guildpk_msg.GuildPkGuildInfo.teaminfo)
  return &teaminfo_;
}
inline const ::guildpk_msg::GuildPkTeamInfo& GuildPkGuildInfo::_internal_teaminfo(int index) const {
  return teaminfo_.Get(index);
}
inline const ::guildpk_msg::GuildPkTeamInfo& GuildPkGuildInfo::teaminfo(int index) const {
  // @@protoc_insertion_point(field_get:guildpk_msg.GuildPkGuildInfo.teaminfo)
  return _internal_teaminfo(index);
}
inline ::guildpk_msg::GuildPkTeamInfo* GuildPkGuildInfo::_internal_add_teaminfo() {
  return teaminfo_.Add();
}
inline ::guildpk_msg::GuildPkTeamInfo* GuildPkGuildInfo::add_teaminfo() {
  // @@protoc_insertion_point(field_add:guildpk_msg.GuildPkGuildInfo.teaminfo)
  return _internal_add_teaminfo();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::guildpk_msg::GuildPkTeamInfo >&
GuildPkGuildInfo::teaminfo() const {
  // @@protoc_insertion_point(field_list:guildpk_msg.GuildPkGuildInfo.teaminfo)
  return teaminfo_;
}

// -------------------------------------------------------------------

// MSG_Ret_GuildPkInfo_SC

// optional .guildpk_msg.GuildPkGuildInfo guildinfo = 1;
inline bool MSG_Ret_GuildPkInfo_SC::_internal_has_guildinfo() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || guildinfo_ != nullptr);
  return value;
}
inline bool MSG_Ret_GuildPkInfo_SC::has_guildinfo() const {
  return _internal_has_guildinfo();
}
inline void MSG_Ret_GuildPkInfo_SC::clear_guildinfo() {
  if (guildinfo_ != nullptr) guildinfo_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::guildpk_msg::GuildPkGuildInfo& MSG_Ret_GuildPkInfo_SC::_internal_guildinfo() const {
  const ::guildpk_msg::GuildPkGuildInfo* p = guildinfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::guildpk_msg::GuildPkGuildInfo*>(
      &::guildpk_msg::_GuildPkGuildInfo_default_instance_);
}
inline const ::guildpk_msg::GuildPkGuildInfo& MSG_Ret_GuildPkInfo_SC::guildinfo() const {
  // @@protoc_insertion_point(field_get:guildpk_msg.MSG_Ret_GuildPkInfo_SC.guildinfo)
  return _internal_guildinfo();
}
inline ::guildpk_msg::GuildPkGuildInfo* MSG_Ret_GuildPkInfo_SC::release_guildinfo() {
  // @@protoc_insertion_point(field_release:guildpk_msg.MSG_Ret_GuildPkInfo_SC.guildinfo)
  _has_bits_[0] &= ~0x00000001u;
  ::guildpk_msg::GuildPkGuildInfo* temp = guildinfo_;
  guildinfo_ = nullptr;
  return temp;
}
inline ::guildpk_msg::GuildPkGuildInfo* MSG_Ret_GuildPkInfo_SC::_internal_mutable_guildinfo() {
  _has_bits_[0] |= 0x00000001u;
  if (guildinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::guildpk_msg::GuildPkGuildInfo>(GetArenaNoVirtual());
    guildinfo_ = p;
  }
  return guildinfo_;
}
inline ::guildpk_msg::GuildPkGuildInfo* MSG_Ret_GuildPkInfo_SC::mutable_guildinfo() {
  // @@protoc_insertion_point(field_mutable:guildpk_msg.MSG_Ret_GuildPkInfo_SC.guildinfo)
  return _internal_mutable_guildinfo();
}
inline void MSG_Ret_GuildPkInfo_SC::set_allocated_guildinfo(::guildpk_msg::GuildPkGuildInfo* guildinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete guildinfo_;
  }
  if (guildinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      guildinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guildinfo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  guildinfo_ = guildinfo;
  // @@protoc_insertion_point(field_set_allocated:guildpk_msg.MSG_Ret_GuildPkInfo_SC.guildinfo)
}

// -------------------------------------------------------------------

// MSG_Req_GuildPkInfo_CS

// -------------------------------------------------------------------

// MSG_Req_GuildPkJoinTeam_CS

// optional uint32 teamid = 1;
inline bool MSG_Req_GuildPkJoinTeam_CS::_internal_has_teamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_Req_GuildPkJoinTeam_CS::has_teamid() const {
  return _internal_has_teamid();
}
inline void MSG_Req_GuildPkJoinTeam_CS::clear_teamid() {
  teamid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Req_GuildPkJoinTeam_CS::_internal_teamid() const {
  return teamid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Req_GuildPkJoinTeam_CS::teamid() const {
  // @@protoc_insertion_point(field_get:guildpk_msg.MSG_Req_GuildPkJoinTeam_CS.teamid)
  return _internal_teamid();
}
inline void MSG_Req_GuildPkJoinTeam_CS::_internal_set_teamid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  teamid_ = value;
}
inline void MSG_Req_GuildPkJoinTeam_CS::set_teamid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_teamid(value);
  // @@protoc_insertion_point(field_set:guildpk_msg.MSG_Req_GuildPkJoinTeam_CS.teamid)
}

// optional uint32 posid = 2;
inline bool MSG_Req_GuildPkJoinTeam_CS::_internal_has_posid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_Req_GuildPkJoinTeam_CS::has_posid() const {
  return _internal_has_posid();
}
inline void MSG_Req_GuildPkJoinTeam_CS::clear_posid() {
  posid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Req_GuildPkJoinTeam_CS::_internal_posid() const {
  return posid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Req_GuildPkJoinTeam_CS::posid() const {
  // @@protoc_insertion_point(field_get:guildpk_msg.MSG_Req_GuildPkJoinTeam_CS.posid)
  return _internal_posid();
}
inline void MSG_Req_GuildPkJoinTeam_CS::_internal_set_posid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  posid_ = value;
}
inline void MSG_Req_GuildPkJoinTeam_CS::set_posid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_posid(value);
  // @@protoc_insertion_point(field_set:guildpk_msg.MSG_Req_GuildPkJoinTeam_CS.posid)
}

// -------------------------------------------------------------------

// MSG_Req_GuildPkQuitTeam_CS

// -------------------------------------------------------------------

// MSG_Refresh_GuildPkMemberInfo_SC

// optional .guildpk_msg.GuildPkMemberInfo member = 1;
inline bool MSG_Refresh_GuildPkMemberInfo_SC::_internal_has_member() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || member_ != nullptr);
  return value;
}
inline bool MSG_Refresh_GuildPkMemberInfo_SC::has_member() const {
  return _internal_has_member();
}
inline void MSG_Refresh_GuildPkMemberInfo_SC::clear_member() {
  if (member_ != nullptr) member_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::guildpk_msg::GuildPkMemberInfo& MSG_Refresh_GuildPkMemberInfo_SC::_internal_member() const {
  const ::guildpk_msg::GuildPkMemberInfo* p = member_;
  return p != nullptr ? *p : *reinterpret_cast<const ::guildpk_msg::GuildPkMemberInfo*>(
      &::guildpk_msg::_GuildPkMemberInfo_default_instance_);
}
inline const ::guildpk_msg::GuildPkMemberInfo& MSG_Refresh_GuildPkMemberInfo_SC::member() const {
  // @@protoc_insertion_point(field_get:guildpk_msg.MSG_Refresh_GuildPkMemberInfo_SC.member)
  return _internal_member();
}
inline ::guildpk_msg::GuildPkMemberInfo* MSG_Refresh_GuildPkMemberInfo_SC::release_member() {
  // @@protoc_insertion_point(field_release:guildpk_msg.MSG_Refresh_GuildPkMemberInfo_SC.member)
  _has_bits_[0] &= ~0x00000001u;
  ::guildpk_msg::GuildPkMemberInfo* temp = member_;
  member_ = nullptr;
  return temp;
}
inline ::guildpk_msg::GuildPkMemberInfo* MSG_Refresh_GuildPkMemberInfo_SC::_internal_mutable_member() {
  _has_bits_[0] |= 0x00000001u;
  if (member_ == nullptr) {
    auto* p = CreateMaybeMessage<::guildpk_msg::GuildPkMemberInfo>(GetArenaNoVirtual());
    member_ = p;
  }
  return member_;
}
inline ::guildpk_msg::GuildPkMemberInfo* MSG_Refresh_GuildPkMemberInfo_SC::mutable_member() {
  // @@protoc_insertion_point(field_mutable:guildpk_msg.MSG_Refresh_GuildPkMemberInfo_SC.member)
  return _internal_mutable_member();
}
inline void MSG_Refresh_GuildPkMemberInfo_SC::set_allocated_member(::guildpk_msg::GuildPkMemberInfo* member) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete member_;
  }
  if (member) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      member = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, member, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  member_ = member;
  // @@protoc_insertion_point(field_set_allocated:guildpk_msg.MSG_Refresh_GuildPkMemberInfo_SC.member)
}

// -------------------------------------------------------------------

// MSG_Req_GuildPkRank_CS

// -------------------------------------------------------------------

// GuildPkGuildScore

// optional uint32 rank = 1;
inline bool GuildPkGuildScore::_internal_has_rank() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GuildPkGuildScore::has_rank() const {
  return _internal_has_rank();
}
inline void GuildPkGuildScore::clear_rank() {
  rank_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GuildPkGuildScore::_internal_rank() const {
  return rank_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GuildPkGuildScore::rank() const {
  // @@protoc_insertion_point(field_get:guildpk_msg.GuildPkGuildScore.rank)
  return _internal_rank();
}
inline void GuildPkGuildScore::_internal_set_rank(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  rank_ = value;
}
inline void GuildPkGuildScore::set_rank(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:guildpk_msg.GuildPkGuildScore.rank)
}

// optional uint64 guildid = 2;
inline bool GuildPkGuildScore::_internal_has_guildid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GuildPkGuildScore::has_guildid() const {
  return _internal_has_guildid();
}
inline void GuildPkGuildScore::clear_guildid() {
  guildid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GuildPkGuildScore::_internal_guildid() const {
  return guildid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GuildPkGuildScore::guildid() const {
  // @@protoc_insertion_point(field_get:guildpk_msg.GuildPkGuildScore.guildid)
  return _internal_guildid();
}
inline void GuildPkGuildScore::_internal_set_guildid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  guildid_ = value;
}
inline void GuildPkGuildScore::set_guildid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guildid(value);
  // @@protoc_insertion_point(field_set:guildpk_msg.GuildPkGuildScore.guildid)
}

// optional string guildname = 3;
inline bool GuildPkGuildScore::_internal_has_guildname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GuildPkGuildScore::has_guildname() const {
  return _internal_has_guildname();
}
inline void GuildPkGuildScore::clear_guildname() {
  guildname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GuildPkGuildScore::guildname() const {
  // @@protoc_insertion_point(field_get:guildpk_msg.GuildPkGuildScore.guildname)
  return _internal_guildname();
}
inline void GuildPkGuildScore::set_guildname(const std::string& value) {
  _internal_set_guildname(value);
  // @@protoc_insertion_point(field_set:guildpk_msg.GuildPkGuildScore.guildname)
}
inline std::string* GuildPkGuildScore::mutable_guildname() {
  // @@protoc_insertion_point(field_mutable:guildpk_msg.GuildPkGuildScore.guildname)
  return _internal_mutable_guildname();
}
inline const std::string& GuildPkGuildScore::_internal_guildname() const {
  return guildname_.GetNoArena();
}
inline void GuildPkGuildScore::_internal_set_guildname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  guildname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GuildPkGuildScore::set_guildname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  guildname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:guildpk_msg.GuildPkGuildScore.guildname)
}
inline void GuildPkGuildScore::set_guildname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  guildname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:guildpk_msg.GuildPkGuildScore.guildname)
}
inline void GuildPkGuildScore::set_guildname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  guildname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:guildpk_msg.GuildPkGuildScore.guildname)
}
inline std::string* GuildPkGuildScore::_internal_mutable_guildname() {
  _has_bits_[0] |= 0x00000001u;
  return guildname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GuildPkGuildScore::release_guildname() {
  // @@protoc_insertion_point(field_release:guildpk_msg.GuildPkGuildScore.guildname)
  if (!_internal_has_guildname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return guildname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GuildPkGuildScore::set_allocated_guildname(std::string* guildname) {
  if (guildname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  guildname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), guildname);
  // @@protoc_insertion_point(field_set_allocated:guildpk_msg.GuildPkGuildScore.guildname)
}

// optional uint32 score = 4;
inline bool GuildPkGuildScore::_internal_has_score() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GuildPkGuildScore::has_score() const {
  return _internal_has_score();
}
inline void GuildPkGuildScore::clear_score() {
  score_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GuildPkGuildScore::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GuildPkGuildScore::score() const {
  // @@protoc_insertion_point(field_get:guildpk_msg.GuildPkGuildScore.score)
  return _internal_score();
}
inline void GuildPkGuildScore::_internal_set_score(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  score_ = value;
}
inline void GuildPkGuildScore::set_score(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:guildpk_msg.GuildPkGuildScore.score)
}

// -------------------------------------------------------------------

// MSG_Ret_GuildPkRank_SC

// repeated .guildpk_msg.GuildPkGuildScore scorerank = 1;
inline int MSG_Ret_GuildPkRank_SC::_internal_scorerank_size() const {
  return scorerank_.size();
}
inline int MSG_Ret_GuildPkRank_SC::scorerank_size() const {
  return _internal_scorerank_size();
}
inline void MSG_Ret_GuildPkRank_SC::clear_scorerank() {
  scorerank_.Clear();
}
inline ::guildpk_msg::GuildPkGuildScore* MSG_Ret_GuildPkRank_SC::mutable_scorerank(int index) {
  // @@protoc_insertion_point(field_mutable:guildpk_msg.MSG_Ret_GuildPkRank_SC.scorerank)
  return scorerank_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::guildpk_msg::GuildPkGuildScore >*
MSG_Ret_GuildPkRank_SC::mutable_scorerank() {
  // @@protoc_insertion_point(field_mutable_list:guildpk_msg.MSG_Ret_GuildPkRank_SC.scorerank)
  return &scorerank_;
}
inline const ::guildpk_msg::GuildPkGuildScore& MSG_Ret_GuildPkRank_SC::_internal_scorerank(int index) const {
  return scorerank_.Get(index);
}
inline const ::guildpk_msg::GuildPkGuildScore& MSG_Ret_GuildPkRank_SC::scorerank(int index) const {
  // @@protoc_insertion_point(field_get:guildpk_msg.MSG_Ret_GuildPkRank_SC.scorerank)
  return _internal_scorerank(index);
}
inline ::guildpk_msg::GuildPkGuildScore* MSG_Ret_GuildPkRank_SC::_internal_add_scorerank() {
  return scorerank_.Add();
}
inline ::guildpk_msg::GuildPkGuildScore* MSG_Ret_GuildPkRank_SC::add_scorerank() {
  // @@protoc_insertion_point(field_add:guildpk_msg.MSG_Ret_GuildPkRank_SC.scorerank)
  return _internal_add_scorerank();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::guildpk_msg::GuildPkGuildScore >&
MSG_Ret_GuildPkRank_SC::scorerank() const {
  // @@protoc_insertion_point(field_list:guildpk_msg.MSG_Ret_GuildPkRank_SC.scorerank)
  return scorerank_;
}

// -------------------------------------------------------------------

// MSG_Req_GuildPkWinList_CS

// -------------------------------------------------------------------

// GuildPkWinInfo

// optional uint64 uid = 1;
inline bool GuildPkWinInfo::_internal_has_uid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GuildPkWinInfo::has_uid() const {
  return _internal_has_uid();
}
inline void GuildPkWinInfo::clear_uid() {
  uid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GuildPkWinInfo::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GuildPkWinInfo::uid() const {
  // @@protoc_insertion_point(field_get:guildpk_msg.GuildPkWinInfo.uid)
  return _internal_uid();
}
inline void GuildPkWinInfo::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  uid_ = value;
}
inline void GuildPkWinInfo::set_uid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:guildpk_msg.GuildPkWinInfo.uid)
}

// optional string win_guild_name = 2;
inline bool GuildPkWinInfo::_internal_has_win_guild_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GuildPkWinInfo::has_win_guild_name() const {
  return _internal_has_win_guild_name();
}
inline void GuildPkWinInfo::clear_win_guild_name() {
  win_guild_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GuildPkWinInfo::win_guild_name() const {
  // @@protoc_insertion_point(field_get:guildpk_msg.GuildPkWinInfo.win_guild_name)
  return _internal_win_guild_name();
}
inline void GuildPkWinInfo::set_win_guild_name(const std::string& value) {
  _internal_set_win_guild_name(value);
  // @@protoc_insertion_point(field_set:guildpk_msg.GuildPkWinInfo.win_guild_name)
}
inline std::string* GuildPkWinInfo::mutable_win_guild_name() {
  // @@protoc_insertion_point(field_mutable:guildpk_msg.GuildPkWinInfo.win_guild_name)
  return _internal_mutable_win_guild_name();
}
inline const std::string& GuildPkWinInfo::_internal_win_guild_name() const {
  return win_guild_name_.GetNoArena();
}
inline void GuildPkWinInfo::_internal_set_win_guild_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  win_guild_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GuildPkWinInfo::set_win_guild_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  win_guild_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:guildpk_msg.GuildPkWinInfo.win_guild_name)
}
inline void GuildPkWinInfo::set_win_guild_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  win_guild_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:guildpk_msg.GuildPkWinInfo.win_guild_name)
}
inline void GuildPkWinInfo::set_win_guild_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  win_guild_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:guildpk_msg.GuildPkWinInfo.win_guild_name)
}
inline std::string* GuildPkWinInfo::_internal_mutable_win_guild_name() {
  _has_bits_[0] |= 0x00000001u;
  return win_guild_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GuildPkWinInfo::release_win_guild_name() {
  // @@protoc_insertion_point(field_release:guildpk_msg.GuildPkWinInfo.win_guild_name)
  if (!_internal_has_win_guild_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return win_guild_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GuildPkWinInfo::set_allocated_win_guild_name(std::string* win_guild_name) {
  if (win_guild_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  win_guild_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), win_guild_name);
  // @@protoc_insertion_point(field_set_allocated:guildpk_msg.GuildPkWinInfo.win_guild_name)
}

// optional string win_leader_name = 3;
inline bool GuildPkWinInfo::_internal_has_win_leader_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GuildPkWinInfo::has_win_leader_name() const {
  return _internal_has_win_leader_name();
}
inline void GuildPkWinInfo::clear_win_leader_name() {
  win_leader_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GuildPkWinInfo::win_leader_name() const {
  // @@protoc_insertion_point(field_get:guildpk_msg.GuildPkWinInfo.win_leader_name)
  return _internal_win_leader_name();
}
inline void GuildPkWinInfo::set_win_leader_name(const std::string& value) {
  _internal_set_win_leader_name(value);
  // @@protoc_insertion_point(field_set:guildpk_msg.GuildPkWinInfo.win_leader_name)
}
inline std::string* GuildPkWinInfo::mutable_win_leader_name() {
  // @@protoc_insertion_point(field_mutable:guildpk_msg.GuildPkWinInfo.win_leader_name)
  return _internal_mutable_win_leader_name();
}
inline const std::string& GuildPkWinInfo::_internal_win_leader_name() const {
  return win_leader_name_.GetNoArena();
}
inline void GuildPkWinInfo::_internal_set_win_leader_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  win_leader_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GuildPkWinInfo::set_win_leader_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  win_leader_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:guildpk_msg.GuildPkWinInfo.win_leader_name)
}
inline void GuildPkWinInfo::set_win_leader_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  win_leader_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:guildpk_msg.GuildPkWinInfo.win_leader_name)
}
inline void GuildPkWinInfo::set_win_leader_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  win_leader_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:guildpk_msg.GuildPkWinInfo.win_leader_name)
}
inline std::string* GuildPkWinInfo::_internal_mutable_win_leader_name() {
  _has_bits_[0] |= 0x00000002u;
  return win_leader_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GuildPkWinInfo::release_win_leader_name() {
  // @@protoc_insertion_point(field_release:guildpk_msg.GuildPkWinInfo.win_leader_name)
  if (!_internal_has_win_leader_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return win_leader_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GuildPkWinInfo::set_allocated_win_leader_name(std::string* win_leader_name) {
  if (win_leader_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  win_leader_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), win_leader_name);
  // @@protoc_insertion_point(field_set_allocated:guildpk_msg.GuildPkWinInfo.win_leader_name)
}

// -------------------------------------------------------------------

// MSG_Ret_GuildPkWinList_SC

// repeated .guildpk_msg.GuildPkWinInfo winers = 1;
inline int MSG_Ret_GuildPkWinList_SC::_internal_winers_size() const {
  return winers_.size();
}
inline int MSG_Ret_GuildPkWinList_SC::winers_size() const {
  return _internal_winers_size();
}
inline void MSG_Ret_GuildPkWinList_SC::clear_winers() {
  winers_.Clear();
}
inline ::guildpk_msg::GuildPkWinInfo* MSG_Ret_GuildPkWinList_SC::mutable_winers(int index) {
  // @@protoc_insertion_point(field_mutable:guildpk_msg.MSG_Ret_GuildPkWinList_SC.winers)
  return winers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::guildpk_msg::GuildPkWinInfo >*
MSG_Ret_GuildPkWinList_SC::mutable_winers() {
  // @@protoc_insertion_point(field_mutable_list:guildpk_msg.MSG_Ret_GuildPkWinList_SC.winers)
  return &winers_;
}
inline const ::guildpk_msg::GuildPkWinInfo& MSG_Ret_GuildPkWinList_SC::_internal_winers(int index) const {
  return winers_.Get(index);
}
inline const ::guildpk_msg::GuildPkWinInfo& MSG_Ret_GuildPkWinList_SC::winers(int index) const {
  // @@protoc_insertion_point(field_get:guildpk_msg.MSG_Ret_GuildPkWinList_SC.winers)
  return _internal_winers(index);
}
inline ::guildpk_msg::GuildPkWinInfo* MSG_Ret_GuildPkWinList_SC::_internal_add_winers() {
  return winers_.Add();
}
inline ::guildpk_msg::GuildPkWinInfo* MSG_Ret_GuildPkWinList_SC::add_winers() {
  // @@protoc_insertion_point(field_add:guildpk_msg.MSG_Ret_GuildPkWinList_SC.winers)
  return _internal_add_winers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::guildpk_msg::GuildPkWinInfo >&
MSG_Ret_GuildPkWinList_SC::winers() const {
  // @@protoc_insertion_point(field_list:guildpk_msg.MSG_Ret_GuildPkWinList_SC.winers)
  return winers_;
}

// -------------------------------------------------------------------

// MSG_Ret_GuildPkMatchResult_SC

// optional uint32 retcode = 1;
inline bool MSG_Ret_GuildPkMatchResult_SC::_internal_has_retcode() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_Ret_GuildPkMatchResult_SC::has_retcode() const {
  return _internal_has_retcode();
}
inline void MSG_Ret_GuildPkMatchResult_SC::clear_retcode() {
  retcode_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Ret_GuildPkMatchResult_SC::_internal_retcode() const {
  return retcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Ret_GuildPkMatchResult_SC::retcode() const {
  // @@protoc_insertion_point(field_get:guildpk_msg.MSG_Ret_GuildPkMatchResult_SC.retcode)
  return _internal_retcode();
}
inline void MSG_Ret_GuildPkMatchResult_SC::_internal_set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  retcode_ = value;
}
inline void MSG_Ret_GuildPkMatchResult_SC::set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_retcode(value);
  // @@protoc_insertion_point(field_set:guildpk_msg.MSG_Ret_GuildPkMatchResult_SC.retcode)
}

// optional uint32 lefttime = 2;
inline bool MSG_Ret_GuildPkMatchResult_SC::_internal_has_lefttime() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_Ret_GuildPkMatchResult_SC::has_lefttime() const {
  return _internal_has_lefttime();
}
inline void MSG_Ret_GuildPkMatchResult_SC::clear_lefttime() {
  lefttime_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Ret_GuildPkMatchResult_SC::_internal_lefttime() const {
  return lefttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Ret_GuildPkMatchResult_SC::lefttime() const {
  // @@protoc_insertion_point(field_get:guildpk_msg.MSG_Ret_GuildPkMatchResult_SC.lefttime)
  return _internal_lefttime();
}
inline void MSG_Ret_GuildPkMatchResult_SC::_internal_set_lefttime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  lefttime_ = value;
}
inline void MSG_Ret_GuildPkMatchResult_SC::set_lefttime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lefttime(value);
  // @@protoc_insertion_point(field_set:guildpk_msg.MSG_Ret_GuildPkMatchResult_SC.lefttime)
}

// -------------------------------------------------------------------

// MSG_Req_EnterGuildPk_CS

// -------------------------------------------------------------------

// MSG_Ret_GuildPkCountDown_SC

// optional uint32 lefttime = 1;
inline bool MSG_Ret_GuildPkCountDown_SC::_internal_has_lefttime() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_Ret_GuildPkCountDown_SC::has_lefttime() const {
  return _internal_has_lefttime();
}
inline void MSG_Ret_GuildPkCountDown_SC::clear_lefttime() {
  lefttime_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Ret_GuildPkCountDown_SC::_internal_lefttime() const {
  return lefttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Ret_GuildPkCountDown_SC::lefttime() const {
  // @@protoc_insertion_point(field_get:guildpk_msg.MSG_Ret_GuildPkCountDown_SC.lefttime)
  return _internal_lefttime();
}
inline void MSG_Ret_GuildPkCountDown_SC::_internal_set_lefttime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  lefttime_ = value;
}
inline void MSG_Ret_GuildPkCountDown_SC::set_lefttime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lefttime(value);
  // @@protoc_insertion_point(field_set:guildpk_msg.MSG_Ret_GuildPkCountDown_SC.lefttime)
}

// -------------------------------------------------------------------

// MSG_Ret_GuildPkFight_SC

// optional uint32 lefttime = 1;
inline bool MSG_Ret_GuildPkFight_SC::_internal_has_lefttime() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_Ret_GuildPkFight_SC::has_lefttime() const {
  return _internal_has_lefttime();
}
inline void MSG_Ret_GuildPkFight_SC::clear_lefttime() {
  lefttime_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Ret_GuildPkFight_SC::_internal_lefttime() const {
  return lefttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Ret_GuildPkFight_SC::lefttime() const {
  // @@protoc_insertion_point(field_get:guildpk_msg.MSG_Ret_GuildPkFight_SC.lefttime)
  return _internal_lefttime();
}
inline void MSG_Ret_GuildPkFight_SC::_internal_set_lefttime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  lefttime_ = value;
}
inline void MSG_Ret_GuildPkFight_SC::set_lefttime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lefttime(value);
  // @@protoc_insertion_point(field_set:guildpk_msg.MSG_Ret_GuildPkFight_SC.lefttime)
}

// -------------------------------------------------------------------

// realtime_guildteam_info

// optional uint64 guildid = 1;
inline bool realtime_guildteam_info::_internal_has_guildid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool realtime_guildteam_info::has_guildid() const {
  return _internal_has_guildid();
}
inline void realtime_guildteam_info::clear_guildid() {
  guildid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 realtime_guildteam_info::_internal_guildid() const {
  return guildid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 realtime_guildteam_info::guildid() const {
  // @@protoc_insertion_point(field_get:guildpk_msg.realtime_guildteam_info.guildid)
  return _internal_guildid();
}
inline void realtime_guildteam_info::_internal_set_guildid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  guildid_ = value;
}
inline void realtime_guildteam_info::set_guildid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guildid(value);
  // @@protoc_insertion_point(field_set:guildpk_msg.realtime_guildteam_info.guildid)
}

// optional string guildname = 2;
inline bool realtime_guildteam_info::_internal_has_guildname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool realtime_guildteam_info::has_guildname() const {
  return _internal_has_guildname();
}
inline void realtime_guildteam_info::clear_guildname() {
  guildname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& realtime_guildteam_info::guildname() const {
  // @@protoc_insertion_point(field_get:guildpk_msg.realtime_guildteam_info.guildname)
  return _internal_guildname();
}
inline void realtime_guildteam_info::set_guildname(const std::string& value) {
  _internal_set_guildname(value);
  // @@protoc_insertion_point(field_set:guildpk_msg.realtime_guildteam_info.guildname)
}
inline std::string* realtime_guildteam_info::mutable_guildname() {
  // @@protoc_insertion_point(field_mutable:guildpk_msg.realtime_guildteam_info.guildname)
  return _internal_mutable_guildname();
}
inline const std::string& realtime_guildteam_info::_internal_guildname() const {
  return guildname_.GetNoArena();
}
inline void realtime_guildteam_info::_internal_set_guildname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  guildname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void realtime_guildteam_info::set_guildname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  guildname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:guildpk_msg.realtime_guildteam_info.guildname)
}
inline void realtime_guildteam_info::set_guildname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  guildname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:guildpk_msg.realtime_guildteam_info.guildname)
}
inline void realtime_guildteam_info::set_guildname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  guildname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:guildpk_msg.realtime_guildteam_info.guildname)
}
inline std::string* realtime_guildteam_info::_internal_mutable_guildname() {
  _has_bits_[0] |= 0x00000001u;
  return guildname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* realtime_guildteam_info::release_guildname() {
  // @@protoc_insertion_point(field_release:guildpk_msg.realtime_guildteam_info.guildname)
  if (!_internal_has_guildname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return guildname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void realtime_guildteam_info::set_allocated_guildname(std::string* guildname) {
  if (guildname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  guildname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), guildname);
  // @@protoc_insertion_point(field_set_allocated:guildpk_msg.realtime_guildteam_info.guildname)
}

// optional uint32 leftnum = 3;
inline bool realtime_guildteam_info::_internal_has_leftnum() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool realtime_guildteam_info::has_leftnum() const {
  return _internal_has_leftnum();
}
inline void realtime_guildteam_info::clear_leftnum() {
  leftnum_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 realtime_guildteam_info::_internal_leftnum() const {
  return leftnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 realtime_guildteam_info::leftnum() const {
  // @@protoc_insertion_point(field_get:guildpk_msg.realtime_guildteam_info.leftnum)
  return _internal_leftnum();
}
inline void realtime_guildteam_info::_internal_set_leftnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  leftnum_ = value;
}
inline void realtime_guildteam_info::set_leftnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_leftnum(value);
  // @@protoc_insertion_point(field_set:guildpk_msg.realtime_guildteam_info.leftnum)
}

// -------------------------------------------------------------------

// MSG_RealTime_GuildPkTeam_Rank_SC

// repeated .guildpk_msg.realtime_guildteam_info teamrank = 1;
inline int MSG_RealTime_GuildPkTeam_Rank_SC::_internal_teamrank_size() const {
  return teamrank_.size();
}
inline int MSG_RealTime_GuildPkTeam_Rank_SC::teamrank_size() const {
  return _internal_teamrank_size();
}
inline void MSG_RealTime_GuildPkTeam_Rank_SC::clear_teamrank() {
  teamrank_.Clear();
}
inline ::guildpk_msg::realtime_guildteam_info* MSG_RealTime_GuildPkTeam_Rank_SC::mutable_teamrank(int index) {
  // @@protoc_insertion_point(field_mutable:guildpk_msg.MSG_RealTime_GuildPkTeam_Rank_SC.teamrank)
  return teamrank_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::guildpk_msg::realtime_guildteam_info >*
MSG_RealTime_GuildPkTeam_Rank_SC::mutable_teamrank() {
  // @@protoc_insertion_point(field_mutable_list:guildpk_msg.MSG_RealTime_GuildPkTeam_Rank_SC.teamrank)
  return &teamrank_;
}
inline const ::guildpk_msg::realtime_guildteam_info& MSG_RealTime_GuildPkTeam_Rank_SC::_internal_teamrank(int index) const {
  return teamrank_.Get(index);
}
inline const ::guildpk_msg::realtime_guildteam_info& MSG_RealTime_GuildPkTeam_Rank_SC::teamrank(int index) const {
  // @@protoc_insertion_point(field_get:guildpk_msg.MSG_RealTime_GuildPkTeam_Rank_SC.teamrank)
  return _internal_teamrank(index);
}
inline ::guildpk_msg::realtime_guildteam_info* MSG_RealTime_GuildPkTeam_Rank_SC::_internal_add_teamrank() {
  return teamrank_.Add();
}
inline ::guildpk_msg::realtime_guildteam_info* MSG_RealTime_GuildPkTeam_Rank_SC::add_teamrank() {
  // @@protoc_insertion_point(field_add:guildpk_msg.MSG_RealTime_GuildPkTeam_Rank_SC.teamrank)
  return _internal_add_teamrank();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::guildpk_msg::realtime_guildteam_info >&
MSG_RealTime_GuildPkTeam_Rank_SC::teamrank() const {
  // @@protoc_insertion_point(field_list:guildpk_msg.MSG_RealTime_GuildPkTeam_Rank_SC.teamrank)
  return teamrank_;
}

// -------------------------------------------------------------------

// finalresult_guildteam_info

// optional uint32 rank = 1;
inline bool finalresult_guildteam_info::_internal_has_rank() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool finalresult_guildteam_info::has_rank() const {
  return _internal_has_rank();
}
inline void finalresult_guildteam_info::clear_rank() {
  rank_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 finalresult_guildteam_info::_internal_rank() const {
  return rank_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 finalresult_guildteam_info::rank() const {
  // @@protoc_insertion_point(field_get:guildpk_msg.finalresult_guildteam_info.rank)
  return _internal_rank();
}
inline void finalresult_guildteam_info::_internal_set_rank(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  rank_ = value;
}
inline void finalresult_guildteam_info::set_rank(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:guildpk_msg.finalresult_guildteam_info.rank)
}

// optional string name = 2;
inline bool finalresult_guildteam_info::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool finalresult_guildteam_info::has_name() const {
  return _internal_has_name();
}
inline void finalresult_guildteam_info::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& finalresult_guildteam_info::name() const {
  // @@protoc_insertion_point(field_get:guildpk_msg.finalresult_guildteam_info.name)
  return _internal_name();
}
inline void finalresult_guildteam_info::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:guildpk_msg.finalresult_guildteam_info.name)
}
inline std::string* finalresult_guildteam_info::mutable_name() {
  // @@protoc_insertion_point(field_mutable:guildpk_msg.finalresult_guildteam_info.name)
  return _internal_mutable_name();
}
inline const std::string& finalresult_guildteam_info::_internal_name() const {
  return name_.GetNoArena();
}
inline void finalresult_guildteam_info::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void finalresult_guildteam_info::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:guildpk_msg.finalresult_guildteam_info.name)
}
inline void finalresult_guildteam_info::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:guildpk_msg.finalresult_guildteam_info.name)
}
inline void finalresult_guildteam_info::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:guildpk_msg.finalresult_guildteam_info.name)
}
inline std::string* finalresult_guildteam_info::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* finalresult_guildteam_info::release_name() {
  // @@protoc_insertion_point(field_release:guildpk_msg.finalresult_guildteam_info.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void finalresult_guildteam_info::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:guildpk_msg.finalresult_guildteam_info.name)
}

// optional uint32 killnum = 3;
inline bool finalresult_guildteam_info::_internal_has_killnum() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool finalresult_guildteam_info::has_killnum() const {
  return _internal_has_killnum();
}
inline void finalresult_guildteam_info::clear_killnum() {
  killnum_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 finalresult_guildteam_info::_internal_killnum() const {
  return killnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 finalresult_guildteam_info::killnum() const {
  // @@protoc_insertion_point(field_get:guildpk_msg.finalresult_guildteam_info.killnum)
  return _internal_killnum();
}
inline void finalresult_guildteam_info::_internal_set_killnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  killnum_ = value;
}
inline void finalresult_guildteam_info::set_killnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_killnum(value);
  // @@protoc_insertion_point(field_set:guildpk_msg.finalresult_guildteam_info.killnum)
}

// optional uint32 totaldmg = 4;
inline bool finalresult_guildteam_info::_internal_has_totaldmg() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool finalresult_guildteam_info::has_totaldmg() const {
  return _internal_has_totaldmg();
}
inline void finalresult_guildteam_info::clear_totaldmg() {
  totaldmg_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 finalresult_guildteam_info::_internal_totaldmg() const {
  return totaldmg_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 finalresult_guildteam_info::totaldmg() const {
  // @@protoc_insertion_point(field_get:guildpk_msg.finalresult_guildteam_info.totaldmg)
  return _internal_totaldmg();
}
inline void finalresult_guildteam_info::_internal_set_totaldmg(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  totaldmg_ = value;
}
inline void finalresult_guildteam_info::set_totaldmg(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_totaldmg(value);
  // @@protoc_insertion_point(field_set:guildpk_msg.finalresult_guildteam_info.totaldmg)
}

// -------------------------------------------------------------------

// MSG_GuildPk_FinalResult_SC

// optional bool iswin = 1;
inline bool MSG_GuildPk_FinalResult_SC::_internal_has_iswin() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_GuildPk_FinalResult_SC::has_iswin() const {
  return _internal_has_iswin();
}
inline void MSG_GuildPk_FinalResult_SC::clear_iswin() {
  iswin_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool MSG_GuildPk_FinalResult_SC::_internal_iswin() const {
  return iswin_;
}
inline bool MSG_GuildPk_FinalResult_SC::iswin() const {
  // @@protoc_insertion_point(field_get:guildpk_msg.MSG_GuildPk_FinalResult_SC.iswin)
  return _internal_iswin();
}
inline void MSG_GuildPk_FinalResult_SC::_internal_set_iswin(bool value) {
  _has_bits_[0] |= 0x00000001u;
  iswin_ = value;
}
inline void MSG_GuildPk_FinalResult_SC::set_iswin(bool value) {
  _internal_set_iswin(value);
  // @@protoc_insertion_point(field_set:guildpk_msg.MSG_GuildPk_FinalResult_SC.iswin)
}

// repeated .guildpk_msg.finalresult_guildteam_info teamlist = 2;
inline int MSG_GuildPk_FinalResult_SC::_internal_teamlist_size() const {
  return teamlist_.size();
}
inline int MSG_GuildPk_FinalResult_SC::teamlist_size() const {
  return _internal_teamlist_size();
}
inline void MSG_GuildPk_FinalResult_SC::clear_teamlist() {
  teamlist_.Clear();
}
inline ::guildpk_msg::finalresult_guildteam_info* MSG_GuildPk_FinalResult_SC::mutable_teamlist(int index) {
  // @@protoc_insertion_point(field_mutable:guildpk_msg.MSG_GuildPk_FinalResult_SC.teamlist)
  return teamlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::guildpk_msg::finalresult_guildteam_info >*
MSG_GuildPk_FinalResult_SC::mutable_teamlist() {
  // @@protoc_insertion_point(field_mutable_list:guildpk_msg.MSG_GuildPk_FinalResult_SC.teamlist)
  return &teamlist_;
}
inline const ::guildpk_msg::finalresult_guildteam_info& MSG_GuildPk_FinalResult_SC::_internal_teamlist(int index) const {
  return teamlist_.Get(index);
}
inline const ::guildpk_msg::finalresult_guildteam_info& MSG_GuildPk_FinalResult_SC::teamlist(int index) const {
  // @@protoc_insertion_point(field_get:guildpk_msg.MSG_GuildPk_FinalResult_SC.teamlist)
  return _internal_teamlist(index);
}
inline ::guildpk_msg::finalresult_guildteam_info* MSG_GuildPk_FinalResult_SC::_internal_add_teamlist() {
  return teamlist_.Add();
}
inline ::guildpk_msg::finalresult_guildteam_info* MSG_GuildPk_FinalResult_SC::add_teamlist() {
  // @@protoc_insertion_point(field_add:guildpk_msg.MSG_GuildPk_FinalResult_SC.teamlist)
  return _internal_add_teamlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::guildpk_msg::finalresult_guildteam_info >&
MSG_GuildPk_FinalResult_SC::teamlist() const {
  // @@protoc_insertion_point(field_list:guildpk_msg.MSG_GuildPk_FinalResult_SC.teamlist)
  return teamlist_;
}

// -------------------------------------------------------------------

// MSG_Ret_GuildPkEnroll_Finish_SC

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace guildpk_msg

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_guildpk_5fmsg_2eproto
