// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: copymap.proto

#include "copymap.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_object_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_t_Object_object_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_copymap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdventureCopymap_copymap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_copymap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdventureCopymapGroup_copymap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_copymap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CopymapGatherItem_copymap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_copymap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObjectData_copymap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_copymap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RewardsObjectInfo_copymap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_massive_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RetCurrencyChange_SC_massive_2eproto;
namespace copymap {
class MSG_Req_CopymapEnterInfo_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_CopymapEnterInfo_CS> _instance;
} _MSG_Req_CopymapEnterInfo_CS_default_instance_;
class MSG_Ret_CopymapEnterInfo_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_CopymapEnterInfo_SC> _instance;
} _MSG_Ret_CopymapEnterInfo_SC_default_instance_;
class MSG_Req_EnterCopymap_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_EnterCopymap_CS> _instance;
} _MSG_Req_EnterCopymap_CS_default_instance_;
class MSG_Req_ExitCopymap_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_ExitCopymap_SC> _instance;
} _MSG_Req_ExitCopymap_SC_default_instance_;
class MSG_Ret_TriggerEnter_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_TriggerEnter_SC> _instance;
} _MSG_Ret_TriggerEnter_SC_default_instance_;
class MSG_ReqBackCopymap_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqBackCopymap_CS> _instance;
} _MSG_ReqBackCopymap_CS_default_instance_;
class RewardsObjectInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RewardsObjectInfo> _instance;
} _RewardsObjectInfo_default_instance_;
class MSG_Ret_CopymapOver_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_CopymapOver_SC> _instance;
} _MSG_Ret_CopymapOver_SC_default_instance_;
class MSG_RetAwardQuest_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetAwardQuest_SC> _instance;
} _MSG_RetAwardQuest_SC_default_instance_;
class MSG_Req_CopymapLottery_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_CopymapLottery_CS> _instance;
} _MSG_Req_CopymapLottery_CS_default_instance_;
class MSG_Ret_CopymapLottery_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_CopymapLottery_SC> _instance;
} _MSG_Ret_CopymapLottery_SC_default_instance_;
class MSG_Req_CopymapGather_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_CopymapGather_CS> _instance;
} _MSG_Req_CopymapGather_CS_default_instance_;
class MSG_Ret_CopymapGatherReq_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_CopymapGatherReq_SC> _instance;
} _MSG_Ret_CopymapGatherReq_SC_default_instance_;
class MSG_Req_CopymapAnswerGather_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_CopymapAnswerGather_CS> _instance;
} _MSG_Req_CopymapAnswerGather_CS_default_instance_;
class CopymapGatherItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CopymapGatherItem> _instance;
} _CopymapGatherItem_default_instance_;
class MSG_Ret_CopymapGatherData_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_CopymapGatherData_SC> _instance;
} _MSG_Ret_CopymapGatherData_SC_default_instance_;
class MSG_Req_CopymapGatherQuickEnter_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_CopymapGatherQuickEnter_CS> _instance;
} _MSG_Req_CopymapGatherQuickEnter_CS_default_instance_;
class MSG_Req_CopymapReGather_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_CopymapReGather_CS> _instance;
} _MSG_Req_CopymapReGather_CS_default_instance_;
class MSG_Ret_CopymapReGather_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_CopymapReGather_SC> _instance;
} _MSG_Ret_CopymapReGather_SC_default_instance_;
class MSG_Ret_CopymapBossTempID_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_CopymapBossTempID_SC> _instance;
} _MSG_Ret_CopymapBossTempID_SC_default_instance_;
class AdventureCopymapGroupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdventureCopymapGroup> _instance;
} _AdventureCopymapGroup_default_instance_;
class MSG_Req_AdventureCopymapGroup_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_AdventureCopymapGroup_CS> _instance;
} _MSG_Req_AdventureCopymapGroup_CS_default_instance_;
class MSG_Ret_AdventureCopymapGroup_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_AdventureCopymapGroup_SC> _instance;
} _MSG_Ret_AdventureCopymapGroup_SC_default_instance_;
class AdventureCopymapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdventureCopymap> _instance;
} _AdventureCopymap_default_instance_;
class MSG_Req_AdventureCopymapInfo_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_AdventureCopymapInfo_CS> _instance;
} _MSG_Req_AdventureCopymapInfo_CS_default_instance_;
class MSG_Ret_AdventureCopymapInfo_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_AdventureCopymapInfo_SC> _instance;
} _MSG_Ret_AdventureCopymapInfo_SC_default_instance_;
class MSG_Req_AdventureHeros_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_AdventureHeros_CS> _instance;
} _MSG_Req_AdventureHeros_CS_default_instance_;
class MSG_Ret_AdventureHeros_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_AdventureHeros_SC> _instance;
} _MSG_Ret_AdventureHeros_SC_default_instance_;
class MSG_Req_EnterAdventureCopymap_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_EnterAdventureCopymap_CS> _instance;
} _MSG_Req_EnterAdventureCopymap_CS_default_instance_;
class ObjectDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectData> _instance;
} _ObjectData_default_instance_;
class MSG_Ret_TrainData_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_TrainData_SC> _instance;
} _MSG_Ret_TrainData_SC_default_instance_;
class MSG_Ret_PlayEventData_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_PlayEventData_SC> _instance;
} _MSG_Ret_PlayEventData_SC_default_instance_;
class MSG_Ret_CurMonsterGroup_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_CurMonsterGroup_SC> _instance;
} _MSG_Ret_CurMonsterGroup_SC_default_instance_;
class MSG_Req_PlayGameData_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_PlayGameData_CS> _instance;
} _MSG_Req_PlayGameData_CS_default_instance_;
class MSG_Req_PlayGameRetry_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_PlayGameRetry_CS> _instance;
} _MSG_Req_PlayGameRetry_CS_default_instance_;
}  // namespace copymap
static void InitDefaultsscc_info_AdventureCopymap_copymap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::copymap::_AdventureCopymap_default_instance_;
    new (ptr) ::copymap::AdventureCopymap();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::copymap::AdventureCopymap::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdventureCopymap_copymap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AdventureCopymap_copymap_2eproto}, {}};

static void InitDefaultsscc_info_AdventureCopymapGroup_copymap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::copymap::_AdventureCopymapGroup_default_instance_;
    new (ptr) ::copymap::AdventureCopymapGroup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::copymap::AdventureCopymapGroup::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdventureCopymapGroup_copymap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AdventureCopymapGroup_copymap_2eproto}, {}};

static void InitDefaultsscc_info_CopymapGatherItem_copymap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::copymap::_CopymapGatherItem_default_instance_;
    new (ptr) ::copymap::CopymapGatherItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::copymap::CopymapGatherItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CopymapGatherItem_copymap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CopymapGatherItem_copymap_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqBackCopymap_CS_copymap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::copymap::_MSG_ReqBackCopymap_CS_default_instance_;
    new (ptr) ::copymap::MSG_ReqBackCopymap_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::copymap::MSG_ReqBackCopymap_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqBackCopymap_CS_copymap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqBackCopymap_CS_copymap_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_AdventureCopymapGroup_CS_copymap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::copymap::_MSG_Req_AdventureCopymapGroup_CS_default_instance_;
    new (ptr) ::copymap::MSG_Req_AdventureCopymapGroup_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::copymap::MSG_Req_AdventureCopymapGroup_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_AdventureCopymapGroup_CS_copymap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_AdventureCopymapGroup_CS_copymap_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_AdventureCopymapInfo_CS_copymap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::copymap::_MSG_Req_AdventureCopymapInfo_CS_default_instance_;
    new (ptr) ::copymap::MSG_Req_AdventureCopymapInfo_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::copymap::MSG_Req_AdventureCopymapInfo_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_AdventureCopymapInfo_CS_copymap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_AdventureCopymapInfo_CS_copymap_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_AdventureHeros_CS_copymap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::copymap::_MSG_Req_AdventureHeros_CS_default_instance_;
    new (ptr) ::copymap::MSG_Req_AdventureHeros_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::copymap::MSG_Req_AdventureHeros_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_AdventureHeros_CS_copymap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_AdventureHeros_CS_copymap_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_CopymapAnswerGather_CS_copymap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::copymap::_MSG_Req_CopymapAnswerGather_CS_default_instance_;
    new (ptr) ::copymap::MSG_Req_CopymapAnswerGather_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::copymap::MSG_Req_CopymapAnswerGather_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_CopymapAnswerGather_CS_copymap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_CopymapAnswerGather_CS_copymap_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_CopymapEnterInfo_CS_copymap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::copymap::_MSG_Req_CopymapEnterInfo_CS_default_instance_;
    new (ptr) ::copymap::MSG_Req_CopymapEnterInfo_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::copymap::MSG_Req_CopymapEnterInfo_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_CopymapEnterInfo_CS_copymap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_CopymapEnterInfo_CS_copymap_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_CopymapGatherQuickEnter_CS_copymap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::copymap::_MSG_Req_CopymapGatherQuickEnter_CS_default_instance_;
    new (ptr) ::copymap::MSG_Req_CopymapGatherQuickEnter_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::copymap::MSG_Req_CopymapGatherQuickEnter_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_CopymapGatherQuickEnter_CS_copymap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_CopymapGatherQuickEnter_CS_copymap_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_CopymapGather_CS_copymap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::copymap::_MSG_Req_CopymapGather_CS_default_instance_;
    new (ptr) ::copymap::MSG_Req_CopymapGather_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::copymap::MSG_Req_CopymapGather_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_CopymapGather_CS_copymap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_CopymapGather_CS_copymap_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_CopymapLottery_CS_copymap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::copymap::_MSG_Req_CopymapLottery_CS_default_instance_;
    new (ptr) ::copymap::MSG_Req_CopymapLottery_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::copymap::MSG_Req_CopymapLottery_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_CopymapLottery_CS_copymap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_CopymapLottery_CS_copymap_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_CopymapReGather_CS_copymap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::copymap::_MSG_Req_CopymapReGather_CS_default_instance_;
    new (ptr) ::copymap::MSG_Req_CopymapReGather_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::copymap::MSG_Req_CopymapReGather_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_CopymapReGather_CS_copymap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_CopymapReGather_CS_copymap_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_EnterAdventureCopymap_CS_copymap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::copymap::_MSG_Req_EnterAdventureCopymap_CS_default_instance_;
    new (ptr) ::copymap::MSG_Req_EnterAdventureCopymap_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::copymap::MSG_Req_EnterAdventureCopymap_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_EnterAdventureCopymap_CS_copymap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_EnterAdventureCopymap_CS_copymap_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_EnterCopymap_CS_copymap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::copymap::_MSG_Req_EnterCopymap_CS_default_instance_;
    new (ptr) ::copymap::MSG_Req_EnterCopymap_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::copymap::MSG_Req_EnterCopymap_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_EnterCopymap_CS_copymap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_EnterCopymap_CS_copymap_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_ExitCopymap_SC_copymap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::copymap::_MSG_Req_ExitCopymap_SC_default_instance_;
    new (ptr) ::copymap::MSG_Req_ExitCopymap_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::copymap::MSG_Req_ExitCopymap_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_ExitCopymap_SC_copymap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_ExitCopymap_SC_copymap_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_PlayGameData_CS_copymap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::copymap::_MSG_Req_PlayGameData_CS_default_instance_;
    new (ptr) ::copymap::MSG_Req_PlayGameData_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::copymap::MSG_Req_PlayGameData_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_PlayGameData_CS_copymap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_PlayGameData_CS_copymap_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_PlayGameRetry_CS_copymap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::copymap::_MSG_Req_PlayGameRetry_CS_default_instance_;
    new (ptr) ::copymap::MSG_Req_PlayGameRetry_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::copymap::MSG_Req_PlayGameRetry_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_PlayGameRetry_CS_copymap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_PlayGameRetry_CS_copymap_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RetAwardQuest_SC_copymap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::copymap::_MSG_RetAwardQuest_SC_default_instance_;
    new (ptr) ::copymap::MSG_RetAwardQuest_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::copymap::MSG_RetAwardQuest_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_RetAwardQuest_SC_copymap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_RetAwardQuest_SC_copymap_2eproto}, {
      &scc_info_RewardsObjectInfo_copymap_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Ret_AdventureCopymapGroup_SC_copymap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::copymap::_MSG_Ret_AdventureCopymapGroup_SC_default_instance_;
    new (ptr) ::copymap::MSG_Ret_AdventureCopymapGroup_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::copymap::MSG_Ret_AdventureCopymapGroup_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Ret_AdventureCopymapGroup_SC_copymap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Ret_AdventureCopymapGroup_SC_copymap_2eproto}, {
      &scc_info_AdventureCopymapGroup_copymap_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Ret_AdventureCopymapInfo_SC_copymap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::copymap::_MSG_Ret_AdventureCopymapInfo_SC_default_instance_;
    new (ptr) ::copymap::MSG_Ret_AdventureCopymapInfo_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::copymap::MSG_Ret_AdventureCopymapInfo_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Ret_AdventureCopymapInfo_SC_copymap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Ret_AdventureCopymapInfo_SC_copymap_2eproto}, {
      &scc_info_AdventureCopymap_copymap_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Ret_AdventureHeros_SC_copymap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::copymap::_MSG_Ret_AdventureHeros_SC_default_instance_;
    new (ptr) ::copymap::MSG_Ret_AdventureHeros_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::copymap::MSG_Ret_AdventureHeros_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_AdventureHeros_SC_copymap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_AdventureHeros_SC_copymap_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_CopymapBossTempID_SC_copymap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::copymap::_MSG_Ret_CopymapBossTempID_SC_default_instance_;
    new (ptr) ::copymap::MSG_Ret_CopymapBossTempID_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::copymap::MSG_Ret_CopymapBossTempID_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_CopymapBossTempID_SC_copymap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_CopymapBossTempID_SC_copymap_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_CopymapEnterInfo_SC_copymap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::copymap::_MSG_Ret_CopymapEnterInfo_SC_default_instance_;
    new (ptr) ::copymap::MSG_Ret_CopymapEnterInfo_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::copymap::MSG_Ret_CopymapEnterInfo_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_CopymapEnterInfo_SC_copymap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_CopymapEnterInfo_SC_copymap_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_CopymapGatherData_SC_copymap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::copymap::_MSG_Ret_CopymapGatherData_SC_default_instance_;
    new (ptr) ::copymap::MSG_Ret_CopymapGatherData_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::copymap::MSG_Ret_CopymapGatherData_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Ret_CopymapGatherData_SC_copymap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Ret_CopymapGatherData_SC_copymap_2eproto}, {
      &scc_info_CopymapGatherItem_copymap_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Ret_CopymapGatherReq_SC_copymap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::copymap::_MSG_Ret_CopymapGatherReq_SC_default_instance_;
    new (ptr) ::copymap::MSG_Ret_CopymapGatherReq_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::copymap::MSG_Ret_CopymapGatherReq_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_CopymapGatherReq_SC_copymap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_CopymapGatherReq_SC_copymap_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_CopymapLottery_SC_copymap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::copymap::_MSG_Ret_CopymapLottery_SC_default_instance_;
    new (ptr) ::copymap::MSG_Ret_CopymapLottery_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::copymap::MSG_Ret_CopymapLottery_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Ret_CopymapLottery_SC_copymap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Ret_CopymapLottery_SC_copymap_2eproto}, {
      &scc_info_RewardsObjectInfo_copymap_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Ret_CopymapOver_SC_copymap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::copymap::_MSG_Ret_CopymapOver_SC_default_instance_;
    new (ptr) ::copymap::MSG_Ret_CopymapOver_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::copymap::MSG_Ret_CopymapOver_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MSG_Ret_CopymapOver_SC_copymap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MSG_Ret_CopymapOver_SC_copymap_2eproto}, {
      &scc_info_MSG_RetCurrencyChange_SC_massive_2eproto.base,
      &scc_info_RewardsObjectInfo_copymap_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Ret_CopymapReGather_SC_copymap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::copymap::_MSG_Ret_CopymapReGather_SC_default_instance_;
    new (ptr) ::copymap::MSG_Ret_CopymapReGather_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::copymap::MSG_Ret_CopymapReGather_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_CopymapReGather_SC_copymap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_CopymapReGather_SC_copymap_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_CurMonsterGroup_SC_copymap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::copymap::_MSG_Ret_CurMonsterGroup_SC_default_instance_;
    new (ptr) ::copymap::MSG_Ret_CurMonsterGroup_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::copymap::MSG_Ret_CurMonsterGroup_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_CurMonsterGroup_SC_copymap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_CurMonsterGroup_SC_copymap_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_PlayEventData_SC_copymap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::copymap::_MSG_Ret_PlayEventData_SC_default_instance_;
    new (ptr) ::copymap::MSG_Ret_PlayEventData_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::copymap::MSG_Ret_PlayEventData_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_PlayEventData_SC_copymap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_PlayEventData_SC_copymap_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_TrainData_SC_copymap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::copymap::_MSG_Ret_TrainData_SC_default_instance_;
    new (ptr) ::copymap::MSG_Ret_TrainData_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::copymap::MSG_Ret_TrainData_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Ret_TrainData_SC_copymap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Ret_TrainData_SC_copymap_2eproto}, {
      &scc_info_ObjectData_copymap_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Ret_TriggerEnter_SC_copymap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::copymap::_MSG_Ret_TriggerEnter_SC_default_instance_;
    new (ptr) ::copymap::MSG_Ret_TriggerEnter_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::copymap::MSG_Ret_TriggerEnter_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_TriggerEnter_SC_copymap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_TriggerEnter_SC_copymap_2eproto}, {}};

static void InitDefaultsscc_info_ObjectData_copymap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::copymap::_ObjectData_default_instance_;
    new (ptr) ::copymap::ObjectData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::copymap::ObjectData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObjectData_copymap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ObjectData_copymap_2eproto}, {}};

static void InitDefaultsscc_info_RewardsObjectInfo_copymap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::copymap::_RewardsObjectInfo_default_instance_;
    new (ptr) ::copymap::RewardsObjectInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::copymap::RewardsObjectInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RewardsObjectInfo_copymap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RewardsObjectInfo_copymap_2eproto}, {
      &scc_info_t_Object_object_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_copymap_2eproto[35];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_copymap_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_copymap_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_copymap_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Req_CopymapEnterInfo_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Req_CopymapEnterInfo_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Req_CopymapEnterInfo_CS, copymapidx_),
  0,
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Ret_CopymapEnterInfo_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Ret_CopymapEnterInfo_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Ret_CopymapEnterInfo_SC, copymapidx_),
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Ret_CopymapEnterInfo_SC, remain_times_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Req_EnterCopymap_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Req_EnterCopymap_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Req_EnterCopymap_CS, copymapidx_),
  0,
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Req_ExitCopymap_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Req_ExitCopymap_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Ret_TriggerEnter_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Ret_TriggerEnter_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Ret_TriggerEnter_SC, userid_),
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Ret_TriggerEnter_SC, copymapid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_ReqBackCopymap_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_ReqBackCopymap_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::copymap::RewardsObjectInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::copymap::RewardsObjectInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::copymap::RewardsObjectInfo, objs_),
  PROTOBUF_FIELD_OFFSET(::copymap::RewardsObjectInfo, userid_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Ret_CopymapOver_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Ret_CopymapOver_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Ret_CopymapOver_SC, type_),
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Ret_CopymapOver_SC, kickusertime_),
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Ret_CopymapOver_SC, exp_),
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Ret_CopymapOver_SC, money_),
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Ret_CopymapOver_SC, items_),
  3,
  1,
  2,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_RetAwardQuest_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_RetAwardQuest_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_RetAwardQuest_SC, questid_),
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_RetAwardQuest_SC, scorevar_),
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_RetAwardQuest_SC, items_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Req_CopymapLottery_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Req_CopymapLottery_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Ret_CopymapLottery_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Ret_CopymapLottery_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Ret_CopymapLottery_SC, items_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Req_CopymapGather_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Req_CopymapGather_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Req_CopymapGather_CS, copymapidx_),
  0,
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Ret_CopymapGatherReq_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Ret_CopymapGatherReq_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Ret_CopymapGatherReq_SC, leader_),
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Ret_CopymapGatherReq_SC, leader_career_),
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Ret_CopymapGatherReq_SC, copymapidx_),
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Ret_CopymapGatherReq_SC, countdown_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Req_CopymapAnswerGather_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Req_CopymapAnswerGather_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Req_CopymapAnswerGather_CS, agree_),
  0,
  PROTOBUF_FIELD_OFFSET(::copymap::CopymapGatherItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::copymap::CopymapGatherItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::copymap::CopymapGatherItem, name_),
  PROTOBUF_FIELD_OFFSET(::copymap::CopymapGatherItem, charid_),
  PROTOBUF_FIELD_OFFSET(::copymap::CopymapGatherItem, state_),
  PROTOBUF_FIELD_OFFSET(::copymap::CopymapGatherItem, heroid_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Ret_CopymapGatherData_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Ret_CopymapGatherData_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Ret_CopymapGatherData_SC, data_),
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Ret_CopymapGatherData_SC, state_),
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Ret_CopymapGatherData_SC, countdown_),
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Ret_CopymapGatherData_SC, copymapidx_),
  ~0u,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Req_CopymapGatherQuickEnter_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Req_CopymapGatherQuickEnter_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Req_CopymapReGather_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Req_CopymapReGather_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Ret_CopymapReGather_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Ret_CopymapReGather_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Ret_CopymapReGather_SC, copymapidx_),
  0,
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Ret_CopymapBossTempID_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Ret_CopymapBossTempID_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Ret_CopymapBossTempID_SC, tempid_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::copymap::AdventureCopymapGroup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::copymap::AdventureCopymapGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::copymap::AdventureCopymapGroup, adventureid_),
  PROTOBUF_FIELD_OFFSET(::copymap::AdventureCopymapGroup, complete_rate_),
  PROTOBUF_FIELD_OFFSET(::copymap::AdventureCopymapGroup, unlock_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Req_AdventureCopymapGroup_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Req_AdventureCopymapGroup_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Ret_AdventureCopymapGroup_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Ret_AdventureCopymapGroup_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Ret_AdventureCopymapGroup_SC, groups_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::copymap::AdventureCopymap, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::copymap::AdventureCopymap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::copymap::AdventureCopymap, copymapidx_),
  PROTOBUF_FIELD_OFFSET(::copymap::AdventureCopymap, unlock_),
  PROTOBUF_FIELD_OFFSET(::copymap::AdventureCopymap, star_),
  PROTOBUF_FIELD_OFFSET(::copymap::AdventureCopymap, first_success_),
  0,
  2,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Req_AdventureCopymapInfo_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Req_AdventureCopymapInfo_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Req_AdventureCopymapInfo_CS, adventureid_),
  0,
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Ret_AdventureCopymapInfo_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Ret_AdventureCopymapInfo_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Ret_AdventureCopymapInfo_SC, copymaps_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Req_AdventureHeros_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Req_AdventureHeros_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Req_AdventureHeros_CS, adventureid_),
  0,
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Ret_AdventureHeros_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Ret_AdventureHeros_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Ret_AdventureHeros_SC, heros_),
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Ret_AdventureHeros_SC, retcode_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Req_EnterAdventureCopymap_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Req_EnterAdventureCopymap_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Req_EnterAdventureCopymap_CS, heroid_),
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Req_EnterAdventureCopymap_CS, copymapidx_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::copymap::ObjectData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::copymap::ObjectData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::copymap::ObjectData, objid_),
  PROTOBUF_FIELD_OFFSET(::copymap::ObjectData, objnum_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Ret_TrainData_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Ret_TrainData_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Ret_TrainData_SC, starttime_),
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Ret_TrainData_SC, endtime_),
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Ret_TrainData_SC, reward_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Ret_PlayEventData_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Ret_PlayEventData_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Ret_PlayEventData_SC, eventid_),
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Ret_PlayEventData_SC, starttime_),
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Ret_PlayEventData_SC, endtime_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Ret_CurMonsterGroup_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Ret_CurMonsterGroup_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Ret_CurMonsterGroup_SC, groupid_),
  0,
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Req_PlayGameData_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Req_PlayGameData_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Req_PlayGameData_CS, step_),
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Req_PlayGameData_CS, success_),
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Req_PlayGameData_CS, type_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Req_PlayGameRetry_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Req_PlayGameRetry_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::copymap::MSG_Req_PlayGameRetry_CS, type_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::copymap::MSG_Req_CopymapEnterInfo_CS)},
  { 7, 14, sizeof(::copymap::MSG_Ret_CopymapEnterInfo_SC)},
  { 16, 22, sizeof(::copymap::MSG_Req_EnterCopymap_CS)},
  { 23, 28, sizeof(::copymap::MSG_Req_ExitCopymap_SC)},
  { 28, 35, sizeof(::copymap::MSG_Ret_TriggerEnter_SC)},
  { 37, 42, sizeof(::copymap::MSG_ReqBackCopymap_CS)},
  { 42, 49, sizeof(::copymap::RewardsObjectInfo)},
  { 51, 61, sizeof(::copymap::MSG_Ret_CopymapOver_SC)},
  { 66, 74, sizeof(::copymap::MSG_RetAwardQuest_SC)},
  { 77, 82, sizeof(::copymap::MSG_Req_CopymapLottery_CS)},
  { 82, 88, sizeof(::copymap::MSG_Ret_CopymapLottery_SC)},
  { 89, 95, sizeof(::copymap::MSG_Req_CopymapGather_CS)},
  { 96, 105, sizeof(::copymap::MSG_Ret_CopymapGatherReq_SC)},
  { 109, 115, sizeof(::copymap::MSG_Req_CopymapAnswerGather_CS)},
  { 116, 125, sizeof(::copymap::CopymapGatherItem)},
  { 129, 138, sizeof(::copymap::MSG_Ret_CopymapGatherData_SC)},
  { 142, 147, sizeof(::copymap::MSG_Req_CopymapGatherQuickEnter_CS)},
  { 147, 152, sizeof(::copymap::MSG_Req_CopymapReGather_CS)},
  { 152, 158, sizeof(::copymap::MSG_Ret_CopymapReGather_SC)},
  { 159, 165, sizeof(::copymap::MSG_Ret_CopymapBossTempID_SC)},
  { 166, 174, sizeof(::copymap::AdventureCopymapGroup)},
  { 177, 182, sizeof(::copymap::MSG_Req_AdventureCopymapGroup_CS)},
  { 182, 188, sizeof(::copymap::MSG_Ret_AdventureCopymapGroup_SC)},
  { 189, 198, sizeof(::copymap::AdventureCopymap)},
  { 202, 208, sizeof(::copymap::MSG_Req_AdventureCopymapInfo_CS)},
  { 209, 215, sizeof(::copymap::MSG_Ret_AdventureCopymapInfo_SC)},
  { 216, 222, sizeof(::copymap::MSG_Req_AdventureHeros_CS)},
  { 223, 230, sizeof(::copymap::MSG_Ret_AdventureHeros_SC)},
  { 232, 239, sizeof(::copymap::MSG_Req_EnterAdventureCopymap_CS)},
  { 241, 248, sizeof(::copymap::ObjectData)},
  { 250, 258, sizeof(::copymap::MSG_Ret_TrainData_SC)},
  { 261, 269, sizeof(::copymap::MSG_Ret_PlayEventData_SC)},
  { 272, 278, sizeof(::copymap::MSG_Ret_CurMonsterGroup_SC)},
  { 279, 287, sizeof(::copymap::MSG_Req_PlayGameData_CS)},
  { 290, 296, sizeof(::copymap::MSG_Req_PlayGameRetry_CS)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::copymap::_MSG_Req_CopymapEnterInfo_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::copymap::_MSG_Ret_CopymapEnterInfo_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::copymap::_MSG_Req_EnterCopymap_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::copymap::_MSG_Req_ExitCopymap_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::copymap::_MSG_Ret_TriggerEnter_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::copymap::_MSG_ReqBackCopymap_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::copymap::_RewardsObjectInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::copymap::_MSG_Ret_CopymapOver_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::copymap::_MSG_RetAwardQuest_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::copymap::_MSG_Req_CopymapLottery_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::copymap::_MSG_Ret_CopymapLottery_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::copymap::_MSG_Req_CopymapGather_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::copymap::_MSG_Ret_CopymapGatherReq_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::copymap::_MSG_Req_CopymapAnswerGather_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::copymap::_CopymapGatherItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::copymap::_MSG_Ret_CopymapGatherData_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::copymap::_MSG_Req_CopymapGatherQuickEnter_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::copymap::_MSG_Req_CopymapReGather_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::copymap::_MSG_Ret_CopymapReGather_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::copymap::_MSG_Ret_CopymapBossTempID_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::copymap::_AdventureCopymapGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::copymap::_MSG_Req_AdventureCopymapGroup_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::copymap::_MSG_Ret_AdventureCopymapGroup_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::copymap::_AdventureCopymap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::copymap::_MSG_Req_AdventureCopymapInfo_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::copymap::_MSG_Ret_AdventureCopymapInfo_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::copymap::_MSG_Req_AdventureHeros_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::copymap::_MSG_Ret_AdventureHeros_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::copymap::_MSG_Req_EnterAdventureCopymap_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::copymap::_ObjectData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::copymap::_MSG_Ret_TrainData_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::copymap::_MSG_Ret_PlayEventData_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::copymap::_MSG_Ret_CurMonsterGroup_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::copymap::_MSG_Req_PlayGameData_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::copymap::_MSG_Req_PlayGameRetry_CS_default_instance_),
};

const char descriptor_table_protodef_copymap_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rcopymap.proto\022\007copymap\032\rmassive.proto\032"
  "\014object.proto\"1\n\033MSG_Req_CopymapEnterInf"
  "o_CS\022\022\n\ncopymapidx\030\001 \001(\r\"G\n\033MSG_Ret_Copy"
  "mapEnterInfo_SC\022\022\n\ncopymapidx\030\001 \001(\r\022\024\n\014r"
  "emain_times\030\002 \001(\r\"-\n\027MSG_Req_EnterCopyma"
  "p_CS\022\022\n\ncopymapidx\030\001 \001(\r\"\030\n\026MSG_Req_Exit"
  "Copymap_SC\"<\n\027MSG_Ret_TriggerEnter_SC\022\016\n"
  "\006userid\030\001 \001(\t\022\021\n\tcopymapid\030\002 \001(\r\"\027\n\025MSG_"
  "ReqBackCopymap_CS\"@\n\021RewardsObjectInfo\022\033"
  "\n\004objs\030\001 \003(\0132\r.Obj.t_Object\022\016\n\006userid\030\002 "
  "\001(\r\"\271\001\n\026MSG_Ret_CopymapOver_SC\022\037\n\004type\030\001"
  " \001(\0162\021.copymap.OverType\022\024\n\014kickusertime\030"
  "\002 \001(\r\022\013\n\003exp\030\003 \001(\r\0220\n\005money\030\004 \003(\0132!.mass"
  "ive.MSG_RetCurrencyChange_SC\022)\n\005items\030\005 "
  "\001(\0132\032.copymap.RewardsObjectInfo\"d\n\024MSG_R"
  "etAwardQuest_SC\022\017\n\007questid\030\001 \001(\r\022\020\n\010scor"
  "evar\030\002 \001(\r\022)\n\005items\030\003 \001(\0132\032.copymap.Rewa"
  "rdsObjectInfo\"\033\n\031MSG_Req_CopymapLottery_"
  "CS\"F\n\031MSG_Ret_CopymapLottery_SC\022)\n\005items"
  "\030\001 \003(\0132\032.copymap.RewardsObjectInfo\".\n\030MS"
  "G_Req_CopymapGather_CS\022\022\n\ncopymapidx\030\001 \001"
  "(\r\"k\n\033MSG_Ret_CopymapGatherReq_SC\022\016\n\006lea"
  "der\030\001 \001(\t\022\025\n\rleader_career\030\002 \001(\r\022\022\n\ncopy"
  "mapidx\030\003 \001(\r\022\021\n\tcountdown\030\004 \001(\r\"/\n\036MSG_R"
  "eq_CopymapAnswerGather_CS\022\r\n\005agree\030\001 \001(\010"
  "\"l\n\021CopymapGatherItem\022\014\n\004name\030\001 \001(\t\022\016\n\006c"
  "harid\030\002 \001(\t\022)\n\005state\030\003 \001(\0162\032.copymap.Mem"
  "berGatherState\022\016\n\006heroid\030\004 \001(\r\"\224\001\n\034MSG_R"
  "et_CopymapGatherData_SC\022(\n\004data\030\001 \003(\0132\032."
  "copymap.CopymapGatherItem\022#\n\005state\030\002 \001(\016"
  "2\024.copymap.GatherState\022\021\n\tcountdown\030\003 \001("
  "\r\022\022\n\ncopymapidx\030\004 \001(\r\"$\n\"MSG_Req_Copymap"
  "GatherQuickEnter_CS\"\034\n\032MSG_Req_CopymapRe"
  "Gather_CS\"0\n\032MSG_Ret_CopymapReGather_SC\022"
  "\022\n\ncopymapidx\030\001 \001(\r\".\n\034MSG_Ret_CopymapBo"
  "ssTempID_SC\022\016\n\006tempid\030\001 \003(\t\"S\n\025Adventure"
  "CopymapGroup\022\023\n\013adventureid\030\001 \001(\r\022\025\n\rcom"
  "plete_rate\030\002 \001(\r\022\016\n\006unlock\030\003 \001(\010\"\"\n MSG_"
  "Req_AdventureCopymapGroup_CS\"R\n MSG_Ret_"
  "AdventureCopymapGroup_SC\022.\n\006groups\030\001 \003(\013"
  "2\036.copymap.AdventureCopymapGroup\"[\n\020Adve"
  "ntureCopymap\022\022\n\ncopymapidx\030\001 \001(\r\022\016\n\006unlo"
  "ck\030\002 \001(\010\022\014\n\004star\030\003 \001(\r\022\025\n\rfirst_success\030"
  "\004 \001(\010\"6\n\037MSG_Req_AdventureCopymapInfo_CS"
  "\022\023\n\013adventureid\030\001 \001(\r\"N\n\037MSG_Ret_Adventu"
  "reCopymapInfo_SC\022+\n\010copymaps\030\001 \003(\0132\031.cop"
  "ymap.AdventureCopymap\"0\n\031MSG_Req_Adventu"
  "reHeros_CS\022\023\n\013adventureid\030\001 \001(\r\">\n\031MSG_R"
  "et_AdventureHeros_SC\022\r\n\005heros\030\001 \003(\r\022\022\n\007r"
  "etcode\030\002 \001(\r:\0010\"F\n MSG_Req_EnterAdventur"
  "eCopymap_CS\022\016\n\006heroid\030\001 \001(\r\022\022\n\ncopymapid"
  "x\030\002 \001(\r\"+\n\nObjectData\022\r\n\005objid\030\001 \001(\r\022\016\n\006"
  "objnum\030\002 \001(\r\"_\n\024MSG_Ret_TrainData_SC\022\021\n\t"
  "starttime\030\001 \001(\r\022\017\n\007endtime\030\002 \001(\r\022#\n\006rewa"
  "rd\030\003 \003(\0132\023.copymap.ObjectData\"O\n\030MSG_Ret"
  "_PlayEventData_SC\022\017\n\007eventid\030\001 \001(\r\022\021\n\tst"
  "arttime\030\002 \001(\r\022\017\n\007endtime\030\003 \001(\r\"-\n\032MSG_Re"
  "t_CurMonsterGroup_SC\022\017\n\007groupid\030\001 \001(\r\"F\n"
  "\027MSG_Req_PlayGameData_CS\022\014\n\004step\030\001 \001(\r\022\017"
  "\n\007success\030\002 \001(\r\022\014\n\004type\030\003 \001(\r\"(\n\030MSG_Req"
  "_PlayGameRetry_CS\022\014\n\004type\030\001 \001(\r*p\n\010OverT"
  "ype\022\031\n\025OVERMAP_ALLUSER_DEATH\020\001\022\030\n\024OVERMA"
  "P_KILL_ONEBOSS\020\002\022\030\n\024OVERMAP_KILL_ALLBOSS"
  "\020\004\022\025\n\021OVERMAP_TIME_OVER\020\010*|\n\021MemberGathe"
  "rState\022\017\n\013Gather_None\020\000\022\020\n\014Gather_Agree\020"
  "\001\022\017\n\013Gather_Deny\020\002\022\032\n\026Gather_Times_NotEn"
  "ough\020\003\022\027\n\023Gather_Offline_Deny\020\004*_\n\013Gathe"
  "rState\022\021\n\rCPGather_None\020\000\022\022\n\016CPGather_St"
  "art\020\001\022\024\n\020CPGather_Success\020\002\022\023\n\017CPGather_"
  "Failed\020\003"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_copymap_2eproto_deps[2] = {
  &::descriptor_table_massive_2eproto,
  &::descriptor_table_object_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_copymap_2eproto_sccs[35] = {
  &scc_info_AdventureCopymap_copymap_2eproto.base,
  &scc_info_AdventureCopymapGroup_copymap_2eproto.base,
  &scc_info_CopymapGatherItem_copymap_2eproto.base,
  &scc_info_MSG_ReqBackCopymap_CS_copymap_2eproto.base,
  &scc_info_MSG_Req_AdventureCopymapGroup_CS_copymap_2eproto.base,
  &scc_info_MSG_Req_AdventureCopymapInfo_CS_copymap_2eproto.base,
  &scc_info_MSG_Req_AdventureHeros_CS_copymap_2eproto.base,
  &scc_info_MSG_Req_CopymapAnswerGather_CS_copymap_2eproto.base,
  &scc_info_MSG_Req_CopymapEnterInfo_CS_copymap_2eproto.base,
  &scc_info_MSG_Req_CopymapGatherQuickEnter_CS_copymap_2eproto.base,
  &scc_info_MSG_Req_CopymapGather_CS_copymap_2eproto.base,
  &scc_info_MSG_Req_CopymapLottery_CS_copymap_2eproto.base,
  &scc_info_MSG_Req_CopymapReGather_CS_copymap_2eproto.base,
  &scc_info_MSG_Req_EnterAdventureCopymap_CS_copymap_2eproto.base,
  &scc_info_MSG_Req_EnterCopymap_CS_copymap_2eproto.base,
  &scc_info_MSG_Req_ExitCopymap_SC_copymap_2eproto.base,
  &scc_info_MSG_Req_PlayGameData_CS_copymap_2eproto.base,
  &scc_info_MSG_Req_PlayGameRetry_CS_copymap_2eproto.base,
  &scc_info_MSG_RetAwardQuest_SC_copymap_2eproto.base,
  &scc_info_MSG_Ret_AdventureCopymapGroup_SC_copymap_2eproto.base,
  &scc_info_MSG_Ret_AdventureCopymapInfo_SC_copymap_2eproto.base,
  &scc_info_MSG_Ret_AdventureHeros_SC_copymap_2eproto.base,
  &scc_info_MSG_Ret_CopymapBossTempID_SC_copymap_2eproto.base,
  &scc_info_MSG_Ret_CopymapEnterInfo_SC_copymap_2eproto.base,
  &scc_info_MSG_Ret_CopymapGatherData_SC_copymap_2eproto.base,
  &scc_info_MSG_Ret_CopymapGatherReq_SC_copymap_2eproto.base,
  &scc_info_MSG_Ret_CopymapLottery_SC_copymap_2eproto.base,
  &scc_info_MSG_Ret_CopymapOver_SC_copymap_2eproto.base,
  &scc_info_MSG_Ret_CopymapReGather_SC_copymap_2eproto.base,
  &scc_info_MSG_Ret_CurMonsterGroup_SC_copymap_2eproto.base,
  &scc_info_MSG_Ret_PlayEventData_SC_copymap_2eproto.base,
  &scc_info_MSG_Ret_TrainData_SC_copymap_2eproto.base,
  &scc_info_MSG_Ret_TriggerEnter_SC_copymap_2eproto.base,
  &scc_info_ObjectData_copymap_2eproto.base,
  &scc_info_RewardsObjectInfo_copymap_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_copymap_2eproto_once;
static bool descriptor_table_copymap_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_copymap_2eproto = {
  &descriptor_table_copymap_2eproto_initialized, descriptor_table_protodef_copymap_2eproto, "copymap.proto", 2768,
  &descriptor_table_copymap_2eproto_once, descriptor_table_copymap_2eproto_sccs, descriptor_table_copymap_2eproto_deps, 35, 2,
  schemas, file_default_instances, TableStruct_copymap_2eproto::offsets,
  file_level_metadata_copymap_2eproto, 35, file_level_enum_descriptors_copymap_2eproto, file_level_service_descriptors_copymap_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_copymap_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_copymap_2eproto)), true);
namespace copymap {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OverType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_copymap_2eproto);
  return file_level_enum_descriptors_copymap_2eproto[0];
}
bool OverType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MemberGatherState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_copymap_2eproto);
  return file_level_enum_descriptors_copymap_2eproto[1];
}
bool MemberGatherState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GatherState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_copymap_2eproto);
  return file_level_enum_descriptors_copymap_2eproto[2];
}
bool GatherState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void MSG_Req_CopymapEnterInfo_CS::InitAsDefaultInstance() {
}
class MSG_Req_CopymapEnterInfo_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_CopymapEnterInfo_CS>()._has_bits_);
  static void set_has_copymapidx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Req_CopymapEnterInfo_CS::MSG_Req_CopymapEnterInfo_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:copymap.MSG_Req_CopymapEnterInfo_CS)
}
MSG_Req_CopymapEnterInfo_CS::MSG_Req_CopymapEnterInfo_CS(const MSG_Req_CopymapEnterInfo_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  copymapidx_ = from.copymapidx_;
  // @@protoc_insertion_point(copy_constructor:copymap.MSG_Req_CopymapEnterInfo_CS)
}

void MSG_Req_CopymapEnterInfo_CS::SharedCtor() {
  copymapidx_ = 0u;
}

MSG_Req_CopymapEnterInfo_CS::~MSG_Req_CopymapEnterInfo_CS() {
  // @@protoc_insertion_point(destructor:copymap.MSG_Req_CopymapEnterInfo_CS)
  SharedDtor();
}

void MSG_Req_CopymapEnterInfo_CS::SharedDtor() {
}

void MSG_Req_CopymapEnterInfo_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_CopymapEnterInfo_CS& MSG_Req_CopymapEnterInfo_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_CopymapEnterInfo_CS_copymap_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_CopymapEnterInfo_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:copymap.MSG_Req_CopymapEnterInfo_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  copymapidx_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_CopymapEnterInfo_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 copymapidx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_copymapidx(&has_bits);
          copymapidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_CopymapEnterInfo_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:copymap.MSG_Req_CopymapEnterInfo_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 copymapidx = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_copymapidx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:copymap.MSG_Req_CopymapEnterInfo_CS)
  return target;
}

size_t MSG_Req_CopymapEnterInfo_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:copymap.MSG_Req_CopymapEnterInfo_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 copymapidx = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_copymapidx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_CopymapEnterInfo_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:copymap.MSG_Req_CopymapEnterInfo_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_CopymapEnterInfo_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_CopymapEnterInfo_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:copymap.MSG_Req_CopymapEnterInfo_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:copymap.MSG_Req_CopymapEnterInfo_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_CopymapEnterInfo_CS::MergeFrom(const MSG_Req_CopymapEnterInfo_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:copymap.MSG_Req_CopymapEnterInfo_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_copymapidx()) {
    _internal_set_copymapidx(from._internal_copymapidx());
  }
}

void MSG_Req_CopymapEnterInfo_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:copymap.MSG_Req_CopymapEnterInfo_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_CopymapEnterInfo_CS::CopyFrom(const MSG_Req_CopymapEnterInfo_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:copymap.MSG_Req_CopymapEnterInfo_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_CopymapEnterInfo_CS::IsInitialized() const {
  return true;
}

void MSG_Req_CopymapEnterInfo_CS::InternalSwap(MSG_Req_CopymapEnterInfo_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(copymapidx_, other->copymapidx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_CopymapEnterInfo_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_CopymapEnterInfo_SC::InitAsDefaultInstance() {
}
class MSG_Ret_CopymapEnterInfo_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_CopymapEnterInfo_SC>()._has_bits_);
  static void set_has_copymapidx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_remain_times(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_Ret_CopymapEnterInfo_SC::MSG_Ret_CopymapEnterInfo_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:copymap.MSG_Ret_CopymapEnterInfo_SC)
}
MSG_Ret_CopymapEnterInfo_SC::MSG_Ret_CopymapEnterInfo_SC(const MSG_Ret_CopymapEnterInfo_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&copymapidx_, &from.copymapidx_,
    static_cast<size_t>(reinterpret_cast<char*>(&remain_times_) -
    reinterpret_cast<char*>(&copymapidx_)) + sizeof(remain_times_));
  // @@protoc_insertion_point(copy_constructor:copymap.MSG_Ret_CopymapEnterInfo_SC)
}

void MSG_Ret_CopymapEnterInfo_SC::SharedCtor() {
  ::memset(&copymapidx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remain_times_) -
      reinterpret_cast<char*>(&copymapidx_)) + sizeof(remain_times_));
}

MSG_Ret_CopymapEnterInfo_SC::~MSG_Ret_CopymapEnterInfo_SC() {
  // @@protoc_insertion_point(destructor:copymap.MSG_Ret_CopymapEnterInfo_SC)
  SharedDtor();
}

void MSG_Ret_CopymapEnterInfo_SC::SharedDtor() {
}

void MSG_Ret_CopymapEnterInfo_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_CopymapEnterInfo_SC& MSG_Ret_CopymapEnterInfo_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_CopymapEnterInfo_SC_copymap_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_CopymapEnterInfo_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:copymap.MSG_Ret_CopymapEnterInfo_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&copymapidx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&remain_times_) -
        reinterpret_cast<char*>(&copymapidx_)) + sizeof(remain_times_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_CopymapEnterInfo_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 copymapidx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_copymapidx(&has_bits);
          copymapidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 remain_times = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_remain_times(&has_bits);
          remain_times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_CopymapEnterInfo_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:copymap.MSG_Ret_CopymapEnterInfo_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 copymapidx = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_copymapidx(), target);
  }

  // optional uint32 remain_times = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_remain_times(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:copymap.MSG_Ret_CopymapEnterInfo_SC)
  return target;
}

size_t MSG_Ret_CopymapEnterInfo_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:copymap.MSG_Ret_CopymapEnterInfo_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 copymapidx = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_copymapidx());
    }

    // optional uint32 remain_times = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_remain_times());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_CopymapEnterInfo_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:copymap.MSG_Ret_CopymapEnterInfo_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_CopymapEnterInfo_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_CopymapEnterInfo_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:copymap.MSG_Ret_CopymapEnterInfo_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:copymap.MSG_Ret_CopymapEnterInfo_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_CopymapEnterInfo_SC::MergeFrom(const MSG_Ret_CopymapEnterInfo_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:copymap.MSG_Ret_CopymapEnterInfo_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      copymapidx_ = from.copymapidx_;
    }
    if (cached_has_bits & 0x00000002u) {
      remain_times_ = from.remain_times_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_CopymapEnterInfo_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:copymap.MSG_Ret_CopymapEnterInfo_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_CopymapEnterInfo_SC::CopyFrom(const MSG_Ret_CopymapEnterInfo_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:copymap.MSG_Ret_CopymapEnterInfo_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_CopymapEnterInfo_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_CopymapEnterInfo_SC::InternalSwap(MSG_Ret_CopymapEnterInfo_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(copymapidx_, other->copymapidx_);
  swap(remain_times_, other->remain_times_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_CopymapEnterInfo_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_EnterCopymap_CS::InitAsDefaultInstance() {
}
class MSG_Req_EnterCopymap_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_EnterCopymap_CS>()._has_bits_);
  static void set_has_copymapidx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Req_EnterCopymap_CS::MSG_Req_EnterCopymap_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:copymap.MSG_Req_EnterCopymap_CS)
}
MSG_Req_EnterCopymap_CS::MSG_Req_EnterCopymap_CS(const MSG_Req_EnterCopymap_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  copymapidx_ = from.copymapidx_;
  // @@protoc_insertion_point(copy_constructor:copymap.MSG_Req_EnterCopymap_CS)
}

void MSG_Req_EnterCopymap_CS::SharedCtor() {
  copymapidx_ = 0u;
}

MSG_Req_EnterCopymap_CS::~MSG_Req_EnterCopymap_CS() {
  // @@protoc_insertion_point(destructor:copymap.MSG_Req_EnterCopymap_CS)
  SharedDtor();
}

void MSG_Req_EnterCopymap_CS::SharedDtor() {
}

void MSG_Req_EnterCopymap_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_EnterCopymap_CS& MSG_Req_EnterCopymap_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_EnterCopymap_CS_copymap_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_EnterCopymap_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:copymap.MSG_Req_EnterCopymap_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  copymapidx_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_EnterCopymap_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 copymapidx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_copymapidx(&has_bits);
          copymapidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_EnterCopymap_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:copymap.MSG_Req_EnterCopymap_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 copymapidx = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_copymapidx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:copymap.MSG_Req_EnterCopymap_CS)
  return target;
}

size_t MSG_Req_EnterCopymap_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:copymap.MSG_Req_EnterCopymap_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 copymapidx = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_copymapidx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_EnterCopymap_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:copymap.MSG_Req_EnterCopymap_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_EnterCopymap_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_EnterCopymap_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:copymap.MSG_Req_EnterCopymap_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:copymap.MSG_Req_EnterCopymap_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_EnterCopymap_CS::MergeFrom(const MSG_Req_EnterCopymap_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:copymap.MSG_Req_EnterCopymap_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_copymapidx()) {
    _internal_set_copymapidx(from._internal_copymapidx());
  }
}

void MSG_Req_EnterCopymap_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:copymap.MSG_Req_EnterCopymap_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_EnterCopymap_CS::CopyFrom(const MSG_Req_EnterCopymap_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:copymap.MSG_Req_EnterCopymap_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_EnterCopymap_CS::IsInitialized() const {
  return true;
}

void MSG_Req_EnterCopymap_CS::InternalSwap(MSG_Req_EnterCopymap_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(copymapidx_, other->copymapidx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_EnterCopymap_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_ExitCopymap_SC::InitAsDefaultInstance() {
}
class MSG_Req_ExitCopymap_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_ExitCopymap_SC>()._has_bits_);
};

MSG_Req_ExitCopymap_SC::MSG_Req_ExitCopymap_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:copymap.MSG_Req_ExitCopymap_SC)
}
MSG_Req_ExitCopymap_SC::MSG_Req_ExitCopymap_SC(const MSG_Req_ExitCopymap_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:copymap.MSG_Req_ExitCopymap_SC)
}

void MSG_Req_ExitCopymap_SC::SharedCtor() {
}

MSG_Req_ExitCopymap_SC::~MSG_Req_ExitCopymap_SC() {
  // @@protoc_insertion_point(destructor:copymap.MSG_Req_ExitCopymap_SC)
  SharedDtor();
}

void MSG_Req_ExitCopymap_SC::SharedDtor() {
}

void MSG_Req_ExitCopymap_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_ExitCopymap_SC& MSG_Req_ExitCopymap_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_ExitCopymap_SC_copymap_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_ExitCopymap_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:copymap.MSG_Req_ExitCopymap_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_ExitCopymap_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_ExitCopymap_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:copymap.MSG_Req_ExitCopymap_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:copymap.MSG_Req_ExitCopymap_SC)
  return target;
}

size_t MSG_Req_ExitCopymap_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:copymap.MSG_Req_ExitCopymap_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_ExitCopymap_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:copymap.MSG_Req_ExitCopymap_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_ExitCopymap_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_ExitCopymap_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:copymap.MSG_Req_ExitCopymap_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:copymap.MSG_Req_ExitCopymap_SC)
    MergeFrom(*source);
  }
}

void MSG_Req_ExitCopymap_SC::MergeFrom(const MSG_Req_ExitCopymap_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:copymap.MSG_Req_ExitCopymap_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_Req_ExitCopymap_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:copymap.MSG_Req_ExitCopymap_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_ExitCopymap_SC::CopyFrom(const MSG_Req_ExitCopymap_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:copymap.MSG_Req_ExitCopymap_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_ExitCopymap_SC::IsInitialized() const {
  return true;
}

void MSG_Req_ExitCopymap_SC::InternalSwap(MSG_Req_ExitCopymap_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_ExitCopymap_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_TriggerEnter_SC::InitAsDefaultInstance() {
}
class MSG_Ret_TriggerEnter_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_TriggerEnter_SC>()._has_bits_);
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_copymapid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_Ret_TriggerEnter_SC::MSG_Ret_TriggerEnter_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:copymap.MSG_Ret_TriggerEnter_SC)
}
MSG_Ret_TriggerEnter_SC::MSG_Ret_TriggerEnter_SC(const MSG_Ret_TriggerEnter_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_userid()) {
    userid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  copymapid_ = from.copymapid_;
  // @@protoc_insertion_point(copy_constructor:copymap.MSG_Ret_TriggerEnter_SC)
}

void MSG_Ret_TriggerEnter_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_TriggerEnter_SC_copymap_2eproto.base);
  userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  copymapid_ = 0u;
}

MSG_Ret_TriggerEnter_SC::~MSG_Ret_TriggerEnter_SC() {
  // @@protoc_insertion_point(destructor:copymap.MSG_Ret_TriggerEnter_SC)
  SharedDtor();
}

void MSG_Ret_TriggerEnter_SC::SharedDtor() {
  userid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_Ret_TriggerEnter_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_TriggerEnter_SC& MSG_Ret_TriggerEnter_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_TriggerEnter_SC_copymap_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_TriggerEnter_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:copymap.MSG_Ret_TriggerEnter_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    userid_.ClearNonDefaultToEmptyNoArena();
  }
  copymapid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_TriggerEnter_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string userid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_userid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "copymap.MSG_Ret_TriggerEnter_SC.userid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 copymapid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_copymapid(&has_bits);
          copymapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_TriggerEnter_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:copymap.MSG_Ret_TriggerEnter_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string userid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_userid().data(), static_cast<int>(this->_internal_userid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "copymap.MSG_Ret_TriggerEnter_SC.userid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_userid(), target);
  }

  // optional uint32 copymapid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_copymapid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:copymap.MSG_Ret_TriggerEnter_SC)
  return target;
}

size_t MSG_Ret_TriggerEnter_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:copymap.MSG_Ret_TriggerEnter_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string userid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_userid());
    }

    // optional uint32 copymapid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_copymapid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_TriggerEnter_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:copymap.MSG_Ret_TriggerEnter_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_TriggerEnter_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_TriggerEnter_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:copymap.MSG_Ret_TriggerEnter_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:copymap.MSG_Ret_TriggerEnter_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_TriggerEnter_SC::MergeFrom(const MSG_Ret_TriggerEnter_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:copymap.MSG_Ret_TriggerEnter_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      userid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.userid_);
    }
    if (cached_has_bits & 0x00000002u) {
      copymapid_ = from.copymapid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_TriggerEnter_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:copymap.MSG_Ret_TriggerEnter_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_TriggerEnter_SC::CopyFrom(const MSG_Ret_TriggerEnter_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:copymap.MSG_Ret_TriggerEnter_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_TriggerEnter_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_TriggerEnter_SC::InternalSwap(MSG_Ret_TriggerEnter_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  userid_.Swap(&other->userid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(copymapid_, other->copymapid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_TriggerEnter_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqBackCopymap_CS::InitAsDefaultInstance() {
}
class MSG_ReqBackCopymap_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqBackCopymap_CS>()._has_bits_);
};

MSG_ReqBackCopymap_CS::MSG_ReqBackCopymap_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:copymap.MSG_ReqBackCopymap_CS)
}
MSG_ReqBackCopymap_CS::MSG_ReqBackCopymap_CS(const MSG_ReqBackCopymap_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:copymap.MSG_ReqBackCopymap_CS)
}

void MSG_ReqBackCopymap_CS::SharedCtor() {
}

MSG_ReqBackCopymap_CS::~MSG_ReqBackCopymap_CS() {
  // @@protoc_insertion_point(destructor:copymap.MSG_ReqBackCopymap_CS)
  SharedDtor();
}

void MSG_ReqBackCopymap_CS::SharedDtor() {
}

void MSG_ReqBackCopymap_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqBackCopymap_CS& MSG_ReqBackCopymap_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqBackCopymap_CS_copymap_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqBackCopymap_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:copymap.MSG_ReqBackCopymap_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqBackCopymap_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqBackCopymap_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:copymap.MSG_ReqBackCopymap_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:copymap.MSG_ReqBackCopymap_CS)
  return target;
}

size_t MSG_ReqBackCopymap_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:copymap.MSG_ReqBackCopymap_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqBackCopymap_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:copymap.MSG_ReqBackCopymap_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqBackCopymap_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqBackCopymap_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:copymap.MSG_ReqBackCopymap_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:copymap.MSG_ReqBackCopymap_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqBackCopymap_CS::MergeFrom(const MSG_ReqBackCopymap_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:copymap.MSG_ReqBackCopymap_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_ReqBackCopymap_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:copymap.MSG_ReqBackCopymap_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqBackCopymap_CS::CopyFrom(const MSG_ReqBackCopymap_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:copymap.MSG_ReqBackCopymap_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqBackCopymap_CS::IsInitialized() const {
  return true;
}

void MSG_ReqBackCopymap_CS::InternalSwap(MSG_ReqBackCopymap_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqBackCopymap_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RewardsObjectInfo::InitAsDefaultInstance() {
}
class RewardsObjectInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<RewardsObjectInfo>()._has_bits_);
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void RewardsObjectInfo::clear_objs() {
  objs_.Clear();
}
RewardsObjectInfo::RewardsObjectInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:copymap.RewardsObjectInfo)
}
RewardsObjectInfo::RewardsObjectInfo(const RewardsObjectInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      objs_(from.objs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:copymap.RewardsObjectInfo)
}

void RewardsObjectInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RewardsObjectInfo_copymap_2eproto.base);
  userid_ = 0u;
}

RewardsObjectInfo::~RewardsObjectInfo() {
  // @@protoc_insertion_point(destructor:copymap.RewardsObjectInfo)
  SharedDtor();
}

void RewardsObjectInfo::SharedDtor() {
}

void RewardsObjectInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RewardsObjectInfo& RewardsObjectInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RewardsObjectInfo_copymap_2eproto.base);
  return *internal_default_instance();
}


void RewardsObjectInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:copymap.RewardsObjectInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  objs_.Clear();
  userid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RewardsObjectInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Obj.t_Object objs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_objs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 userid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_userid(&has_bits);
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RewardsObjectInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:copymap.RewardsObjectInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Obj.t_Object objs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_objs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_objs(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 userid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:copymap.RewardsObjectInfo)
  return target;
}

size_t RewardsObjectInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:copymap.RewardsObjectInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Obj.t_Object objs = 1;
  total_size += 1UL * this->_internal_objs_size();
  for (const auto& msg : this->objs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 userid = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_userid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RewardsObjectInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:copymap.RewardsObjectInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RewardsObjectInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RewardsObjectInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:copymap.RewardsObjectInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:copymap.RewardsObjectInfo)
    MergeFrom(*source);
  }
}

void RewardsObjectInfo::MergeFrom(const RewardsObjectInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:copymap.RewardsObjectInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  objs_.MergeFrom(from.objs_);
  if (from._internal_has_userid()) {
    _internal_set_userid(from._internal_userid());
  }
}

void RewardsObjectInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:copymap.RewardsObjectInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardsObjectInfo::CopyFrom(const RewardsObjectInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:copymap.RewardsObjectInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardsObjectInfo::IsInitialized() const {
  return true;
}

void RewardsObjectInfo::InternalSwap(RewardsObjectInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  objs_.InternalSwap(&other->objs_);
  swap(userid_, other->userid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RewardsObjectInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_CopymapOver_SC::InitAsDefaultInstance() {
  ::copymap::_MSG_Ret_CopymapOver_SC_default_instance_._instance.get_mutable()->items_ = const_cast< ::copymap::RewardsObjectInfo*>(
      ::copymap::RewardsObjectInfo::internal_default_instance());
}
class MSG_Ret_CopymapOver_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_CopymapOver_SC>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_kickusertime(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_exp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::copymap::RewardsObjectInfo& items(const MSG_Ret_CopymapOver_SC* msg);
  static void set_has_items(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::copymap::RewardsObjectInfo&
MSG_Ret_CopymapOver_SC::_Internal::items(const MSG_Ret_CopymapOver_SC* msg) {
  return *msg->items_;
}
void MSG_Ret_CopymapOver_SC::clear_money() {
  money_.Clear();
}
MSG_Ret_CopymapOver_SC::MSG_Ret_CopymapOver_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:copymap.MSG_Ret_CopymapOver_SC)
}
MSG_Ret_CopymapOver_SC::MSG_Ret_CopymapOver_SC(const MSG_Ret_CopymapOver_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      money_(from.money_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_items()) {
    items_ = new ::copymap::RewardsObjectInfo(*from.items_);
  } else {
    items_ = nullptr;
  }
  ::memcpy(&kickusertime_, &from.kickusertime_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&kickusertime_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:copymap.MSG_Ret_CopymapOver_SC)
}

void MSG_Ret_CopymapOver_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_CopymapOver_SC_copymap_2eproto.base);
  ::memset(&items_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exp_) -
      reinterpret_cast<char*>(&items_)) + sizeof(exp_));
  type_ = 1;
}

MSG_Ret_CopymapOver_SC::~MSG_Ret_CopymapOver_SC() {
  // @@protoc_insertion_point(destructor:copymap.MSG_Ret_CopymapOver_SC)
  SharedDtor();
}

void MSG_Ret_CopymapOver_SC::SharedDtor() {
  if (this != internal_default_instance()) delete items_;
}

void MSG_Ret_CopymapOver_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_CopymapOver_SC& MSG_Ret_CopymapOver_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_CopymapOver_SC_copymap_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_CopymapOver_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:copymap.MSG_Ret_CopymapOver_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  money_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(items_ != nullptr);
    items_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&kickusertime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&exp_) -
        reinterpret_cast<char*>(&kickusertime_)) + sizeof(exp_));
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_CopymapOver_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .copymap.OverType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::copymap::OverType_IsValid(val))) {
            _internal_set_type(static_cast<::copymap::OverType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 kickusertime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_kickusertime(&has_bits);
          kickusertime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 exp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_exp(&has_bits);
          exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .massive.MSG_RetCurrencyChange_SC money = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_money(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .copymap.RewardsObjectInfo items = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_items(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_CopymapOver_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:copymap.MSG_Ret_CopymapOver_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .copymap.OverType type = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional uint32 kickusertime = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_kickusertime(), target);
  }

  // optional uint32 exp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_exp(), target);
  }

  // repeated .massive.MSG_RetCurrencyChange_SC money = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_money_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_money(i), target, stream);
  }

  // optional .copymap.RewardsObjectInfo items = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::items(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:copymap.MSG_Ret_CopymapOver_SC)
  return target;
}

size_t MSG_Ret_CopymapOver_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:copymap.MSG_Ret_CopymapOver_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .massive.MSG_RetCurrencyChange_SC money = 4;
  total_size += 1UL * this->_internal_money_size();
  for (const auto& msg : this->money_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .copymap.RewardsObjectInfo items = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *items_);
    }

    // optional uint32 kickusertime = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_kickusertime());
    }

    // optional uint32 exp = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_exp());
    }

    // optional .copymap.OverType type = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_CopymapOver_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:copymap.MSG_Ret_CopymapOver_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_CopymapOver_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_CopymapOver_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:copymap.MSG_Ret_CopymapOver_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:copymap.MSG_Ret_CopymapOver_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_CopymapOver_SC::MergeFrom(const MSG_Ret_CopymapOver_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:copymap.MSG_Ret_CopymapOver_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  money_.MergeFrom(from.money_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_items()->::copymap::RewardsObjectInfo::MergeFrom(from._internal_items());
    }
    if (cached_has_bits & 0x00000002u) {
      kickusertime_ = from.kickusertime_;
    }
    if (cached_has_bits & 0x00000004u) {
      exp_ = from.exp_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_CopymapOver_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:copymap.MSG_Ret_CopymapOver_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_CopymapOver_SC::CopyFrom(const MSG_Ret_CopymapOver_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:copymap.MSG_Ret_CopymapOver_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_CopymapOver_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_CopymapOver_SC::InternalSwap(MSG_Ret_CopymapOver_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  money_.InternalSwap(&other->money_);
  swap(items_, other->items_);
  swap(kickusertime_, other->kickusertime_);
  swap(exp_, other->exp_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_CopymapOver_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetAwardQuest_SC::InitAsDefaultInstance() {
  ::copymap::_MSG_RetAwardQuest_SC_default_instance_._instance.get_mutable()->items_ = const_cast< ::copymap::RewardsObjectInfo*>(
      ::copymap::RewardsObjectInfo::internal_default_instance());
}
class MSG_RetAwardQuest_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetAwardQuest_SC>()._has_bits_);
  static void set_has_questid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_scorevar(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::copymap::RewardsObjectInfo& items(const MSG_RetAwardQuest_SC* msg);
  static void set_has_items(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::copymap::RewardsObjectInfo&
MSG_RetAwardQuest_SC::_Internal::items(const MSG_RetAwardQuest_SC* msg) {
  return *msg->items_;
}
MSG_RetAwardQuest_SC::MSG_RetAwardQuest_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:copymap.MSG_RetAwardQuest_SC)
}
MSG_RetAwardQuest_SC::MSG_RetAwardQuest_SC(const MSG_RetAwardQuest_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_items()) {
    items_ = new ::copymap::RewardsObjectInfo(*from.items_);
  } else {
    items_ = nullptr;
  }
  ::memcpy(&questid_, &from.questid_,
    static_cast<size_t>(reinterpret_cast<char*>(&scorevar_) -
    reinterpret_cast<char*>(&questid_)) + sizeof(scorevar_));
  // @@protoc_insertion_point(copy_constructor:copymap.MSG_RetAwardQuest_SC)
}

void MSG_RetAwardQuest_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_RetAwardQuest_SC_copymap_2eproto.base);
  ::memset(&items_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scorevar_) -
      reinterpret_cast<char*>(&items_)) + sizeof(scorevar_));
}

MSG_RetAwardQuest_SC::~MSG_RetAwardQuest_SC() {
  // @@protoc_insertion_point(destructor:copymap.MSG_RetAwardQuest_SC)
  SharedDtor();
}

void MSG_RetAwardQuest_SC::SharedDtor() {
  if (this != internal_default_instance()) delete items_;
}

void MSG_RetAwardQuest_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetAwardQuest_SC& MSG_RetAwardQuest_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetAwardQuest_SC_copymap_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetAwardQuest_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:copymap.MSG_RetAwardQuest_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(items_ != nullptr);
    items_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&questid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&scorevar_) -
        reinterpret_cast<char*>(&questid_)) + sizeof(scorevar_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetAwardQuest_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 questid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_questid(&has_bits);
          questid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 scorevar = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_scorevar(&has_bits);
          scorevar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .copymap.RewardsObjectInfo items = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_items(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetAwardQuest_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:copymap.MSG_RetAwardQuest_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 questid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_questid(), target);
  }

  // optional uint32 scorevar = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_scorevar(), target);
  }

  // optional .copymap.RewardsObjectInfo items = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::items(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:copymap.MSG_RetAwardQuest_SC)
  return target;
}

size_t MSG_RetAwardQuest_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:copymap.MSG_RetAwardQuest_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .copymap.RewardsObjectInfo items = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *items_);
    }

    // optional uint32 questid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_questid());
    }

    // optional uint32 scorevar = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_scorevar());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetAwardQuest_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:copymap.MSG_RetAwardQuest_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetAwardQuest_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetAwardQuest_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:copymap.MSG_RetAwardQuest_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:copymap.MSG_RetAwardQuest_SC)
    MergeFrom(*source);
  }
}

void MSG_RetAwardQuest_SC::MergeFrom(const MSG_RetAwardQuest_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:copymap.MSG_RetAwardQuest_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_items()->::copymap::RewardsObjectInfo::MergeFrom(from._internal_items());
    }
    if (cached_has_bits & 0x00000002u) {
      questid_ = from.questid_;
    }
    if (cached_has_bits & 0x00000004u) {
      scorevar_ = from.scorevar_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_RetAwardQuest_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:copymap.MSG_RetAwardQuest_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetAwardQuest_SC::CopyFrom(const MSG_RetAwardQuest_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:copymap.MSG_RetAwardQuest_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetAwardQuest_SC::IsInitialized() const {
  return true;
}

void MSG_RetAwardQuest_SC::InternalSwap(MSG_RetAwardQuest_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(items_, other->items_);
  swap(questid_, other->questid_);
  swap(scorevar_, other->scorevar_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetAwardQuest_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_CopymapLottery_CS::InitAsDefaultInstance() {
}
class MSG_Req_CopymapLottery_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_CopymapLottery_CS>()._has_bits_);
};

MSG_Req_CopymapLottery_CS::MSG_Req_CopymapLottery_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:copymap.MSG_Req_CopymapLottery_CS)
}
MSG_Req_CopymapLottery_CS::MSG_Req_CopymapLottery_CS(const MSG_Req_CopymapLottery_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:copymap.MSG_Req_CopymapLottery_CS)
}

void MSG_Req_CopymapLottery_CS::SharedCtor() {
}

MSG_Req_CopymapLottery_CS::~MSG_Req_CopymapLottery_CS() {
  // @@protoc_insertion_point(destructor:copymap.MSG_Req_CopymapLottery_CS)
  SharedDtor();
}

void MSG_Req_CopymapLottery_CS::SharedDtor() {
}

void MSG_Req_CopymapLottery_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_CopymapLottery_CS& MSG_Req_CopymapLottery_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_CopymapLottery_CS_copymap_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_CopymapLottery_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:copymap.MSG_Req_CopymapLottery_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_CopymapLottery_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_CopymapLottery_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:copymap.MSG_Req_CopymapLottery_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:copymap.MSG_Req_CopymapLottery_CS)
  return target;
}

size_t MSG_Req_CopymapLottery_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:copymap.MSG_Req_CopymapLottery_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_CopymapLottery_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:copymap.MSG_Req_CopymapLottery_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_CopymapLottery_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_CopymapLottery_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:copymap.MSG_Req_CopymapLottery_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:copymap.MSG_Req_CopymapLottery_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_CopymapLottery_CS::MergeFrom(const MSG_Req_CopymapLottery_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:copymap.MSG_Req_CopymapLottery_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_Req_CopymapLottery_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:copymap.MSG_Req_CopymapLottery_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_CopymapLottery_CS::CopyFrom(const MSG_Req_CopymapLottery_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:copymap.MSG_Req_CopymapLottery_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_CopymapLottery_CS::IsInitialized() const {
  return true;
}

void MSG_Req_CopymapLottery_CS::InternalSwap(MSG_Req_CopymapLottery_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_CopymapLottery_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_CopymapLottery_SC::InitAsDefaultInstance() {
}
class MSG_Ret_CopymapLottery_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_CopymapLottery_SC>()._has_bits_);
};

MSG_Ret_CopymapLottery_SC::MSG_Ret_CopymapLottery_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:copymap.MSG_Ret_CopymapLottery_SC)
}
MSG_Ret_CopymapLottery_SC::MSG_Ret_CopymapLottery_SC(const MSG_Ret_CopymapLottery_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      items_(from.items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:copymap.MSG_Ret_CopymapLottery_SC)
}

void MSG_Ret_CopymapLottery_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_CopymapLottery_SC_copymap_2eproto.base);
}

MSG_Ret_CopymapLottery_SC::~MSG_Ret_CopymapLottery_SC() {
  // @@protoc_insertion_point(destructor:copymap.MSG_Ret_CopymapLottery_SC)
  SharedDtor();
}

void MSG_Ret_CopymapLottery_SC::SharedDtor() {
}

void MSG_Ret_CopymapLottery_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_CopymapLottery_SC& MSG_Ret_CopymapLottery_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_CopymapLottery_SC_copymap_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_CopymapLottery_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:copymap.MSG_Ret_CopymapLottery_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_CopymapLottery_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .copymap.RewardsObjectInfo items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_CopymapLottery_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:copymap.MSG_Ret_CopymapLottery_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .copymap.RewardsObjectInfo items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:copymap.MSG_Ret_CopymapLottery_SC)
  return target;
}

size_t MSG_Ret_CopymapLottery_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:copymap.MSG_Ret_CopymapLottery_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .copymap.RewardsObjectInfo items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_CopymapLottery_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:copymap.MSG_Ret_CopymapLottery_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_CopymapLottery_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_CopymapLottery_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:copymap.MSG_Ret_CopymapLottery_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:copymap.MSG_Ret_CopymapLottery_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_CopymapLottery_SC::MergeFrom(const MSG_Ret_CopymapLottery_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:copymap.MSG_Ret_CopymapLottery_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
}

void MSG_Ret_CopymapLottery_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:copymap.MSG_Ret_CopymapLottery_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_CopymapLottery_SC::CopyFrom(const MSG_Ret_CopymapLottery_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:copymap.MSG_Ret_CopymapLottery_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_CopymapLottery_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_CopymapLottery_SC::InternalSwap(MSG_Ret_CopymapLottery_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  items_.InternalSwap(&other->items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_CopymapLottery_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_CopymapGather_CS::InitAsDefaultInstance() {
}
class MSG_Req_CopymapGather_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_CopymapGather_CS>()._has_bits_);
  static void set_has_copymapidx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Req_CopymapGather_CS::MSG_Req_CopymapGather_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:copymap.MSG_Req_CopymapGather_CS)
}
MSG_Req_CopymapGather_CS::MSG_Req_CopymapGather_CS(const MSG_Req_CopymapGather_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  copymapidx_ = from.copymapidx_;
  // @@protoc_insertion_point(copy_constructor:copymap.MSG_Req_CopymapGather_CS)
}

void MSG_Req_CopymapGather_CS::SharedCtor() {
  copymapidx_ = 0u;
}

MSG_Req_CopymapGather_CS::~MSG_Req_CopymapGather_CS() {
  // @@protoc_insertion_point(destructor:copymap.MSG_Req_CopymapGather_CS)
  SharedDtor();
}

void MSG_Req_CopymapGather_CS::SharedDtor() {
}

void MSG_Req_CopymapGather_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_CopymapGather_CS& MSG_Req_CopymapGather_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_CopymapGather_CS_copymap_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_CopymapGather_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:copymap.MSG_Req_CopymapGather_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  copymapidx_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_CopymapGather_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 copymapidx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_copymapidx(&has_bits);
          copymapidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_CopymapGather_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:copymap.MSG_Req_CopymapGather_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 copymapidx = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_copymapidx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:copymap.MSG_Req_CopymapGather_CS)
  return target;
}

size_t MSG_Req_CopymapGather_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:copymap.MSG_Req_CopymapGather_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 copymapidx = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_copymapidx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_CopymapGather_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:copymap.MSG_Req_CopymapGather_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_CopymapGather_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_CopymapGather_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:copymap.MSG_Req_CopymapGather_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:copymap.MSG_Req_CopymapGather_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_CopymapGather_CS::MergeFrom(const MSG_Req_CopymapGather_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:copymap.MSG_Req_CopymapGather_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_copymapidx()) {
    _internal_set_copymapidx(from._internal_copymapidx());
  }
}

void MSG_Req_CopymapGather_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:copymap.MSG_Req_CopymapGather_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_CopymapGather_CS::CopyFrom(const MSG_Req_CopymapGather_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:copymap.MSG_Req_CopymapGather_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_CopymapGather_CS::IsInitialized() const {
  return true;
}

void MSG_Req_CopymapGather_CS::InternalSwap(MSG_Req_CopymapGather_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(copymapidx_, other->copymapidx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_CopymapGather_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_CopymapGatherReq_SC::InitAsDefaultInstance() {
}
class MSG_Ret_CopymapGatherReq_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_CopymapGatherReq_SC>()._has_bits_);
  static void set_has_leader(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_leader_career(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_copymapidx(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_countdown(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

MSG_Ret_CopymapGatherReq_SC::MSG_Ret_CopymapGatherReq_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:copymap.MSG_Ret_CopymapGatherReq_SC)
}
MSG_Ret_CopymapGatherReq_SC::MSG_Ret_CopymapGatherReq_SC(const MSG_Ret_CopymapGatherReq_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  leader_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_leader()) {
    leader_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.leader_);
  }
  ::memcpy(&leader_career_, &from.leader_career_,
    static_cast<size_t>(reinterpret_cast<char*>(&countdown_) -
    reinterpret_cast<char*>(&leader_career_)) + sizeof(countdown_));
  // @@protoc_insertion_point(copy_constructor:copymap.MSG_Ret_CopymapGatherReq_SC)
}

void MSG_Ret_CopymapGatherReq_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_CopymapGatherReq_SC_copymap_2eproto.base);
  leader_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&leader_career_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&countdown_) -
      reinterpret_cast<char*>(&leader_career_)) + sizeof(countdown_));
}

MSG_Ret_CopymapGatherReq_SC::~MSG_Ret_CopymapGatherReq_SC() {
  // @@protoc_insertion_point(destructor:copymap.MSG_Ret_CopymapGatherReq_SC)
  SharedDtor();
}

void MSG_Ret_CopymapGatherReq_SC::SharedDtor() {
  leader_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_Ret_CopymapGatherReq_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_CopymapGatherReq_SC& MSG_Ret_CopymapGatherReq_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_CopymapGatherReq_SC_copymap_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_CopymapGatherReq_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:copymap.MSG_Ret_CopymapGatherReq_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    leader_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&leader_career_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&countdown_) -
        reinterpret_cast<char*>(&leader_career_)) + sizeof(countdown_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_CopymapGatherReq_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string leader = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_leader();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "copymap.MSG_Ret_CopymapGatherReq_SC.leader");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 leader_career = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_leader_career(&has_bits);
          leader_career_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 copymapidx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_copymapidx(&has_bits);
          copymapidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 countdown = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_countdown(&has_bits);
          countdown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_CopymapGatherReq_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:copymap.MSG_Ret_CopymapGatherReq_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string leader = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_leader().data(), static_cast<int>(this->_internal_leader().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "copymap.MSG_Ret_CopymapGatherReq_SC.leader");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_leader(), target);
  }

  // optional uint32 leader_career = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_leader_career(), target);
  }

  // optional uint32 copymapidx = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_copymapidx(), target);
  }

  // optional uint32 countdown = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_countdown(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:copymap.MSG_Ret_CopymapGatherReq_SC)
  return target;
}

size_t MSG_Ret_CopymapGatherReq_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:copymap.MSG_Ret_CopymapGatherReq_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string leader = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_leader());
    }

    // optional uint32 leader_career = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_leader_career());
    }

    // optional uint32 copymapidx = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_copymapidx());
    }

    // optional uint32 countdown = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_countdown());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_CopymapGatherReq_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:copymap.MSG_Ret_CopymapGatherReq_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_CopymapGatherReq_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_CopymapGatherReq_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:copymap.MSG_Ret_CopymapGatherReq_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:copymap.MSG_Ret_CopymapGatherReq_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_CopymapGatherReq_SC::MergeFrom(const MSG_Ret_CopymapGatherReq_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:copymap.MSG_Ret_CopymapGatherReq_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      leader_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.leader_);
    }
    if (cached_has_bits & 0x00000002u) {
      leader_career_ = from.leader_career_;
    }
    if (cached_has_bits & 0x00000004u) {
      copymapidx_ = from.copymapidx_;
    }
    if (cached_has_bits & 0x00000008u) {
      countdown_ = from.countdown_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_CopymapGatherReq_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:copymap.MSG_Ret_CopymapGatherReq_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_CopymapGatherReq_SC::CopyFrom(const MSG_Ret_CopymapGatherReq_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:copymap.MSG_Ret_CopymapGatherReq_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_CopymapGatherReq_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_CopymapGatherReq_SC::InternalSwap(MSG_Ret_CopymapGatherReq_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  leader_.Swap(&other->leader_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(leader_career_, other->leader_career_);
  swap(copymapidx_, other->copymapidx_);
  swap(countdown_, other->countdown_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_CopymapGatherReq_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_CopymapAnswerGather_CS::InitAsDefaultInstance() {
}
class MSG_Req_CopymapAnswerGather_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_CopymapAnswerGather_CS>()._has_bits_);
  static void set_has_agree(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Req_CopymapAnswerGather_CS::MSG_Req_CopymapAnswerGather_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:copymap.MSG_Req_CopymapAnswerGather_CS)
}
MSG_Req_CopymapAnswerGather_CS::MSG_Req_CopymapAnswerGather_CS(const MSG_Req_CopymapAnswerGather_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  agree_ = from.agree_;
  // @@protoc_insertion_point(copy_constructor:copymap.MSG_Req_CopymapAnswerGather_CS)
}

void MSG_Req_CopymapAnswerGather_CS::SharedCtor() {
  agree_ = false;
}

MSG_Req_CopymapAnswerGather_CS::~MSG_Req_CopymapAnswerGather_CS() {
  // @@protoc_insertion_point(destructor:copymap.MSG_Req_CopymapAnswerGather_CS)
  SharedDtor();
}

void MSG_Req_CopymapAnswerGather_CS::SharedDtor() {
}

void MSG_Req_CopymapAnswerGather_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_CopymapAnswerGather_CS& MSG_Req_CopymapAnswerGather_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_CopymapAnswerGather_CS_copymap_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_CopymapAnswerGather_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:copymap.MSG_Req_CopymapAnswerGather_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  agree_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_CopymapAnswerGather_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool agree = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_agree(&has_bits);
          agree_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_CopymapAnswerGather_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:copymap.MSG_Req_CopymapAnswerGather_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool agree = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_agree(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:copymap.MSG_Req_CopymapAnswerGather_CS)
  return target;
}

size_t MSG_Req_CopymapAnswerGather_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:copymap.MSG_Req_CopymapAnswerGather_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool agree = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_CopymapAnswerGather_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:copymap.MSG_Req_CopymapAnswerGather_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_CopymapAnswerGather_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_CopymapAnswerGather_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:copymap.MSG_Req_CopymapAnswerGather_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:copymap.MSG_Req_CopymapAnswerGather_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_CopymapAnswerGather_CS::MergeFrom(const MSG_Req_CopymapAnswerGather_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:copymap.MSG_Req_CopymapAnswerGather_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_agree()) {
    _internal_set_agree(from._internal_agree());
  }
}

void MSG_Req_CopymapAnswerGather_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:copymap.MSG_Req_CopymapAnswerGather_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_CopymapAnswerGather_CS::CopyFrom(const MSG_Req_CopymapAnswerGather_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:copymap.MSG_Req_CopymapAnswerGather_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_CopymapAnswerGather_CS::IsInitialized() const {
  return true;
}

void MSG_Req_CopymapAnswerGather_CS::InternalSwap(MSG_Req_CopymapAnswerGather_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agree_, other->agree_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_CopymapAnswerGather_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CopymapGatherItem::InitAsDefaultInstance() {
}
class CopymapGatherItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CopymapGatherItem>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_charid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_heroid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CopymapGatherItem::CopymapGatherItem()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:copymap.CopymapGatherItem)
}
CopymapGatherItem::CopymapGatherItem(const CopymapGatherItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  charid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_charid()) {
    charid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.charid_);
  }
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&heroid_) -
    reinterpret_cast<char*>(&state_)) + sizeof(heroid_));
  // @@protoc_insertion_point(copy_constructor:copymap.CopymapGatherItem)
}

void CopymapGatherItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CopymapGatherItem_copymap_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  charid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heroid_) -
      reinterpret_cast<char*>(&state_)) + sizeof(heroid_));
}

CopymapGatherItem::~CopymapGatherItem() {
  // @@protoc_insertion_point(destructor:copymap.CopymapGatherItem)
  SharedDtor();
}

void CopymapGatherItem::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  charid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CopymapGatherItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CopymapGatherItem& CopymapGatherItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CopymapGatherItem_copymap_2eproto.base);
  return *internal_default_instance();
}


void CopymapGatherItem::Clear() {
// @@protoc_insertion_point(message_clear_start:copymap.CopymapGatherItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      charid_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&heroid_) -
        reinterpret_cast<char*>(&state_)) + sizeof(heroid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CopymapGatherItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "copymap.CopymapGatherItem.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string charid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_charid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "copymap.CopymapGatherItem.charid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .copymap.MemberGatherState state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::copymap::MemberGatherState_IsValid(val))) {
            _internal_set_state(static_cast<::copymap::MemberGatherState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 heroid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_heroid(&has_bits);
          heroid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CopymapGatherItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:copymap.CopymapGatherItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "copymap.CopymapGatherItem.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string charid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_charid().data(), static_cast<int>(this->_internal_charid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "copymap.CopymapGatherItem.charid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_charid(), target);
  }

  // optional .copymap.MemberGatherState state = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_state(), target);
  }

  // optional uint32 heroid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_heroid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:copymap.CopymapGatherItem)
  return target;
}

size_t CopymapGatherItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:copymap.CopymapGatherItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string charid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_charid());
    }

    // optional .copymap.MemberGatherState state = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
    }

    // optional uint32 heroid = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_heroid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CopymapGatherItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:copymap.CopymapGatherItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CopymapGatherItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CopymapGatherItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:copymap.CopymapGatherItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:copymap.CopymapGatherItem)
    MergeFrom(*source);
  }
}

void CopymapGatherItem::MergeFrom(const CopymapGatherItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:copymap.CopymapGatherItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      charid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.charid_);
    }
    if (cached_has_bits & 0x00000004u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000008u) {
      heroid_ = from.heroid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CopymapGatherItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:copymap.CopymapGatherItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CopymapGatherItem::CopyFrom(const CopymapGatherItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:copymap.CopymapGatherItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CopymapGatherItem::IsInitialized() const {
  return true;
}

void CopymapGatherItem::InternalSwap(CopymapGatherItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  charid_.Swap(&other->charid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(state_, other->state_);
  swap(heroid_, other->heroid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CopymapGatherItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_CopymapGatherData_SC::InitAsDefaultInstance() {
}
class MSG_Ret_CopymapGatherData_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_CopymapGatherData_SC>()._has_bits_);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_countdown(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_copymapidx(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MSG_Ret_CopymapGatherData_SC::MSG_Ret_CopymapGatherData_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:copymap.MSG_Ret_CopymapGatherData_SC)
}
MSG_Ret_CopymapGatherData_SC::MSG_Ret_CopymapGatherData_SC(const MSG_Ret_CopymapGatherData_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&copymapidx_) -
    reinterpret_cast<char*>(&state_)) + sizeof(copymapidx_));
  // @@protoc_insertion_point(copy_constructor:copymap.MSG_Ret_CopymapGatherData_SC)
}

void MSG_Ret_CopymapGatherData_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_CopymapGatherData_SC_copymap_2eproto.base);
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&copymapidx_) -
      reinterpret_cast<char*>(&state_)) + sizeof(copymapidx_));
}

MSG_Ret_CopymapGatherData_SC::~MSG_Ret_CopymapGatherData_SC() {
  // @@protoc_insertion_point(destructor:copymap.MSG_Ret_CopymapGatherData_SC)
  SharedDtor();
}

void MSG_Ret_CopymapGatherData_SC::SharedDtor() {
}

void MSG_Ret_CopymapGatherData_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_CopymapGatherData_SC& MSG_Ret_CopymapGatherData_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_CopymapGatherData_SC_copymap_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_CopymapGatherData_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:copymap.MSG_Ret_CopymapGatherData_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&copymapidx_) -
        reinterpret_cast<char*>(&state_)) + sizeof(copymapidx_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_CopymapGatherData_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .copymap.CopymapGatherItem data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .copymap.GatherState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::copymap::GatherState_IsValid(val))) {
            _internal_set_state(static_cast<::copymap::GatherState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 countdown = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_countdown(&has_bits);
          countdown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 copymapidx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_copymapidx(&has_bits);
          copymapidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_CopymapGatherData_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:copymap.MSG_Ret_CopymapGatherData_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .copymap.CopymapGatherItem data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_data(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .copymap.GatherState state = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_state(), target);
  }

  // optional uint32 countdown = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_countdown(), target);
  }

  // optional uint32 copymapidx = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_copymapidx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:copymap.MSG_Ret_CopymapGatherData_SC)
  return target;
}

size_t MSG_Ret_CopymapGatherData_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:copymap.MSG_Ret_CopymapGatherData_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .copymap.CopymapGatherItem data = 1;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .copymap.GatherState state = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
    }

    // optional uint32 countdown = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_countdown());
    }

    // optional uint32 copymapidx = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_copymapidx());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_CopymapGatherData_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:copymap.MSG_Ret_CopymapGatherData_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_CopymapGatherData_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_CopymapGatherData_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:copymap.MSG_Ret_CopymapGatherData_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:copymap.MSG_Ret_CopymapGatherData_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_CopymapGatherData_SC::MergeFrom(const MSG_Ret_CopymapGatherData_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:copymap.MSG_Ret_CopymapGatherData_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000002u) {
      countdown_ = from.countdown_;
    }
    if (cached_has_bits & 0x00000004u) {
      copymapidx_ = from.copymapidx_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_CopymapGatherData_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:copymap.MSG_Ret_CopymapGatherData_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_CopymapGatherData_SC::CopyFrom(const MSG_Ret_CopymapGatherData_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:copymap.MSG_Ret_CopymapGatherData_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_CopymapGatherData_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_CopymapGatherData_SC::InternalSwap(MSG_Ret_CopymapGatherData_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
  swap(state_, other->state_);
  swap(countdown_, other->countdown_);
  swap(copymapidx_, other->copymapidx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_CopymapGatherData_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_CopymapGatherQuickEnter_CS::InitAsDefaultInstance() {
}
class MSG_Req_CopymapGatherQuickEnter_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_CopymapGatherQuickEnter_CS>()._has_bits_);
};

MSG_Req_CopymapGatherQuickEnter_CS::MSG_Req_CopymapGatherQuickEnter_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:copymap.MSG_Req_CopymapGatherQuickEnter_CS)
}
MSG_Req_CopymapGatherQuickEnter_CS::MSG_Req_CopymapGatherQuickEnter_CS(const MSG_Req_CopymapGatherQuickEnter_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:copymap.MSG_Req_CopymapGatherQuickEnter_CS)
}

void MSG_Req_CopymapGatherQuickEnter_CS::SharedCtor() {
}

MSG_Req_CopymapGatherQuickEnter_CS::~MSG_Req_CopymapGatherQuickEnter_CS() {
  // @@protoc_insertion_point(destructor:copymap.MSG_Req_CopymapGatherQuickEnter_CS)
  SharedDtor();
}

void MSG_Req_CopymapGatherQuickEnter_CS::SharedDtor() {
}

void MSG_Req_CopymapGatherQuickEnter_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_CopymapGatherQuickEnter_CS& MSG_Req_CopymapGatherQuickEnter_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_CopymapGatherQuickEnter_CS_copymap_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_CopymapGatherQuickEnter_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:copymap.MSG_Req_CopymapGatherQuickEnter_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_CopymapGatherQuickEnter_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_CopymapGatherQuickEnter_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:copymap.MSG_Req_CopymapGatherQuickEnter_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:copymap.MSG_Req_CopymapGatherQuickEnter_CS)
  return target;
}

size_t MSG_Req_CopymapGatherQuickEnter_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:copymap.MSG_Req_CopymapGatherQuickEnter_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_CopymapGatherQuickEnter_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:copymap.MSG_Req_CopymapGatherQuickEnter_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_CopymapGatherQuickEnter_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_CopymapGatherQuickEnter_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:copymap.MSG_Req_CopymapGatherQuickEnter_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:copymap.MSG_Req_CopymapGatherQuickEnter_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_CopymapGatherQuickEnter_CS::MergeFrom(const MSG_Req_CopymapGatherQuickEnter_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:copymap.MSG_Req_CopymapGatherQuickEnter_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_Req_CopymapGatherQuickEnter_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:copymap.MSG_Req_CopymapGatherQuickEnter_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_CopymapGatherQuickEnter_CS::CopyFrom(const MSG_Req_CopymapGatherQuickEnter_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:copymap.MSG_Req_CopymapGatherQuickEnter_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_CopymapGatherQuickEnter_CS::IsInitialized() const {
  return true;
}

void MSG_Req_CopymapGatherQuickEnter_CS::InternalSwap(MSG_Req_CopymapGatherQuickEnter_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_CopymapGatherQuickEnter_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_CopymapReGather_CS::InitAsDefaultInstance() {
}
class MSG_Req_CopymapReGather_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_CopymapReGather_CS>()._has_bits_);
};

MSG_Req_CopymapReGather_CS::MSG_Req_CopymapReGather_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:copymap.MSG_Req_CopymapReGather_CS)
}
MSG_Req_CopymapReGather_CS::MSG_Req_CopymapReGather_CS(const MSG_Req_CopymapReGather_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:copymap.MSG_Req_CopymapReGather_CS)
}

void MSG_Req_CopymapReGather_CS::SharedCtor() {
}

MSG_Req_CopymapReGather_CS::~MSG_Req_CopymapReGather_CS() {
  // @@protoc_insertion_point(destructor:copymap.MSG_Req_CopymapReGather_CS)
  SharedDtor();
}

void MSG_Req_CopymapReGather_CS::SharedDtor() {
}

void MSG_Req_CopymapReGather_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_CopymapReGather_CS& MSG_Req_CopymapReGather_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_CopymapReGather_CS_copymap_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_CopymapReGather_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:copymap.MSG_Req_CopymapReGather_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_CopymapReGather_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_CopymapReGather_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:copymap.MSG_Req_CopymapReGather_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:copymap.MSG_Req_CopymapReGather_CS)
  return target;
}

size_t MSG_Req_CopymapReGather_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:copymap.MSG_Req_CopymapReGather_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_CopymapReGather_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:copymap.MSG_Req_CopymapReGather_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_CopymapReGather_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_CopymapReGather_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:copymap.MSG_Req_CopymapReGather_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:copymap.MSG_Req_CopymapReGather_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_CopymapReGather_CS::MergeFrom(const MSG_Req_CopymapReGather_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:copymap.MSG_Req_CopymapReGather_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_Req_CopymapReGather_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:copymap.MSG_Req_CopymapReGather_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_CopymapReGather_CS::CopyFrom(const MSG_Req_CopymapReGather_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:copymap.MSG_Req_CopymapReGather_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_CopymapReGather_CS::IsInitialized() const {
  return true;
}

void MSG_Req_CopymapReGather_CS::InternalSwap(MSG_Req_CopymapReGather_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_CopymapReGather_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_CopymapReGather_SC::InitAsDefaultInstance() {
}
class MSG_Ret_CopymapReGather_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_CopymapReGather_SC>()._has_bits_);
  static void set_has_copymapidx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Ret_CopymapReGather_SC::MSG_Ret_CopymapReGather_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:copymap.MSG_Ret_CopymapReGather_SC)
}
MSG_Ret_CopymapReGather_SC::MSG_Ret_CopymapReGather_SC(const MSG_Ret_CopymapReGather_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  copymapidx_ = from.copymapidx_;
  // @@protoc_insertion_point(copy_constructor:copymap.MSG_Ret_CopymapReGather_SC)
}

void MSG_Ret_CopymapReGather_SC::SharedCtor() {
  copymapidx_ = 0u;
}

MSG_Ret_CopymapReGather_SC::~MSG_Ret_CopymapReGather_SC() {
  // @@protoc_insertion_point(destructor:copymap.MSG_Ret_CopymapReGather_SC)
  SharedDtor();
}

void MSG_Ret_CopymapReGather_SC::SharedDtor() {
}

void MSG_Ret_CopymapReGather_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_CopymapReGather_SC& MSG_Ret_CopymapReGather_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_CopymapReGather_SC_copymap_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_CopymapReGather_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:copymap.MSG_Ret_CopymapReGather_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  copymapidx_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_CopymapReGather_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 copymapidx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_copymapidx(&has_bits);
          copymapidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_CopymapReGather_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:copymap.MSG_Ret_CopymapReGather_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 copymapidx = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_copymapidx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:copymap.MSG_Ret_CopymapReGather_SC)
  return target;
}

size_t MSG_Ret_CopymapReGather_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:copymap.MSG_Ret_CopymapReGather_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 copymapidx = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_copymapidx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_CopymapReGather_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:copymap.MSG_Ret_CopymapReGather_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_CopymapReGather_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_CopymapReGather_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:copymap.MSG_Ret_CopymapReGather_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:copymap.MSG_Ret_CopymapReGather_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_CopymapReGather_SC::MergeFrom(const MSG_Ret_CopymapReGather_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:copymap.MSG_Ret_CopymapReGather_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_copymapidx()) {
    _internal_set_copymapidx(from._internal_copymapidx());
  }
}

void MSG_Ret_CopymapReGather_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:copymap.MSG_Ret_CopymapReGather_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_CopymapReGather_SC::CopyFrom(const MSG_Ret_CopymapReGather_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:copymap.MSG_Ret_CopymapReGather_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_CopymapReGather_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_CopymapReGather_SC::InternalSwap(MSG_Ret_CopymapReGather_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(copymapidx_, other->copymapidx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_CopymapReGather_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_CopymapBossTempID_SC::InitAsDefaultInstance() {
}
class MSG_Ret_CopymapBossTempID_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_CopymapBossTempID_SC>()._has_bits_);
};

MSG_Ret_CopymapBossTempID_SC::MSG_Ret_CopymapBossTempID_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:copymap.MSG_Ret_CopymapBossTempID_SC)
}
MSG_Ret_CopymapBossTempID_SC::MSG_Ret_CopymapBossTempID_SC(const MSG_Ret_CopymapBossTempID_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      tempid_(from.tempid_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:copymap.MSG_Ret_CopymapBossTempID_SC)
}

void MSG_Ret_CopymapBossTempID_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_CopymapBossTempID_SC_copymap_2eproto.base);
}

MSG_Ret_CopymapBossTempID_SC::~MSG_Ret_CopymapBossTempID_SC() {
  // @@protoc_insertion_point(destructor:copymap.MSG_Ret_CopymapBossTempID_SC)
  SharedDtor();
}

void MSG_Ret_CopymapBossTempID_SC::SharedDtor() {
}

void MSG_Ret_CopymapBossTempID_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_CopymapBossTempID_SC& MSG_Ret_CopymapBossTempID_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_CopymapBossTempID_SC_copymap_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_CopymapBossTempID_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:copymap.MSG_Ret_CopymapBossTempID_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tempid_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_CopymapBossTempID_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string tempid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tempid();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "copymap.MSG_Ret_CopymapBossTempID_SC.tempid");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_CopymapBossTempID_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:copymap.MSG_Ret_CopymapBossTempID_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string tempid = 1;
  for (int i = 0, n = this->_internal_tempid_size(); i < n; i++) {
    const auto& s = this->_internal_tempid(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "copymap.MSG_Ret_CopymapBossTempID_SC.tempid");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:copymap.MSG_Ret_CopymapBossTempID_SC)
  return target;
}

size_t MSG_Ret_CopymapBossTempID_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:copymap.MSG_Ret_CopymapBossTempID_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tempid = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tempid_.size());
  for (int i = 0, n = tempid_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      tempid_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_CopymapBossTempID_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:copymap.MSG_Ret_CopymapBossTempID_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_CopymapBossTempID_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_CopymapBossTempID_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:copymap.MSG_Ret_CopymapBossTempID_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:copymap.MSG_Ret_CopymapBossTempID_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_CopymapBossTempID_SC::MergeFrom(const MSG_Ret_CopymapBossTempID_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:copymap.MSG_Ret_CopymapBossTempID_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tempid_.MergeFrom(from.tempid_);
}

void MSG_Ret_CopymapBossTempID_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:copymap.MSG_Ret_CopymapBossTempID_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_CopymapBossTempID_SC::CopyFrom(const MSG_Ret_CopymapBossTempID_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:copymap.MSG_Ret_CopymapBossTempID_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_CopymapBossTempID_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_CopymapBossTempID_SC::InternalSwap(MSG_Ret_CopymapBossTempID_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tempid_.InternalSwap(&other->tempid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_CopymapBossTempID_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AdventureCopymapGroup::InitAsDefaultInstance() {
}
class AdventureCopymapGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<AdventureCopymapGroup>()._has_bits_);
  static void set_has_adventureid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_complete_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_unlock(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

AdventureCopymapGroup::AdventureCopymapGroup()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:copymap.AdventureCopymapGroup)
}
AdventureCopymapGroup::AdventureCopymapGroup(const AdventureCopymapGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&adventureid_, &from.adventureid_,
    static_cast<size_t>(reinterpret_cast<char*>(&unlock_) -
    reinterpret_cast<char*>(&adventureid_)) + sizeof(unlock_));
  // @@protoc_insertion_point(copy_constructor:copymap.AdventureCopymapGroup)
}

void AdventureCopymapGroup::SharedCtor() {
  ::memset(&adventureid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unlock_) -
      reinterpret_cast<char*>(&adventureid_)) + sizeof(unlock_));
}

AdventureCopymapGroup::~AdventureCopymapGroup() {
  // @@protoc_insertion_point(destructor:copymap.AdventureCopymapGroup)
  SharedDtor();
}

void AdventureCopymapGroup::SharedDtor() {
}

void AdventureCopymapGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdventureCopymapGroup& AdventureCopymapGroup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AdventureCopymapGroup_copymap_2eproto.base);
  return *internal_default_instance();
}


void AdventureCopymapGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:copymap.AdventureCopymapGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&adventureid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&unlock_) -
        reinterpret_cast<char*>(&adventureid_)) + sizeof(unlock_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AdventureCopymapGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 adventureid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_adventureid(&has_bits);
          adventureid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 complete_rate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_complete_rate(&has_bits);
          complete_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool unlock = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_unlock(&has_bits);
          unlock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AdventureCopymapGroup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:copymap.AdventureCopymapGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 adventureid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_adventureid(), target);
  }

  // optional uint32 complete_rate = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_complete_rate(), target);
  }

  // optional bool unlock = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_unlock(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:copymap.AdventureCopymapGroup)
  return target;
}

size_t AdventureCopymapGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:copymap.AdventureCopymapGroup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 adventureid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_adventureid());
    }

    // optional uint32 complete_rate = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_complete_rate());
    }

    // optional bool unlock = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdventureCopymapGroup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:copymap.AdventureCopymapGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const AdventureCopymapGroup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AdventureCopymapGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:copymap.AdventureCopymapGroup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:copymap.AdventureCopymapGroup)
    MergeFrom(*source);
  }
}

void AdventureCopymapGroup::MergeFrom(const AdventureCopymapGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:copymap.AdventureCopymapGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      adventureid_ = from.adventureid_;
    }
    if (cached_has_bits & 0x00000002u) {
      complete_rate_ = from.complete_rate_;
    }
    if (cached_has_bits & 0x00000004u) {
      unlock_ = from.unlock_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AdventureCopymapGroup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:copymap.AdventureCopymapGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdventureCopymapGroup::CopyFrom(const AdventureCopymapGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:copymap.AdventureCopymapGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdventureCopymapGroup::IsInitialized() const {
  return true;
}

void AdventureCopymapGroup::InternalSwap(AdventureCopymapGroup* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(adventureid_, other->adventureid_);
  swap(complete_rate_, other->complete_rate_);
  swap(unlock_, other->unlock_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AdventureCopymapGroup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_AdventureCopymapGroup_CS::InitAsDefaultInstance() {
}
class MSG_Req_AdventureCopymapGroup_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_AdventureCopymapGroup_CS>()._has_bits_);
};

MSG_Req_AdventureCopymapGroup_CS::MSG_Req_AdventureCopymapGroup_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:copymap.MSG_Req_AdventureCopymapGroup_CS)
}
MSG_Req_AdventureCopymapGroup_CS::MSG_Req_AdventureCopymapGroup_CS(const MSG_Req_AdventureCopymapGroup_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:copymap.MSG_Req_AdventureCopymapGroup_CS)
}

void MSG_Req_AdventureCopymapGroup_CS::SharedCtor() {
}

MSG_Req_AdventureCopymapGroup_CS::~MSG_Req_AdventureCopymapGroup_CS() {
  // @@protoc_insertion_point(destructor:copymap.MSG_Req_AdventureCopymapGroup_CS)
  SharedDtor();
}

void MSG_Req_AdventureCopymapGroup_CS::SharedDtor() {
}

void MSG_Req_AdventureCopymapGroup_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_AdventureCopymapGroup_CS& MSG_Req_AdventureCopymapGroup_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_AdventureCopymapGroup_CS_copymap_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_AdventureCopymapGroup_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:copymap.MSG_Req_AdventureCopymapGroup_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_AdventureCopymapGroup_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_AdventureCopymapGroup_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:copymap.MSG_Req_AdventureCopymapGroup_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:copymap.MSG_Req_AdventureCopymapGroup_CS)
  return target;
}

size_t MSG_Req_AdventureCopymapGroup_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:copymap.MSG_Req_AdventureCopymapGroup_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_AdventureCopymapGroup_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:copymap.MSG_Req_AdventureCopymapGroup_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_AdventureCopymapGroup_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_AdventureCopymapGroup_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:copymap.MSG_Req_AdventureCopymapGroup_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:copymap.MSG_Req_AdventureCopymapGroup_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_AdventureCopymapGroup_CS::MergeFrom(const MSG_Req_AdventureCopymapGroup_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:copymap.MSG_Req_AdventureCopymapGroup_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_Req_AdventureCopymapGroup_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:copymap.MSG_Req_AdventureCopymapGroup_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_AdventureCopymapGroup_CS::CopyFrom(const MSG_Req_AdventureCopymapGroup_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:copymap.MSG_Req_AdventureCopymapGroup_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_AdventureCopymapGroup_CS::IsInitialized() const {
  return true;
}

void MSG_Req_AdventureCopymapGroup_CS::InternalSwap(MSG_Req_AdventureCopymapGroup_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_AdventureCopymapGroup_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_AdventureCopymapGroup_SC::InitAsDefaultInstance() {
}
class MSG_Ret_AdventureCopymapGroup_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_AdventureCopymapGroup_SC>()._has_bits_);
};

MSG_Ret_AdventureCopymapGroup_SC::MSG_Ret_AdventureCopymapGroup_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:copymap.MSG_Ret_AdventureCopymapGroup_SC)
}
MSG_Ret_AdventureCopymapGroup_SC::MSG_Ret_AdventureCopymapGroup_SC(const MSG_Ret_AdventureCopymapGroup_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      groups_(from.groups_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:copymap.MSG_Ret_AdventureCopymapGroup_SC)
}

void MSG_Ret_AdventureCopymapGroup_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_AdventureCopymapGroup_SC_copymap_2eproto.base);
}

MSG_Ret_AdventureCopymapGroup_SC::~MSG_Ret_AdventureCopymapGroup_SC() {
  // @@protoc_insertion_point(destructor:copymap.MSG_Ret_AdventureCopymapGroup_SC)
  SharedDtor();
}

void MSG_Ret_AdventureCopymapGroup_SC::SharedDtor() {
}

void MSG_Ret_AdventureCopymapGroup_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_AdventureCopymapGroup_SC& MSG_Ret_AdventureCopymapGroup_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_AdventureCopymapGroup_SC_copymap_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_AdventureCopymapGroup_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:copymap.MSG_Ret_AdventureCopymapGroup_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  groups_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_AdventureCopymapGroup_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .copymap.AdventureCopymapGroup groups = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_groups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_AdventureCopymapGroup_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:copymap.MSG_Ret_AdventureCopymapGroup_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .copymap.AdventureCopymapGroup groups = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_groups_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_groups(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:copymap.MSG_Ret_AdventureCopymapGroup_SC)
  return target;
}

size_t MSG_Ret_AdventureCopymapGroup_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:copymap.MSG_Ret_AdventureCopymapGroup_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .copymap.AdventureCopymapGroup groups = 1;
  total_size += 1UL * this->_internal_groups_size();
  for (const auto& msg : this->groups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_AdventureCopymapGroup_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:copymap.MSG_Ret_AdventureCopymapGroup_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_AdventureCopymapGroup_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_AdventureCopymapGroup_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:copymap.MSG_Ret_AdventureCopymapGroup_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:copymap.MSG_Ret_AdventureCopymapGroup_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_AdventureCopymapGroup_SC::MergeFrom(const MSG_Ret_AdventureCopymapGroup_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:copymap.MSG_Ret_AdventureCopymapGroup_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  groups_.MergeFrom(from.groups_);
}

void MSG_Ret_AdventureCopymapGroup_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:copymap.MSG_Ret_AdventureCopymapGroup_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_AdventureCopymapGroup_SC::CopyFrom(const MSG_Ret_AdventureCopymapGroup_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:copymap.MSG_Ret_AdventureCopymapGroup_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_AdventureCopymapGroup_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_AdventureCopymapGroup_SC::InternalSwap(MSG_Ret_AdventureCopymapGroup_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  groups_.InternalSwap(&other->groups_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_AdventureCopymapGroup_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AdventureCopymap::InitAsDefaultInstance() {
}
class AdventureCopymap::_Internal {
 public:
  using HasBits = decltype(std::declval<AdventureCopymap>()._has_bits_);
  static void set_has_copymapidx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_unlock(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_star(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_first_success(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

AdventureCopymap::AdventureCopymap()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:copymap.AdventureCopymap)
}
AdventureCopymap::AdventureCopymap(const AdventureCopymap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&copymapidx_, &from.copymapidx_,
    static_cast<size_t>(reinterpret_cast<char*>(&first_success_) -
    reinterpret_cast<char*>(&copymapidx_)) + sizeof(first_success_));
  // @@protoc_insertion_point(copy_constructor:copymap.AdventureCopymap)
}

void AdventureCopymap::SharedCtor() {
  ::memset(&copymapidx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&first_success_) -
      reinterpret_cast<char*>(&copymapidx_)) + sizeof(first_success_));
}

AdventureCopymap::~AdventureCopymap() {
  // @@protoc_insertion_point(destructor:copymap.AdventureCopymap)
  SharedDtor();
}

void AdventureCopymap::SharedDtor() {
}

void AdventureCopymap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdventureCopymap& AdventureCopymap::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AdventureCopymap_copymap_2eproto.base);
  return *internal_default_instance();
}


void AdventureCopymap::Clear() {
// @@protoc_insertion_point(message_clear_start:copymap.AdventureCopymap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&copymapidx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&first_success_) -
        reinterpret_cast<char*>(&copymapidx_)) + sizeof(first_success_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AdventureCopymap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 copymapidx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_copymapidx(&has_bits);
          copymapidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool unlock = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_unlock(&has_bits);
          unlock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 star = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_star(&has_bits);
          star_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool first_success = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_first_success(&has_bits);
          first_success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AdventureCopymap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:copymap.AdventureCopymap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 copymapidx = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_copymapidx(), target);
  }

  // optional bool unlock = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_unlock(), target);
  }

  // optional uint32 star = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_star(), target);
  }

  // optional bool first_success = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_first_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:copymap.AdventureCopymap)
  return target;
}

size_t AdventureCopymap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:copymap.AdventureCopymap)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 copymapidx = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_copymapidx());
    }

    // optional uint32 star = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_star());
    }

    // optional bool unlock = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool first_success = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdventureCopymap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:copymap.AdventureCopymap)
  GOOGLE_DCHECK_NE(&from, this);
  const AdventureCopymap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AdventureCopymap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:copymap.AdventureCopymap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:copymap.AdventureCopymap)
    MergeFrom(*source);
  }
}

void AdventureCopymap::MergeFrom(const AdventureCopymap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:copymap.AdventureCopymap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      copymapidx_ = from.copymapidx_;
    }
    if (cached_has_bits & 0x00000002u) {
      star_ = from.star_;
    }
    if (cached_has_bits & 0x00000004u) {
      unlock_ = from.unlock_;
    }
    if (cached_has_bits & 0x00000008u) {
      first_success_ = from.first_success_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AdventureCopymap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:copymap.AdventureCopymap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdventureCopymap::CopyFrom(const AdventureCopymap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:copymap.AdventureCopymap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdventureCopymap::IsInitialized() const {
  return true;
}

void AdventureCopymap::InternalSwap(AdventureCopymap* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(copymapidx_, other->copymapidx_);
  swap(star_, other->star_);
  swap(unlock_, other->unlock_);
  swap(first_success_, other->first_success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AdventureCopymap::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_AdventureCopymapInfo_CS::InitAsDefaultInstance() {
}
class MSG_Req_AdventureCopymapInfo_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_AdventureCopymapInfo_CS>()._has_bits_);
  static void set_has_adventureid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Req_AdventureCopymapInfo_CS::MSG_Req_AdventureCopymapInfo_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:copymap.MSG_Req_AdventureCopymapInfo_CS)
}
MSG_Req_AdventureCopymapInfo_CS::MSG_Req_AdventureCopymapInfo_CS(const MSG_Req_AdventureCopymapInfo_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  adventureid_ = from.adventureid_;
  // @@protoc_insertion_point(copy_constructor:copymap.MSG_Req_AdventureCopymapInfo_CS)
}

void MSG_Req_AdventureCopymapInfo_CS::SharedCtor() {
  adventureid_ = 0u;
}

MSG_Req_AdventureCopymapInfo_CS::~MSG_Req_AdventureCopymapInfo_CS() {
  // @@protoc_insertion_point(destructor:copymap.MSG_Req_AdventureCopymapInfo_CS)
  SharedDtor();
}

void MSG_Req_AdventureCopymapInfo_CS::SharedDtor() {
}

void MSG_Req_AdventureCopymapInfo_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_AdventureCopymapInfo_CS& MSG_Req_AdventureCopymapInfo_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_AdventureCopymapInfo_CS_copymap_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_AdventureCopymapInfo_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:copymap.MSG_Req_AdventureCopymapInfo_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  adventureid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_AdventureCopymapInfo_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 adventureid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_adventureid(&has_bits);
          adventureid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_AdventureCopymapInfo_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:copymap.MSG_Req_AdventureCopymapInfo_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 adventureid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_adventureid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:copymap.MSG_Req_AdventureCopymapInfo_CS)
  return target;
}

size_t MSG_Req_AdventureCopymapInfo_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:copymap.MSG_Req_AdventureCopymapInfo_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 adventureid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_adventureid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_AdventureCopymapInfo_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:copymap.MSG_Req_AdventureCopymapInfo_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_AdventureCopymapInfo_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_AdventureCopymapInfo_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:copymap.MSG_Req_AdventureCopymapInfo_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:copymap.MSG_Req_AdventureCopymapInfo_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_AdventureCopymapInfo_CS::MergeFrom(const MSG_Req_AdventureCopymapInfo_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:copymap.MSG_Req_AdventureCopymapInfo_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_adventureid()) {
    _internal_set_adventureid(from._internal_adventureid());
  }
}

void MSG_Req_AdventureCopymapInfo_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:copymap.MSG_Req_AdventureCopymapInfo_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_AdventureCopymapInfo_CS::CopyFrom(const MSG_Req_AdventureCopymapInfo_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:copymap.MSG_Req_AdventureCopymapInfo_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_AdventureCopymapInfo_CS::IsInitialized() const {
  return true;
}

void MSG_Req_AdventureCopymapInfo_CS::InternalSwap(MSG_Req_AdventureCopymapInfo_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(adventureid_, other->adventureid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_AdventureCopymapInfo_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_AdventureCopymapInfo_SC::InitAsDefaultInstance() {
}
class MSG_Ret_AdventureCopymapInfo_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_AdventureCopymapInfo_SC>()._has_bits_);
};

MSG_Ret_AdventureCopymapInfo_SC::MSG_Ret_AdventureCopymapInfo_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:copymap.MSG_Ret_AdventureCopymapInfo_SC)
}
MSG_Ret_AdventureCopymapInfo_SC::MSG_Ret_AdventureCopymapInfo_SC(const MSG_Ret_AdventureCopymapInfo_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      copymaps_(from.copymaps_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:copymap.MSG_Ret_AdventureCopymapInfo_SC)
}

void MSG_Ret_AdventureCopymapInfo_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_AdventureCopymapInfo_SC_copymap_2eproto.base);
}

MSG_Ret_AdventureCopymapInfo_SC::~MSG_Ret_AdventureCopymapInfo_SC() {
  // @@protoc_insertion_point(destructor:copymap.MSG_Ret_AdventureCopymapInfo_SC)
  SharedDtor();
}

void MSG_Ret_AdventureCopymapInfo_SC::SharedDtor() {
}

void MSG_Ret_AdventureCopymapInfo_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_AdventureCopymapInfo_SC& MSG_Ret_AdventureCopymapInfo_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_AdventureCopymapInfo_SC_copymap_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_AdventureCopymapInfo_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:copymap.MSG_Ret_AdventureCopymapInfo_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  copymaps_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_AdventureCopymapInfo_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .copymap.AdventureCopymap copymaps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_copymaps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_AdventureCopymapInfo_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:copymap.MSG_Ret_AdventureCopymapInfo_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .copymap.AdventureCopymap copymaps = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_copymaps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_copymaps(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:copymap.MSG_Ret_AdventureCopymapInfo_SC)
  return target;
}

size_t MSG_Ret_AdventureCopymapInfo_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:copymap.MSG_Ret_AdventureCopymapInfo_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .copymap.AdventureCopymap copymaps = 1;
  total_size += 1UL * this->_internal_copymaps_size();
  for (const auto& msg : this->copymaps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_AdventureCopymapInfo_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:copymap.MSG_Ret_AdventureCopymapInfo_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_AdventureCopymapInfo_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_AdventureCopymapInfo_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:copymap.MSG_Ret_AdventureCopymapInfo_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:copymap.MSG_Ret_AdventureCopymapInfo_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_AdventureCopymapInfo_SC::MergeFrom(const MSG_Ret_AdventureCopymapInfo_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:copymap.MSG_Ret_AdventureCopymapInfo_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  copymaps_.MergeFrom(from.copymaps_);
}

void MSG_Ret_AdventureCopymapInfo_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:copymap.MSG_Ret_AdventureCopymapInfo_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_AdventureCopymapInfo_SC::CopyFrom(const MSG_Ret_AdventureCopymapInfo_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:copymap.MSG_Ret_AdventureCopymapInfo_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_AdventureCopymapInfo_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_AdventureCopymapInfo_SC::InternalSwap(MSG_Ret_AdventureCopymapInfo_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  copymaps_.InternalSwap(&other->copymaps_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_AdventureCopymapInfo_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_AdventureHeros_CS::InitAsDefaultInstance() {
}
class MSG_Req_AdventureHeros_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_AdventureHeros_CS>()._has_bits_);
  static void set_has_adventureid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Req_AdventureHeros_CS::MSG_Req_AdventureHeros_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:copymap.MSG_Req_AdventureHeros_CS)
}
MSG_Req_AdventureHeros_CS::MSG_Req_AdventureHeros_CS(const MSG_Req_AdventureHeros_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  adventureid_ = from.adventureid_;
  // @@protoc_insertion_point(copy_constructor:copymap.MSG_Req_AdventureHeros_CS)
}

void MSG_Req_AdventureHeros_CS::SharedCtor() {
  adventureid_ = 0u;
}

MSG_Req_AdventureHeros_CS::~MSG_Req_AdventureHeros_CS() {
  // @@protoc_insertion_point(destructor:copymap.MSG_Req_AdventureHeros_CS)
  SharedDtor();
}

void MSG_Req_AdventureHeros_CS::SharedDtor() {
}

void MSG_Req_AdventureHeros_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_AdventureHeros_CS& MSG_Req_AdventureHeros_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_AdventureHeros_CS_copymap_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_AdventureHeros_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:copymap.MSG_Req_AdventureHeros_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  adventureid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_AdventureHeros_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 adventureid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_adventureid(&has_bits);
          adventureid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_AdventureHeros_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:copymap.MSG_Req_AdventureHeros_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 adventureid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_adventureid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:copymap.MSG_Req_AdventureHeros_CS)
  return target;
}

size_t MSG_Req_AdventureHeros_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:copymap.MSG_Req_AdventureHeros_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 adventureid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_adventureid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_AdventureHeros_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:copymap.MSG_Req_AdventureHeros_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_AdventureHeros_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_AdventureHeros_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:copymap.MSG_Req_AdventureHeros_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:copymap.MSG_Req_AdventureHeros_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_AdventureHeros_CS::MergeFrom(const MSG_Req_AdventureHeros_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:copymap.MSG_Req_AdventureHeros_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_adventureid()) {
    _internal_set_adventureid(from._internal_adventureid());
  }
}

void MSG_Req_AdventureHeros_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:copymap.MSG_Req_AdventureHeros_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_AdventureHeros_CS::CopyFrom(const MSG_Req_AdventureHeros_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:copymap.MSG_Req_AdventureHeros_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_AdventureHeros_CS::IsInitialized() const {
  return true;
}

void MSG_Req_AdventureHeros_CS::InternalSwap(MSG_Req_AdventureHeros_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(adventureid_, other->adventureid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_AdventureHeros_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_AdventureHeros_SC::InitAsDefaultInstance() {
}
class MSG_Ret_AdventureHeros_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_AdventureHeros_SC>()._has_bits_);
  static void set_has_retcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Ret_AdventureHeros_SC::MSG_Ret_AdventureHeros_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:copymap.MSG_Ret_AdventureHeros_SC)
}
MSG_Ret_AdventureHeros_SC::MSG_Ret_AdventureHeros_SC(const MSG_Ret_AdventureHeros_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      heros_(from.heros_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:copymap.MSG_Ret_AdventureHeros_SC)
}

void MSG_Ret_AdventureHeros_SC::SharedCtor() {
  retcode_ = 0u;
}

MSG_Ret_AdventureHeros_SC::~MSG_Ret_AdventureHeros_SC() {
  // @@protoc_insertion_point(destructor:copymap.MSG_Ret_AdventureHeros_SC)
  SharedDtor();
}

void MSG_Ret_AdventureHeros_SC::SharedDtor() {
}

void MSG_Ret_AdventureHeros_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_AdventureHeros_SC& MSG_Ret_AdventureHeros_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_AdventureHeros_SC_copymap_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_AdventureHeros_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:copymap.MSG_Ret_AdventureHeros_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  heros_.Clear();
  retcode_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_AdventureHeros_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 heros = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_heros(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_heros(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 retcode = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_retcode(&has_bits);
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_AdventureHeros_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:copymap.MSG_Ret_AdventureHeros_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 heros = 1;
  for (int i = 0, n = this->_internal_heros_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_heros(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 retcode = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:copymap.MSG_Ret_AdventureHeros_SC)
  return target;
}

size_t MSG_Ret_AdventureHeros_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:copymap.MSG_Ret_AdventureHeros_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 heros = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->heros_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_heros_size());
    total_size += data_size;
  }

  // optional uint32 retcode = 2 [default = 0];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_AdventureHeros_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:copymap.MSG_Ret_AdventureHeros_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_AdventureHeros_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_AdventureHeros_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:copymap.MSG_Ret_AdventureHeros_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:copymap.MSG_Ret_AdventureHeros_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_AdventureHeros_SC::MergeFrom(const MSG_Ret_AdventureHeros_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:copymap.MSG_Ret_AdventureHeros_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  heros_.MergeFrom(from.heros_);
  if (from._internal_has_retcode()) {
    _internal_set_retcode(from._internal_retcode());
  }
}

void MSG_Ret_AdventureHeros_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:copymap.MSG_Ret_AdventureHeros_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_AdventureHeros_SC::CopyFrom(const MSG_Ret_AdventureHeros_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:copymap.MSG_Ret_AdventureHeros_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_AdventureHeros_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_AdventureHeros_SC::InternalSwap(MSG_Ret_AdventureHeros_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  heros_.InternalSwap(&other->heros_);
  swap(retcode_, other->retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_AdventureHeros_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_EnterAdventureCopymap_CS::InitAsDefaultInstance() {
}
class MSG_Req_EnterAdventureCopymap_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_EnterAdventureCopymap_CS>()._has_bits_);
  static void set_has_heroid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_copymapidx(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_Req_EnterAdventureCopymap_CS::MSG_Req_EnterAdventureCopymap_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:copymap.MSG_Req_EnterAdventureCopymap_CS)
}
MSG_Req_EnterAdventureCopymap_CS::MSG_Req_EnterAdventureCopymap_CS(const MSG_Req_EnterAdventureCopymap_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&heroid_, &from.heroid_,
    static_cast<size_t>(reinterpret_cast<char*>(&copymapidx_) -
    reinterpret_cast<char*>(&heroid_)) + sizeof(copymapidx_));
  // @@protoc_insertion_point(copy_constructor:copymap.MSG_Req_EnterAdventureCopymap_CS)
}

void MSG_Req_EnterAdventureCopymap_CS::SharedCtor() {
  ::memset(&heroid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&copymapidx_) -
      reinterpret_cast<char*>(&heroid_)) + sizeof(copymapidx_));
}

MSG_Req_EnterAdventureCopymap_CS::~MSG_Req_EnterAdventureCopymap_CS() {
  // @@protoc_insertion_point(destructor:copymap.MSG_Req_EnterAdventureCopymap_CS)
  SharedDtor();
}

void MSG_Req_EnterAdventureCopymap_CS::SharedDtor() {
}

void MSG_Req_EnterAdventureCopymap_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_EnterAdventureCopymap_CS& MSG_Req_EnterAdventureCopymap_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_EnterAdventureCopymap_CS_copymap_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_EnterAdventureCopymap_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:copymap.MSG_Req_EnterAdventureCopymap_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&heroid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&copymapidx_) -
        reinterpret_cast<char*>(&heroid_)) + sizeof(copymapidx_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_EnterAdventureCopymap_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 heroid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_heroid(&has_bits);
          heroid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 copymapidx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_copymapidx(&has_bits);
          copymapidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_EnterAdventureCopymap_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:copymap.MSG_Req_EnterAdventureCopymap_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 heroid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_heroid(), target);
  }

  // optional uint32 copymapidx = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_copymapidx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:copymap.MSG_Req_EnterAdventureCopymap_CS)
  return target;
}

size_t MSG_Req_EnterAdventureCopymap_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:copymap.MSG_Req_EnterAdventureCopymap_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 heroid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_heroid());
    }

    // optional uint32 copymapidx = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_copymapidx());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_EnterAdventureCopymap_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:copymap.MSG_Req_EnterAdventureCopymap_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_EnterAdventureCopymap_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_EnterAdventureCopymap_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:copymap.MSG_Req_EnterAdventureCopymap_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:copymap.MSG_Req_EnterAdventureCopymap_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_EnterAdventureCopymap_CS::MergeFrom(const MSG_Req_EnterAdventureCopymap_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:copymap.MSG_Req_EnterAdventureCopymap_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      heroid_ = from.heroid_;
    }
    if (cached_has_bits & 0x00000002u) {
      copymapidx_ = from.copymapidx_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Req_EnterAdventureCopymap_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:copymap.MSG_Req_EnterAdventureCopymap_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_EnterAdventureCopymap_CS::CopyFrom(const MSG_Req_EnterAdventureCopymap_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:copymap.MSG_Req_EnterAdventureCopymap_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_EnterAdventureCopymap_CS::IsInitialized() const {
  return true;
}

void MSG_Req_EnterAdventureCopymap_CS::InternalSwap(MSG_Req_EnterAdventureCopymap_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(heroid_, other->heroid_);
  swap(copymapidx_, other->copymapidx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_EnterAdventureCopymap_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObjectData::InitAsDefaultInstance() {
}
class ObjectData::_Internal {
 public:
  using HasBits = decltype(std::declval<ObjectData>()._has_bits_);
  static void set_has_objid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_objnum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ObjectData::ObjectData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:copymap.ObjectData)
}
ObjectData::ObjectData(const ObjectData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&objid_, &from.objid_,
    static_cast<size_t>(reinterpret_cast<char*>(&objnum_) -
    reinterpret_cast<char*>(&objid_)) + sizeof(objnum_));
  // @@protoc_insertion_point(copy_constructor:copymap.ObjectData)
}

void ObjectData::SharedCtor() {
  ::memset(&objid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&objnum_) -
      reinterpret_cast<char*>(&objid_)) + sizeof(objnum_));
}

ObjectData::~ObjectData() {
  // @@protoc_insertion_point(destructor:copymap.ObjectData)
  SharedDtor();
}

void ObjectData::SharedDtor() {
}

void ObjectData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectData& ObjectData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectData_copymap_2eproto.base);
  return *internal_default_instance();
}


void ObjectData::Clear() {
// @@protoc_insertion_point(message_clear_start:copymap.ObjectData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&objid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&objnum_) -
        reinterpret_cast<char*>(&objid_)) + sizeof(objnum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ObjectData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 objid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_objid(&has_bits);
          objid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 objnum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_objnum(&has_bits);
          objnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:copymap.ObjectData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 objid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_objid(), target);
  }

  // optional uint32 objnum = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_objnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:copymap.ObjectData)
  return target;
}

size_t ObjectData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:copymap.ObjectData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 objid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_objid());
    }

    // optional uint32 objnum = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_objnum());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:copymap.ObjectData)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:copymap.ObjectData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:copymap.ObjectData)
    MergeFrom(*source);
  }
}

void ObjectData::MergeFrom(const ObjectData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:copymap.ObjectData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      objid_ = from.objid_;
    }
    if (cached_has_bits & 0x00000002u) {
      objnum_ = from.objnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ObjectData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:copymap.ObjectData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectData::CopyFrom(const ObjectData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:copymap.ObjectData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectData::IsInitialized() const {
  return true;
}

void ObjectData::InternalSwap(ObjectData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(objid_, other->objid_);
  swap(objnum_, other->objnum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_TrainData_SC::InitAsDefaultInstance() {
}
class MSG_Ret_TrainData_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_TrainData_SC>()._has_bits_);
  static void set_has_starttime(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_endtime(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_Ret_TrainData_SC::MSG_Ret_TrainData_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:copymap.MSG_Ret_TrainData_SC)
}
MSG_Ret_TrainData_SC::MSG_Ret_TrainData_SC(const MSG_Ret_TrainData_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      reward_(from.reward_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&starttime_, &from.starttime_,
    static_cast<size_t>(reinterpret_cast<char*>(&endtime_) -
    reinterpret_cast<char*>(&starttime_)) + sizeof(endtime_));
  // @@protoc_insertion_point(copy_constructor:copymap.MSG_Ret_TrainData_SC)
}

void MSG_Ret_TrainData_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_TrainData_SC_copymap_2eproto.base);
  ::memset(&starttime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&endtime_) -
      reinterpret_cast<char*>(&starttime_)) + sizeof(endtime_));
}

MSG_Ret_TrainData_SC::~MSG_Ret_TrainData_SC() {
  // @@protoc_insertion_point(destructor:copymap.MSG_Ret_TrainData_SC)
  SharedDtor();
}

void MSG_Ret_TrainData_SC::SharedDtor() {
}

void MSG_Ret_TrainData_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_TrainData_SC& MSG_Ret_TrainData_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_TrainData_SC_copymap_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_TrainData_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:copymap.MSG_Ret_TrainData_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reward_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&starttime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&endtime_) -
        reinterpret_cast<char*>(&starttime_)) + sizeof(endtime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_TrainData_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 starttime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_starttime(&has_bits);
          starttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 endtime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_endtime(&has_bits);
          endtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .copymap.ObjectData reward = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reward(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_TrainData_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:copymap.MSG_Ret_TrainData_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 starttime = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_starttime(), target);
  }

  // optional uint32 endtime = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_endtime(), target);
  }

  // repeated .copymap.ObjectData reward = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reward_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_reward(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:copymap.MSG_Ret_TrainData_SC)
  return target;
}

size_t MSG_Ret_TrainData_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:copymap.MSG_Ret_TrainData_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .copymap.ObjectData reward = 3;
  total_size += 1UL * this->_internal_reward_size();
  for (const auto& msg : this->reward_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 starttime = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_starttime());
    }

    // optional uint32 endtime = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_endtime());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_TrainData_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:copymap.MSG_Ret_TrainData_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_TrainData_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_TrainData_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:copymap.MSG_Ret_TrainData_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:copymap.MSG_Ret_TrainData_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_TrainData_SC::MergeFrom(const MSG_Ret_TrainData_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:copymap.MSG_Ret_TrainData_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reward_.MergeFrom(from.reward_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      starttime_ = from.starttime_;
    }
    if (cached_has_bits & 0x00000002u) {
      endtime_ = from.endtime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_TrainData_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:copymap.MSG_Ret_TrainData_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_TrainData_SC::CopyFrom(const MSG_Ret_TrainData_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:copymap.MSG_Ret_TrainData_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_TrainData_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_TrainData_SC::InternalSwap(MSG_Ret_TrainData_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  reward_.InternalSwap(&other->reward_);
  swap(starttime_, other->starttime_);
  swap(endtime_, other->endtime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_TrainData_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_PlayEventData_SC::InitAsDefaultInstance() {
}
class MSG_Ret_PlayEventData_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_PlayEventData_SC>()._has_bits_);
  static void set_has_eventid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_starttime(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_endtime(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MSG_Ret_PlayEventData_SC::MSG_Ret_PlayEventData_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:copymap.MSG_Ret_PlayEventData_SC)
}
MSG_Ret_PlayEventData_SC::MSG_Ret_PlayEventData_SC(const MSG_Ret_PlayEventData_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&eventid_, &from.eventid_,
    static_cast<size_t>(reinterpret_cast<char*>(&endtime_) -
    reinterpret_cast<char*>(&eventid_)) + sizeof(endtime_));
  // @@protoc_insertion_point(copy_constructor:copymap.MSG_Ret_PlayEventData_SC)
}

void MSG_Ret_PlayEventData_SC::SharedCtor() {
  ::memset(&eventid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&endtime_) -
      reinterpret_cast<char*>(&eventid_)) + sizeof(endtime_));
}

MSG_Ret_PlayEventData_SC::~MSG_Ret_PlayEventData_SC() {
  // @@protoc_insertion_point(destructor:copymap.MSG_Ret_PlayEventData_SC)
  SharedDtor();
}

void MSG_Ret_PlayEventData_SC::SharedDtor() {
}

void MSG_Ret_PlayEventData_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_PlayEventData_SC& MSG_Ret_PlayEventData_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_PlayEventData_SC_copymap_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_PlayEventData_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:copymap.MSG_Ret_PlayEventData_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&eventid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&endtime_) -
        reinterpret_cast<char*>(&eventid_)) + sizeof(endtime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_PlayEventData_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 eventid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_eventid(&has_bits);
          eventid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 starttime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_starttime(&has_bits);
          starttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 endtime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_endtime(&has_bits);
          endtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_PlayEventData_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:copymap.MSG_Ret_PlayEventData_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eventid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_eventid(), target);
  }

  // optional uint32 starttime = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_starttime(), target);
  }

  // optional uint32 endtime = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_endtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:copymap.MSG_Ret_PlayEventData_SC)
  return target;
}

size_t MSG_Ret_PlayEventData_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:copymap.MSG_Ret_PlayEventData_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 eventid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_eventid());
    }

    // optional uint32 starttime = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_starttime());
    }

    // optional uint32 endtime = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_endtime());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_PlayEventData_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:copymap.MSG_Ret_PlayEventData_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_PlayEventData_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_PlayEventData_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:copymap.MSG_Ret_PlayEventData_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:copymap.MSG_Ret_PlayEventData_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_PlayEventData_SC::MergeFrom(const MSG_Ret_PlayEventData_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:copymap.MSG_Ret_PlayEventData_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      eventid_ = from.eventid_;
    }
    if (cached_has_bits & 0x00000002u) {
      starttime_ = from.starttime_;
    }
    if (cached_has_bits & 0x00000004u) {
      endtime_ = from.endtime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_PlayEventData_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:copymap.MSG_Ret_PlayEventData_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_PlayEventData_SC::CopyFrom(const MSG_Ret_PlayEventData_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:copymap.MSG_Ret_PlayEventData_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_PlayEventData_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_PlayEventData_SC::InternalSwap(MSG_Ret_PlayEventData_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(eventid_, other->eventid_);
  swap(starttime_, other->starttime_);
  swap(endtime_, other->endtime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_PlayEventData_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_CurMonsterGroup_SC::InitAsDefaultInstance() {
}
class MSG_Ret_CurMonsterGroup_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_CurMonsterGroup_SC>()._has_bits_);
  static void set_has_groupid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Ret_CurMonsterGroup_SC::MSG_Ret_CurMonsterGroup_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:copymap.MSG_Ret_CurMonsterGroup_SC)
}
MSG_Ret_CurMonsterGroup_SC::MSG_Ret_CurMonsterGroup_SC(const MSG_Ret_CurMonsterGroup_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  groupid_ = from.groupid_;
  // @@protoc_insertion_point(copy_constructor:copymap.MSG_Ret_CurMonsterGroup_SC)
}

void MSG_Ret_CurMonsterGroup_SC::SharedCtor() {
  groupid_ = 0u;
}

MSG_Ret_CurMonsterGroup_SC::~MSG_Ret_CurMonsterGroup_SC() {
  // @@protoc_insertion_point(destructor:copymap.MSG_Ret_CurMonsterGroup_SC)
  SharedDtor();
}

void MSG_Ret_CurMonsterGroup_SC::SharedDtor() {
}

void MSG_Ret_CurMonsterGroup_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_CurMonsterGroup_SC& MSG_Ret_CurMonsterGroup_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_CurMonsterGroup_SC_copymap_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_CurMonsterGroup_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:copymap.MSG_Ret_CurMonsterGroup_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  groupid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_CurMonsterGroup_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 groupid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_groupid(&has_bits);
          groupid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_CurMonsterGroup_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:copymap.MSG_Ret_CurMonsterGroup_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 groupid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_groupid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:copymap.MSG_Ret_CurMonsterGroup_SC)
  return target;
}

size_t MSG_Ret_CurMonsterGroup_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:copymap.MSG_Ret_CurMonsterGroup_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 groupid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_groupid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_CurMonsterGroup_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:copymap.MSG_Ret_CurMonsterGroup_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_CurMonsterGroup_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_CurMonsterGroup_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:copymap.MSG_Ret_CurMonsterGroup_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:copymap.MSG_Ret_CurMonsterGroup_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_CurMonsterGroup_SC::MergeFrom(const MSG_Ret_CurMonsterGroup_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:copymap.MSG_Ret_CurMonsterGroup_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_groupid()) {
    _internal_set_groupid(from._internal_groupid());
  }
}

void MSG_Ret_CurMonsterGroup_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:copymap.MSG_Ret_CurMonsterGroup_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_CurMonsterGroup_SC::CopyFrom(const MSG_Ret_CurMonsterGroup_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:copymap.MSG_Ret_CurMonsterGroup_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_CurMonsterGroup_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_CurMonsterGroup_SC::InternalSwap(MSG_Ret_CurMonsterGroup_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(groupid_, other->groupid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_CurMonsterGroup_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_PlayGameData_CS::InitAsDefaultInstance() {
}
class MSG_Req_PlayGameData_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_PlayGameData_CS>()._has_bits_);
  static void set_has_step(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MSG_Req_PlayGameData_CS::MSG_Req_PlayGameData_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:copymap.MSG_Req_PlayGameData_CS)
}
MSG_Req_PlayGameData_CS::MSG_Req_PlayGameData_CS(const MSG_Req_PlayGameData_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&step_, &from.step_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&step_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:copymap.MSG_Req_PlayGameData_CS)
}

void MSG_Req_PlayGameData_CS::SharedCtor() {
  ::memset(&step_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&step_)) + sizeof(type_));
}

MSG_Req_PlayGameData_CS::~MSG_Req_PlayGameData_CS() {
  // @@protoc_insertion_point(destructor:copymap.MSG_Req_PlayGameData_CS)
  SharedDtor();
}

void MSG_Req_PlayGameData_CS::SharedDtor() {
}

void MSG_Req_PlayGameData_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_PlayGameData_CS& MSG_Req_PlayGameData_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_PlayGameData_CS_copymap_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_PlayGameData_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:copymap.MSG_Req_PlayGameData_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&step_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&step_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_PlayGameData_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 step = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_step(&has_bits);
          step_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_success(&has_bits);
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_PlayGameData_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:copymap.MSG_Req_PlayGameData_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 step = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_step(), target);
  }

  // optional uint32 success = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_success(), target);
  }

  // optional uint32 type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:copymap.MSG_Req_PlayGameData_CS)
  return target;
}

size_t MSG_Req_PlayGameData_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:copymap.MSG_Req_PlayGameData_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 step = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_step());
    }

    // optional uint32 success = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_success());
    }

    // optional uint32 type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_PlayGameData_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:copymap.MSG_Req_PlayGameData_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_PlayGameData_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_PlayGameData_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:copymap.MSG_Req_PlayGameData_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:copymap.MSG_Req_PlayGameData_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_PlayGameData_CS::MergeFrom(const MSG_Req_PlayGameData_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:copymap.MSG_Req_PlayGameData_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      step_ = from.step_;
    }
    if (cached_has_bits & 0x00000002u) {
      success_ = from.success_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Req_PlayGameData_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:copymap.MSG_Req_PlayGameData_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_PlayGameData_CS::CopyFrom(const MSG_Req_PlayGameData_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:copymap.MSG_Req_PlayGameData_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_PlayGameData_CS::IsInitialized() const {
  return true;
}

void MSG_Req_PlayGameData_CS::InternalSwap(MSG_Req_PlayGameData_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(step_, other->step_);
  swap(success_, other->success_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_PlayGameData_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_PlayGameRetry_CS::InitAsDefaultInstance() {
}
class MSG_Req_PlayGameRetry_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_PlayGameRetry_CS>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Req_PlayGameRetry_CS::MSG_Req_PlayGameRetry_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:copymap.MSG_Req_PlayGameRetry_CS)
}
MSG_Req_PlayGameRetry_CS::MSG_Req_PlayGameRetry_CS(const MSG_Req_PlayGameRetry_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:copymap.MSG_Req_PlayGameRetry_CS)
}

void MSG_Req_PlayGameRetry_CS::SharedCtor() {
  type_ = 0u;
}

MSG_Req_PlayGameRetry_CS::~MSG_Req_PlayGameRetry_CS() {
  // @@protoc_insertion_point(destructor:copymap.MSG_Req_PlayGameRetry_CS)
  SharedDtor();
}

void MSG_Req_PlayGameRetry_CS::SharedDtor() {
}

void MSG_Req_PlayGameRetry_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_PlayGameRetry_CS& MSG_Req_PlayGameRetry_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_PlayGameRetry_CS_copymap_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_PlayGameRetry_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:copymap.MSG_Req_PlayGameRetry_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_PlayGameRetry_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_PlayGameRetry_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:copymap.MSG_Req_PlayGameRetry_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:copymap.MSG_Req_PlayGameRetry_CS)
  return target;
}

size_t MSG_Req_PlayGameRetry_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:copymap.MSG_Req_PlayGameRetry_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 type = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_PlayGameRetry_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:copymap.MSG_Req_PlayGameRetry_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_PlayGameRetry_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_PlayGameRetry_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:copymap.MSG_Req_PlayGameRetry_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:copymap.MSG_Req_PlayGameRetry_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_PlayGameRetry_CS::MergeFrom(const MSG_Req_PlayGameRetry_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:copymap.MSG_Req_PlayGameRetry_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_type()) {
    _internal_set_type(from._internal_type());
  }
}

void MSG_Req_PlayGameRetry_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:copymap.MSG_Req_PlayGameRetry_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_PlayGameRetry_CS::CopyFrom(const MSG_Req_PlayGameRetry_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:copymap.MSG_Req_PlayGameRetry_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_PlayGameRetry_CS::IsInitialized() const {
  return true;
}

void MSG_Req_PlayGameRetry_CS::InternalSwap(MSG_Req_PlayGameRetry_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_PlayGameRetry_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace copymap
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::copymap::MSG_Req_CopymapEnterInfo_CS* Arena::CreateMaybeMessage< ::copymap::MSG_Req_CopymapEnterInfo_CS >(Arena* arena) {
  return Arena::CreateInternal< ::copymap::MSG_Req_CopymapEnterInfo_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::copymap::MSG_Ret_CopymapEnterInfo_SC* Arena::CreateMaybeMessage< ::copymap::MSG_Ret_CopymapEnterInfo_SC >(Arena* arena) {
  return Arena::CreateInternal< ::copymap::MSG_Ret_CopymapEnterInfo_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::copymap::MSG_Req_EnterCopymap_CS* Arena::CreateMaybeMessage< ::copymap::MSG_Req_EnterCopymap_CS >(Arena* arena) {
  return Arena::CreateInternal< ::copymap::MSG_Req_EnterCopymap_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::copymap::MSG_Req_ExitCopymap_SC* Arena::CreateMaybeMessage< ::copymap::MSG_Req_ExitCopymap_SC >(Arena* arena) {
  return Arena::CreateInternal< ::copymap::MSG_Req_ExitCopymap_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::copymap::MSG_Ret_TriggerEnter_SC* Arena::CreateMaybeMessage< ::copymap::MSG_Ret_TriggerEnter_SC >(Arena* arena) {
  return Arena::CreateInternal< ::copymap::MSG_Ret_TriggerEnter_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::copymap::MSG_ReqBackCopymap_CS* Arena::CreateMaybeMessage< ::copymap::MSG_ReqBackCopymap_CS >(Arena* arena) {
  return Arena::CreateInternal< ::copymap::MSG_ReqBackCopymap_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::copymap::RewardsObjectInfo* Arena::CreateMaybeMessage< ::copymap::RewardsObjectInfo >(Arena* arena) {
  return Arena::CreateInternal< ::copymap::RewardsObjectInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::copymap::MSG_Ret_CopymapOver_SC* Arena::CreateMaybeMessage< ::copymap::MSG_Ret_CopymapOver_SC >(Arena* arena) {
  return Arena::CreateInternal< ::copymap::MSG_Ret_CopymapOver_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::copymap::MSG_RetAwardQuest_SC* Arena::CreateMaybeMessage< ::copymap::MSG_RetAwardQuest_SC >(Arena* arena) {
  return Arena::CreateInternal< ::copymap::MSG_RetAwardQuest_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::copymap::MSG_Req_CopymapLottery_CS* Arena::CreateMaybeMessage< ::copymap::MSG_Req_CopymapLottery_CS >(Arena* arena) {
  return Arena::CreateInternal< ::copymap::MSG_Req_CopymapLottery_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::copymap::MSG_Ret_CopymapLottery_SC* Arena::CreateMaybeMessage< ::copymap::MSG_Ret_CopymapLottery_SC >(Arena* arena) {
  return Arena::CreateInternal< ::copymap::MSG_Ret_CopymapLottery_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::copymap::MSG_Req_CopymapGather_CS* Arena::CreateMaybeMessage< ::copymap::MSG_Req_CopymapGather_CS >(Arena* arena) {
  return Arena::CreateInternal< ::copymap::MSG_Req_CopymapGather_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::copymap::MSG_Ret_CopymapGatherReq_SC* Arena::CreateMaybeMessage< ::copymap::MSG_Ret_CopymapGatherReq_SC >(Arena* arena) {
  return Arena::CreateInternal< ::copymap::MSG_Ret_CopymapGatherReq_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::copymap::MSG_Req_CopymapAnswerGather_CS* Arena::CreateMaybeMessage< ::copymap::MSG_Req_CopymapAnswerGather_CS >(Arena* arena) {
  return Arena::CreateInternal< ::copymap::MSG_Req_CopymapAnswerGather_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::copymap::CopymapGatherItem* Arena::CreateMaybeMessage< ::copymap::CopymapGatherItem >(Arena* arena) {
  return Arena::CreateInternal< ::copymap::CopymapGatherItem >(arena);
}
template<> PROTOBUF_NOINLINE ::copymap::MSG_Ret_CopymapGatherData_SC* Arena::CreateMaybeMessage< ::copymap::MSG_Ret_CopymapGatherData_SC >(Arena* arena) {
  return Arena::CreateInternal< ::copymap::MSG_Ret_CopymapGatherData_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::copymap::MSG_Req_CopymapGatherQuickEnter_CS* Arena::CreateMaybeMessage< ::copymap::MSG_Req_CopymapGatherQuickEnter_CS >(Arena* arena) {
  return Arena::CreateInternal< ::copymap::MSG_Req_CopymapGatherQuickEnter_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::copymap::MSG_Req_CopymapReGather_CS* Arena::CreateMaybeMessage< ::copymap::MSG_Req_CopymapReGather_CS >(Arena* arena) {
  return Arena::CreateInternal< ::copymap::MSG_Req_CopymapReGather_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::copymap::MSG_Ret_CopymapReGather_SC* Arena::CreateMaybeMessage< ::copymap::MSG_Ret_CopymapReGather_SC >(Arena* arena) {
  return Arena::CreateInternal< ::copymap::MSG_Ret_CopymapReGather_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::copymap::MSG_Ret_CopymapBossTempID_SC* Arena::CreateMaybeMessage< ::copymap::MSG_Ret_CopymapBossTempID_SC >(Arena* arena) {
  return Arena::CreateInternal< ::copymap::MSG_Ret_CopymapBossTempID_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::copymap::AdventureCopymapGroup* Arena::CreateMaybeMessage< ::copymap::AdventureCopymapGroup >(Arena* arena) {
  return Arena::CreateInternal< ::copymap::AdventureCopymapGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::copymap::MSG_Req_AdventureCopymapGroup_CS* Arena::CreateMaybeMessage< ::copymap::MSG_Req_AdventureCopymapGroup_CS >(Arena* arena) {
  return Arena::CreateInternal< ::copymap::MSG_Req_AdventureCopymapGroup_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::copymap::MSG_Ret_AdventureCopymapGroup_SC* Arena::CreateMaybeMessage< ::copymap::MSG_Ret_AdventureCopymapGroup_SC >(Arena* arena) {
  return Arena::CreateInternal< ::copymap::MSG_Ret_AdventureCopymapGroup_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::copymap::AdventureCopymap* Arena::CreateMaybeMessage< ::copymap::AdventureCopymap >(Arena* arena) {
  return Arena::CreateInternal< ::copymap::AdventureCopymap >(arena);
}
template<> PROTOBUF_NOINLINE ::copymap::MSG_Req_AdventureCopymapInfo_CS* Arena::CreateMaybeMessage< ::copymap::MSG_Req_AdventureCopymapInfo_CS >(Arena* arena) {
  return Arena::CreateInternal< ::copymap::MSG_Req_AdventureCopymapInfo_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::copymap::MSG_Ret_AdventureCopymapInfo_SC* Arena::CreateMaybeMessage< ::copymap::MSG_Ret_AdventureCopymapInfo_SC >(Arena* arena) {
  return Arena::CreateInternal< ::copymap::MSG_Ret_AdventureCopymapInfo_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::copymap::MSG_Req_AdventureHeros_CS* Arena::CreateMaybeMessage< ::copymap::MSG_Req_AdventureHeros_CS >(Arena* arena) {
  return Arena::CreateInternal< ::copymap::MSG_Req_AdventureHeros_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::copymap::MSG_Ret_AdventureHeros_SC* Arena::CreateMaybeMessage< ::copymap::MSG_Ret_AdventureHeros_SC >(Arena* arena) {
  return Arena::CreateInternal< ::copymap::MSG_Ret_AdventureHeros_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::copymap::MSG_Req_EnterAdventureCopymap_CS* Arena::CreateMaybeMessage< ::copymap::MSG_Req_EnterAdventureCopymap_CS >(Arena* arena) {
  return Arena::CreateInternal< ::copymap::MSG_Req_EnterAdventureCopymap_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::copymap::ObjectData* Arena::CreateMaybeMessage< ::copymap::ObjectData >(Arena* arena) {
  return Arena::CreateInternal< ::copymap::ObjectData >(arena);
}
template<> PROTOBUF_NOINLINE ::copymap::MSG_Ret_TrainData_SC* Arena::CreateMaybeMessage< ::copymap::MSG_Ret_TrainData_SC >(Arena* arena) {
  return Arena::CreateInternal< ::copymap::MSG_Ret_TrainData_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::copymap::MSG_Ret_PlayEventData_SC* Arena::CreateMaybeMessage< ::copymap::MSG_Ret_PlayEventData_SC >(Arena* arena) {
  return Arena::CreateInternal< ::copymap::MSG_Ret_PlayEventData_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::copymap::MSG_Ret_CurMonsterGroup_SC* Arena::CreateMaybeMessage< ::copymap::MSG_Ret_CurMonsterGroup_SC >(Arena* arena) {
  return Arena::CreateInternal< ::copymap::MSG_Ret_CurMonsterGroup_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::copymap::MSG_Req_PlayGameData_CS* Arena::CreateMaybeMessage< ::copymap::MSG_Req_PlayGameData_CS >(Arena* arena) {
  return Arena::CreateInternal< ::copymap::MSG_Req_PlayGameData_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::copymap::MSG_Req_PlayGameRetry_CS* Arena::CreateMaybeMessage< ::copymap::MSG_Req_PlayGameRetry_CS >(Arena* arena) {
  return Arena::CreateInternal< ::copymap::MSG_Req_PlayGameRetry_CS >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
