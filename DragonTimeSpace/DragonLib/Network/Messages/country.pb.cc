// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: country.proto

#include "country.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace country {
class MSG_Req_JoinCountry_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_JoinCountry_CS> _instance;
} _MSG_Req_JoinCountry_CS_default_instance_;
class MSG_Ret_JoinCountry_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_JoinCountry_SC> _instance;
} _MSG_Ret_JoinCountry_SC_default_instance_;
}  // namespace country
static void InitDefaultsscc_info_MSG_Req_JoinCountry_CS_country_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::country::_MSG_Req_JoinCountry_CS_default_instance_;
    new (ptr) ::country::MSG_Req_JoinCountry_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::country::MSG_Req_JoinCountry_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_JoinCountry_CS_country_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_JoinCountry_CS_country_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_JoinCountry_SC_country_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::country::_MSG_Ret_JoinCountry_SC_default_instance_;
    new (ptr) ::country::MSG_Ret_JoinCountry_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::country::MSG_Ret_JoinCountry_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_JoinCountry_SC_country_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_JoinCountry_SC_country_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_country_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_country_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_country_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_country_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::country::MSG_Req_JoinCountry_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::country::MSG_Req_JoinCountry_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::country::MSG_Req_JoinCountry_CS, countryid_),
  0,
  PROTOBUF_FIELD_OFFSET(::country::MSG_Ret_JoinCountry_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::country::MSG_Ret_JoinCountry_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::country::MSG_Ret_JoinCountry_SC, retcode_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::country::MSG_Req_JoinCountry_CS)},
  { 7, 13, sizeof(::country::MSG_Ret_JoinCountry_SC)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::country::_MSG_Req_JoinCountry_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::country::_MSG_Ret_JoinCountry_SC_default_instance_),
};

const char descriptor_table_protodef_country_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rcountry.proto\022\007country\"+\n\026MSG_Req_Join"
  "Country_CS\022\021\n\tcountryid\030\001 \001(\r\")\n\026MSG_Ret"
  "_JoinCountry_SC\022\017\n\007retcode\030\001 \001(\r"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_country_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_country_2eproto_sccs[2] = {
  &scc_info_MSG_Req_JoinCountry_CS_country_2eproto.base,
  &scc_info_MSG_Ret_JoinCountry_SC_country_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_country_2eproto_once;
static bool descriptor_table_country_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_country_2eproto = {
  &descriptor_table_country_2eproto_initialized, descriptor_table_protodef_country_2eproto, "country.proto", 112,
  &descriptor_table_country_2eproto_once, descriptor_table_country_2eproto_sccs, descriptor_table_country_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_country_2eproto::offsets,
  file_level_metadata_country_2eproto, 2, file_level_enum_descriptors_country_2eproto, file_level_service_descriptors_country_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_country_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_country_2eproto)), true);
namespace country {

// ===================================================================

void MSG_Req_JoinCountry_CS::InitAsDefaultInstance() {
}
class MSG_Req_JoinCountry_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_JoinCountry_CS>()._has_bits_);
  static void set_has_countryid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Req_JoinCountry_CS::MSG_Req_JoinCountry_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:country.MSG_Req_JoinCountry_CS)
}
MSG_Req_JoinCountry_CS::MSG_Req_JoinCountry_CS(const MSG_Req_JoinCountry_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  countryid_ = from.countryid_;
  // @@protoc_insertion_point(copy_constructor:country.MSG_Req_JoinCountry_CS)
}

void MSG_Req_JoinCountry_CS::SharedCtor() {
  countryid_ = 0u;
}

MSG_Req_JoinCountry_CS::~MSG_Req_JoinCountry_CS() {
  // @@protoc_insertion_point(destructor:country.MSG_Req_JoinCountry_CS)
  SharedDtor();
}

void MSG_Req_JoinCountry_CS::SharedDtor() {
}

void MSG_Req_JoinCountry_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_JoinCountry_CS& MSG_Req_JoinCountry_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_JoinCountry_CS_country_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_JoinCountry_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:country.MSG_Req_JoinCountry_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  countryid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_JoinCountry_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 countryid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_countryid(&has_bits);
          countryid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_JoinCountry_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:country.MSG_Req_JoinCountry_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 countryid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_countryid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:country.MSG_Req_JoinCountry_CS)
  return target;
}

size_t MSG_Req_JoinCountry_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:country.MSG_Req_JoinCountry_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 countryid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_countryid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_JoinCountry_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:country.MSG_Req_JoinCountry_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_JoinCountry_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_JoinCountry_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:country.MSG_Req_JoinCountry_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:country.MSG_Req_JoinCountry_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_JoinCountry_CS::MergeFrom(const MSG_Req_JoinCountry_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:country.MSG_Req_JoinCountry_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_countryid()) {
    _internal_set_countryid(from._internal_countryid());
  }
}

void MSG_Req_JoinCountry_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:country.MSG_Req_JoinCountry_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_JoinCountry_CS::CopyFrom(const MSG_Req_JoinCountry_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:country.MSG_Req_JoinCountry_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_JoinCountry_CS::IsInitialized() const {
  return true;
}

void MSG_Req_JoinCountry_CS::InternalSwap(MSG_Req_JoinCountry_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(countryid_, other->countryid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_JoinCountry_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_JoinCountry_SC::InitAsDefaultInstance() {
}
class MSG_Ret_JoinCountry_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_JoinCountry_SC>()._has_bits_);
  static void set_has_retcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Ret_JoinCountry_SC::MSG_Ret_JoinCountry_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:country.MSG_Ret_JoinCountry_SC)
}
MSG_Ret_JoinCountry_SC::MSG_Ret_JoinCountry_SC(const MSG_Ret_JoinCountry_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:country.MSG_Ret_JoinCountry_SC)
}

void MSG_Ret_JoinCountry_SC::SharedCtor() {
  retcode_ = 0u;
}

MSG_Ret_JoinCountry_SC::~MSG_Ret_JoinCountry_SC() {
  // @@protoc_insertion_point(destructor:country.MSG_Ret_JoinCountry_SC)
  SharedDtor();
}

void MSG_Ret_JoinCountry_SC::SharedDtor() {
}

void MSG_Ret_JoinCountry_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_JoinCountry_SC& MSG_Ret_JoinCountry_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_JoinCountry_SC_country_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_JoinCountry_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:country.MSG_Ret_JoinCountry_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_JoinCountry_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 retcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_retcode(&has_bits);
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_JoinCountry_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:country.MSG_Ret_JoinCountry_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 retcode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:country.MSG_Ret_JoinCountry_SC)
  return target;
}

size_t MSG_Ret_JoinCountry_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:country.MSG_Ret_JoinCountry_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 retcode = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_JoinCountry_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:country.MSG_Ret_JoinCountry_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_JoinCountry_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_JoinCountry_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:country.MSG_Ret_JoinCountry_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:country.MSG_Ret_JoinCountry_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_JoinCountry_SC::MergeFrom(const MSG_Ret_JoinCountry_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:country.MSG_Ret_JoinCountry_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_retcode()) {
    _internal_set_retcode(from._internal_retcode());
  }
}

void MSG_Ret_JoinCountry_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:country.MSG_Ret_JoinCountry_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_JoinCountry_SC::CopyFrom(const MSG_Ret_JoinCountry_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:country.MSG_Ret_JoinCountry_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_JoinCountry_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_JoinCountry_SC::InternalSwap(MSG_Ret_JoinCountry_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(retcode_, other->retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_JoinCountry_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace country
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::country::MSG_Req_JoinCountry_CS* Arena::CreateMaybeMessage< ::country::MSG_Req_JoinCountry_CS >(Arena* arena) {
  return Arena::CreateInternal< ::country::MSG_Req_JoinCountry_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::country::MSG_Ret_JoinCountry_SC* Arena::CreateMaybeMessage< ::country::MSG_Ret_JoinCountry_SC >(Arena* arena) {
  return Arena::CreateInternal< ::country::MSG_Ret_JoinCountry_SC >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
