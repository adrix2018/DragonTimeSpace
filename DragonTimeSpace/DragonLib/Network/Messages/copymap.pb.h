// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: copymap.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_copymap_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_copymap_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "massive.pb.h"
#include "object.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_copymap_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_copymap_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[35]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_copymap_2eproto;
namespace copymap {
class AdventureCopymap;
class AdventureCopymapDefaultTypeInternal;
extern AdventureCopymapDefaultTypeInternal _AdventureCopymap_default_instance_;
class AdventureCopymapGroup;
class AdventureCopymapGroupDefaultTypeInternal;
extern AdventureCopymapGroupDefaultTypeInternal _AdventureCopymapGroup_default_instance_;
class CopymapGatherItem;
class CopymapGatherItemDefaultTypeInternal;
extern CopymapGatherItemDefaultTypeInternal _CopymapGatherItem_default_instance_;
class MSG_ReqBackCopymap_CS;
class MSG_ReqBackCopymap_CSDefaultTypeInternal;
extern MSG_ReqBackCopymap_CSDefaultTypeInternal _MSG_ReqBackCopymap_CS_default_instance_;
class MSG_Req_AdventureCopymapGroup_CS;
class MSG_Req_AdventureCopymapGroup_CSDefaultTypeInternal;
extern MSG_Req_AdventureCopymapGroup_CSDefaultTypeInternal _MSG_Req_AdventureCopymapGroup_CS_default_instance_;
class MSG_Req_AdventureCopymapInfo_CS;
class MSG_Req_AdventureCopymapInfo_CSDefaultTypeInternal;
extern MSG_Req_AdventureCopymapInfo_CSDefaultTypeInternal _MSG_Req_AdventureCopymapInfo_CS_default_instance_;
class MSG_Req_AdventureHeros_CS;
class MSG_Req_AdventureHeros_CSDefaultTypeInternal;
extern MSG_Req_AdventureHeros_CSDefaultTypeInternal _MSG_Req_AdventureHeros_CS_default_instance_;
class MSG_Req_CopymapAnswerGather_CS;
class MSG_Req_CopymapAnswerGather_CSDefaultTypeInternal;
extern MSG_Req_CopymapAnswerGather_CSDefaultTypeInternal _MSG_Req_CopymapAnswerGather_CS_default_instance_;
class MSG_Req_CopymapEnterInfo_CS;
class MSG_Req_CopymapEnterInfo_CSDefaultTypeInternal;
extern MSG_Req_CopymapEnterInfo_CSDefaultTypeInternal _MSG_Req_CopymapEnterInfo_CS_default_instance_;
class MSG_Req_CopymapGatherQuickEnter_CS;
class MSG_Req_CopymapGatherQuickEnter_CSDefaultTypeInternal;
extern MSG_Req_CopymapGatherQuickEnter_CSDefaultTypeInternal _MSG_Req_CopymapGatherQuickEnter_CS_default_instance_;
class MSG_Req_CopymapGather_CS;
class MSG_Req_CopymapGather_CSDefaultTypeInternal;
extern MSG_Req_CopymapGather_CSDefaultTypeInternal _MSG_Req_CopymapGather_CS_default_instance_;
class MSG_Req_CopymapLottery_CS;
class MSG_Req_CopymapLottery_CSDefaultTypeInternal;
extern MSG_Req_CopymapLottery_CSDefaultTypeInternal _MSG_Req_CopymapLottery_CS_default_instance_;
class MSG_Req_CopymapReGather_CS;
class MSG_Req_CopymapReGather_CSDefaultTypeInternal;
extern MSG_Req_CopymapReGather_CSDefaultTypeInternal _MSG_Req_CopymapReGather_CS_default_instance_;
class MSG_Req_EnterAdventureCopymap_CS;
class MSG_Req_EnterAdventureCopymap_CSDefaultTypeInternal;
extern MSG_Req_EnterAdventureCopymap_CSDefaultTypeInternal _MSG_Req_EnterAdventureCopymap_CS_default_instance_;
class MSG_Req_EnterCopymap_CS;
class MSG_Req_EnterCopymap_CSDefaultTypeInternal;
extern MSG_Req_EnterCopymap_CSDefaultTypeInternal _MSG_Req_EnterCopymap_CS_default_instance_;
class MSG_Req_ExitCopymap_SC;
class MSG_Req_ExitCopymap_SCDefaultTypeInternal;
extern MSG_Req_ExitCopymap_SCDefaultTypeInternal _MSG_Req_ExitCopymap_SC_default_instance_;
class MSG_Req_PlayGameData_CS;
class MSG_Req_PlayGameData_CSDefaultTypeInternal;
extern MSG_Req_PlayGameData_CSDefaultTypeInternal _MSG_Req_PlayGameData_CS_default_instance_;
class MSG_Req_PlayGameRetry_CS;
class MSG_Req_PlayGameRetry_CSDefaultTypeInternal;
extern MSG_Req_PlayGameRetry_CSDefaultTypeInternal _MSG_Req_PlayGameRetry_CS_default_instance_;
class MSG_RetAwardQuest_SC;
class MSG_RetAwardQuest_SCDefaultTypeInternal;
extern MSG_RetAwardQuest_SCDefaultTypeInternal _MSG_RetAwardQuest_SC_default_instance_;
class MSG_Ret_AdventureCopymapGroup_SC;
class MSG_Ret_AdventureCopymapGroup_SCDefaultTypeInternal;
extern MSG_Ret_AdventureCopymapGroup_SCDefaultTypeInternal _MSG_Ret_AdventureCopymapGroup_SC_default_instance_;
class MSG_Ret_AdventureCopymapInfo_SC;
class MSG_Ret_AdventureCopymapInfo_SCDefaultTypeInternal;
extern MSG_Ret_AdventureCopymapInfo_SCDefaultTypeInternal _MSG_Ret_AdventureCopymapInfo_SC_default_instance_;
class MSG_Ret_AdventureHeros_SC;
class MSG_Ret_AdventureHeros_SCDefaultTypeInternal;
extern MSG_Ret_AdventureHeros_SCDefaultTypeInternal _MSG_Ret_AdventureHeros_SC_default_instance_;
class MSG_Ret_CopymapBossTempID_SC;
class MSG_Ret_CopymapBossTempID_SCDefaultTypeInternal;
extern MSG_Ret_CopymapBossTempID_SCDefaultTypeInternal _MSG_Ret_CopymapBossTempID_SC_default_instance_;
class MSG_Ret_CopymapEnterInfo_SC;
class MSG_Ret_CopymapEnterInfo_SCDefaultTypeInternal;
extern MSG_Ret_CopymapEnterInfo_SCDefaultTypeInternal _MSG_Ret_CopymapEnterInfo_SC_default_instance_;
class MSG_Ret_CopymapGatherData_SC;
class MSG_Ret_CopymapGatherData_SCDefaultTypeInternal;
extern MSG_Ret_CopymapGatherData_SCDefaultTypeInternal _MSG_Ret_CopymapGatherData_SC_default_instance_;
class MSG_Ret_CopymapGatherReq_SC;
class MSG_Ret_CopymapGatherReq_SCDefaultTypeInternal;
extern MSG_Ret_CopymapGatherReq_SCDefaultTypeInternal _MSG_Ret_CopymapGatherReq_SC_default_instance_;
class MSG_Ret_CopymapLottery_SC;
class MSG_Ret_CopymapLottery_SCDefaultTypeInternal;
extern MSG_Ret_CopymapLottery_SCDefaultTypeInternal _MSG_Ret_CopymapLottery_SC_default_instance_;
class MSG_Ret_CopymapOver_SC;
class MSG_Ret_CopymapOver_SCDefaultTypeInternal;
extern MSG_Ret_CopymapOver_SCDefaultTypeInternal _MSG_Ret_CopymapOver_SC_default_instance_;
class MSG_Ret_CopymapReGather_SC;
class MSG_Ret_CopymapReGather_SCDefaultTypeInternal;
extern MSG_Ret_CopymapReGather_SCDefaultTypeInternal _MSG_Ret_CopymapReGather_SC_default_instance_;
class MSG_Ret_CurMonsterGroup_SC;
class MSG_Ret_CurMonsterGroup_SCDefaultTypeInternal;
extern MSG_Ret_CurMonsterGroup_SCDefaultTypeInternal _MSG_Ret_CurMonsterGroup_SC_default_instance_;
class MSG_Ret_PlayEventData_SC;
class MSG_Ret_PlayEventData_SCDefaultTypeInternal;
extern MSG_Ret_PlayEventData_SCDefaultTypeInternal _MSG_Ret_PlayEventData_SC_default_instance_;
class MSG_Ret_TrainData_SC;
class MSG_Ret_TrainData_SCDefaultTypeInternal;
extern MSG_Ret_TrainData_SCDefaultTypeInternal _MSG_Ret_TrainData_SC_default_instance_;
class MSG_Ret_TriggerEnter_SC;
class MSG_Ret_TriggerEnter_SCDefaultTypeInternal;
extern MSG_Ret_TriggerEnter_SCDefaultTypeInternal _MSG_Ret_TriggerEnter_SC_default_instance_;
class ObjectData;
class ObjectDataDefaultTypeInternal;
extern ObjectDataDefaultTypeInternal _ObjectData_default_instance_;
class RewardsObjectInfo;
class RewardsObjectInfoDefaultTypeInternal;
extern RewardsObjectInfoDefaultTypeInternal _RewardsObjectInfo_default_instance_;
}  // namespace copymap
PROTOBUF_NAMESPACE_OPEN
template<> ::copymap::AdventureCopymap* Arena::CreateMaybeMessage<::copymap::AdventureCopymap>(Arena*);
template<> ::copymap::AdventureCopymapGroup* Arena::CreateMaybeMessage<::copymap::AdventureCopymapGroup>(Arena*);
template<> ::copymap::CopymapGatherItem* Arena::CreateMaybeMessage<::copymap::CopymapGatherItem>(Arena*);
template<> ::copymap::MSG_ReqBackCopymap_CS* Arena::CreateMaybeMessage<::copymap::MSG_ReqBackCopymap_CS>(Arena*);
template<> ::copymap::MSG_Req_AdventureCopymapGroup_CS* Arena::CreateMaybeMessage<::copymap::MSG_Req_AdventureCopymapGroup_CS>(Arena*);
template<> ::copymap::MSG_Req_AdventureCopymapInfo_CS* Arena::CreateMaybeMessage<::copymap::MSG_Req_AdventureCopymapInfo_CS>(Arena*);
template<> ::copymap::MSG_Req_AdventureHeros_CS* Arena::CreateMaybeMessage<::copymap::MSG_Req_AdventureHeros_CS>(Arena*);
template<> ::copymap::MSG_Req_CopymapAnswerGather_CS* Arena::CreateMaybeMessage<::copymap::MSG_Req_CopymapAnswerGather_CS>(Arena*);
template<> ::copymap::MSG_Req_CopymapEnterInfo_CS* Arena::CreateMaybeMessage<::copymap::MSG_Req_CopymapEnterInfo_CS>(Arena*);
template<> ::copymap::MSG_Req_CopymapGatherQuickEnter_CS* Arena::CreateMaybeMessage<::copymap::MSG_Req_CopymapGatherQuickEnter_CS>(Arena*);
template<> ::copymap::MSG_Req_CopymapGather_CS* Arena::CreateMaybeMessage<::copymap::MSG_Req_CopymapGather_CS>(Arena*);
template<> ::copymap::MSG_Req_CopymapLottery_CS* Arena::CreateMaybeMessage<::copymap::MSG_Req_CopymapLottery_CS>(Arena*);
template<> ::copymap::MSG_Req_CopymapReGather_CS* Arena::CreateMaybeMessage<::copymap::MSG_Req_CopymapReGather_CS>(Arena*);
template<> ::copymap::MSG_Req_EnterAdventureCopymap_CS* Arena::CreateMaybeMessage<::copymap::MSG_Req_EnterAdventureCopymap_CS>(Arena*);
template<> ::copymap::MSG_Req_EnterCopymap_CS* Arena::CreateMaybeMessage<::copymap::MSG_Req_EnterCopymap_CS>(Arena*);
template<> ::copymap::MSG_Req_ExitCopymap_SC* Arena::CreateMaybeMessage<::copymap::MSG_Req_ExitCopymap_SC>(Arena*);
template<> ::copymap::MSG_Req_PlayGameData_CS* Arena::CreateMaybeMessage<::copymap::MSG_Req_PlayGameData_CS>(Arena*);
template<> ::copymap::MSG_Req_PlayGameRetry_CS* Arena::CreateMaybeMessage<::copymap::MSG_Req_PlayGameRetry_CS>(Arena*);
template<> ::copymap::MSG_RetAwardQuest_SC* Arena::CreateMaybeMessage<::copymap::MSG_RetAwardQuest_SC>(Arena*);
template<> ::copymap::MSG_Ret_AdventureCopymapGroup_SC* Arena::CreateMaybeMessage<::copymap::MSG_Ret_AdventureCopymapGroup_SC>(Arena*);
template<> ::copymap::MSG_Ret_AdventureCopymapInfo_SC* Arena::CreateMaybeMessage<::copymap::MSG_Ret_AdventureCopymapInfo_SC>(Arena*);
template<> ::copymap::MSG_Ret_AdventureHeros_SC* Arena::CreateMaybeMessage<::copymap::MSG_Ret_AdventureHeros_SC>(Arena*);
template<> ::copymap::MSG_Ret_CopymapBossTempID_SC* Arena::CreateMaybeMessage<::copymap::MSG_Ret_CopymapBossTempID_SC>(Arena*);
template<> ::copymap::MSG_Ret_CopymapEnterInfo_SC* Arena::CreateMaybeMessage<::copymap::MSG_Ret_CopymapEnterInfo_SC>(Arena*);
template<> ::copymap::MSG_Ret_CopymapGatherData_SC* Arena::CreateMaybeMessage<::copymap::MSG_Ret_CopymapGatherData_SC>(Arena*);
template<> ::copymap::MSG_Ret_CopymapGatherReq_SC* Arena::CreateMaybeMessage<::copymap::MSG_Ret_CopymapGatherReq_SC>(Arena*);
template<> ::copymap::MSG_Ret_CopymapLottery_SC* Arena::CreateMaybeMessage<::copymap::MSG_Ret_CopymapLottery_SC>(Arena*);
template<> ::copymap::MSG_Ret_CopymapOver_SC* Arena::CreateMaybeMessage<::copymap::MSG_Ret_CopymapOver_SC>(Arena*);
template<> ::copymap::MSG_Ret_CopymapReGather_SC* Arena::CreateMaybeMessage<::copymap::MSG_Ret_CopymapReGather_SC>(Arena*);
template<> ::copymap::MSG_Ret_CurMonsterGroup_SC* Arena::CreateMaybeMessage<::copymap::MSG_Ret_CurMonsterGroup_SC>(Arena*);
template<> ::copymap::MSG_Ret_PlayEventData_SC* Arena::CreateMaybeMessage<::copymap::MSG_Ret_PlayEventData_SC>(Arena*);
template<> ::copymap::MSG_Ret_TrainData_SC* Arena::CreateMaybeMessage<::copymap::MSG_Ret_TrainData_SC>(Arena*);
template<> ::copymap::MSG_Ret_TriggerEnter_SC* Arena::CreateMaybeMessage<::copymap::MSG_Ret_TriggerEnter_SC>(Arena*);
template<> ::copymap::ObjectData* Arena::CreateMaybeMessage<::copymap::ObjectData>(Arena*);
template<> ::copymap::RewardsObjectInfo* Arena::CreateMaybeMessage<::copymap::RewardsObjectInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace copymap {

enum OverType : int {
  OVERMAP_ALLUSER_DEATH = 1,
  OVERMAP_KILL_ONEBOSS = 2,
  OVERMAP_KILL_ALLBOSS = 4,
  OVERMAP_TIME_OVER = 8
};
bool OverType_IsValid(int value);
constexpr OverType OverType_MIN = OVERMAP_ALLUSER_DEATH;
constexpr OverType OverType_MAX = OVERMAP_TIME_OVER;
constexpr int OverType_ARRAYSIZE = OverType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OverType_descriptor();
template<typename T>
inline const std::string& OverType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OverType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OverType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OverType_descriptor(), enum_t_value);
}
inline bool OverType_Parse(
    const std::string& name, OverType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OverType>(
    OverType_descriptor(), name, value);
}
enum MemberGatherState : int {
  Gather_None = 0,
  Gather_Agree = 1,
  Gather_Deny = 2,
  Gather_Times_NotEnough = 3,
  Gather_Offline_Deny = 4
};
bool MemberGatherState_IsValid(int value);
constexpr MemberGatherState MemberGatherState_MIN = Gather_None;
constexpr MemberGatherState MemberGatherState_MAX = Gather_Offline_Deny;
constexpr int MemberGatherState_ARRAYSIZE = MemberGatherState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MemberGatherState_descriptor();
template<typename T>
inline const std::string& MemberGatherState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MemberGatherState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MemberGatherState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MemberGatherState_descriptor(), enum_t_value);
}
inline bool MemberGatherState_Parse(
    const std::string& name, MemberGatherState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MemberGatherState>(
    MemberGatherState_descriptor(), name, value);
}
enum GatherState : int {
  CPGather_None = 0,
  CPGather_Start = 1,
  CPGather_Success = 2,
  CPGather_Failed = 3
};
bool GatherState_IsValid(int value);
constexpr GatherState GatherState_MIN = CPGather_None;
constexpr GatherState GatherState_MAX = CPGather_Failed;
constexpr int GatherState_ARRAYSIZE = GatherState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GatherState_descriptor();
template<typename T>
inline const std::string& GatherState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GatherState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GatherState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GatherState_descriptor(), enum_t_value);
}
inline bool GatherState_Parse(
    const std::string& name, GatherState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GatherState>(
    GatherState_descriptor(), name, value);
}
// ===================================================================

class MSG_Req_CopymapEnterInfo_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:copymap.MSG_Req_CopymapEnterInfo_CS) */ {
 public:
  MSG_Req_CopymapEnterInfo_CS();
  virtual ~MSG_Req_CopymapEnterInfo_CS();

  MSG_Req_CopymapEnterInfo_CS(const MSG_Req_CopymapEnterInfo_CS& from);
  MSG_Req_CopymapEnterInfo_CS(MSG_Req_CopymapEnterInfo_CS&& from) noexcept
    : MSG_Req_CopymapEnterInfo_CS() {
    *this = ::std::move(from);
  }

  inline MSG_Req_CopymapEnterInfo_CS& operator=(const MSG_Req_CopymapEnterInfo_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Req_CopymapEnterInfo_CS& operator=(MSG_Req_CopymapEnterInfo_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Req_CopymapEnterInfo_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Req_CopymapEnterInfo_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_Req_CopymapEnterInfo_CS*>(
               &_MSG_Req_CopymapEnterInfo_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MSG_Req_CopymapEnterInfo_CS& a, MSG_Req_CopymapEnterInfo_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Req_CopymapEnterInfo_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Req_CopymapEnterInfo_CS* New() const final {
    return CreateMaybeMessage<MSG_Req_CopymapEnterInfo_CS>(nullptr);
  }

  MSG_Req_CopymapEnterInfo_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Req_CopymapEnterInfo_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Req_CopymapEnterInfo_CS& from);
  void MergeFrom(const MSG_Req_CopymapEnterInfo_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Req_CopymapEnterInfo_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "copymap.MSG_Req_CopymapEnterInfo_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_copymap_2eproto);
    return ::descriptor_table_copymap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCopymapidxFieldNumber = 1,
  };
  // optional uint32 copymapidx = 1;
  bool has_copymapidx() const;
  private:
  bool _internal_has_copymapidx() const;
  public:
  void clear_copymapidx();
  ::PROTOBUF_NAMESPACE_ID::uint32 copymapidx() const;
  void set_copymapidx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_copymapidx() const;
  void _internal_set_copymapidx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:copymap.MSG_Req_CopymapEnterInfo_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 copymapidx_;
  friend struct ::TableStruct_copymap_2eproto;
};
// -------------------------------------------------------------------

class MSG_Ret_CopymapEnterInfo_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:copymap.MSG_Ret_CopymapEnterInfo_SC) */ {
 public:
  MSG_Ret_CopymapEnterInfo_SC();
  virtual ~MSG_Ret_CopymapEnterInfo_SC();

  MSG_Ret_CopymapEnterInfo_SC(const MSG_Ret_CopymapEnterInfo_SC& from);
  MSG_Ret_CopymapEnterInfo_SC(MSG_Ret_CopymapEnterInfo_SC&& from) noexcept
    : MSG_Ret_CopymapEnterInfo_SC() {
    *this = ::std::move(from);
  }

  inline MSG_Ret_CopymapEnterInfo_SC& operator=(const MSG_Ret_CopymapEnterInfo_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Ret_CopymapEnterInfo_SC& operator=(MSG_Ret_CopymapEnterInfo_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Ret_CopymapEnterInfo_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Ret_CopymapEnterInfo_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_Ret_CopymapEnterInfo_SC*>(
               &_MSG_Ret_CopymapEnterInfo_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MSG_Ret_CopymapEnterInfo_SC& a, MSG_Ret_CopymapEnterInfo_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Ret_CopymapEnterInfo_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Ret_CopymapEnterInfo_SC* New() const final {
    return CreateMaybeMessage<MSG_Ret_CopymapEnterInfo_SC>(nullptr);
  }

  MSG_Ret_CopymapEnterInfo_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Ret_CopymapEnterInfo_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Ret_CopymapEnterInfo_SC& from);
  void MergeFrom(const MSG_Ret_CopymapEnterInfo_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Ret_CopymapEnterInfo_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "copymap.MSG_Ret_CopymapEnterInfo_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_copymap_2eproto);
    return ::descriptor_table_copymap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCopymapidxFieldNumber = 1,
    kRemainTimesFieldNumber = 2,
  };
  // optional uint32 copymapidx = 1;
  bool has_copymapidx() const;
  private:
  bool _internal_has_copymapidx() const;
  public:
  void clear_copymapidx();
  ::PROTOBUF_NAMESPACE_ID::uint32 copymapidx() const;
  void set_copymapidx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_copymapidx() const;
  void _internal_set_copymapidx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 remain_times = 2;
  bool has_remain_times() const;
  private:
  bool _internal_has_remain_times() const;
  public:
  void clear_remain_times();
  ::PROTOBUF_NAMESPACE_ID::uint32 remain_times() const;
  void set_remain_times(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_remain_times() const;
  void _internal_set_remain_times(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:copymap.MSG_Ret_CopymapEnterInfo_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 copymapidx_;
  ::PROTOBUF_NAMESPACE_ID::uint32 remain_times_;
  friend struct ::TableStruct_copymap_2eproto;
};
// -------------------------------------------------------------------

class MSG_Req_EnterCopymap_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:copymap.MSG_Req_EnterCopymap_CS) */ {
 public:
  MSG_Req_EnterCopymap_CS();
  virtual ~MSG_Req_EnterCopymap_CS();

  MSG_Req_EnterCopymap_CS(const MSG_Req_EnterCopymap_CS& from);
  MSG_Req_EnterCopymap_CS(MSG_Req_EnterCopymap_CS&& from) noexcept
    : MSG_Req_EnterCopymap_CS() {
    *this = ::std::move(from);
  }

  inline MSG_Req_EnterCopymap_CS& operator=(const MSG_Req_EnterCopymap_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Req_EnterCopymap_CS& operator=(MSG_Req_EnterCopymap_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Req_EnterCopymap_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Req_EnterCopymap_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_Req_EnterCopymap_CS*>(
               &_MSG_Req_EnterCopymap_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MSG_Req_EnterCopymap_CS& a, MSG_Req_EnterCopymap_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Req_EnterCopymap_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Req_EnterCopymap_CS* New() const final {
    return CreateMaybeMessage<MSG_Req_EnterCopymap_CS>(nullptr);
  }

  MSG_Req_EnterCopymap_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Req_EnterCopymap_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Req_EnterCopymap_CS& from);
  void MergeFrom(const MSG_Req_EnterCopymap_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Req_EnterCopymap_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "copymap.MSG_Req_EnterCopymap_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_copymap_2eproto);
    return ::descriptor_table_copymap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCopymapidxFieldNumber = 1,
  };
  // optional uint32 copymapidx = 1;
  bool has_copymapidx() const;
  private:
  bool _internal_has_copymapidx() const;
  public:
  void clear_copymapidx();
  ::PROTOBUF_NAMESPACE_ID::uint32 copymapidx() const;
  void set_copymapidx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_copymapidx() const;
  void _internal_set_copymapidx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:copymap.MSG_Req_EnterCopymap_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 copymapidx_;
  friend struct ::TableStruct_copymap_2eproto;
};
// -------------------------------------------------------------------

class MSG_Req_ExitCopymap_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:copymap.MSG_Req_ExitCopymap_SC) */ {
 public:
  MSG_Req_ExitCopymap_SC();
  virtual ~MSG_Req_ExitCopymap_SC();

  MSG_Req_ExitCopymap_SC(const MSG_Req_ExitCopymap_SC& from);
  MSG_Req_ExitCopymap_SC(MSG_Req_ExitCopymap_SC&& from) noexcept
    : MSG_Req_ExitCopymap_SC() {
    *this = ::std::move(from);
  }

  inline MSG_Req_ExitCopymap_SC& operator=(const MSG_Req_ExitCopymap_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Req_ExitCopymap_SC& operator=(MSG_Req_ExitCopymap_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Req_ExitCopymap_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Req_ExitCopymap_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_Req_ExitCopymap_SC*>(
               &_MSG_Req_ExitCopymap_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MSG_Req_ExitCopymap_SC& a, MSG_Req_ExitCopymap_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Req_ExitCopymap_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Req_ExitCopymap_SC* New() const final {
    return CreateMaybeMessage<MSG_Req_ExitCopymap_SC>(nullptr);
  }

  MSG_Req_ExitCopymap_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Req_ExitCopymap_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Req_ExitCopymap_SC& from);
  void MergeFrom(const MSG_Req_ExitCopymap_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Req_ExitCopymap_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "copymap.MSG_Req_ExitCopymap_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_copymap_2eproto);
    return ::descriptor_table_copymap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:copymap.MSG_Req_ExitCopymap_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_copymap_2eproto;
};
// -------------------------------------------------------------------

class MSG_Ret_TriggerEnter_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:copymap.MSG_Ret_TriggerEnter_SC) */ {
 public:
  MSG_Ret_TriggerEnter_SC();
  virtual ~MSG_Ret_TriggerEnter_SC();

  MSG_Ret_TriggerEnter_SC(const MSG_Ret_TriggerEnter_SC& from);
  MSG_Ret_TriggerEnter_SC(MSG_Ret_TriggerEnter_SC&& from) noexcept
    : MSG_Ret_TriggerEnter_SC() {
    *this = ::std::move(from);
  }

  inline MSG_Ret_TriggerEnter_SC& operator=(const MSG_Ret_TriggerEnter_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Ret_TriggerEnter_SC& operator=(MSG_Ret_TriggerEnter_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Ret_TriggerEnter_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Ret_TriggerEnter_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_Ret_TriggerEnter_SC*>(
               &_MSG_Ret_TriggerEnter_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MSG_Ret_TriggerEnter_SC& a, MSG_Ret_TriggerEnter_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Ret_TriggerEnter_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Ret_TriggerEnter_SC* New() const final {
    return CreateMaybeMessage<MSG_Ret_TriggerEnter_SC>(nullptr);
  }

  MSG_Ret_TriggerEnter_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Ret_TriggerEnter_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Ret_TriggerEnter_SC& from);
  void MergeFrom(const MSG_Ret_TriggerEnter_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Ret_TriggerEnter_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "copymap.MSG_Ret_TriggerEnter_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_copymap_2eproto);
    return ::descriptor_table_copymap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUseridFieldNumber = 1,
    kCopymapidFieldNumber = 2,
  };
  // optional string userid = 1;
  bool has_userid() const;
  private:
  bool _internal_has_userid() const;
  public:
  void clear_userid();
  const std::string& userid() const;
  void set_userid(const std::string& value);
  void set_userid(std::string&& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  std::string* mutable_userid();
  std::string* release_userid();
  void set_allocated_userid(std::string* userid);
  private:
  const std::string& _internal_userid() const;
  void _internal_set_userid(const std::string& value);
  std::string* _internal_mutable_userid();
  public:

  // optional uint32 copymapid = 2;
  bool has_copymapid() const;
  private:
  bool _internal_has_copymapid() const;
  public:
  void clear_copymapid();
  ::PROTOBUF_NAMESPACE_ID::uint32 copymapid() const;
  void set_copymapid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_copymapid() const;
  void _internal_set_copymapid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:copymap.MSG_Ret_TriggerEnter_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 copymapid_;
  friend struct ::TableStruct_copymap_2eproto;
};
// -------------------------------------------------------------------

class MSG_ReqBackCopymap_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:copymap.MSG_ReqBackCopymap_CS) */ {
 public:
  MSG_ReqBackCopymap_CS();
  virtual ~MSG_ReqBackCopymap_CS();

  MSG_ReqBackCopymap_CS(const MSG_ReqBackCopymap_CS& from);
  MSG_ReqBackCopymap_CS(MSG_ReqBackCopymap_CS&& from) noexcept
    : MSG_ReqBackCopymap_CS() {
    *this = ::std::move(from);
  }

  inline MSG_ReqBackCopymap_CS& operator=(const MSG_ReqBackCopymap_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_ReqBackCopymap_CS& operator=(MSG_ReqBackCopymap_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_ReqBackCopymap_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_ReqBackCopymap_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_ReqBackCopymap_CS*>(
               &_MSG_ReqBackCopymap_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MSG_ReqBackCopymap_CS& a, MSG_ReqBackCopymap_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_ReqBackCopymap_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_ReqBackCopymap_CS* New() const final {
    return CreateMaybeMessage<MSG_ReqBackCopymap_CS>(nullptr);
  }

  MSG_ReqBackCopymap_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_ReqBackCopymap_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_ReqBackCopymap_CS& from);
  void MergeFrom(const MSG_ReqBackCopymap_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_ReqBackCopymap_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "copymap.MSG_ReqBackCopymap_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_copymap_2eproto);
    return ::descriptor_table_copymap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:copymap.MSG_ReqBackCopymap_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_copymap_2eproto;
};
// -------------------------------------------------------------------

class RewardsObjectInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:copymap.RewardsObjectInfo) */ {
 public:
  RewardsObjectInfo();
  virtual ~RewardsObjectInfo();

  RewardsObjectInfo(const RewardsObjectInfo& from);
  RewardsObjectInfo(RewardsObjectInfo&& from) noexcept
    : RewardsObjectInfo() {
    *this = ::std::move(from);
  }

  inline RewardsObjectInfo& operator=(const RewardsObjectInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RewardsObjectInfo& operator=(RewardsObjectInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RewardsObjectInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RewardsObjectInfo* internal_default_instance() {
    return reinterpret_cast<const RewardsObjectInfo*>(
               &_RewardsObjectInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RewardsObjectInfo& a, RewardsObjectInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RewardsObjectInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RewardsObjectInfo* New() const final {
    return CreateMaybeMessage<RewardsObjectInfo>(nullptr);
  }

  RewardsObjectInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RewardsObjectInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RewardsObjectInfo& from);
  void MergeFrom(const RewardsObjectInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RewardsObjectInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "copymap.RewardsObjectInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_copymap_2eproto);
    return ::descriptor_table_copymap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjsFieldNumber = 1,
    kUseridFieldNumber = 2,
  };
  // repeated .Obj.t_Object objs = 1;
  int objs_size() const;
  private:
  int _internal_objs_size() const;
  public:
  void clear_objs();
  ::Obj::t_Object* mutable_objs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Obj::t_Object >*
      mutable_objs();
  private:
  const ::Obj::t_Object& _internal_objs(int index) const;
  ::Obj::t_Object* _internal_add_objs();
  public:
  const ::Obj::t_Object& objs(int index) const;
  ::Obj::t_Object* add_objs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Obj::t_Object >&
      objs() const;

  // optional uint32 userid = 2;
  bool has_userid() const;
  private:
  bool _internal_has_userid() const;
  public:
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::uint32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:copymap.RewardsObjectInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Obj::t_Object > objs_;
  ::PROTOBUF_NAMESPACE_ID::uint32 userid_;
  friend struct ::TableStruct_copymap_2eproto;
};
// -------------------------------------------------------------------

class MSG_Ret_CopymapOver_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:copymap.MSG_Ret_CopymapOver_SC) */ {
 public:
  MSG_Ret_CopymapOver_SC();
  virtual ~MSG_Ret_CopymapOver_SC();

  MSG_Ret_CopymapOver_SC(const MSG_Ret_CopymapOver_SC& from);
  MSG_Ret_CopymapOver_SC(MSG_Ret_CopymapOver_SC&& from) noexcept
    : MSG_Ret_CopymapOver_SC() {
    *this = ::std::move(from);
  }

  inline MSG_Ret_CopymapOver_SC& operator=(const MSG_Ret_CopymapOver_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Ret_CopymapOver_SC& operator=(MSG_Ret_CopymapOver_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Ret_CopymapOver_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Ret_CopymapOver_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_Ret_CopymapOver_SC*>(
               &_MSG_Ret_CopymapOver_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MSG_Ret_CopymapOver_SC& a, MSG_Ret_CopymapOver_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Ret_CopymapOver_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Ret_CopymapOver_SC* New() const final {
    return CreateMaybeMessage<MSG_Ret_CopymapOver_SC>(nullptr);
  }

  MSG_Ret_CopymapOver_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Ret_CopymapOver_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Ret_CopymapOver_SC& from);
  void MergeFrom(const MSG_Ret_CopymapOver_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Ret_CopymapOver_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "copymap.MSG_Ret_CopymapOver_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_copymap_2eproto);
    return ::descriptor_table_copymap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMoneyFieldNumber = 4,
    kItemsFieldNumber = 5,
    kKickusertimeFieldNumber = 2,
    kExpFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // repeated .massive.MSG_RetCurrencyChange_SC money = 4;
  int money_size() const;
  private:
  int _internal_money_size() const;
  public:
  void clear_money();
  ::massive::MSG_RetCurrencyChange_SC* mutable_money(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::massive::MSG_RetCurrencyChange_SC >*
      mutable_money();
  private:
  const ::massive::MSG_RetCurrencyChange_SC& _internal_money(int index) const;
  ::massive::MSG_RetCurrencyChange_SC* _internal_add_money();
  public:
  const ::massive::MSG_RetCurrencyChange_SC& money(int index) const;
  ::massive::MSG_RetCurrencyChange_SC* add_money();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::massive::MSG_RetCurrencyChange_SC >&
      money() const;

  // optional .copymap.RewardsObjectInfo items = 5;
  bool has_items() const;
  private:
  bool _internal_has_items() const;
  public:
  void clear_items();
  const ::copymap::RewardsObjectInfo& items() const;
  ::copymap::RewardsObjectInfo* release_items();
  ::copymap::RewardsObjectInfo* mutable_items();
  void set_allocated_items(::copymap::RewardsObjectInfo* items);
  private:
  const ::copymap::RewardsObjectInfo& _internal_items() const;
  ::copymap::RewardsObjectInfo* _internal_mutable_items();
  public:

  // optional uint32 kickusertime = 2;
  bool has_kickusertime() const;
  private:
  bool _internal_has_kickusertime() const;
  public:
  void clear_kickusertime();
  ::PROTOBUF_NAMESPACE_ID::uint32 kickusertime() const;
  void set_kickusertime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_kickusertime() const;
  void _internal_set_kickusertime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 exp = 3;
  bool has_exp() const;
  private:
  bool _internal_has_exp() const;
  public:
  void clear_exp();
  ::PROTOBUF_NAMESPACE_ID::uint32 exp() const;
  void set_exp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_exp() const;
  void _internal_set_exp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .copymap.OverType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::copymap::OverType type() const;
  void set_type(::copymap::OverType value);
  private:
  ::copymap::OverType _internal_type() const;
  void _internal_set_type(::copymap::OverType value);
  public:

  // @@protoc_insertion_point(class_scope:copymap.MSG_Ret_CopymapOver_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::massive::MSG_RetCurrencyChange_SC > money_;
  ::copymap::RewardsObjectInfo* items_;
  ::PROTOBUF_NAMESPACE_ID::uint32 kickusertime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 exp_;
  int type_;
  friend struct ::TableStruct_copymap_2eproto;
};
// -------------------------------------------------------------------

class MSG_RetAwardQuest_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:copymap.MSG_RetAwardQuest_SC) */ {
 public:
  MSG_RetAwardQuest_SC();
  virtual ~MSG_RetAwardQuest_SC();

  MSG_RetAwardQuest_SC(const MSG_RetAwardQuest_SC& from);
  MSG_RetAwardQuest_SC(MSG_RetAwardQuest_SC&& from) noexcept
    : MSG_RetAwardQuest_SC() {
    *this = ::std::move(from);
  }

  inline MSG_RetAwardQuest_SC& operator=(const MSG_RetAwardQuest_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_RetAwardQuest_SC& operator=(MSG_RetAwardQuest_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_RetAwardQuest_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_RetAwardQuest_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_RetAwardQuest_SC*>(
               &_MSG_RetAwardQuest_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(MSG_RetAwardQuest_SC& a, MSG_RetAwardQuest_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_RetAwardQuest_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_RetAwardQuest_SC* New() const final {
    return CreateMaybeMessage<MSG_RetAwardQuest_SC>(nullptr);
  }

  MSG_RetAwardQuest_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_RetAwardQuest_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_RetAwardQuest_SC& from);
  void MergeFrom(const MSG_RetAwardQuest_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_RetAwardQuest_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "copymap.MSG_RetAwardQuest_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_copymap_2eproto);
    return ::descriptor_table_copymap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 3,
    kQuestidFieldNumber = 1,
    kScorevarFieldNumber = 2,
  };
  // optional .copymap.RewardsObjectInfo items = 3;
  bool has_items() const;
  private:
  bool _internal_has_items() const;
  public:
  void clear_items();
  const ::copymap::RewardsObjectInfo& items() const;
  ::copymap::RewardsObjectInfo* release_items();
  ::copymap::RewardsObjectInfo* mutable_items();
  void set_allocated_items(::copymap::RewardsObjectInfo* items);
  private:
  const ::copymap::RewardsObjectInfo& _internal_items() const;
  ::copymap::RewardsObjectInfo* _internal_mutable_items();
  public:

  // optional uint32 questid = 1;
  bool has_questid() const;
  private:
  bool _internal_has_questid() const;
  public:
  void clear_questid();
  ::PROTOBUF_NAMESPACE_ID::uint32 questid() const;
  void set_questid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_questid() const;
  void _internal_set_questid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 scorevar = 2;
  bool has_scorevar() const;
  private:
  bool _internal_has_scorevar() const;
  public:
  void clear_scorevar();
  ::PROTOBUF_NAMESPACE_ID::uint32 scorevar() const;
  void set_scorevar(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_scorevar() const;
  void _internal_set_scorevar(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:copymap.MSG_RetAwardQuest_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::copymap::RewardsObjectInfo* items_;
  ::PROTOBUF_NAMESPACE_ID::uint32 questid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 scorevar_;
  friend struct ::TableStruct_copymap_2eproto;
};
// -------------------------------------------------------------------

class MSG_Req_CopymapLottery_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:copymap.MSG_Req_CopymapLottery_CS) */ {
 public:
  MSG_Req_CopymapLottery_CS();
  virtual ~MSG_Req_CopymapLottery_CS();

  MSG_Req_CopymapLottery_CS(const MSG_Req_CopymapLottery_CS& from);
  MSG_Req_CopymapLottery_CS(MSG_Req_CopymapLottery_CS&& from) noexcept
    : MSG_Req_CopymapLottery_CS() {
    *this = ::std::move(from);
  }

  inline MSG_Req_CopymapLottery_CS& operator=(const MSG_Req_CopymapLottery_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Req_CopymapLottery_CS& operator=(MSG_Req_CopymapLottery_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Req_CopymapLottery_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Req_CopymapLottery_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_Req_CopymapLottery_CS*>(
               &_MSG_Req_CopymapLottery_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(MSG_Req_CopymapLottery_CS& a, MSG_Req_CopymapLottery_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Req_CopymapLottery_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Req_CopymapLottery_CS* New() const final {
    return CreateMaybeMessage<MSG_Req_CopymapLottery_CS>(nullptr);
  }

  MSG_Req_CopymapLottery_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Req_CopymapLottery_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Req_CopymapLottery_CS& from);
  void MergeFrom(const MSG_Req_CopymapLottery_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Req_CopymapLottery_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "copymap.MSG_Req_CopymapLottery_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_copymap_2eproto);
    return ::descriptor_table_copymap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:copymap.MSG_Req_CopymapLottery_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_copymap_2eproto;
};
// -------------------------------------------------------------------

class MSG_Ret_CopymapLottery_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:copymap.MSG_Ret_CopymapLottery_SC) */ {
 public:
  MSG_Ret_CopymapLottery_SC();
  virtual ~MSG_Ret_CopymapLottery_SC();

  MSG_Ret_CopymapLottery_SC(const MSG_Ret_CopymapLottery_SC& from);
  MSG_Ret_CopymapLottery_SC(MSG_Ret_CopymapLottery_SC&& from) noexcept
    : MSG_Ret_CopymapLottery_SC() {
    *this = ::std::move(from);
  }

  inline MSG_Ret_CopymapLottery_SC& operator=(const MSG_Ret_CopymapLottery_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Ret_CopymapLottery_SC& operator=(MSG_Ret_CopymapLottery_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Ret_CopymapLottery_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Ret_CopymapLottery_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_Ret_CopymapLottery_SC*>(
               &_MSG_Ret_CopymapLottery_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(MSG_Ret_CopymapLottery_SC& a, MSG_Ret_CopymapLottery_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Ret_CopymapLottery_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Ret_CopymapLottery_SC* New() const final {
    return CreateMaybeMessage<MSG_Ret_CopymapLottery_SC>(nullptr);
  }

  MSG_Ret_CopymapLottery_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Ret_CopymapLottery_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Ret_CopymapLottery_SC& from);
  void MergeFrom(const MSG_Ret_CopymapLottery_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Ret_CopymapLottery_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "copymap.MSG_Ret_CopymapLottery_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_copymap_2eproto);
    return ::descriptor_table_copymap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .copymap.RewardsObjectInfo items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::copymap::RewardsObjectInfo* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::copymap::RewardsObjectInfo >*
      mutable_items();
  private:
  const ::copymap::RewardsObjectInfo& _internal_items(int index) const;
  ::copymap::RewardsObjectInfo* _internal_add_items();
  public:
  const ::copymap::RewardsObjectInfo& items(int index) const;
  ::copymap::RewardsObjectInfo* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::copymap::RewardsObjectInfo >&
      items() const;

  // @@protoc_insertion_point(class_scope:copymap.MSG_Ret_CopymapLottery_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::copymap::RewardsObjectInfo > items_;
  friend struct ::TableStruct_copymap_2eproto;
};
// -------------------------------------------------------------------

class MSG_Req_CopymapGather_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:copymap.MSG_Req_CopymapGather_CS) */ {
 public:
  MSG_Req_CopymapGather_CS();
  virtual ~MSG_Req_CopymapGather_CS();

  MSG_Req_CopymapGather_CS(const MSG_Req_CopymapGather_CS& from);
  MSG_Req_CopymapGather_CS(MSG_Req_CopymapGather_CS&& from) noexcept
    : MSG_Req_CopymapGather_CS() {
    *this = ::std::move(from);
  }

  inline MSG_Req_CopymapGather_CS& operator=(const MSG_Req_CopymapGather_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Req_CopymapGather_CS& operator=(MSG_Req_CopymapGather_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Req_CopymapGather_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Req_CopymapGather_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_Req_CopymapGather_CS*>(
               &_MSG_Req_CopymapGather_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(MSG_Req_CopymapGather_CS& a, MSG_Req_CopymapGather_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Req_CopymapGather_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Req_CopymapGather_CS* New() const final {
    return CreateMaybeMessage<MSG_Req_CopymapGather_CS>(nullptr);
  }

  MSG_Req_CopymapGather_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Req_CopymapGather_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Req_CopymapGather_CS& from);
  void MergeFrom(const MSG_Req_CopymapGather_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Req_CopymapGather_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "copymap.MSG_Req_CopymapGather_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_copymap_2eproto);
    return ::descriptor_table_copymap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCopymapidxFieldNumber = 1,
  };
  // optional uint32 copymapidx = 1;
  bool has_copymapidx() const;
  private:
  bool _internal_has_copymapidx() const;
  public:
  void clear_copymapidx();
  ::PROTOBUF_NAMESPACE_ID::uint32 copymapidx() const;
  void set_copymapidx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_copymapidx() const;
  void _internal_set_copymapidx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:copymap.MSG_Req_CopymapGather_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 copymapidx_;
  friend struct ::TableStruct_copymap_2eproto;
};
// -------------------------------------------------------------------

class MSG_Ret_CopymapGatherReq_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:copymap.MSG_Ret_CopymapGatherReq_SC) */ {
 public:
  MSG_Ret_CopymapGatherReq_SC();
  virtual ~MSG_Ret_CopymapGatherReq_SC();

  MSG_Ret_CopymapGatherReq_SC(const MSG_Ret_CopymapGatherReq_SC& from);
  MSG_Ret_CopymapGatherReq_SC(MSG_Ret_CopymapGatherReq_SC&& from) noexcept
    : MSG_Ret_CopymapGatherReq_SC() {
    *this = ::std::move(from);
  }

  inline MSG_Ret_CopymapGatherReq_SC& operator=(const MSG_Ret_CopymapGatherReq_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Ret_CopymapGatherReq_SC& operator=(MSG_Ret_CopymapGatherReq_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Ret_CopymapGatherReq_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Ret_CopymapGatherReq_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_Ret_CopymapGatherReq_SC*>(
               &_MSG_Ret_CopymapGatherReq_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(MSG_Ret_CopymapGatherReq_SC& a, MSG_Ret_CopymapGatherReq_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Ret_CopymapGatherReq_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Ret_CopymapGatherReq_SC* New() const final {
    return CreateMaybeMessage<MSG_Ret_CopymapGatherReq_SC>(nullptr);
  }

  MSG_Ret_CopymapGatherReq_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Ret_CopymapGatherReq_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Ret_CopymapGatherReq_SC& from);
  void MergeFrom(const MSG_Ret_CopymapGatherReq_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Ret_CopymapGatherReq_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "copymap.MSG_Ret_CopymapGatherReq_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_copymap_2eproto);
    return ::descriptor_table_copymap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeaderFieldNumber = 1,
    kLeaderCareerFieldNumber = 2,
    kCopymapidxFieldNumber = 3,
    kCountdownFieldNumber = 4,
  };
  // optional string leader = 1;
  bool has_leader() const;
  private:
  bool _internal_has_leader() const;
  public:
  void clear_leader();
  const std::string& leader() const;
  void set_leader(const std::string& value);
  void set_leader(std::string&& value);
  void set_leader(const char* value);
  void set_leader(const char* value, size_t size);
  std::string* mutable_leader();
  std::string* release_leader();
  void set_allocated_leader(std::string* leader);
  private:
  const std::string& _internal_leader() const;
  void _internal_set_leader(const std::string& value);
  std::string* _internal_mutable_leader();
  public:

  // optional uint32 leader_career = 2;
  bool has_leader_career() const;
  private:
  bool _internal_has_leader_career() const;
  public:
  void clear_leader_career();
  ::PROTOBUF_NAMESPACE_ID::uint32 leader_career() const;
  void set_leader_career(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_leader_career() const;
  void _internal_set_leader_career(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 copymapidx = 3;
  bool has_copymapidx() const;
  private:
  bool _internal_has_copymapidx() const;
  public:
  void clear_copymapidx();
  ::PROTOBUF_NAMESPACE_ID::uint32 copymapidx() const;
  void set_copymapidx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_copymapidx() const;
  void _internal_set_copymapidx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 countdown = 4;
  bool has_countdown() const;
  private:
  bool _internal_has_countdown() const;
  public:
  void clear_countdown();
  ::PROTOBUF_NAMESPACE_ID::uint32 countdown() const;
  void set_countdown(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_countdown() const;
  void _internal_set_countdown(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:copymap.MSG_Ret_CopymapGatherReq_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr leader_;
  ::PROTOBUF_NAMESPACE_ID::uint32 leader_career_;
  ::PROTOBUF_NAMESPACE_ID::uint32 copymapidx_;
  ::PROTOBUF_NAMESPACE_ID::uint32 countdown_;
  friend struct ::TableStruct_copymap_2eproto;
};
// -------------------------------------------------------------------

class MSG_Req_CopymapAnswerGather_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:copymap.MSG_Req_CopymapAnswerGather_CS) */ {
 public:
  MSG_Req_CopymapAnswerGather_CS();
  virtual ~MSG_Req_CopymapAnswerGather_CS();

  MSG_Req_CopymapAnswerGather_CS(const MSG_Req_CopymapAnswerGather_CS& from);
  MSG_Req_CopymapAnswerGather_CS(MSG_Req_CopymapAnswerGather_CS&& from) noexcept
    : MSG_Req_CopymapAnswerGather_CS() {
    *this = ::std::move(from);
  }

  inline MSG_Req_CopymapAnswerGather_CS& operator=(const MSG_Req_CopymapAnswerGather_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Req_CopymapAnswerGather_CS& operator=(MSG_Req_CopymapAnswerGather_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Req_CopymapAnswerGather_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Req_CopymapAnswerGather_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_Req_CopymapAnswerGather_CS*>(
               &_MSG_Req_CopymapAnswerGather_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(MSG_Req_CopymapAnswerGather_CS& a, MSG_Req_CopymapAnswerGather_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Req_CopymapAnswerGather_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Req_CopymapAnswerGather_CS* New() const final {
    return CreateMaybeMessage<MSG_Req_CopymapAnswerGather_CS>(nullptr);
  }

  MSG_Req_CopymapAnswerGather_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Req_CopymapAnswerGather_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Req_CopymapAnswerGather_CS& from);
  void MergeFrom(const MSG_Req_CopymapAnswerGather_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Req_CopymapAnswerGather_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "copymap.MSG_Req_CopymapAnswerGather_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_copymap_2eproto);
    return ::descriptor_table_copymap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgreeFieldNumber = 1,
  };
  // optional bool agree = 1;
  bool has_agree() const;
  private:
  bool _internal_has_agree() const;
  public:
  void clear_agree();
  bool agree() const;
  void set_agree(bool value);
  private:
  bool _internal_agree() const;
  void _internal_set_agree(bool value);
  public:

  // @@protoc_insertion_point(class_scope:copymap.MSG_Req_CopymapAnswerGather_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool agree_;
  friend struct ::TableStruct_copymap_2eproto;
};
// -------------------------------------------------------------------

class CopymapGatherItem :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:copymap.CopymapGatherItem) */ {
 public:
  CopymapGatherItem();
  virtual ~CopymapGatherItem();

  CopymapGatherItem(const CopymapGatherItem& from);
  CopymapGatherItem(CopymapGatherItem&& from) noexcept
    : CopymapGatherItem() {
    *this = ::std::move(from);
  }

  inline CopymapGatherItem& operator=(const CopymapGatherItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline CopymapGatherItem& operator=(CopymapGatherItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CopymapGatherItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CopymapGatherItem* internal_default_instance() {
    return reinterpret_cast<const CopymapGatherItem*>(
               &_CopymapGatherItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CopymapGatherItem& a, CopymapGatherItem& b) {
    a.Swap(&b);
  }
  inline void Swap(CopymapGatherItem* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CopymapGatherItem* New() const final {
    return CreateMaybeMessage<CopymapGatherItem>(nullptr);
  }

  CopymapGatherItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CopymapGatherItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CopymapGatherItem& from);
  void MergeFrom(const CopymapGatherItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CopymapGatherItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "copymap.CopymapGatherItem";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_copymap_2eproto);
    return ::descriptor_table_copymap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kCharidFieldNumber = 2,
    kStateFieldNumber = 3,
    kHeroidFieldNumber = 4,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string charid = 2;
  bool has_charid() const;
  private:
  bool _internal_has_charid() const;
  public:
  void clear_charid();
  const std::string& charid() const;
  void set_charid(const std::string& value);
  void set_charid(std::string&& value);
  void set_charid(const char* value);
  void set_charid(const char* value, size_t size);
  std::string* mutable_charid();
  std::string* release_charid();
  void set_allocated_charid(std::string* charid);
  private:
  const std::string& _internal_charid() const;
  void _internal_set_charid(const std::string& value);
  std::string* _internal_mutable_charid();
  public:

  // optional .copymap.MemberGatherState state = 3;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  ::copymap::MemberGatherState state() const;
  void set_state(::copymap::MemberGatherState value);
  private:
  ::copymap::MemberGatherState _internal_state() const;
  void _internal_set_state(::copymap::MemberGatherState value);
  public:

  // optional uint32 heroid = 4;
  bool has_heroid() const;
  private:
  bool _internal_has_heroid() const;
  public:
  void clear_heroid();
  ::PROTOBUF_NAMESPACE_ID::uint32 heroid() const;
  void set_heroid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_heroid() const;
  void _internal_set_heroid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:copymap.CopymapGatherItem)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr charid_;
  int state_;
  ::PROTOBUF_NAMESPACE_ID::uint32 heroid_;
  friend struct ::TableStruct_copymap_2eproto;
};
// -------------------------------------------------------------------

class MSG_Ret_CopymapGatherData_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:copymap.MSG_Ret_CopymapGatherData_SC) */ {
 public:
  MSG_Ret_CopymapGatherData_SC();
  virtual ~MSG_Ret_CopymapGatherData_SC();

  MSG_Ret_CopymapGatherData_SC(const MSG_Ret_CopymapGatherData_SC& from);
  MSG_Ret_CopymapGatherData_SC(MSG_Ret_CopymapGatherData_SC&& from) noexcept
    : MSG_Ret_CopymapGatherData_SC() {
    *this = ::std::move(from);
  }

  inline MSG_Ret_CopymapGatherData_SC& operator=(const MSG_Ret_CopymapGatherData_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Ret_CopymapGatherData_SC& operator=(MSG_Ret_CopymapGatherData_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Ret_CopymapGatherData_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Ret_CopymapGatherData_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_Ret_CopymapGatherData_SC*>(
               &_MSG_Ret_CopymapGatherData_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(MSG_Ret_CopymapGatherData_SC& a, MSG_Ret_CopymapGatherData_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Ret_CopymapGatherData_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Ret_CopymapGatherData_SC* New() const final {
    return CreateMaybeMessage<MSG_Ret_CopymapGatherData_SC>(nullptr);
  }

  MSG_Ret_CopymapGatherData_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Ret_CopymapGatherData_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Ret_CopymapGatherData_SC& from);
  void MergeFrom(const MSG_Ret_CopymapGatherData_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Ret_CopymapGatherData_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "copymap.MSG_Ret_CopymapGatherData_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_copymap_2eproto);
    return ::descriptor_table_copymap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kStateFieldNumber = 2,
    kCountdownFieldNumber = 3,
    kCopymapidxFieldNumber = 4,
  };
  // repeated .copymap.CopymapGatherItem data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::copymap::CopymapGatherItem* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::copymap::CopymapGatherItem >*
      mutable_data();
  private:
  const ::copymap::CopymapGatherItem& _internal_data(int index) const;
  ::copymap::CopymapGatherItem* _internal_add_data();
  public:
  const ::copymap::CopymapGatherItem& data(int index) const;
  ::copymap::CopymapGatherItem* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::copymap::CopymapGatherItem >&
      data() const;

  // optional .copymap.GatherState state = 2;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  ::copymap::GatherState state() const;
  void set_state(::copymap::GatherState value);
  private:
  ::copymap::GatherState _internal_state() const;
  void _internal_set_state(::copymap::GatherState value);
  public:

  // optional uint32 countdown = 3;
  bool has_countdown() const;
  private:
  bool _internal_has_countdown() const;
  public:
  void clear_countdown();
  ::PROTOBUF_NAMESPACE_ID::uint32 countdown() const;
  void set_countdown(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_countdown() const;
  void _internal_set_countdown(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 copymapidx = 4;
  bool has_copymapidx() const;
  private:
  bool _internal_has_copymapidx() const;
  public:
  void clear_copymapidx();
  ::PROTOBUF_NAMESPACE_ID::uint32 copymapidx() const;
  void set_copymapidx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_copymapidx() const;
  void _internal_set_copymapidx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:copymap.MSG_Ret_CopymapGatherData_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::copymap::CopymapGatherItem > data_;
  int state_;
  ::PROTOBUF_NAMESPACE_ID::uint32 countdown_;
  ::PROTOBUF_NAMESPACE_ID::uint32 copymapidx_;
  friend struct ::TableStruct_copymap_2eproto;
};
// -------------------------------------------------------------------

class MSG_Req_CopymapGatherQuickEnter_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:copymap.MSG_Req_CopymapGatherQuickEnter_CS) */ {
 public:
  MSG_Req_CopymapGatherQuickEnter_CS();
  virtual ~MSG_Req_CopymapGatherQuickEnter_CS();

  MSG_Req_CopymapGatherQuickEnter_CS(const MSG_Req_CopymapGatherQuickEnter_CS& from);
  MSG_Req_CopymapGatherQuickEnter_CS(MSG_Req_CopymapGatherQuickEnter_CS&& from) noexcept
    : MSG_Req_CopymapGatherQuickEnter_CS() {
    *this = ::std::move(from);
  }

  inline MSG_Req_CopymapGatherQuickEnter_CS& operator=(const MSG_Req_CopymapGatherQuickEnter_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Req_CopymapGatherQuickEnter_CS& operator=(MSG_Req_CopymapGatherQuickEnter_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Req_CopymapGatherQuickEnter_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Req_CopymapGatherQuickEnter_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_Req_CopymapGatherQuickEnter_CS*>(
               &_MSG_Req_CopymapGatherQuickEnter_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(MSG_Req_CopymapGatherQuickEnter_CS& a, MSG_Req_CopymapGatherQuickEnter_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Req_CopymapGatherQuickEnter_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Req_CopymapGatherQuickEnter_CS* New() const final {
    return CreateMaybeMessage<MSG_Req_CopymapGatherQuickEnter_CS>(nullptr);
  }

  MSG_Req_CopymapGatherQuickEnter_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Req_CopymapGatherQuickEnter_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Req_CopymapGatherQuickEnter_CS& from);
  void MergeFrom(const MSG_Req_CopymapGatherQuickEnter_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Req_CopymapGatherQuickEnter_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "copymap.MSG_Req_CopymapGatherQuickEnter_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_copymap_2eproto);
    return ::descriptor_table_copymap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:copymap.MSG_Req_CopymapGatherQuickEnter_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_copymap_2eproto;
};
// -------------------------------------------------------------------

class MSG_Req_CopymapReGather_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:copymap.MSG_Req_CopymapReGather_CS) */ {
 public:
  MSG_Req_CopymapReGather_CS();
  virtual ~MSG_Req_CopymapReGather_CS();

  MSG_Req_CopymapReGather_CS(const MSG_Req_CopymapReGather_CS& from);
  MSG_Req_CopymapReGather_CS(MSG_Req_CopymapReGather_CS&& from) noexcept
    : MSG_Req_CopymapReGather_CS() {
    *this = ::std::move(from);
  }

  inline MSG_Req_CopymapReGather_CS& operator=(const MSG_Req_CopymapReGather_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Req_CopymapReGather_CS& operator=(MSG_Req_CopymapReGather_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Req_CopymapReGather_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Req_CopymapReGather_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_Req_CopymapReGather_CS*>(
               &_MSG_Req_CopymapReGather_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(MSG_Req_CopymapReGather_CS& a, MSG_Req_CopymapReGather_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Req_CopymapReGather_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Req_CopymapReGather_CS* New() const final {
    return CreateMaybeMessage<MSG_Req_CopymapReGather_CS>(nullptr);
  }

  MSG_Req_CopymapReGather_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Req_CopymapReGather_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Req_CopymapReGather_CS& from);
  void MergeFrom(const MSG_Req_CopymapReGather_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Req_CopymapReGather_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "copymap.MSG_Req_CopymapReGather_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_copymap_2eproto);
    return ::descriptor_table_copymap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:copymap.MSG_Req_CopymapReGather_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_copymap_2eproto;
};
// -------------------------------------------------------------------

class MSG_Ret_CopymapReGather_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:copymap.MSG_Ret_CopymapReGather_SC) */ {
 public:
  MSG_Ret_CopymapReGather_SC();
  virtual ~MSG_Ret_CopymapReGather_SC();

  MSG_Ret_CopymapReGather_SC(const MSG_Ret_CopymapReGather_SC& from);
  MSG_Ret_CopymapReGather_SC(MSG_Ret_CopymapReGather_SC&& from) noexcept
    : MSG_Ret_CopymapReGather_SC() {
    *this = ::std::move(from);
  }

  inline MSG_Ret_CopymapReGather_SC& operator=(const MSG_Ret_CopymapReGather_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Ret_CopymapReGather_SC& operator=(MSG_Ret_CopymapReGather_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Ret_CopymapReGather_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Ret_CopymapReGather_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_Ret_CopymapReGather_SC*>(
               &_MSG_Ret_CopymapReGather_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(MSG_Ret_CopymapReGather_SC& a, MSG_Ret_CopymapReGather_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Ret_CopymapReGather_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Ret_CopymapReGather_SC* New() const final {
    return CreateMaybeMessage<MSG_Ret_CopymapReGather_SC>(nullptr);
  }

  MSG_Ret_CopymapReGather_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Ret_CopymapReGather_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Ret_CopymapReGather_SC& from);
  void MergeFrom(const MSG_Ret_CopymapReGather_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Ret_CopymapReGather_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "copymap.MSG_Ret_CopymapReGather_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_copymap_2eproto);
    return ::descriptor_table_copymap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCopymapidxFieldNumber = 1,
  };
  // optional uint32 copymapidx = 1;
  bool has_copymapidx() const;
  private:
  bool _internal_has_copymapidx() const;
  public:
  void clear_copymapidx();
  ::PROTOBUF_NAMESPACE_ID::uint32 copymapidx() const;
  void set_copymapidx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_copymapidx() const;
  void _internal_set_copymapidx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:copymap.MSG_Ret_CopymapReGather_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 copymapidx_;
  friend struct ::TableStruct_copymap_2eproto;
};
// -------------------------------------------------------------------

class MSG_Ret_CopymapBossTempID_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:copymap.MSG_Ret_CopymapBossTempID_SC) */ {
 public:
  MSG_Ret_CopymapBossTempID_SC();
  virtual ~MSG_Ret_CopymapBossTempID_SC();

  MSG_Ret_CopymapBossTempID_SC(const MSG_Ret_CopymapBossTempID_SC& from);
  MSG_Ret_CopymapBossTempID_SC(MSG_Ret_CopymapBossTempID_SC&& from) noexcept
    : MSG_Ret_CopymapBossTempID_SC() {
    *this = ::std::move(from);
  }

  inline MSG_Ret_CopymapBossTempID_SC& operator=(const MSG_Ret_CopymapBossTempID_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Ret_CopymapBossTempID_SC& operator=(MSG_Ret_CopymapBossTempID_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Ret_CopymapBossTempID_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Ret_CopymapBossTempID_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_Ret_CopymapBossTempID_SC*>(
               &_MSG_Ret_CopymapBossTempID_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(MSG_Ret_CopymapBossTempID_SC& a, MSG_Ret_CopymapBossTempID_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Ret_CopymapBossTempID_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Ret_CopymapBossTempID_SC* New() const final {
    return CreateMaybeMessage<MSG_Ret_CopymapBossTempID_SC>(nullptr);
  }

  MSG_Ret_CopymapBossTempID_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Ret_CopymapBossTempID_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Ret_CopymapBossTempID_SC& from);
  void MergeFrom(const MSG_Ret_CopymapBossTempID_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Ret_CopymapBossTempID_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "copymap.MSG_Ret_CopymapBossTempID_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_copymap_2eproto);
    return ::descriptor_table_copymap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTempidFieldNumber = 1,
  };
  // repeated string tempid = 1;
  int tempid_size() const;
  private:
  int _internal_tempid_size() const;
  public:
  void clear_tempid();
  const std::string& tempid(int index) const;
  std::string* mutable_tempid(int index);
  void set_tempid(int index, const std::string& value);
  void set_tempid(int index, std::string&& value);
  void set_tempid(int index, const char* value);
  void set_tempid(int index, const char* value, size_t size);
  std::string* add_tempid();
  void add_tempid(const std::string& value);
  void add_tempid(std::string&& value);
  void add_tempid(const char* value);
  void add_tempid(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tempid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tempid();
  private:
  const std::string& _internal_tempid(int index) const;
  std::string* _internal_add_tempid();
  public:

  // @@protoc_insertion_point(class_scope:copymap.MSG_Ret_CopymapBossTempID_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tempid_;
  friend struct ::TableStruct_copymap_2eproto;
};
// -------------------------------------------------------------------

class AdventureCopymapGroup :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:copymap.AdventureCopymapGroup) */ {
 public:
  AdventureCopymapGroup();
  virtual ~AdventureCopymapGroup();

  AdventureCopymapGroup(const AdventureCopymapGroup& from);
  AdventureCopymapGroup(AdventureCopymapGroup&& from) noexcept
    : AdventureCopymapGroup() {
    *this = ::std::move(from);
  }

  inline AdventureCopymapGroup& operator=(const AdventureCopymapGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline AdventureCopymapGroup& operator=(AdventureCopymapGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AdventureCopymapGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AdventureCopymapGroup* internal_default_instance() {
    return reinterpret_cast<const AdventureCopymapGroup*>(
               &_AdventureCopymapGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(AdventureCopymapGroup& a, AdventureCopymapGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(AdventureCopymapGroup* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AdventureCopymapGroup* New() const final {
    return CreateMaybeMessage<AdventureCopymapGroup>(nullptr);
  }

  AdventureCopymapGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AdventureCopymapGroup>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AdventureCopymapGroup& from);
  void MergeFrom(const AdventureCopymapGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdventureCopymapGroup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "copymap.AdventureCopymapGroup";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_copymap_2eproto);
    return ::descriptor_table_copymap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdventureidFieldNumber = 1,
    kCompleteRateFieldNumber = 2,
    kUnlockFieldNumber = 3,
  };
  // optional uint32 adventureid = 1;
  bool has_adventureid() const;
  private:
  bool _internal_has_adventureid() const;
  public:
  void clear_adventureid();
  ::PROTOBUF_NAMESPACE_ID::uint32 adventureid() const;
  void set_adventureid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_adventureid() const;
  void _internal_set_adventureid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 complete_rate = 2;
  bool has_complete_rate() const;
  private:
  bool _internal_has_complete_rate() const;
  public:
  void clear_complete_rate();
  ::PROTOBUF_NAMESPACE_ID::uint32 complete_rate() const;
  void set_complete_rate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_complete_rate() const;
  void _internal_set_complete_rate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool unlock = 3;
  bool has_unlock() const;
  private:
  bool _internal_has_unlock() const;
  public:
  void clear_unlock();
  bool unlock() const;
  void set_unlock(bool value);
  private:
  bool _internal_unlock() const;
  void _internal_set_unlock(bool value);
  public:

  // @@protoc_insertion_point(class_scope:copymap.AdventureCopymapGroup)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 adventureid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 complete_rate_;
  bool unlock_;
  friend struct ::TableStruct_copymap_2eproto;
};
// -------------------------------------------------------------------

class MSG_Req_AdventureCopymapGroup_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:copymap.MSG_Req_AdventureCopymapGroup_CS) */ {
 public:
  MSG_Req_AdventureCopymapGroup_CS();
  virtual ~MSG_Req_AdventureCopymapGroup_CS();

  MSG_Req_AdventureCopymapGroup_CS(const MSG_Req_AdventureCopymapGroup_CS& from);
  MSG_Req_AdventureCopymapGroup_CS(MSG_Req_AdventureCopymapGroup_CS&& from) noexcept
    : MSG_Req_AdventureCopymapGroup_CS() {
    *this = ::std::move(from);
  }

  inline MSG_Req_AdventureCopymapGroup_CS& operator=(const MSG_Req_AdventureCopymapGroup_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Req_AdventureCopymapGroup_CS& operator=(MSG_Req_AdventureCopymapGroup_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Req_AdventureCopymapGroup_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Req_AdventureCopymapGroup_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_Req_AdventureCopymapGroup_CS*>(
               &_MSG_Req_AdventureCopymapGroup_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(MSG_Req_AdventureCopymapGroup_CS& a, MSG_Req_AdventureCopymapGroup_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Req_AdventureCopymapGroup_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Req_AdventureCopymapGroup_CS* New() const final {
    return CreateMaybeMessage<MSG_Req_AdventureCopymapGroup_CS>(nullptr);
  }

  MSG_Req_AdventureCopymapGroup_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Req_AdventureCopymapGroup_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Req_AdventureCopymapGroup_CS& from);
  void MergeFrom(const MSG_Req_AdventureCopymapGroup_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Req_AdventureCopymapGroup_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "copymap.MSG_Req_AdventureCopymapGroup_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_copymap_2eproto);
    return ::descriptor_table_copymap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:copymap.MSG_Req_AdventureCopymapGroup_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_copymap_2eproto;
};
// -------------------------------------------------------------------

class MSG_Ret_AdventureCopymapGroup_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:copymap.MSG_Ret_AdventureCopymapGroup_SC) */ {
 public:
  MSG_Ret_AdventureCopymapGroup_SC();
  virtual ~MSG_Ret_AdventureCopymapGroup_SC();

  MSG_Ret_AdventureCopymapGroup_SC(const MSG_Ret_AdventureCopymapGroup_SC& from);
  MSG_Ret_AdventureCopymapGroup_SC(MSG_Ret_AdventureCopymapGroup_SC&& from) noexcept
    : MSG_Ret_AdventureCopymapGroup_SC() {
    *this = ::std::move(from);
  }

  inline MSG_Ret_AdventureCopymapGroup_SC& operator=(const MSG_Ret_AdventureCopymapGroup_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Ret_AdventureCopymapGroup_SC& operator=(MSG_Ret_AdventureCopymapGroup_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Ret_AdventureCopymapGroup_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Ret_AdventureCopymapGroup_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_Ret_AdventureCopymapGroup_SC*>(
               &_MSG_Ret_AdventureCopymapGroup_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(MSG_Ret_AdventureCopymapGroup_SC& a, MSG_Ret_AdventureCopymapGroup_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Ret_AdventureCopymapGroup_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Ret_AdventureCopymapGroup_SC* New() const final {
    return CreateMaybeMessage<MSG_Ret_AdventureCopymapGroup_SC>(nullptr);
  }

  MSG_Ret_AdventureCopymapGroup_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Ret_AdventureCopymapGroup_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Ret_AdventureCopymapGroup_SC& from);
  void MergeFrom(const MSG_Ret_AdventureCopymapGroup_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Ret_AdventureCopymapGroup_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "copymap.MSG_Ret_AdventureCopymapGroup_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_copymap_2eproto);
    return ::descriptor_table_copymap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupsFieldNumber = 1,
  };
  // repeated .copymap.AdventureCopymapGroup groups = 1;
  int groups_size() const;
  private:
  int _internal_groups_size() const;
  public:
  void clear_groups();
  ::copymap::AdventureCopymapGroup* mutable_groups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::copymap::AdventureCopymapGroup >*
      mutable_groups();
  private:
  const ::copymap::AdventureCopymapGroup& _internal_groups(int index) const;
  ::copymap::AdventureCopymapGroup* _internal_add_groups();
  public:
  const ::copymap::AdventureCopymapGroup& groups(int index) const;
  ::copymap::AdventureCopymapGroup* add_groups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::copymap::AdventureCopymapGroup >&
      groups() const;

  // @@protoc_insertion_point(class_scope:copymap.MSG_Ret_AdventureCopymapGroup_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::copymap::AdventureCopymapGroup > groups_;
  friend struct ::TableStruct_copymap_2eproto;
};
// -------------------------------------------------------------------

class AdventureCopymap :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:copymap.AdventureCopymap) */ {
 public:
  AdventureCopymap();
  virtual ~AdventureCopymap();

  AdventureCopymap(const AdventureCopymap& from);
  AdventureCopymap(AdventureCopymap&& from) noexcept
    : AdventureCopymap() {
    *this = ::std::move(from);
  }

  inline AdventureCopymap& operator=(const AdventureCopymap& from) {
    CopyFrom(from);
    return *this;
  }
  inline AdventureCopymap& operator=(AdventureCopymap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AdventureCopymap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AdventureCopymap* internal_default_instance() {
    return reinterpret_cast<const AdventureCopymap*>(
               &_AdventureCopymap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(AdventureCopymap& a, AdventureCopymap& b) {
    a.Swap(&b);
  }
  inline void Swap(AdventureCopymap* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AdventureCopymap* New() const final {
    return CreateMaybeMessage<AdventureCopymap>(nullptr);
  }

  AdventureCopymap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AdventureCopymap>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AdventureCopymap& from);
  void MergeFrom(const AdventureCopymap& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdventureCopymap* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "copymap.AdventureCopymap";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_copymap_2eproto);
    return ::descriptor_table_copymap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCopymapidxFieldNumber = 1,
    kStarFieldNumber = 3,
    kUnlockFieldNumber = 2,
    kFirstSuccessFieldNumber = 4,
  };
  // optional uint32 copymapidx = 1;
  bool has_copymapidx() const;
  private:
  bool _internal_has_copymapidx() const;
  public:
  void clear_copymapidx();
  ::PROTOBUF_NAMESPACE_ID::uint32 copymapidx() const;
  void set_copymapidx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_copymapidx() const;
  void _internal_set_copymapidx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 star = 3;
  bool has_star() const;
  private:
  bool _internal_has_star() const;
  public:
  void clear_star();
  ::PROTOBUF_NAMESPACE_ID::uint32 star() const;
  void set_star(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_star() const;
  void _internal_set_star(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool unlock = 2;
  bool has_unlock() const;
  private:
  bool _internal_has_unlock() const;
  public:
  void clear_unlock();
  bool unlock() const;
  void set_unlock(bool value);
  private:
  bool _internal_unlock() const;
  void _internal_set_unlock(bool value);
  public:

  // optional bool first_success = 4;
  bool has_first_success() const;
  private:
  bool _internal_has_first_success() const;
  public:
  void clear_first_success();
  bool first_success() const;
  void set_first_success(bool value);
  private:
  bool _internal_first_success() const;
  void _internal_set_first_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:copymap.AdventureCopymap)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 copymapidx_;
  ::PROTOBUF_NAMESPACE_ID::uint32 star_;
  bool unlock_;
  bool first_success_;
  friend struct ::TableStruct_copymap_2eproto;
};
// -------------------------------------------------------------------

class MSG_Req_AdventureCopymapInfo_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:copymap.MSG_Req_AdventureCopymapInfo_CS) */ {
 public:
  MSG_Req_AdventureCopymapInfo_CS();
  virtual ~MSG_Req_AdventureCopymapInfo_CS();

  MSG_Req_AdventureCopymapInfo_CS(const MSG_Req_AdventureCopymapInfo_CS& from);
  MSG_Req_AdventureCopymapInfo_CS(MSG_Req_AdventureCopymapInfo_CS&& from) noexcept
    : MSG_Req_AdventureCopymapInfo_CS() {
    *this = ::std::move(from);
  }

  inline MSG_Req_AdventureCopymapInfo_CS& operator=(const MSG_Req_AdventureCopymapInfo_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Req_AdventureCopymapInfo_CS& operator=(MSG_Req_AdventureCopymapInfo_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Req_AdventureCopymapInfo_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Req_AdventureCopymapInfo_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_Req_AdventureCopymapInfo_CS*>(
               &_MSG_Req_AdventureCopymapInfo_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(MSG_Req_AdventureCopymapInfo_CS& a, MSG_Req_AdventureCopymapInfo_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Req_AdventureCopymapInfo_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Req_AdventureCopymapInfo_CS* New() const final {
    return CreateMaybeMessage<MSG_Req_AdventureCopymapInfo_CS>(nullptr);
  }

  MSG_Req_AdventureCopymapInfo_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Req_AdventureCopymapInfo_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Req_AdventureCopymapInfo_CS& from);
  void MergeFrom(const MSG_Req_AdventureCopymapInfo_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Req_AdventureCopymapInfo_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "copymap.MSG_Req_AdventureCopymapInfo_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_copymap_2eproto);
    return ::descriptor_table_copymap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdventureidFieldNumber = 1,
  };
  // optional uint32 adventureid = 1;
  bool has_adventureid() const;
  private:
  bool _internal_has_adventureid() const;
  public:
  void clear_adventureid();
  ::PROTOBUF_NAMESPACE_ID::uint32 adventureid() const;
  void set_adventureid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_adventureid() const;
  void _internal_set_adventureid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:copymap.MSG_Req_AdventureCopymapInfo_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 adventureid_;
  friend struct ::TableStruct_copymap_2eproto;
};
// -------------------------------------------------------------------

class MSG_Ret_AdventureCopymapInfo_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:copymap.MSG_Ret_AdventureCopymapInfo_SC) */ {
 public:
  MSG_Ret_AdventureCopymapInfo_SC();
  virtual ~MSG_Ret_AdventureCopymapInfo_SC();

  MSG_Ret_AdventureCopymapInfo_SC(const MSG_Ret_AdventureCopymapInfo_SC& from);
  MSG_Ret_AdventureCopymapInfo_SC(MSG_Ret_AdventureCopymapInfo_SC&& from) noexcept
    : MSG_Ret_AdventureCopymapInfo_SC() {
    *this = ::std::move(from);
  }

  inline MSG_Ret_AdventureCopymapInfo_SC& operator=(const MSG_Ret_AdventureCopymapInfo_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Ret_AdventureCopymapInfo_SC& operator=(MSG_Ret_AdventureCopymapInfo_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Ret_AdventureCopymapInfo_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Ret_AdventureCopymapInfo_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_Ret_AdventureCopymapInfo_SC*>(
               &_MSG_Ret_AdventureCopymapInfo_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(MSG_Ret_AdventureCopymapInfo_SC& a, MSG_Ret_AdventureCopymapInfo_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Ret_AdventureCopymapInfo_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Ret_AdventureCopymapInfo_SC* New() const final {
    return CreateMaybeMessage<MSG_Ret_AdventureCopymapInfo_SC>(nullptr);
  }

  MSG_Ret_AdventureCopymapInfo_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Ret_AdventureCopymapInfo_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Ret_AdventureCopymapInfo_SC& from);
  void MergeFrom(const MSG_Ret_AdventureCopymapInfo_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Ret_AdventureCopymapInfo_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "copymap.MSG_Ret_AdventureCopymapInfo_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_copymap_2eproto);
    return ::descriptor_table_copymap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCopymapsFieldNumber = 1,
  };
  // repeated .copymap.AdventureCopymap copymaps = 1;
  int copymaps_size() const;
  private:
  int _internal_copymaps_size() const;
  public:
  void clear_copymaps();
  ::copymap::AdventureCopymap* mutable_copymaps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::copymap::AdventureCopymap >*
      mutable_copymaps();
  private:
  const ::copymap::AdventureCopymap& _internal_copymaps(int index) const;
  ::copymap::AdventureCopymap* _internal_add_copymaps();
  public:
  const ::copymap::AdventureCopymap& copymaps(int index) const;
  ::copymap::AdventureCopymap* add_copymaps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::copymap::AdventureCopymap >&
      copymaps() const;

  // @@protoc_insertion_point(class_scope:copymap.MSG_Ret_AdventureCopymapInfo_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::copymap::AdventureCopymap > copymaps_;
  friend struct ::TableStruct_copymap_2eproto;
};
// -------------------------------------------------------------------

class MSG_Req_AdventureHeros_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:copymap.MSG_Req_AdventureHeros_CS) */ {
 public:
  MSG_Req_AdventureHeros_CS();
  virtual ~MSG_Req_AdventureHeros_CS();

  MSG_Req_AdventureHeros_CS(const MSG_Req_AdventureHeros_CS& from);
  MSG_Req_AdventureHeros_CS(MSG_Req_AdventureHeros_CS&& from) noexcept
    : MSG_Req_AdventureHeros_CS() {
    *this = ::std::move(from);
  }

  inline MSG_Req_AdventureHeros_CS& operator=(const MSG_Req_AdventureHeros_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Req_AdventureHeros_CS& operator=(MSG_Req_AdventureHeros_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Req_AdventureHeros_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Req_AdventureHeros_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_Req_AdventureHeros_CS*>(
               &_MSG_Req_AdventureHeros_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(MSG_Req_AdventureHeros_CS& a, MSG_Req_AdventureHeros_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Req_AdventureHeros_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Req_AdventureHeros_CS* New() const final {
    return CreateMaybeMessage<MSG_Req_AdventureHeros_CS>(nullptr);
  }

  MSG_Req_AdventureHeros_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Req_AdventureHeros_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Req_AdventureHeros_CS& from);
  void MergeFrom(const MSG_Req_AdventureHeros_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Req_AdventureHeros_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "copymap.MSG_Req_AdventureHeros_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_copymap_2eproto);
    return ::descriptor_table_copymap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdventureidFieldNumber = 1,
  };
  // optional uint32 adventureid = 1;
  bool has_adventureid() const;
  private:
  bool _internal_has_adventureid() const;
  public:
  void clear_adventureid();
  ::PROTOBUF_NAMESPACE_ID::uint32 adventureid() const;
  void set_adventureid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_adventureid() const;
  void _internal_set_adventureid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:copymap.MSG_Req_AdventureHeros_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 adventureid_;
  friend struct ::TableStruct_copymap_2eproto;
};
// -------------------------------------------------------------------

class MSG_Ret_AdventureHeros_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:copymap.MSG_Ret_AdventureHeros_SC) */ {
 public:
  MSG_Ret_AdventureHeros_SC();
  virtual ~MSG_Ret_AdventureHeros_SC();

  MSG_Ret_AdventureHeros_SC(const MSG_Ret_AdventureHeros_SC& from);
  MSG_Ret_AdventureHeros_SC(MSG_Ret_AdventureHeros_SC&& from) noexcept
    : MSG_Ret_AdventureHeros_SC() {
    *this = ::std::move(from);
  }

  inline MSG_Ret_AdventureHeros_SC& operator=(const MSG_Ret_AdventureHeros_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Ret_AdventureHeros_SC& operator=(MSG_Ret_AdventureHeros_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Ret_AdventureHeros_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Ret_AdventureHeros_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_Ret_AdventureHeros_SC*>(
               &_MSG_Ret_AdventureHeros_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(MSG_Ret_AdventureHeros_SC& a, MSG_Ret_AdventureHeros_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Ret_AdventureHeros_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Ret_AdventureHeros_SC* New() const final {
    return CreateMaybeMessage<MSG_Ret_AdventureHeros_SC>(nullptr);
  }

  MSG_Ret_AdventureHeros_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Ret_AdventureHeros_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Ret_AdventureHeros_SC& from);
  void MergeFrom(const MSG_Ret_AdventureHeros_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Ret_AdventureHeros_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "copymap.MSG_Ret_AdventureHeros_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_copymap_2eproto);
    return ::descriptor_table_copymap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHerosFieldNumber = 1,
    kRetcodeFieldNumber = 2,
  };
  // repeated uint32 heros = 1;
  int heros_size() const;
  private:
  int _internal_heros_size() const;
  public:
  void clear_heros();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_heros(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_heros() const;
  void _internal_add_heros(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_heros();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 heros(int index) const;
  void set_heros(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_heros(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      heros() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_heros();

  // optional uint32 retcode = 2 [default = 0];
  bool has_retcode() const;
  private:
  bool _internal_has_retcode() const;
  public:
  void clear_retcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 retcode() const;
  void set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_retcode() const;
  void _internal_set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:copymap.MSG_Ret_AdventureHeros_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > heros_;
  ::PROTOBUF_NAMESPACE_ID::uint32 retcode_;
  friend struct ::TableStruct_copymap_2eproto;
};
// -------------------------------------------------------------------

class MSG_Req_EnterAdventureCopymap_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:copymap.MSG_Req_EnterAdventureCopymap_CS) */ {
 public:
  MSG_Req_EnterAdventureCopymap_CS();
  virtual ~MSG_Req_EnterAdventureCopymap_CS();

  MSG_Req_EnterAdventureCopymap_CS(const MSG_Req_EnterAdventureCopymap_CS& from);
  MSG_Req_EnterAdventureCopymap_CS(MSG_Req_EnterAdventureCopymap_CS&& from) noexcept
    : MSG_Req_EnterAdventureCopymap_CS() {
    *this = ::std::move(from);
  }

  inline MSG_Req_EnterAdventureCopymap_CS& operator=(const MSG_Req_EnterAdventureCopymap_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Req_EnterAdventureCopymap_CS& operator=(MSG_Req_EnterAdventureCopymap_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Req_EnterAdventureCopymap_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Req_EnterAdventureCopymap_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_Req_EnterAdventureCopymap_CS*>(
               &_MSG_Req_EnterAdventureCopymap_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(MSG_Req_EnterAdventureCopymap_CS& a, MSG_Req_EnterAdventureCopymap_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Req_EnterAdventureCopymap_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Req_EnterAdventureCopymap_CS* New() const final {
    return CreateMaybeMessage<MSG_Req_EnterAdventureCopymap_CS>(nullptr);
  }

  MSG_Req_EnterAdventureCopymap_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Req_EnterAdventureCopymap_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Req_EnterAdventureCopymap_CS& from);
  void MergeFrom(const MSG_Req_EnterAdventureCopymap_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Req_EnterAdventureCopymap_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "copymap.MSG_Req_EnterAdventureCopymap_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_copymap_2eproto);
    return ::descriptor_table_copymap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeroidFieldNumber = 1,
    kCopymapidxFieldNumber = 2,
  };
  // optional uint32 heroid = 1;
  bool has_heroid() const;
  private:
  bool _internal_has_heroid() const;
  public:
  void clear_heroid();
  ::PROTOBUF_NAMESPACE_ID::uint32 heroid() const;
  void set_heroid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_heroid() const;
  void _internal_set_heroid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 copymapidx = 2;
  bool has_copymapidx() const;
  private:
  bool _internal_has_copymapidx() const;
  public:
  void clear_copymapidx();
  ::PROTOBUF_NAMESPACE_ID::uint32 copymapidx() const;
  void set_copymapidx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_copymapidx() const;
  void _internal_set_copymapidx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:copymap.MSG_Req_EnterAdventureCopymap_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 heroid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 copymapidx_;
  friend struct ::TableStruct_copymap_2eproto;
};
// -------------------------------------------------------------------

class ObjectData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:copymap.ObjectData) */ {
 public:
  ObjectData();
  virtual ~ObjectData();

  ObjectData(const ObjectData& from);
  ObjectData(ObjectData&& from) noexcept
    : ObjectData() {
    *this = ::std::move(from);
  }

  inline ObjectData& operator=(const ObjectData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectData& operator=(ObjectData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObjectData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectData* internal_default_instance() {
    return reinterpret_cast<const ObjectData*>(
               &_ObjectData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(ObjectData& a, ObjectData& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectData* New() const final {
    return CreateMaybeMessage<ObjectData>(nullptr);
  }

  ObjectData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectData& from);
  void MergeFrom(const ObjectData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "copymap.ObjectData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_copymap_2eproto);
    return ::descriptor_table_copymap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjidFieldNumber = 1,
    kObjnumFieldNumber = 2,
  };
  // optional uint32 objid = 1;
  bool has_objid() const;
  private:
  bool _internal_has_objid() const;
  public:
  void clear_objid();
  ::PROTOBUF_NAMESPACE_ID::uint32 objid() const;
  void set_objid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_objid() const;
  void _internal_set_objid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 objnum = 2;
  bool has_objnum() const;
  private:
  bool _internal_has_objnum() const;
  public:
  void clear_objnum();
  ::PROTOBUF_NAMESPACE_ID::uint32 objnum() const;
  void set_objnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_objnum() const;
  void _internal_set_objnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:copymap.ObjectData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 objid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 objnum_;
  friend struct ::TableStruct_copymap_2eproto;
};
// -------------------------------------------------------------------

class MSG_Ret_TrainData_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:copymap.MSG_Ret_TrainData_SC) */ {
 public:
  MSG_Ret_TrainData_SC();
  virtual ~MSG_Ret_TrainData_SC();

  MSG_Ret_TrainData_SC(const MSG_Ret_TrainData_SC& from);
  MSG_Ret_TrainData_SC(MSG_Ret_TrainData_SC&& from) noexcept
    : MSG_Ret_TrainData_SC() {
    *this = ::std::move(from);
  }

  inline MSG_Ret_TrainData_SC& operator=(const MSG_Ret_TrainData_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Ret_TrainData_SC& operator=(MSG_Ret_TrainData_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Ret_TrainData_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Ret_TrainData_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_Ret_TrainData_SC*>(
               &_MSG_Ret_TrainData_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(MSG_Ret_TrainData_SC& a, MSG_Ret_TrainData_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Ret_TrainData_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Ret_TrainData_SC* New() const final {
    return CreateMaybeMessage<MSG_Ret_TrainData_SC>(nullptr);
  }

  MSG_Ret_TrainData_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Ret_TrainData_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Ret_TrainData_SC& from);
  void MergeFrom(const MSG_Ret_TrainData_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Ret_TrainData_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "copymap.MSG_Ret_TrainData_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_copymap_2eproto);
    return ::descriptor_table_copymap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRewardFieldNumber = 3,
    kStarttimeFieldNumber = 1,
    kEndtimeFieldNumber = 2,
  };
  // repeated .copymap.ObjectData reward = 3;
  int reward_size() const;
  private:
  int _internal_reward_size() const;
  public:
  void clear_reward();
  ::copymap::ObjectData* mutable_reward(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::copymap::ObjectData >*
      mutable_reward();
  private:
  const ::copymap::ObjectData& _internal_reward(int index) const;
  ::copymap::ObjectData* _internal_add_reward();
  public:
  const ::copymap::ObjectData& reward(int index) const;
  ::copymap::ObjectData* add_reward();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::copymap::ObjectData >&
      reward() const;

  // optional uint32 starttime = 1;
  bool has_starttime() const;
  private:
  bool _internal_has_starttime() const;
  public:
  void clear_starttime();
  ::PROTOBUF_NAMESPACE_ID::uint32 starttime() const;
  void set_starttime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_starttime() const;
  void _internal_set_starttime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 endtime = 2;
  bool has_endtime() const;
  private:
  bool _internal_has_endtime() const;
  public:
  void clear_endtime();
  ::PROTOBUF_NAMESPACE_ID::uint32 endtime() const;
  void set_endtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_endtime() const;
  void _internal_set_endtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:copymap.MSG_Ret_TrainData_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::copymap::ObjectData > reward_;
  ::PROTOBUF_NAMESPACE_ID::uint32 starttime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 endtime_;
  friend struct ::TableStruct_copymap_2eproto;
};
// -------------------------------------------------------------------

class MSG_Ret_PlayEventData_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:copymap.MSG_Ret_PlayEventData_SC) */ {
 public:
  MSG_Ret_PlayEventData_SC();
  virtual ~MSG_Ret_PlayEventData_SC();

  MSG_Ret_PlayEventData_SC(const MSG_Ret_PlayEventData_SC& from);
  MSG_Ret_PlayEventData_SC(MSG_Ret_PlayEventData_SC&& from) noexcept
    : MSG_Ret_PlayEventData_SC() {
    *this = ::std::move(from);
  }

  inline MSG_Ret_PlayEventData_SC& operator=(const MSG_Ret_PlayEventData_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Ret_PlayEventData_SC& operator=(MSG_Ret_PlayEventData_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Ret_PlayEventData_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Ret_PlayEventData_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_Ret_PlayEventData_SC*>(
               &_MSG_Ret_PlayEventData_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(MSG_Ret_PlayEventData_SC& a, MSG_Ret_PlayEventData_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Ret_PlayEventData_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Ret_PlayEventData_SC* New() const final {
    return CreateMaybeMessage<MSG_Ret_PlayEventData_SC>(nullptr);
  }

  MSG_Ret_PlayEventData_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Ret_PlayEventData_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Ret_PlayEventData_SC& from);
  void MergeFrom(const MSG_Ret_PlayEventData_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Ret_PlayEventData_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "copymap.MSG_Ret_PlayEventData_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_copymap_2eproto);
    return ::descriptor_table_copymap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventidFieldNumber = 1,
    kStarttimeFieldNumber = 2,
    kEndtimeFieldNumber = 3,
  };
  // optional uint32 eventid = 1;
  bool has_eventid() const;
  private:
  bool _internal_has_eventid() const;
  public:
  void clear_eventid();
  ::PROTOBUF_NAMESPACE_ID::uint32 eventid() const;
  void set_eventid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_eventid() const;
  void _internal_set_eventid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 starttime = 2;
  bool has_starttime() const;
  private:
  bool _internal_has_starttime() const;
  public:
  void clear_starttime();
  ::PROTOBUF_NAMESPACE_ID::uint32 starttime() const;
  void set_starttime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_starttime() const;
  void _internal_set_starttime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 endtime = 3;
  bool has_endtime() const;
  private:
  bool _internal_has_endtime() const;
  public:
  void clear_endtime();
  ::PROTOBUF_NAMESPACE_ID::uint32 endtime() const;
  void set_endtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_endtime() const;
  void _internal_set_endtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:copymap.MSG_Ret_PlayEventData_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 eventid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 starttime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 endtime_;
  friend struct ::TableStruct_copymap_2eproto;
};
// -------------------------------------------------------------------

class MSG_Ret_CurMonsterGroup_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:copymap.MSG_Ret_CurMonsterGroup_SC) */ {
 public:
  MSG_Ret_CurMonsterGroup_SC();
  virtual ~MSG_Ret_CurMonsterGroup_SC();

  MSG_Ret_CurMonsterGroup_SC(const MSG_Ret_CurMonsterGroup_SC& from);
  MSG_Ret_CurMonsterGroup_SC(MSG_Ret_CurMonsterGroup_SC&& from) noexcept
    : MSG_Ret_CurMonsterGroup_SC() {
    *this = ::std::move(from);
  }

  inline MSG_Ret_CurMonsterGroup_SC& operator=(const MSG_Ret_CurMonsterGroup_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Ret_CurMonsterGroup_SC& operator=(MSG_Ret_CurMonsterGroup_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Ret_CurMonsterGroup_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Ret_CurMonsterGroup_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_Ret_CurMonsterGroup_SC*>(
               &_MSG_Ret_CurMonsterGroup_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(MSG_Ret_CurMonsterGroup_SC& a, MSG_Ret_CurMonsterGroup_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Ret_CurMonsterGroup_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Ret_CurMonsterGroup_SC* New() const final {
    return CreateMaybeMessage<MSG_Ret_CurMonsterGroup_SC>(nullptr);
  }

  MSG_Ret_CurMonsterGroup_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Ret_CurMonsterGroup_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Ret_CurMonsterGroup_SC& from);
  void MergeFrom(const MSG_Ret_CurMonsterGroup_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Ret_CurMonsterGroup_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "copymap.MSG_Ret_CurMonsterGroup_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_copymap_2eproto);
    return ::descriptor_table_copymap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupidFieldNumber = 1,
  };
  // optional uint32 groupid = 1;
  bool has_groupid() const;
  private:
  bool _internal_has_groupid() const;
  public:
  void clear_groupid();
  ::PROTOBUF_NAMESPACE_ID::uint32 groupid() const;
  void set_groupid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_groupid() const;
  void _internal_set_groupid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:copymap.MSG_Ret_CurMonsterGroup_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 groupid_;
  friend struct ::TableStruct_copymap_2eproto;
};
// -------------------------------------------------------------------

class MSG_Req_PlayGameData_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:copymap.MSG_Req_PlayGameData_CS) */ {
 public:
  MSG_Req_PlayGameData_CS();
  virtual ~MSG_Req_PlayGameData_CS();

  MSG_Req_PlayGameData_CS(const MSG_Req_PlayGameData_CS& from);
  MSG_Req_PlayGameData_CS(MSG_Req_PlayGameData_CS&& from) noexcept
    : MSG_Req_PlayGameData_CS() {
    *this = ::std::move(from);
  }

  inline MSG_Req_PlayGameData_CS& operator=(const MSG_Req_PlayGameData_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Req_PlayGameData_CS& operator=(MSG_Req_PlayGameData_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Req_PlayGameData_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Req_PlayGameData_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_Req_PlayGameData_CS*>(
               &_MSG_Req_PlayGameData_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(MSG_Req_PlayGameData_CS& a, MSG_Req_PlayGameData_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Req_PlayGameData_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Req_PlayGameData_CS* New() const final {
    return CreateMaybeMessage<MSG_Req_PlayGameData_CS>(nullptr);
  }

  MSG_Req_PlayGameData_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Req_PlayGameData_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Req_PlayGameData_CS& from);
  void MergeFrom(const MSG_Req_PlayGameData_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Req_PlayGameData_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "copymap.MSG_Req_PlayGameData_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_copymap_2eproto);
    return ::descriptor_table_copymap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStepFieldNumber = 1,
    kSuccessFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // optional uint32 step = 1;
  bool has_step() const;
  private:
  bool _internal_has_step() const;
  public:
  void clear_step();
  ::PROTOBUF_NAMESPACE_ID::uint32 step() const;
  void set_step(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_step() const;
  void _internal_set_step(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 success = 2;
  bool has_success() const;
  private:
  bool _internal_has_success() const;
  public:
  void clear_success();
  ::PROTOBUF_NAMESPACE_ID::uint32 success() const;
  void set_success(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_success() const;
  void _internal_set_success(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 type = 3;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:copymap.MSG_Req_PlayGameData_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 step_;
  ::PROTOBUF_NAMESPACE_ID::uint32 success_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  friend struct ::TableStruct_copymap_2eproto;
};
// -------------------------------------------------------------------

class MSG_Req_PlayGameRetry_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:copymap.MSG_Req_PlayGameRetry_CS) */ {
 public:
  MSG_Req_PlayGameRetry_CS();
  virtual ~MSG_Req_PlayGameRetry_CS();

  MSG_Req_PlayGameRetry_CS(const MSG_Req_PlayGameRetry_CS& from);
  MSG_Req_PlayGameRetry_CS(MSG_Req_PlayGameRetry_CS&& from) noexcept
    : MSG_Req_PlayGameRetry_CS() {
    *this = ::std::move(from);
  }

  inline MSG_Req_PlayGameRetry_CS& operator=(const MSG_Req_PlayGameRetry_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Req_PlayGameRetry_CS& operator=(MSG_Req_PlayGameRetry_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Req_PlayGameRetry_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Req_PlayGameRetry_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_Req_PlayGameRetry_CS*>(
               &_MSG_Req_PlayGameRetry_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(MSG_Req_PlayGameRetry_CS& a, MSG_Req_PlayGameRetry_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Req_PlayGameRetry_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Req_PlayGameRetry_CS* New() const final {
    return CreateMaybeMessage<MSG_Req_PlayGameRetry_CS>(nullptr);
  }

  MSG_Req_PlayGameRetry_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Req_PlayGameRetry_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Req_PlayGameRetry_CS& from);
  void MergeFrom(const MSG_Req_PlayGameRetry_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Req_PlayGameRetry_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "copymap.MSG_Req_PlayGameRetry_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_copymap_2eproto);
    return ::descriptor_table_copymap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // optional uint32 type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:copymap.MSG_Req_PlayGameRetry_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  friend struct ::TableStruct_copymap_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MSG_Req_CopymapEnterInfo_CS

// optional uint32 copymapidx = 1;
inline bool MSG_Req_CopymapEnterInfo_CS::_internal_has_copymapidx() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_Req_CopymapEnterInfo_CS::has_copymapidx() const {
  return _internal_has_copymapidx();
}
inline void MSG_Req_CopymapEnterInfo_CS::clear_copymapidx() {
  copymapidx_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Req_CopymapEnterInfo_CS::_internal_copymapidx() const {
  return copymapidx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Req_CopymapEnterInfo_CS::copymapidx() const {
  // @@protoc_insertion_point(field_get:copymap.MSG_Req_CopymapEnterInfo_CS.copymapidx)
  return _internal_copymapidx();
}
inline void MSG_Req_CopymapEnterInfo_CS::_internal_set_copymapidx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  copymapidx_ = value;
}
inline void MSG_Req_CopymapEnterInfo_CS::set_copymapidx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_copymapidx(value);
  // @@protoc_insertion_point(field_set:copymap.MSG_Req_CopymapEnterInfo_CS.copymapidx)
}

// -------------------------------------------------------------------

// MSG_Ret_CopymapEnterInfo_SC

// optional uint32 copymapidx = 1;
inline bool MSG_Ret_CopymapEnterInfo_SC::_internal_has_copymapidx() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_Ret_CopymapEnterInfo_SC::has_copymapidx() const {
  return _internal_has_copymapidx();
}
inline void MSG_Ret_CopymapEnterInfo_SC::clear_copymapidx() {
  copymapidx_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Ret_CopymapEnterInfo_SC::_internal_copymapidx() const {
  return copymapidx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Ret_CopymapEnterInfo_SC::copymapidx() const {
  // @@protoc_insertion_point(field_get:copymap.MSG_Ret_CopymapEnterInfo_SC.copymapidx)
  return _internal_copymapidx();
}
inline void MSG_Ret_CopymapEnterInfo_SC::_internal_set_copymapidx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  copymapidx_ = value;
}
inline void MSG_Ret_CopymapEnterInfo_SC::set_copymapidx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_copymapidx(value);
  // @@protoc_insertion_point(field_set:copymap.MSG_Ret_CopymapEnterInfo_SC.copymapidx)
}

// optional uint32 remain_times = 2;
inline bool MSG_Ret_CopymapEnterInfo_SC::_internal_has_remain_times() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_Ret_CopymapEnterInfo_SC::has_remain_times() const {
  return _internal_has_remain_times();
}
inline void MSG_Ret_CopymapEnterInfo_SC::clear_remain_times() {
  remain_times_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Ret_CopymapEnterInfo_SC::_internal_remain_times() const {
  return remain_times_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Ret_CopymapEnterInfo_SC::remain_times() const {
  // @@protoc_insertion_point(field_get:copymap.MSG_Ret_CopymapEnterInfo_SC.remain_times)
  return _internal_remain_times();
}
inline void MSG_Ret_CopymapEnterInfo_SC::_internal_set_remain_times(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  remain_times_ = value;
}
inline void MSG_Ret_CopymapEnterInfo_SC::set_remain_times(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_remain_times(value);
  // @@protoc_insertion_point(field_set:copymap.MSG_Ret_CopymapEnterInfo_SC.remain_times)
}

// -------------------------------------------------------------------

// MSG_Req_EnterCopymap_CS

// optional uint32 copymapidx = 1;
inline bool MSG_Req_EnterCopymap_CS::_internal_has_copymapidx() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_Req_EnterCopymap_CS::has_copymapidx() const {
  return _internal_has_copymapidx();
}
inline void MSG_Req_EnterCopymap_CS::clear_copymapidx() {
  copymapidx_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Req_EnterCopymap_CS::_internal_copymapidx() const {
  return copymapidx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Req_EnterCopymap_CS::copymapidx() const {
  // @@protoc_insertion_point(field_get:copymap.MSG_Req_EnterCopymap_CS.copymapidx)
  return _internal_copymapidx();
}
inline void MSG_Req_EnterCopymap_CS::_internal_set_copymapidx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  copymapidx_ = value;
}
inline void MSG_Req_EnterCopymap_CS::set_copymapidx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_copymapidx(value);
  // @@protoc_insertion_point(field_set:copymap.MSG_Req_EnterCopymap_CS.copymapidx)
}

// -------------------------------------------------------------------

// MSG_Req_ExitCopymap_SC

// -------------------------------------------------------------------

// MSG_Ret_TriggerEnter_SC

// optional string userid = 1;
inline bool MSG_Ret_TriggerEnter_SC::_internal_has_userid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_Ret_TriggerEnter_SC::has_userid() const {
  return _internal_has_userid();
}
inline void MSG_Ret_TriggerEnter_SC::clear_userid() {
  userid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MSG_Ret_TriggerEnter_SC::userid() const {
  // @@protoc_insertion_point(field_get:copymap.MSG_Ret_TriggerEnter_SC.userid)
  return _internal_userid();
}
inline void MSG_Ret_TriggerEnter_SC::set_userid(const std::string& value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:copymap.MSG_Ret_TriggerEnter_SC.userid)
}
inline std::string* MSG_Ret_TriggerEnter_SC::mutable_userid() {
  // @@protoc_insertion_point(field_mutable:copymap.MSG_Ret_TriggerEnter_SC.userid)
  return _internal_mutable_userid();
}
inline const std::string& MSG_Ret_TriggerEnter_SC::_internal_userid() const {
  return userid_.GetNoArena();
}
inline void MSG_Ret_TriggerEnter_SC::_internal_set_userid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  userid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_Ret_TriggerEnter_SC::set_userid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  userid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:copymap.MSG_Ret_TriggerEnter_SC.userid)
}
inline void MSG_Ret_TriggerEnter_SC::set_userid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  userid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:copymap.MSG_Ret_TriggerEnter_SC.userid)
}
inline void MSG_Ret_TriggerEnter_SC::set_userid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  userid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:copymap.MSG_Ret_TriggerEnter_SC.userid)
}
inline std::string* MSG_Ret_TriggerEnter_SC::_internal_mutable_userid() {
  _has_bits_[0] |= 0x00000001u;
  return userid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_Ret_TriggerEnter_SC::release_userid() {
  // @@protoc_insertion_point(field_release:copymap.MSG_Ret_TriggerEnter_SC.userid)
  if (!_internal_has_userid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return userid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_Ret_TriggerEnter_SC::set_allocated_userid(std::string* userid) {
  if (userid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  userid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:copymap.MSG_Ret_TriggerEnter_SC.userid)
}

// optional uint32 copymapid = 2;
inline bool MSG_Ret_TriggerEnter_SC::_internal_has_copymapid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_Ret_TriggerEnter_SC::has_copymapid() const {
  return _internal_has_copymapid();
}
inline void MSG_Ret_TriggerEnter_SC::clear_copymapid() {
  copymapid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Ret_TriggerEnter_SC::_internal_copymapid() const {
  return copymapid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Ret_TriggerEnter_SC::copymapid() const {
  // @@protoc_insertion_point(field_get:copymap.MSG_Ret_TriggerEnter_SC.copymapid)
  return _internal_copymapid();
}
inline void MSG_Ret_TriggerEnter_SC::_internal_set_copymapid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  copymapid_ = value;
}
inline void MSG_Ret_TriggerEnter_SC::set_copymapid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_copymapid(value);
  // @@protoc_insertion_point(field_set:copymap.MSG_Ret_TriggerEnter_SC.copymapid)
}

// -------------------------------------------------------------------

// MSG_ReqBackCopymap_CS

// -------------------------------------------------------------------

// RewardsObjectInfo

// repeated .Obj.t_Object objs = 1;
inline int RewardsObjectInfo::_internal_objs_size() const {
  return objs_.size();
}
inline int RewardsObjectInfo::objs_size() const {
  return _internal_objs_size();
}
inline ::Obj::t_Object* RewardsObjectInfo::mutable_objs(int index) {
  // @@protoc_insertion_point(field_mutable:copymap.RewardsObjectInfo.objs)
  return objs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Obj::t_Object >*
RewardsObjectInfo::mutable_objs() {
  // @@protoc_insertion_point(field_mutable_list:copymap.RewardsObjectInfo.objs)
  return &objs_;
}
inline const ::Obj::t_Object& RewardsObjectInfo::_internal_objs(int index) const {
  return objs_.Get(index);
}
inline const ::Obj::t_Object& RewardsObjectInfo::objs(int index) const {
  // @@protoc_insertion_point(field_get:copymap.RewardsObjectInfo.objs)
  return _internal_objs(index);
}
inline ::Obj::t_Object* RewardsObjectInfo::_internal_add_objs() {
  return objs_.Add();
}
inline ::Obj::t_Object* RewardsObjectInfo::add_objs() {
  // @@protoc_insertion_point(field_add:copymap.RewardsObjectInfo.objs)
  return _internal_add_objs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Obj::t_Object >&
RewardsObjectInfo::objs() const {
  // @@protoc_insertion_point(field_list:copymap.RewardsObjectInfo.objs)
  return objs_;
}

// optional uint32 userid = 2;
inline bool RewardsObjectInfo::_internal_has_userid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RewardsObjectInfo::has_userid() const {
  return _internal_has_userid();
}
inline void RewardsObjectInfo::clear_userid() {
  userid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RewardsObjectInfo::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RewardsObjectInfo::userid() const {
  // @@protoc_insertion_point(field_get:copymap.RewardsObjectInfo.userid)
  return _internal_userid();
}
inline void RewardsObjectInfo::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  userid_ = value;
}
inline void RewardsObjectInfo::set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:copymap.RewardsObjectInfo.userid)
}

// -------------------------------------------------------------------

// MSG_Ret_CopymapOver_SC

// optional .copymap.OverType type = 1;
inline bool MSG_Ret_CopymapOver_SC::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MSG_Ret_CopymapOver_SC::has_type() const {
  return _internal_has_type();
}
inline void MSG_Ret_CopymapOver_SC::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::copymap::OverType MSG_Ret_CopymapOver_SC::_internal_type() const {
  return static_cast< ::copymap::OverType >(type_);
}
inline ::copymap::OverType MSG_Ret_CopymapOver_SC::type() const {
  // @@protoc_insertion_point(field_get:copymap.MSG_Ret_CopymapOver_SC.type)
  return _internal_type();
}
inline void MSG_Ret_CopymapOver_SC::_internal_set_type(::copymap::OverType value) {
  assert(::copymap::OverType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  type_ = value;
}
inline void MSG_Ret_CopymapOver_SC::set_type(::copymap::OverType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:copymap.MSG_Ret_CopymapOver_SC.type)
}

// optional uint32 kickusertime = 2;
inline bool MSG_Ret_CopymapOver_SC::_internal_has_kickusertime() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_Ret_CopymapOver_SC::has_kickusertime() const {
  return _internal_has_kickusertime();
}
inline void MSG_Ret_CopymapOver_SC::clear_kickusertime() {
  kickusertime_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Ret_CopymapOver_SC::_internal_kickusertime() const {
  return kickusertime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Ret_CopymapOver_SC::kickusertime() const {
  // @@protoc_insertion_point(field_get:copymap.MSG_Ret_CopymapOver_SC.kickusertime)
  return _internal_kickusertime();
}
inline void MSG_Ret_CopymapOver_SC::_internal_set_kickusertime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  kickusertime_ = value;
}
inline void MSG_Ret_CopymapOver_SC::set_kickusertime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_kickusertime(value);
  // @@protoc_insertion_point(field_set:copymap.MSG_Ret_CopymapOver_SC.kickusertime)
}

// optional uint32 exp = 3;
inline bool MSG_Ret_CopymapOver_SC::_internal_has_exp() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MSG_Ret_CopymapOver_SC::has_exp() const {
  return _internal_has_exp();
}
inline void MSG_Ret_CopymapOver_SC::clear_exp() {
  exp_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Ret_CopymapOver_SC::_internal_exp() const {
  return exp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Ret_CopymapOver_SC::exp() const {
  // @@protoc_insertion_point(field_get:copymap.MSG_Ret_CopymapOver_SC.exp)
  return _internal_exp();
}
inline void MSG_Ret_CopymapOver_SC::_internal_set_exp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  exp_ = value;
}
inline void MSG_Ret_CopymapOver_SC::set_exp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_exp(value);
  // @@protoc_insertion_point(field_set:copymap.MSG_Ret_CopymapOver_SC.exp)
}

// repeated .massive.MSG_RetCurrencyChange_SC money = 4;
inline int MSG_Ret_CopymapOver_SC::_internal_money_size() const {
  return money_.size();
}
inline int MSG_Ret_CopymapOver_SC::money_size() const {
  return _internal_money_size();
}
inline ::massive::MSG_RetCurrencyChange_SC* MSG_Ret_CopymapOver_SC::mutable_money(int index) {
  // @@protoc_insertion_point(field_mutable:copymap.MSG_Ret_CopymapOver_SC.money)
  return money_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::massive::MSG_RetCurrencyChange_SC >*
MSG_Ret_CopymapOver_SC::mutable_money() {
  // @@protoc_insertion_point(field_mutable_list:copymap.MSG_Ret_CopymapOver_SC.money)
  return &money_;
}
inline const ::massive::MSG_RetCurrencyChange_SC& MSG_Ret_CopymapOver_SC::_internal_money(int index) const {
  return money_.Get(index);
}
inline const ::massive::MSG_RetCurrencyChange_SC& MSG_Ret_CopymapOver_SC::money(int index) const {
  // @@protoc_insertion_point(field_get:copymap.MSG_Ret_CopymapOver_SC.money)
  return _internal_money(index);
}
inline ::massive::MSG_RetCurrencyChange_SC* MSG_Ret_CopymapOver_SC::_internal_add_money() {
  return money_.Add();
}
inline ::massive::MSG_RetCurrencyChange_SC* MSG_Ret_CopymapOver_SC::add_money() {
  // @@protoc_insertion_point(field_add:copymap.MSG_Ret_CopymapOver_SC.money)
  return _internal_add_money();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::massive::MSG_RetCurrencyChange_SC >&
MSG_Ret_CopymapOver_SC::money() const {
  // @@protoc_insertion_point(field_list:copymap.MSG_Ret_CopymapOver_SC.money)
  return money_;
}

// optional .copymap.RewardsObjectInfo items = 5;
inline bool MSG_Ret_CopymapOver_SC::_internal_has_items() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || items_ != nullptr);
  return value;
}
inline bool MSG_Ret_CopymapOver_SC::has_items() const {
  return _internal_has_items();
}
inline void MSG_Ret_CopymapOver_SC::clear_items() {
  if (items_ != nullptr) items_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::copymap::RewardsObjectInfo& MSG_Ret_CopymapOver_SC::_internal_items() const {
  const ::copymap::RewardsObjectInfo* p = items_;
  return p != nullptr ? *p : *reinterpret_cast<const ::copymap::RewardsObjectInfo*>(
      &::copymap::_RewardsObjectInfo_default_instance_);
}
inline const ::copymap::RewardsObjectInfo& MSG_Ret_CopymapOver_SC::items() const {
  // @@protoc_insertion_point(field_get:copymap.MSG_Ret_CopymapOver_SC.items)
  return _internal_items();
}
inline ::copymap::RewardsObjectInfo* MSG_Ret_CopymapOver_SC::release_items() {
  // @@protoc_insertion_point(field_release:copymap.MSG_Ret_CopymapOver_SC.items)
  _has_bits_[0] &= ~0x00000001u;
  ::copymap::RewardsObjectInfo* temp = items_;
  items_ = nullptr;
  return temp;
}
inline ::copymap::RewardsObjectInfo* MSG_Ret_CopymapOver_SC::_internal_mutable_items() {
  _has_bits_[0] |= 0x00000001u;
  if (items_ == nullptr) {
    auto* p = CreateMaybeMessage<::copymap::RewardsObjectInfo>(GetArenaNoVirtual());
    items_ = p;
  }
  return items_;
}
inline ::copymap::RewardsObjectInfo* MSG_Ret_CopymapOver_SC::mutable_items() {
  // @@protoc_insertion_point(field_mutable:copymap.MSG_Ret_CopymapOver_SC.items)
  return _internal_mutable_items();
}
inline void MSG_Ret_CopymapOver_SC::set_allocated_items(::copymap::RewardsObjectInfo* items) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete items_;
  }
  if (items) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      items = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, items, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  items_ = items;
  // @@protoc_insertion_point(field_set_allocated:copymap.MSG_Ret_CopymapOver_SC.items)
}

// -------------------------------------------------------------------

// MSG_RetAwardQuest_SC

// optional uint32 questid = 1;
inline bool MSG_RetAwardQuest_SC::_internal_has_questid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_RetAwardQuest_SC::has_questid() const {
  return _internal_has_questid();
}
inline void MSG_RetAwardQuest_SC::clear_questid() {
  questid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetAwardQuest_SC::_internal_questid() const {
  return questid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetAwardQuest_SC::questid() const {
  // @@protoc_insertion_point(field_get:copymap.MSG_RetAwardQuest_SC.questid)
  return _internal_questid();
}
inline void MSG_RetAwardQuest_SC::_internal_set_questid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  questid_ = value;
}
inline void MSG_RetAwardQuest_SC::set_questid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_questid(value);
  // @@protoc_insertion_point(field_set:copymap.MSG_RetAwardQuest_SC.questid)
}

// optional uint32 scorevar = 2;
inline bool MSG_RetAwardQuest_SC::_internal_has_scorevar() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MSG_RetAwardQuest_SC::has_scorevar() const {
  return _internal_has_scorevar();
}
inline void MSG_RetAwardQuest_SC::clear_scorevar() {
  scorevar_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetAwardQuest_SC::_internal_scorevar() const {
  return scorevar_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetAwardQuest_SC::scorevar() const {
  // @@protoc_insertion_point(field_get:copymap.MSG_RetAwardQuest_SC.scorevar)
  return _internal_scorevar();
}
inline void MSG_RetAwardQuest_SC::_internal_set_scorevar(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  scorevar_ = value;
}
inline void MSG_RetAwardQuest_SC::set_scorevar(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_scorevar(value);
  // @@protoc_insertion_point(field_set:copymap.MSG_RetAwardQuest_SC.scorevar)
}

// optional .copymap.RewardsObjectInfo items = 3;
inline bool MSG_RetAwardQuest_SC::_internal_has_items() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || items_ != nullptr);
  return value;
}
inline bool MSG_RetAwardQuest_SC::has_items() const {
  return _internal_has_items();
}
inline void MSG_RetAwardQuest_SC::clear_items() {
  if (items_ != nullptr) items_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::copymap::RewardsObjectInfo& MSG_RetAwardQuest_SC::_internal_items() const {
  const ::copymap::RewardsObjectInfo* p = items_;
  return p != nullptr ? *p : *reinterpret_cast<const ::copymap::RewardsObjectInfo*>(
      &::copymap::_RewardsObjectInfo_default_instance_);
}
inline const ::copymap::RewardsObjectInfo& MSG_RetAwardQuest_SC::items() const {
  // @@protoc_insertion_point(field_get:copymap.MSG_RetAwardQuest_SC.items)
  return _internal_items();
}
inline ::copymap::RewardsObjectInfo* MSG_RetAwardQuest_SC::release_items() {
  // @@protoc_insertion_point(field_release:copymap.MSG_RetAwardQuest_SC.items)
  _has_bits_[0] &= ~0x00000001u;
  ::copymap::RewardsObjectInfo* temp = items_;
  items_ = nullptr;
  return temp;
}
inline ::copymap::RewardsObjectInfo* MSG_RetAwardQuest_SC::_internal_mutable_items() {
  _has_bits_[0] |= 0x00000001u;
  if (items_ == nullptr) {
    auto* p = CreateMaybeMessage<::copymap::RewardsObjectInfo>(GetArenaNoVirtual());
    items_ = p;
  }
  return items_;
}
inline ::copymap::RewardsObjectInfo* MSG_RetAwardQuest_SC::mutable_items() {
  // @@protoc_insertion_point(field_mutable:copymap.MSG_RetAwardQuest_SC.items)
  return _internal_mutable_items();
}
inline void MSG_RetAwardQuest_SC::set_allocated_items(::copymap::RewardsObjectInfo* items) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete items_;
  }
  if (items) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      items = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, items, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  items_ = items;
  // @@protoc_insertion_point(field_set_allocated:copymap.MSG_RetAwardQuest_SC.items)
}

// -------------------------------------------------------------------

// MSG_Req_CopymapLottery_CS

// -------------------------------------------------------------------

// MSG_Ret_CopymapLottery_SC

// repeated .copymap.RewardsObjectInfo items = 1;
inline int MSG_Ret_CopymapLottery_SC::_internal_items_size() const {
  return items_.size();
}
inline int MSG_Ret_CopymapLottery_SC::items_size() const {
  return _internal_items_size();
}
inline void MSG_Ret_CopymapLottery_SC::clear_items() {
  items_.Clear();
}
inline ::copymap::RewardsObjectInfo* MSG_Ret_CopymapLottery_SC::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:copymap.MSG_Ret_CopymapLottery_SC.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::copymap::RewardsObjectInfo >*
MSG_Ret_CopymapLottery_SC::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:copymap.MSG_Ret_CopymapLottery_SC.items)
  return &items_;
}
inline const ::copymap::RewardsObjectInfo& MSG_Ret_CopymapLottery_SC::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::copymap::RewardsObjectInfo& MSG_Ret_CopymapLottery_SC::items(int index) const {
  // @@protoc_insertion_point(field_get:copymap.MSG_Ret_CopymapLottery_SC.items)
  return _internal_items(index);
}
inline ::copymap::RewardsObjectInfo* MSG_Ret_CopymapLottery_SC::_internal_add_items() {
  return items_.Add();
}
inline ::copymap::RewardsObjectInfo* MSG_Ret_CopymapLottery_SC::add_items() {
  // @@protoc_insertion_point(field_add:copymap.MSG_Ret_CopymapLottery_SC.items)
  return _internal_add_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::copymap::RewardsObjectInfo >&
MSG_Ret_CopymapLottery_SC::items() const {
  // @@protoc_insertion_point(field_list:copymap.MSG_Ret_CopymapLottery_SC.items)
  return items_;
}

// -------------------------------------------------------------------

// MSG_Req_CopymapGather_CS

// optional uint32 copymapidx = 1;
inline bool MSG_Req_CopymapGather_CS::_internal_has_copymapidx() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_Req_CopymapGather_CS::has_copymapidx() const {
  return _internal_has_copymapidx();
}
inline void MSG_Req_CopymapGather_CS::clear_copymapidx() {
  copymapidx_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Req_CopymapGather_CS::_internal_copymapidx() const {
  return copymapidx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Req_CopymapGather_CS::copymapidx() const {
  // @@protoc_insertion_point(field_get:copymap.MSG_Req_CopymapGather_CS.copymapidx)
  return _internal_copymapidx();
}
inline void MSG_Req_CopymapGather_CS::_internal_set_copymapidx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  copymapidx_ = value;
}
inline void MSG_Req_CopymapGather_CS::set_copymapidx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_copymapidx(value);
  // @@protoc_insertion_point(field_set:copymap.MSG_Req_CopymapGather_CS.copymapidx)
}

// -------------------------------------------------------------------

// MSG_Ret_CopymapGatherReq_SC

// optional string leader = 1;
inline bool MSG_Ret_CopymapGatherReq_SC::_internal_has_leader() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_Ret_CopymapGatherReq_SC::has_leader() const {
  return _internal_has_leader();
}
inline void MSG_Ret_CopymapGatherReq_SC::clear_leader() {
  leader_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MSG_Ret_CopymapGatherReq_SC::leader() const {
  // @@protoc_insertion_point(field_get:copymap.MSG_Ret_CopymapGatherReq_SC.leader)
  return _internal_leader();
}
inline void MSG_Ret_CopymapGatherReq_SC::set_leader(const std::string& value) {
  _internal_set_leader(value);
  // @@protoc_insertion_point(field_set:copymap.MSG_Ret_CopymapGatherReq_SC.leader)
}
inline std::string* MSG_Ret_CopymapGatherReq_SC::mutable_leader() {
  // @@protoc_insertion_point(field_mutable:copymap.MSG_Ret_CopymapGatherReq_SC.leader)
  return _internal_mutable_leader();
}
inline const std::string& MSG_Ret_CopymapGatherReq_SC::_internal_leader() const {
  return leader_.GetNoArena();
}
inline void MSG_Ret_CopymapGatherReq_SC::_internal_set_leader(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  leader_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_Ret_CopymapGatherReq_SC::set_leader(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  leader_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:copymap.MSG_Ret_CopymapGatherReq_SC.leader)
}
inline void MSG_Ret_CopymapGatherReq_SC::set_leader(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  leader_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:copymap.MSG_Ret_CopymapGatherReq_SC.leader)
}
inline void MSG_Ret_CopymapGatherReq_SC::set_leader(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  leader_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:copymap.MSG_Ret_CopymapGatherReq_SC.leader)
}
inline std::string* MSG_Ret_CopymapGatherReq_SC::_internal_mutable_leader() {
  _has_bits_[0] |= 0x00000001u;
  return leader_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_Ret_CopymapGatherReq_SC::release_leader() {
  // @@protoc_insertion_point(field_release:copymap.MSG_Ret_CopymapGatherReq_SC.leader)
  if (!_internal_has_leader()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return leader_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_Ret_CopymapGatherReq_SC::set_allocated_leader(std::string* leader) {
  if (leader != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  leader_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), leader);
  // @@protoc_insertion_point(field_set_allocated:copymap.MSG_Ret_CopymapGatherReq_SC.leader)
}

// optional uint32 leader_career = 2;
inline bool MSG_Ret_CopymapGatherReq_SC::_internal_has_leader_career() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_Ret_CopymapGatherReq_SC::has_leader_career() const {
  return _internal_has_leader_career();
}
inline void MSG_Ret_CopymapGatherReq_SC::clear_leader_career() {
  leader_career_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Ret_CopymapGatherReq_SC::_internal_leader_career() const {
  return leader_career_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Ret_CopymapGatherReq_SC::leader_career() const {
  // @@protoc_insertion_point(field_get:copymap.MSG_Ret_CopymapGatherReq_SC.leader_career)
  return _internal_leader_career();
}
inline void MSG_Ret_CopymapGatherReq_SC::_internal_set_leader_career(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  leader_career_ = value;
}
inline void MSG_Ret_CopymapGatherReq_SC::set_leader_career(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_leader_career(value);
  // @@protoc_insertion_point(field_set:copymap.MSG_Ret_CopymapGatherReq_SC.leader_career)
}

// optional uint32 copymapidx = 3;
inline bool MSG_Ret_CopymapGatherReq_SC::_internal_has_copymapidx() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MSG_Ret_CopymapGatherReq_SC::has_copymapidx() const {
  return _internal_has_copymapidx();
}
inline void MSG_Ret_CopymapGatherReq_SC::clear_copymapidx() {
  copymapidx_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Ret_CopymapGatherReq_SC::_internal_copymapidx() const {
  return copymapidx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Ret_CopymapGatherReq_SC::copymapidx() const {
  // @@protoc_insertion_point(field_get:copymap.MSG_Ret_CopymapGatherReq_SC.copymapidx)
  return _internal_copymapidx();
}
inline void MSG_Ret_CopymapGatherReq_SC::_internal_set_copymapidx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  copymapidx_ = value;
}
inline void MSG_Ret_CopymapGatherReq_SC::set_copymapidx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_copymapidx(value);
  // @@protoc_insertion_point(field_set:copymap.MSG_Ret_CopymapGatherReq_SC.copymapidx)
}

// optional uint32 countdown = 4;
inline bool MSG_Ret_CopymapGatherReq_SC::_internal_has_countdown() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MSG_Ret_CopymapGatherReq_SC::has_countdown() const {
  return _internal_has_countdown();
}
inline void MSG_Ret_CopymapGatherReq_SC::clear_countdown() {
  countdown_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Ret_CopymapGatherReq_SC::_internal_countdown() const {
  return countdown_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Ret_CopymapGatherReq_SC::countdown() const {
  // @@protoc_insertion_point(field_get:copymap.MSG_Ret_CopymapGatherReq_SC.countdown)
  return _internal_countdown();
}
inline void MSG_Ret_CopymapGatherReq_SC::_internal_set_countdown(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  countdown_ = value;
}
inline void MSG_Ret_CopymapGatherReq_SC::set_countdown(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_countdown(value);
  // @@protoc_insertion_point(field_set:copymap.MSG_Ret_CopymapGatherReq_SC.countdown)
}

// -------------------------------------------------------------------

// MSG_Req_CopymapAnswerGather_CS

// optional bool agree = 1;
inline bool MSG_Req_CopymapAnswerGather_CS::_internal_has_agree() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_Req_CopymapAnswerGather_CS::has_agree() const {
  return _internal_has_agree();
}
inline void MSG_Req_CopymapAnswerGather_CS::clear_agree() {
  agree_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool MSG_Req_CopymapAnswerGather_CS::_internal_agree() const {
  return agree_;
}
inline bool MSG_Req_CopymapAnswerGather_CS::agree() const {
  // @@protoc_insertion_point(field_get:copymap.MSG_Req_CopymapAnswerGather_CS.agree)
  return _internal_agree();
}
inline void MSG_Req_CopymapAnswerGather_CS::_internal_set_agree(bool value) {
  _has_bits_[0] |= 0x00000001u;
  agree_ = value;
}
inline void MSG_Req_CopymapAnswerGather_CS::set_agree(bool value) {
  _internal_set_agree(value);
  // @@protoc_insertion_point(field_set:copymap.MSG_Req_CopymapAnswerGather_CS.agree)
}

// -------------------------------------------------------------------

// CopymapGatherItem

// optional string name = 1;
inline bool CopymapGatherItem::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CopymapGatherItem::has_name() const {
  return _internal_has_name();
}
inline void CopymapGatherItem::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CopymapGatherItem::name() const {
  // @@protoc_insertion_point(field_get:copymap.CopymapGatherItem.name)
  return _internal_name();
}
inline void CopymapGatherItem::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:copymap.CopymapGatherItem.name)
}
inline std::string* CopymapGatherItem::mutable_name() {
  // @@protoc_insertion_point(field_mutable:copymap.CopymapGatherItem.name)
  return _internal_mutable_name();
}
inline const std::string& CopymapGatherItem::_internal_name() const {
  return name_.GetNoArena();
}
inline void CopymapGatherItem::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CopymapGatherItem::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:copymap.CopymapGatherItem.name)
}
inline void CopymapGatherItem::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:copymap.CopymapGatherItem.name)
}
inline void CopymapGatherItem::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:copymap.CopymapGatherItem.name)
}
inline std::string* CopymapGatherItem::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CopymapGatherItem::release_name() {
  // @@protoc_insertion_point(field_release:copymap.CopymapGatherItem.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CopymapGatherItem::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:copymap.CopymapGatherItem.name)
}

// optional string charid = 2;
inline bool CopymapGatherItem::_internal_has_charid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CopymapGatherItem::has_charid() const {
  return _internal_has_charid();
}
inline void CopymapGatherItem::clear_charid() {
  charid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CopymapGatherItem::charid() const {
  // @@protoc_insertion_point(field_get:copymap.CopymapGatherItem.charid)
  return _internal_charid();
}
inline void CopymapGatherItem::set_charid(const std::string& value) {
  _internal_set_charid(value);
  // @@protoc_insertion_point(field_set:copymap.CopymapGatherItem.charid)
}
inline std::string* CopymapGatherItem::mutable_charid() {
  // @@protoc_insertion_point(field_mutable:copymap.CopymapGatherItem.charid)
  return _internal_mutable_charid();
}
inline const std::string& CopymapGatherItem::_internal_charid() const {
  return charid_.GetNoArena();
}
inline void CopymapGatherItem::_internal_set_charid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  charid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CopymapGatherItem::set_charid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  charid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:copymap.CopymapGatherItem.charid)
}
inline void CopymapGatherItem::set_charid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  charid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:copymap.CopymapGatherItem.charid)
}
inline void CopymapGatherItem::set_charid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  charid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:copymap.CopymapGatherItem.charid)
}
inline std::string* CopymapGatherItem::_internal_mutable_charid() {
  _has_bits_[0] |= 0x00000002u;
  return charid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CopymapGatherItem::release_charid() {
  // @@protoc_insertion_point(field_release:copymap.CopymapGatherItem.charid)
  if (!_internal_has_charid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return charid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CopymapGatherItem::set_allocated_charid(std::string* charid) {
  if (charid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  charid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), charid);
  // @@protoc_insertion_point(field_set_allocated:copymap.CopymapGatherItem.charid)
}

// optional .copymap.MemberGatherState state = 3;
inline bool CopymapGatherItem::_internal_has_state() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CopymapGatherItem::has_state() const {
  return _internal_has_state();
}
inline void CopymapGatherItem::clear_state() {
  state_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::copymap::MemberGatherState CopymapGatherItem::_internal_state() const {
  return static_cast< ::copymap::MemberGatherState >(state_);
}
inline ::copymap::MemberGatherState CopymapGatherItem::state() const {
  // @@protoc_insertion_point(field_get:copymap.CopymapGatherItem.state)
  return _internal_state();
}
inline void CopymapGatherItem::_internal_set_state(::copymap::MemberGatherState value) {
  assert(::copymap::MemberGatherState_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  state_ = value;
}
inline void CopymapGatherItem::set_state(::copymap::MemberGatherState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:copymap.CopymapGatherItem.state)
}

// optional uint32 heroid = 4;
inline bool CopymapGatherItem::_internal_has_heroid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CopymapGatherItem::has_heroid() const {
  return _internal_has_heroid();
}
inline void CopymapGatherItem::clear_heroid() {
  heroid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CopymapGatherItem::_internal_heroid() const {
  return heroid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CopymapGatherItem::heroid() const {
  // @@protoc_insertion_point(field_get:copymap.CopymapGatherItem.heroid)
  return _internal_heroid();
}
inline void CopymapGatherItem::_internal_set_heroid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  heroid_ = value;
}
inline void CopymapGatherItem::set_heroid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_heroid(value);
  // @@protoc_insertion_point(field_set:copymap.CopymapGatherItem.heroid)
}

// -------------------------------------------------------------------

// MSG_Ret_CopymapGatherData_SC

// repeated .copymap.CopymapGatherItem data = 1;
inline int MSG_Ret_CopymapGatherData_SC::_internal_data_size() const {
  return data_.size();
}
inline int MSG_Ret_CopymapGatherData_SC::data_size() const {
  return _internal_data_size();
}
inline void MSG_Ret_CopymapGatherData_SC::clear_data() {
  data_.Clear();
}
inline ::copymap::CopymapGatherItem* MSG_Ret_CopymapGatherData_SC::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:copymap.MSG_Ret_CopymapGatherData_SC.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::copymap::CopymapGatherItem >*
MSG_Ret_CopymapGatherData_SC::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:copymap.MSG_Ret_CopymapGatherData_SC.data)
  return &data_;
}
inline const ::copymap::CopymapGatherItem& MSG_Ret_CopymapGatherData_SC::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::copymap::CopymapGatherItem& MSG_Ret_CopymapGatherData_SC::data(int index) const {
  // @@protoc_insertion_point(field_get:copymap.MSG_Ret_CopymapGatherData_SC.data)
  return _internal_data(index);
}
inline ::copymap::CopymapGatherItem* MSG_Ret_CopymapGatherData_SC::_internal_add_data() {
  return data_.Add();
}
inline ::copymap::CopymapGatherItem* MSG_Ret_CopymapGatherData_SC::add_data() {
  // @@protoc_insertion_point(field_add:copymap.MSG_Ret_CopymapGatherData_SC.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::copymap::CopymapGatherItem >&
MSG_Ret_CopymapGatherData_SC::data() const {
  // @@protoc_insertion_point(field_list:copymap.MSG_Ret_CopymapGatherData_SC.data)
  return data_;
}

// optional .copymap.GatherState state = 2;
inline bool MSG_Ret_CopymapGatherData_SC::_internal_has_state() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_Ret_CopymapGatherData_SC::has_state() const {
  return _internal_has_state();
}
inline void MSG_Ret_CopymapGatherData_SC::clear_state() {
  state_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::copymap::GatherState MSG_Ret_CopymapGatherData_SC::_internal_state() const {
  return static_cast< ::copymap::GatherState >(state_);
}
inline ::copymap::GatherState MSG_Ret_CopymapGatherData_SC::state() const {
  // @@protoc_insertion_point(field_get:copymap.MSG_Ret_CopymapGatherData_SC.state)
  return _internal_state();
}
inline void MSG_Ret_CopymapGatherData_SC::_internal_set_state(::copymap::GatherState value) {
  assert(::copymap::GatherState_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  state_ = value;
}
inline void MSG_Ret_CopymapGatherData_SC::set_state(::copymap::GatherState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:copymap.MSG_Ret_CopymapGatherData_SC.state)
}

// optional uint32 countdown = 3;
inline bool MSG_Ret_CopymapGatherData_SC::_internal_has_countdown() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_Ret_CopymapGatherData_SC::has_countdown() const {
  return _internal_has_countdown();
}
inline void MSG_Ret_CopymapGatherData_SC::clear_countdown() {
  countdown_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Ret_CopymapGatherData_SC::_internal_countdown() const {
  return countdown_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Ret_CopymapGatherData_SC::countdown() const {
  // @@protoc_insertion_point(field_get:copymap.MSG_Ret_CopymapGatherData_SC.countdown)
  return _internal_countdown();
}
inline void MSG_Ret_CopymapGatherData_SC::_internal_set_countdown(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  countdown_ = value;
}
inline void MSG_Ret_CopymapGatherData_SC::set_countdown(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_countdown(value);
  // @@protoc_insertion_point(field_set:copymap.MSG_Ret_CopymapGatherData_SC.countdown)
}

// optional uint32 copymapidx = 4;
inline bool MSG_Ret_CopymapGatherData_SC::_internal_has_copymapidx() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MSG_Ret_CopymapGatherData_SC::has_copymapidx() const {
  return _internal_has_copymapidx();
}
inline void MSG_Ret_CopymapGatherData_SC::clear_copymapidx() {
  copymapidx_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Ret_CopymapGatherData_SC::_internal_copymapidx() const {
  return copymapidx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Ret_CopymapGatherData_SC::copymapidx() const {
  // @@protoc_insertion_point(field_get:copymap.MSG_Ret_CopymapGatherData_SC.copymapidx)
  return _internal_copymapidx();
}
inline void MSG_Ret_CopymapGatherData_SC::_internal_set_copymapidx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  copymapidx_ = value;
}
inline void MSG_Ret_CopymapGatherData_SC::set_copymapidx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_copymapidx(value);
  // @@protoc_insertion_point(field_set:copymap.MSG_Ret_CopymapGatherData_SC.copymapidx)
}

// -------------------------------------------------------------------

// MSG_Req_CopymapGatherQuickEnter_CS

// -------------------------------------------------------------------

// MSG_Req_CopymapReGather_CS

// -------------------------------------------------------------------

// MSG_Ret_CopymapReGather_SC

// optional uint32 copymapidx = 1;
inline bool MSG_Ret_CopymapReGather_SC::_internal_has_copymapidx() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_Ret_CopymapReGather_SC::has_copymapidx() const {
  return _internal_has_copymapidx();
}
inline void MSG_Ret_CopymapReGather_SC::clear_copymapidx() {
  copymapidx_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Ret_CopymapReGather_SC::_internal_copymapidx() const {
  return copymapidx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Ret_CopymapReGather_SC::copymapidx() const {
  // @@protoc_insertion_point(field_get:copymap.MSG_Ret_CopymapReGather_SC.copymapidx)
  return _internal_copymapidx();
}
inline void MSG_Ret_CopymapReGather_SC::_internal_set_copymapidx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  copymapidx_ = value;
}
inline void MSG_Ret_CopymapReGather_SC::set_copymapidx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_copymapidx(value);
  // @@protoc_insertion_point(field_set:copymap.MSG_Ret_CopymapReGather_SC.copymapidx)
}

// -------------------------------------------------------------------

// MSG_Ret_CopymapBossTempID_SC

// repeated string tempid = 1;
inline int MSG_Ret_CopymapBossTempID_SC::_internal_tempid_size() const {
  return tempid_.size();
}
inline int MSG_Ret_CopymapBossTempID_SC::tempid_size() const {
  return _internal_tempid_size();
}
inline void MSG_Ret_CopymapBossTempID_SC::clear_tempid() {
  tempid_.Clear();
}
inline std::string* MSG_Ret_CopymapBossTempID_SC::add_tempid() {
  // @@protoc_insertion_point(field_add_mutable:copymap.MSG_Ret_CopymapBossTempID_SC.tempid)
  return _internal_add_tempid();
}
inline const std::string& MSG_Ret_CopymapBossTempID_SC::_internal_tempid(int index) const {
  return tempid_.Get(index);
}
inline const std::string& MSG_Ret_CopymapBossTempID_SC::tempid(int index) const {
  // @@protoc_insertion_point(field_get:copymap.MSG_Ret_CopymapBossTempID_SC.tempid)
  return _internal_tempid(index);
}
inline std::string* MSG_Ret_CopymapBossTempID_SC::mutable_tempid(int index) {
  // @@protoc_insertion_point(field_mutable:copymap.MSG_Ret_CopymapBossTempID_SC.tempid)
  return tempid_.Mutable(index);
}
inline void MSG_Ret_CopymapBossTempID_SC::set_tempid(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:copymap.MSG_Ret_CopymapBossTempID_SC.tempid)
  tempid_.Mutable(index)->assign(value);
}
inline void MSG_Ret_CopymapBossTempID_SC::set_tempid(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:copymap.MSG_Ret_CopymapBossTempID_SC.tempid)
  tempid_.Mutable(index)->assign(std::move(value));
}
inline void MSG_Ret_CopymapBossTempID_SC::set_tempid(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tempid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:copymap.MSG_Ret_CopymapBossTempID_SC.tempid)
}
inline void MSG_Ret_CopymapBossTempID_SC::set_tempid(int index, const char* value, size_t size) {
  tempid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:copymap.MSG_Ret_CopymapBossTempID_SC.tempid)
}
inline std::string* MSG_Ret_CopymapBossTempID_SC::_internal_add_tempid() {
  return tempid_.Add();
}
inline void MSG_Ret_CopymapBossTempID_SC::add_tempid(const std::string& value) {
  tempid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:copymap.MSG_Ret_CopymapBossTempID_SC.tempid)
}
inline void MSG_Ret_CopymapBossTempID_SC::add_tempid(std::string&& value) {
  tempid_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:copymap.MSG_Ret_CopymapBossTempID_SC.tempid)
}
inline void MSG_Ret_CopymapBossTempID_SC::add_tempid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tempid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:copymap.MSG_Ret_CopymapBossTempID_SC.tempid)
}
inline void MSG_Ret_CopymapBossTempID_SC::add_tempid(const char* value, size_t size) {
  tempid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:copymap.MSG_Ret_CopymapBossTempID_SC.tempid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MSG_Ret_CopymapBossTempID_SC::tempid() const {
  // @@protoc_insertion_point(field_list:copymap.MSG_Ret_CopymapBossTempID_SC.tempid)
  return tempid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MSG_Ret_CopymapBossTempID_SC::mutable_tempid() {
  // @@protoc_insertion_point(field_mutable_list:copymap.MSG_Ret_CopymapBossTempID_SC.tempid)
  return &tempid_;
}

// -------------------------------------------------------------------

// AdventureCopymapGroup

// optional uint32 adventureid = 1;
inline bool AdventureCopymapGroup::_internal_has_adventureid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AdventureCopymapGroup::has_adventureid() const {
  return _internal_has_adventureid();
}
inline void AdventureCopymapGroup::clear_adventureid() {
  adventureid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AdventureCopymapGroup::_internal_adventureid() const {
  return adventureid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AdventureCopymapGroup::adventureid() const {
  // @@protoc_insertion_point(field_get:copymap.AdventureCopymapGroup.adventureid)
  return _internal_adventureid();
}
inline void AdventureCopymapGroup::_internal_set_adventureid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  adventureid_ = value;
}
inline void AdventureCopymapGroup::set_adventureid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_adventureid(value);
  // @@protoc_insertion_point(field_set:copymap.AdventureCopymapGroup.adventureid)
}

// optional uint32 complete_rate = 2;
inline bool AdventureCopymapGroup::_internal_has_complete_rate() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AdventureCopymapGroup::has_complete_rate() const {
  return _internal_has_complete_rate();
}
inline void AdventureCopymapGroup::clear_complete_rate() {
  complete_rate_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AdventureCopymapGroup::_internal_complete_rate() const {
  return complete_rate_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AdventureCopymapGroup::complete_rate() const {
  // @@protoc_insertion_point(field_get:copymap.AdventureCopymapGroup.complete_rate)
  return _internal_complete_rate();
}
inline void AdventureCopymapGroup::_internal_set_complete_rate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  complete_rate_ = value;
}
inline void AdventureCopymapGroup::set_complete_rate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_complete_rate(value);
  // @@protoc_insertion_point(field_set:copymap.AdventureCopymapGroup.complete_rate)
}

// optional bool unlock = 3;
inline bool AdventureCopymapGroup::_internal_has_unlock() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AdventureCopymapGroup::has_unlock() const {
  return _internal_has_unlock();
}
inline void AdventureCopymapGroup::clear_unlock() {
  unlock_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool AdventureCopymapGroup::_internal_unlock() const {
  return unlock_;
}
inline bool AdventureCopymapGroup::unlock() const {
  // @@protoc_insertion_point(field_get:copymap.AdventureCopymapGroup.unlock)
  return _internal_unlock();
}
inline void AdventureCopymapGroup::_internal_set_unlock(bool value) {
  _has_bits_[0] |= 0x00000004u;
  unlock_ = value;
}
inline void AdventureCopymapGroup::set_unlock(bool value) {
  _internal_set_unlock(value);
  // @@protoc_insertion_point(field_set:copymap.AdventureCopymapGroup.unlock)
}

// -------------------------------------------------------------------

// MSG_Req_AdventureCopymapGroup_CS

// -------------------------------------------------------------------

// MSG_Ret_AdventureCopymapGroup_SC

// repeated .copymap.AdventureCopymapGroup groups = 1;
inline int MSG_Ret_AdventureCopymapGroup_SC::_internal_groups_size() const {
  return groups_.size();
}
inline int MSG_Ret_AdventureCopymapGroup_SC::groups_size() const {
  return _internal_groups_size();
}
inline void MSG_Ret_AdventureCopymapGroup_SC::clear_groups() {
  groups_.Clear();
}
inline ::copymap::AdventureCopymapGroup* MSG_Ret_AdventureCopymapGroup_SC::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:copymap.MSG_Ret_AdventureCopymapGroup_SC.groups)
  return groups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::copymap::AdventureCopymapGroup >*
MSG_Ret_AdventureCopymapGroup_SC::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:copymap.MSG_Ret_AdventureCopymapGroup_SC.groups)
  return &groups_;
}
inline const ::copymap::AdventureCopymapGroup& MSG_Ret_AdventureCopymapGroup_SC::_internal_groups(int index) const {
  return groups_.Get(index);
}
inline const ::copymap::AdventureCopymapGroup& MSG_Ret_AdventureCopymapGroup_SC::groups(int index) const {
  // @@protoc_insertion_point(field_get:copymap.MSG_Ret_AdventureCopymapGroup_SC.groups)
  return _internal_groups(index);
}
inline ::copymap::AdventureCopymapGroup* MSG_Ret_AdventureCopymapGroup_SC::_internal_add_groups() {
  return groups_.Add();
}
inline ::copymap::AdventureCopymapGroup* MSG_Ret_AdventureCopymapGroup_SC::add_groups() {
  // @@protoc_insertion_point(field_add:copymap.MSG_Ret_AdventureCopymapGroup_SC.groups)
  return _internal_add_groups();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::copymap::AdventureCopymapGroup >&
MSG_Ret_AdventureCopymapGroup_SC::groups() const {
  // @@protoc_insertion_point(field_list:copymap.MSG_Ret_AdventureCopymapGroup_SC.groups)
  return groups_;
}

// -------------------------------------------------------------------

// AdventureCopymap

// optional uint32 copymapidx = 1;
inline bool AdventureCopymap::_internal_has_copymapidx() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AdventureCopymap::has_copymapidx() const {
  return _internal_has_copymapidx();
}
inline void AdventureCopymap::clear_copymapidx() {
  copymapidx_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AdventureCopymap::_internal_copymapidx() const {
  return copymapidx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AdventureCopymap::copymapidx() const {
  // @@protoc_insertion_point(field_get:copymap.AdventureCopymap.copymapidx)
  return _internal_copymapidx();
}
inline void AdventureCopymap::_internal_set_copymapidx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  copymapidx_ = value;
}
inline void AdventureCopymap::set_copymapidx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_copymapidx(value);
  // @@protoc_insertion_point(field_set:copymap.AdventureCopymap.copymapidx)
}

// optional bool unlock = 2;
inline bool AdventureCopymap::_internal_has_unlock() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AdventureCopymap::has_unlock() const {
  return _internal_has_unlock();
}
inline void AdventureCopymap::clear_unlock() {
  unlock_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool AdventureCopymap::_internal_unlock() const {
  return unlock_;
}
inline bool AdventureCopymap::unlock() const {
  // @@protoc_insertion_point(field_get:copymap.AdventureCopymap.unlock)
  return _internal_unlock();
}
inline void AdventureCopymap::_internal_set_unlock(bool value) {
  _has_bits_[0] |= 0x00000004u;
  unlock_ = value;
}
inline void AdventureCopymap::set_unlock(bool value) {
  _internal_set_unlock(value);
  // @@protoc_insertion_point(field_set:copymap.AdventureCopymap.unlock)
}

// optional uint32 star = 3;
inline bool AdventureCopymap::_internal_has_star() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AdventureCopymap::has_star() const {
  return _internal_has_star();
}
inline void AdventureCopymap::clear_star() {
  star_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AdventureCopymap::_internal_star() const {
  return star_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AdventureCopymap::star() const {
  // @@protoc_insertion_point(field_get:copymap.AdventureCopymap.star)
  return _internal_star();
}
inline void AdventureCopymap::_internal_set_star(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  star_ = value;
}
inline void AdventureCopymap::set_star(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_star(value);
  // @@protoc_insertion_point(field_set:copymap.AdventureCopymap.star)
}

// optional bool first_success = 4;
inline bool AdventureCopymap::_internal_has_first_success() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AdventureCopymap::has_first_success() const {
  return _internal_has_first_success();
}
inline void AdventureCopymap::clear_first_success() {
  first_success_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool AdventureCopymap::_internal_first_success() const {
  return first_success_;
}
inline bool AdventureCopymap::first_success() const {
  // @@protoc_insertion_point(field_get:copymap.AdventureCopymap.first_success)
  return _internal_first_success();
}
inline void AdventureCopymap::_internal_set_first_success(bool value) {
  _has_bits_[0] |= 0x00000008u;
  first_success_ = value;
}
inline void AdventureCopymap::set_first_success(bool value) {
  _internal_set_first_success(value);
  // @@protoc_insertion_point(field_set:copymap.AdventureCopymap.first_success)
}

// -------------------------------------------------------------------

// MSG_Req_AdventureCopymapInfo_CS

// optional uint32 adventureid = 1;
inline bool MSG_Req_AdventureCopymapInfo_CS::_internal_has_adventureid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_Req_AdventureCopymapInfo_CS::has_adventureid() const {
  return _internal_has_adventureid();
}
inline void MSG_Req_AdventureCopymapInfo_CS::clear_adventureid() {
  adventureid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Req_AdventureCopymapInfo_CS::_internal_adventureid() const {
  return adventureid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Req_AdventureCopymapInfo_CS::adventureid() const {
  // @@protoc_insertion_point(field_get:copymap.MSG_Req_AdventureCopymapInfo_CS.adventureid)
  return _internal_adventureid();
}
inline void MSG_Req_AdventureCopymapInfo_CS::_internal_set_adventureid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  adventureid_ = value;
}
inline void MSG_Req_AdventureCopymapInfo_CS::set_adventureid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_adventureid(value);
  // @@protoc_insertion_point(field_set:copymap.MSG_Req_AdventureCopymapInfo_CS.adventureid)
}

// -------------------------------------------------------------------

// MSG_Ret_AdventureCopymapInfo_SC

// repeated .copymap.AdventureCopymap copymaps = 1;
inline int MSG_Ret_AdventureCopymapInfo_SC::_internal_copymaps_size() const {
  return copymaps_.size();
}
inline int MSG_Ret_AdventureCopymapInfo_SC::copymaps_size() const {
  return _internal_copymaps_size();
}
inline void MSG_Ret_AdventureCopymapInfo_SC::clear_copymaps() {
  copymaps_.Clear();
}
inline ::copymap::AdventureCopymap* MSG_Ret_AdventureCopymapInfo_SC::mutable_copymaps(int index) {
  // @@protoc_insertion_point(field_mutable:copymap.MSG_Ret_AdventureCopymapInfo_SC.copymaps)
  return copymaps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::copymap::AdventureCopymap >*
MSG_Ret_AdventureCopymapInfo_SC::mutable_copymaps() {
  // @@protoc_insertion_point(field_mutable_list:copymap.MSG_Ret_AdventureCopymapInfo_SC.copymaps)
  return &copymaps_;
}
inline const ::copymap::AdventureCopymap& MSG_Ret_AdventureCopymapInfo_SC::_internal_copymaps(int index) const {
  return copymaps_.Get(index);
}
inline const ::copymap::AdventureCopymap& MSG_Ret_AdventureCopymapInfo_SC::copymaps(int index) const {
  // @@protoc_insertion_point(field_get:copymap.MSG_Ret_AdventureCopymapInfo_SC.copymaps)
  return _internal_copymaps(index);
}
inline ::copymap::AdventureCopymap* MSG_Ret_AdventureCopymapInfo_SC::_internal_add_copymaps() {
  return copymaps_.Add();
}
inline ::copymap::AdventureCopymap* MSG_Ret_AdventureCopymapInfo_SC::add_copymaps() {
  // @@protoc_insertion_point(field_add:copymap.MSG_Ret_AdventureCopymapInfo_SC.copymaps)
  return _internal_add_copymaps();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::copymap::AdventureCopymap >&
MSG_Ret_AdventureCopymapInfo_SC::copymaps() const {
  // @@protoc_insertion_point(field_list:copymap.MSG_Ret_AdventureCopymapInfo_SC.copymaps)
  return copymaps_;
}

// -------------------------------------------------------------------

// MSG_Req_AdventureHeros_CS

// optional uint32 adventureid = 1;
inline bool MSG_Req_AdventureHeros_CS::_internal_has_adventureid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_Req_AdventureHeros_CS::has_adventureid() const {
  return _internal_has_adventureid();
}
inline void MSG_Req_AdventureHeros_CS::clear_adventureid() {
  adventureid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Req_AdventureHeros_CS::_internal_adventureid() const {
  return adventureid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Req_AdventureHeros_CS::adventureid() const {
  // @@protoc_insertion_point(field_get:copymap.MSG_Req_AdventureHeros_CS.adventureid)
  return _internal_adventureid();
}
inline void MSG_Req_AdventureHeros_CS::_internal_set_adventureid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  adventureid_ = value;
}
inline void MSG_Req_AdventureHeros_CS::set_adventureid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_adventureid(value);
  // @@protoc_insertion_point(field_set:copymap.MSG_Req_AdventureHeros_CS.adventureid)
}

// -------------------------------------------------------------------

// MSG_Ret_AdventureHeros_SC

// repeated uint32 heros = 1;
inline int MSG_Ret_AdventureHeros_SC::_internal_heros_size() const {
  return heros_.size();
}
inline int MSG_Ret_AdventureHeros_SC::heros_size() const {
  return _internal_heros_size();
}
inline void MSG_Ret_AdventureHeros_SC::clear_heros() {
  heros_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Ret_AdventureHeros_SC::_internal_heros(int index) const {
  return heros_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Ret_AdventureHeros_SC::heros(int index) const {
  // @@protoc_insertion_point(field_get:copymap.MSG_Ret_AdventureHeros_SC.heros)
  return _internal_heros(index);
}
inline void MSG_Ret_AdventureHeros_SC::set_heros(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  heros_.Set(index, value);
  // @@protoc_insertion_point(field_set:copymap.MSG_Ret_AdventureHeros_SC.heros)
}
inline void MSG_Ret_AdventureHeros_SC::_internal_add_heros(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  heros_.Add(value);
}
inline void MSG_Ret_AdventureHeros_SC::add_heros(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_heros(value);
  // @@protoc_insertion_point(field_add:copymap.MSG_Ret_AdventureHeros_SC.heros)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
MSG_Ret_AdventureHeros_SC::_internal_heros() const {
  return heros_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
MSG_Ret_AdventureHeros_SC::heros() const {
  // @@protoc_insertion_point(field_list:copymap.MSG_Ret_AdventureHeros_SC.heros)
  return _internal_heros();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
MSG_Ret_AdventureHeros_SC::_internal_mutable_heros() {
  return &heros_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
MSG_Ret_AdventureHeros_SC::mutable_heros() {
  // @@protoc_insertion_point(field_mutable_list:copymap.MSG_Ret_AdventureHeros_SC.heros)
  return _internal_mutable_heros();
}

// optional uint32 retcode = 2 [default = 0];
inline bool MSG_Ret_AdventureHeros_SC::_internal_has_retcode() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_Ret_AdventureHeros_SC::has_retcode() const {
  return _internal_has_retcode();
}
inline void MSG_Ret_AdventureHeros_SC::clear_retcode() {
  retcode_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Ret_AdventureHeros_SC::_internal_retcode() const {
  return retcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Ret_AdventureHeros_SC::retcode() const {
  // @@protoc_insertion_point(field_get:copymap.MSG_Ret_AdventureHeros_SC.retcode)
  return _internal_retcode();
}
inline void MSG_Ret_AdventureHeros_SC::_internal_set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  retcode_ = value;
}
inline void MSG_Ret_AdventureHeros_SC::set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_retcode(value);
  // @@protoc_insertion_point(field_set:copymap.MSG_Ret_AdventureHeros_SC.retcode)
}

// -------------------------------------------------------------------

// MSG_Req_EnterAdventureCopymap_CS

// optional uint32 heroid = 1;
inline bool MSG_Req_EnterAdventureCopymap_CS::_internal_has_heroid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_Req_EnterAdventureCopymap_CS::has_heroid() const {
  return _internal_has_heroid();
}
inline void MSG_Req_EnterAdventureCopymap_CS::clear_heroid() {
  heroid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Req_EnterAdventureCopymap_CS::_internal_heroid() const {
  return heroid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Req_EnterAdventureCopymap_CS::heroid() const {
  // @@protoc_insertion_point(field_get:copymap.MSG_Req_EnterAdventureCopymap_CS.heroid)
  return _internal_heroid();
}
inline void MSG_Req_EnterAdventureCopymap_CS::_internal_set_heroid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  heroid_ = value;
}
inline void MSG_Req_EnterAdventureCopymap_CS::set_heroid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_heroid(value);
  // @@protoc_insertion_point(field_set:copymap.MSG_Req_EnterAdventureCopymap_CS.heroid)
}

// optional uint32 copymapidx = 2;
inline bool MSG_Req_EnterAdventureCopymap_CS::_internal_has_copymapidx() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_Req_EnterAdventureCopymap_CS::has_copymapidx() const {
  return _internal_has_copymapidx();
}
inline void MSG_Req_EnterAdventureCopymap_CS::clear_copymapidx() {
  copymapidx_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Req_EnterAdventureCopymap_CS::_internal_copymapidx() const {
  return copymapidx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Req_EnterAdventureCopymap_CS::copymapidx() const {
  // @@protoc_insertion_point(field_get:copymap.MSG_Req_EnterAdventureCopymap_CS.copymapidx)
  return _internal_copymapidx();
}
inline void MSG_Req_EnterAdventureCopymap_CS::_internal_set_copymapidx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  copymapidx_ = value;
}
inline void MSG_Req_EnterAdventureCopymap_CS::set_copymapidx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_copymapidx(value);
  // @@protoc_insertion_point(field_set:copymap.MSG_Req_EnterAdventureCopymap_CS.copymapidx)
}

// -------------------------------------------------------------------

// ObjectData

// optional uint32 objid = 1;
inline bool ObjectData::_internal_has_objid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ObjectData::has_objid() const {
  return _internal_has_objid();
}
inline void ObjectData::clear_objid() {
  objid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjectData::_internal_objid() const {
  return objid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjectData::objid() const {
  // @@protoc_insertion_point(field_get:copymap.ObjectData.objid)
  return _internal_objid();
}
inline void ObjectData::_internal_set_objid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  objid_ = value;
}
inline void ObjectData::set_objid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_objid(value);
  // @@protoc_insertion_point(field_set:copymap.ObjectData.objid)
}

// optional uint32 objnum = 2;
inline bool ObjectData::_internal_has_objnum() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ObjectData::has_objnum() const {
  return _internal_has_objnum();
}
inline void ObjectData::clear_objnum() {
  objnum_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjectData::_internal_objnum() const {
  return objnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjectData::objnum() const {
  // @@protoc_insertion_point(field_get:copymap.ObjectData.objnum)
  return _internal_objnum();
}
inline void ObjectData::_internal_set_objnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  objnum_ = value;
}
inline void ObjectData::set_objnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_objnum(value);
  // @@protoc_insertion_point(field_set:copymap.ObjectData.objnum)
}

// -------------------------------------------------------------------

// MSG_Ret_TrainData_SC

// optional uint32 starttime = 1;
inline bool MSG_Ret_TrainData_SC::_internal_has_starttime() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_Ret_TrainData_SC::has_starttime() const {
  return _internal_has_starttime();
}
inline void MSG_Ret_TrainData_SC::clear_starttime() {
  starttime_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Ret_TrainData_SC::_internal_starttime() const {
  return starttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Ret_TrainData_SC::starttime() const {
  // @@protoc_insertion_point(field_get:copymap.MSG_Ret_TrainData_SC.starttime)
  return _internal_starttime();
}
inline void MSG_Ret_TrainData_SC::_internal_set_starttime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  starttime_ = value;
}
inline void MSG_Ret_TrainData_SC::set_starttime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_starttime(value);
  // @@protoc_insertion_point(field_set:copymap.MSG_Ret_TrainData_SC.starttime)
}

// optional uint32 endtime = 2;
inline bool MSG_Ret_TrainData_SC::_internal_has_endtime() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_Ret_TrainData_SC::has_endtime() const {
  return _internal_has_endtime();
}
inline void MSG_Ret_TrainData_SC::clear_endtime() {
  endtime_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Ret_TrainData_SC::_internal_endtime() const {
  return endtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Ret_TrainData_SC::endtime() const {
  // @@protoc_insertion_point(field_get:copymap.MSG_Ret_TrainData_SC.endtime)
  return _internal_endtime();
}
inline void MSG_Ret_TrainData_SC::_internal_set_endtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  endtime_ = value;
}
inline void MSG_Ret_TrainData_SC::set_endtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_endtime(value);
  // @@protoc_insertion_point(field_set:copymap.MSG_Ret_TrainData_SC.endtime)
}

// repeated .copymap.ObjectData reward = 3;
inline int MSG_Ret_TrainData_SC::_internal_reward_size() const {
  return reward_.size();
}
inline int MSG_Ret_TrainData_SC::reward_size() const {
  return _internal_reward_size();
}
inline void MSG_Ret_TrainData_SC::clear_reward() {
  reward_.Clear();
}
inline ::copymap::ObjectData* MSG_Ret_TrainData_SC::mutable_reward(int index) {
  // @@protoc_insertion_point(field_mutable:copymap.MSG_Ret_TrainData_SC.reward)
  return reward_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::copymap::ObjectData >*
MSG_Ret_TrainData_SC::mutable_reward() {
  // @@protoc_insertion_point(field_mutable_list:copymap.MSG_Ret_TrainData_SC.reward)
  return &reward_;
}
inline const ::copymap::ObjectData& MSG_Ret_TrainData_SC::_internal_reward(int index) const {
  return reward_.Get(index);
}
inline const ::copymap::ObjectData& MSG_Ret_TrainData_SC::reward(int index) const {
  // @@protoc_insertion_point(field_get:copymap.MSG_Ret_TrainData_SC.reward)
  return _internal_reward(index);
}
inline ::copymap::ObjectData* MSG_Ret_TrainData_SC::_internal_add_reward() {
  return reward_.Add();
}
inline ::copymap::ObjectData* MSG_Ret_TrainData_SC::add_reward() {
  // @@protoc_insertion_point(field_add:copymap.MSG_Ret_TrainData_SC.reward)
  return _internal_add_reward();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::copymap::ObjectData >&
MSG_Ret_TrainData_SC::reward() const {
  // @@protoc_insertion_point(field_list:copymap.MSG_Ret_TrainData_SC.reward)
  return reward_;
}

// -------------------------------------------------------------------

// MSG_Ret_PlayEventData_SC

// optional uint32 eventid = 1;
inline bool MSG_Ret_PlayEventData_SC::_internal_has_eventid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_Ret_PlayEventData_SC::has_eventid() const {
  return _internal_has_eventid();
}
inline void MSG_Ret_PlayEventData_SC::clear_eventid() {
  eventid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Ret_PlayEventData_SC::_internal_eventid() const {
  return eventid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Ret_PlayEventData_SC::eventid() const {
  // @@protoc_insertion_point(field_get:copymap.MSG_Ret_PlayEventData_SC.eventid)
  return _internal_eventid();
}
inline void MSG_Ret_PlayEventData_SC::_internal_set_eventid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  eventid_ = value;
}
inline void MSG_Ret_PlayEventData_SC::set_eventid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_eventid(value);
  // @@protoc_insertion_point(field_set:copymap.MSG_Ret_PlayEventData_SC.eventid)
}

// optional uint32 starttime = 2;
inline bool MSG_Ret_PlayEventData_SC::_internal_has_starttime() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_Ret_PlayEventData_SC::has_starttime() const {
  return _internal_has_starttime();
}
inline void MSG_Ret_PlayEventData_SC::clear_starttime() {
  starttime_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Ret_PlayEventData_SC::_internal_starttime() const {
  return starttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Ret_PlayEventData_SC::starttime() const {
  // @@protoc_insertion_point(field_get:copymap.MSG_Ret_PlayEventData_SC.starttime)
  return _internal_starttime();
}
inline void MSG_Ret_PlayEventData_SC::_internal_set_starttime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  starttime_ = value;
}
inline void MSG_Ret_PlayEventData_SC::set_starttime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_starttime(value);
  // @@protoc_insertion_point(field_set:copymap.MSG_Ret_PlayEventData_SC.starttime)
}

// optional uint32 endtime = 3;
inline bool MSG_Ret_PlayEventData_SC::_internal_has_endtime() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MSG_Ret_PlayEventData_SC::has_endtime() const {
  return _internal_has_endtime();
}
inline void MSG_Ret_PlayEventData_SC::clear_endtime() {
  endtime_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Ret_PlayEventData_SC::_internal_endtime() const {
  return endtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Ret_PlayEventData_SC::endtime() const {
  // @@protoc_insertion_point(field_get:copymap.MSG_Ret_PlayEventData_SC.endtime)
  return _internal_endtime();
}
inline void MSG_Ret_PlayEventData_SC::_internal_set_endtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  endtime_ = value;
}
inline void MSG_Ret_PlayEventData_SC::set_endtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_endtime(value);
  // @@protoc_insertion_point(field_set:copymap.MSG_Ret_PlayEventData_SC.endtime)
}

// -------------------------------------------------------------------

// MSG_Ret_CurMonsterGroup_SC

// optional uint32 groupid = 1;
inline bool MSG_Ret_CurMonsterGroup_SC::_internal_has_groupid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_Ret_CurMonsterGroup_SC::has_groupid() const {
  return _internal_has_groupid();
}
inline void MSG_Ret_CurMonsterGroup_SC::clear_groupid() {
  groupid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Ret_CurMonsterGroup_SC::_internal_groupid() const {
  return groupid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Ret_CurMonsterGroup_SC::groupid() const {
  // @@protoc_insertion_point(field_get:copymap.MSG_Ret_CurMonsterGroup_SC.groupid)
  return _internal_groupid();
}
inline void MSG_Ret_CurMonsterGroup_SC::_internal_set_groupid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  groupid_ = value;
}
inline void MSG_Ret_CurMonsterGroup_SC::set_groupid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:copymap.MSG_Ret_CurMonsterGroup_SC.groupid)
}

// -------------------------------------------------------------------

// MSG_Req_PlayGameData_CS

// optional uint32 step = 1;
inline bool MSG_Req_PlayGameData_CS::_internal_has_step() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_Req_PlayGameData_CS::has_step() const {
  return _internal_has_step();
}
inline void MSG_Req_PlayGameData_CS::clear_step() {
  step_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Req_PlayGameData_CS::_internal_step() const {
  return step_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Req_PlayGameData_CS::step() const {
  // @@protoc_insertion_point(field_get:copymap.MSG_Req_PlayGameData_CS.step)
  return _internal_step();
}
inline void MSG_Req_PlayGameData_CS::_internal_set_step(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  step_ = value;
}
inline void MSG_Req_PlayGameData_CS::set_step(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_step(value);
  // @@protoc_insertion_point(field_set:copymap.MSG_Req_PlayGameData_CS.step)
}

// optional uint32 success = 2;
inline bool MSG_Req_PlayGameData_CS::_internal_has_success() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_Req_PlayGameData_CS::has_success() const {
  return _internal_has_success();
}
inline void MSG_Req_PlayGameData_CS::clear_success() {
  success_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Req_PlayGameData_CS::_internal_success() const {
  return success_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Req_PlayGameData_CS::success() const {
  // @@protoc_insertion_point(field_get:copymap.MSG_Req_PlayGameData_CS.success)
  return _internal_success();
}
inline void MSG_Req_PlayGameData_CS::_internal_set_success(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  success_ = value;
}
inline void MSG_Req_PlayGameData_CS::set_success(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:copymap.MSG_Req_PlayGameData_CS.success)
}

// optional uint32 type = 3;
inline bool MSG_Req_PlayGameData_CS::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MSG_Req_PlayGameData_CS::has_type() const {
  return _internal_has_type();
}
inline void MSG_Req_PlayGameData_CS::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Req_PlayGameData_CS::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Req_PlayGameData_CS::type() const {
  // @@protoc_insertion_point(field_get:copymap.MSG_Req_PlayGameData_CS.type)
  return _internal_type();
}
inline void MSG_Req_PlayGameData_CS::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
}
inline void MSG_Req_PlayGameData_CS::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:copymap.MSG_Req_PlayGameData_CS.type)
}

// -------------------------------------------------------------------

// MSG_Req_PlayGameRetry_CS

// optional uint32 type = 1;
inline bool MSG_Req_PlayGameRetry_CS::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_Req_PlayGameRetry_CS::has_type() const {
  return _internal_has_type();
}
inline void MSG_Req_PlayGameRetry_CS::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Req_PlayGameRetry_CS::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Req_PlayGameRetry_CS::type() const {
  // @@protoc_insertion_point(field_get:copymap.MSG_Req_PlayGameRetry_CS.type)
  return _internal_type();
}
inline void MSG_Req_PlayGameRetry_CS::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
}
inline void MSG_Req_PlayGameRetry_CS::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:copymap.MSG_Req_PlayGameRetry_CS.type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace copymap

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::copymap::OverType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::copymap::OverType>() {
  return ::copymap::OverType_descriptor();
}
template <> struct is_proto_enum< ::copymap::MemberGatherState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::copymap::MemberGatherState>() {
  return ::copymap::MemberGatherState_descriptor();
}
template <> struct is_proto_enum< ::copymap::GatherState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::copymap::GatherState>() {
  return ::copymap::GatherState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_copymap_2eproto
